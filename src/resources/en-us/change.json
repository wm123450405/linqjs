[
	{
		"publish": "2017-03-27",
		"contents": [
			"优化了部分代码结构",
			"新增 对 arrayComparer 的默认支持",
			"新增了 对绝大部分 selector, predicate, comparer 参数校验",
			"新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能",
			"新增 Enumerable.predicates.exists 属性, 表示非空筛选器",
			"新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器",
			"新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器",
			"新增 Enumerable.predicates.selector 方法, 生成选择筛选器",
			"新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"
		],
		"version": "2.1.15"
	},
	{
		"publish": "2017-04-05",
		"contents": [
			"优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug",
			"修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result",
			"修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致",
			"增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"
		],
		"version": "2.1.16"
	},
	{
		"publish": "2017-04-12",
		"contents": [
			"新增 findLast 方法",
			"新增 Enumerable.comparers.greater 方法",
			"新增 Enumerable.comparers.less 方法",
			"新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器",
			"新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器",
			"优化 comparer / predicate / selector 类型的参数 转化过程的效率"
		],
		"version": "2.1.17"
	},
	{
		"publish": "2017-08-30",
		"contents": [
			"新增 Enumerable.typeAs 方法用来对指定类型设置 asEnumerable 转换时的参考类型",
			"新增 Enumerable.types 对象,包含各参考类型的常量值",
			"Enumerable.addPlugins、Enumerable.removePlugins 方法增加返回值,方便链式调用",
			"新增 Enumerable.comparers.ignoreCase 忽略大小写的相等比较器",
			"新增 IEnumerable.prototype.leftJoin、IEnumerable.prototype.rightJoin 方法用来对两个序列分别进行内部左联接与内部右联接",
			"修复 concat 方法在参数值为 String 或 Arguments 类型是结果超出预期的bug",
			"移除过时的功能 arrayComparer、predicateComparer",
			"新增 Enumerable.extends.lazy 配置选项",
			"修复 启用扩展后 对象上不能使用 getEnumerator 方法的问题",
			"新增 IEnumerable.prototype.chunk 方法用来对序列进行分块",
			"新增 IEnumerable.prototype.product 方法用来计算乘积",
			"新增 IEnumerable.prototype.leftPad、IEnumerable.prototype.rightPad 方法",
			"新增 IEnumerable.prototype.rand 方法",
			"",
			"Bugs",
			"调用 Object 对象的 asEnumerable 方法将会返回一个不可控的结果"
		],
		"version": "2.1.18"
	},
	{
		"publish": "2017-09-08",
		"contents": [
			"新增(New):",
			"1. 增加各 选择器(Selector)/比较器(Comparer)/筛选器(Predicate) 对 Number/Symbol 类型参数的支持",
			"2. 新增 Enumerable.selectors.join 作为 defaultJoinSelector",
			"3. 新增 IEnumerable.prototype.innerJoin 方法与原先的 join 方法功能一致, 主要为了区别仅有一个参数的情况下的逻辑",
			"4. 新增 Enumerable.noConflict 方法 用于解决重复引用的问题",
			"",
			"优化(Optimization):",
			"1. 优化了 join 方法的处理逻辑",
			"2. 将 IGrouping.prototype.key 与 IChunk.prototype.index 设置成只读",
			"3. 为 groupJoin, leftJoin, rightJoin 等方法的 resultSelector 参数设置了 defaultJoinSelector 默认值",
			"4. 优化了 Enumerable.extend/Enumerable.unextend/Enumerable.addPlugins/Enumerble.removePlugins 等方法, 并新增了 Enumerable.extendAll/Enumerable.unextendAll 方法",
			"",
			"修复(Fixed):",
			"1. 修复一处针对 String 扩展后 String.prototype.slice 返回超出预期的问题",
			"2. 修复由 groupBy/groupJoin/chunk 等方法获取到的 IGrouping/IChunk 对象不能被重复遍历的问题",
			"3. 修复对 Object 对象使用 asEnumerable 方法时不能返回此对象键值对序列或出现错误的bug"
		],
		"version": "2.1.19"
	},
	{
		"publish": "2017-09-22",
		"contents": [
			"新增(New):",
			"1. 新增 IEnumerable.prototype.random / IEnumerable.prototype.randomOrDefault 方法, 用来从序列中随机获取一个元素",
			"2. 新增 IEnumerable.prototype.wipe 方法, 用来剔除序列中满足条件指定数量的元素",
			"3. 新增 IEnumerable.prototype.nearBy 方法, 用来对序列中相同且相邻的元素进行分组",
			"4. 新增 Enumerable.between 方法, 生成范围内的整数序列",
			"5. 新增 Enumerable.from 方法, 功能与 asEnumerable 方法一致",
			"6. 为 Enumerable.range 方法新增第三个参数, 设置步长",
			"7. 新增 Enumerable.generate 方法, 通过生成方法构建新序列",
			"8. 新增 IEnumerable.prototype.separate / IEnumerable.prototype.combine 方法, 分别用来对递归的结构进行拆解与合并",
			"",
			"优化(Optimization):",
			"1. 优化 chunk/leftPad/rightPad/rand 方法的逻辑",
			"2. 优化 defaultValueSelector",
			"",
			"修复(Fixed):",
			"1. 修复 开启扩展后 average/defaultIfEmpty/join 方法返回超出预期或报错的bug"
		],
		"version": "2.1.20"
	},
	{
		"publish": "2017-11-20",
		"contents": [
			"新增(New):",
			"1. 新增 IEnumerable.prototype.isSub / IEnumerable.prototype.isSuper 方法, 用来判断两个序列的从属关系",
			"2. 新增 IEnumerable.prototype.symmetric 方法, 用来计算两个序列的对称差集",
			"",
			"优化(Optimization):",
			"1. 优化 orderBy/orderByDescending/thenBy/thenByDescending 方法的性能",
			"",
			"修复(Fixed):"
		],
		"version": "2.1.21"
	},
	{
		"publish": "2018-03-21",
		"contents": [
			"新增(New):",
			"1. 新增 ITree 接口, 拥有对树形结构的基本操作. 包含: value, children, values 等属性, 包含: depth, degree, getChild, getValue, breadthTraverse, breadthSearch, breadthSubTree, depthTraverse, depthSearch, depthSubTree, lowestAncestor, isDescendantOf, isAncestorOf, path, pathTo, isBinary, isFullBinary, isCompleteBinary, isProfectBinary, asBinary 等方法",
			"2. 新增 BinaryTree 类, 拥有对二叉树的基本操作. 包含: left, right 等属性, 包含: hasLeft, hasRight, preOrder, inOrder, postOrder 等方法",
			"3. 修改 ICombine 继承 ITree 接口, 可进行树形结构的操作",
			"4. 新增 IEnumerable.prototype.maxOrDefault, IEnumerable.prototype.minOrDefault 方法",
			"5. 为 object 对象新增 asEnumerable(childrenSelector, valueSelector) 重载, 用于或一个 ITree 对象",
			"6. 新增 toPreOrder, toInOrder, toPostOrder 方法, 用于生成一个完全二叉树, 分别使得此二叉树的 前序遍历|中序遍历|后序遍历 的结果与源序列一致",
			"",
			"优化(Optimization):",
			"1. 优化 IteratorEnumerable",
			"",
			"修复(Fixed):"
		],
		"version": "2.1.22"
	},
	{
		"publish": "2018-03-29",
		"contents": [
			"新增(New):",
			"1. 增加 ITree.prototype.toValue 方法,将树形结构转化 object 对象 ( JSON 数据 )",
			"2. 增加 ITree.prototype.isParentOf, ITree.prototype.isChildOf, ITree.prototype.getParent, ITree.prototype.prev, ITree.prototype.prevAll, ITree.prototype.next, ITree.prototype.nextAll, ITree.prototype.siblings, ITree.prototype.getParentNode, ITree.prototype.prevNode, ITree.prototype.prevAllNodes, ITree.prototype.nextNode, ITree.prototype.nextAllNodes, ITree.prototype.siblingNodes, ITree.prototype.pathNodes, ITree.prototype.pathNodesTo 方法,操作树形的各节点关系",
			"3. 增加 IEnumerable.prototype.each 方法,对序列中的每个元素执行一次操作,并返回序列本身 ( 与 forEach 方法的区别在于 each 方法可以继续链式调用 )",
			"4. 增加 IEnumerable.prototype.split 方法,对序列按照指定的条件进行拆分",
			"5. 增加 IEnumerable.prototype.indices 方法,用使用一个索引序列从源序列中生成一个新序列",
			"6. 增加 IEnumerable.prototype.permutation, IEnumerable.prototype.combination 方法,用来计算排列与组合",
			"7. 增加 Enumerable.setters.children, Enumerable.setters.value 属性,一个默认的 children/value 设置器",
			"8. 增加 Enumerable.setters.property 方法,用来生成一个属性设置器",
			"",
			"优化(Optimization):",
			"1. 优化 ITree.prototype.isAncestorOf, ITree.prototype.isDescendantOf 方法的性能",
			"2. 优化 IEnumerable.prototype.chunk, IEnumerable.prototype.groupBy, IEnumerable.prototype.groupJoin 等方法性能",
			"3. 优化 ITree.prototype.lowestAncestor 方法的性能",
			"4. 优化 Enumerable.selectors.property 方法, 增加一个参数控制是否忽略无效的属性",
			"",
			"修复(Fixed):",
			"1. 修复 ITree.prototype.lowestAncestor 在处理节点值为false的情况下返回错误的问题",
			"2. 修复 ITree.prototype.lowestAncestor 在处理节点值类型与参数值类型不同但数值相等的情况下返回错误的问题"
		],
		"version": "2.1.23"
	},
	{
		"publish": "2020-03-03",
		"contents": [
			"新增(New):",
			"1. 为一些方法增加别名, 方便其他语言使用者更容易的转移",
			"2. 新增 conflict 方法用来判断一个序列中是否包含重复的元素",
			"3. 新增 nearSplit 方法用来分割一个序列,与 split 方法区别在于连续的符合条件的分割元素之间将不会被分割出空序列",
			"4. 新增 skipSame, takeSame 方法用来获取或忽略开头部分相同的元素",
			"",
			"优化(Optimization):",
			"",
			"修复(Fixed):",
			"1. 修复 skipWhile, takeWhile 方法默认参数错误的bug"
		],
		"version": "2.1.24"
	},
	{
		"publish": "2021-07-06",
		"contents": [
			"调整(Change)",
			"1. 调整了 min、minOrDefault、max、maxOrDefault 方法的逻辑；",
			"",
			"新增(New):",
			"1. 新增了 proportion、skipProportion、takeProportion 方法；",
			"2. 新增了 minIndex, maxIndex 方法；",
			"3. 新增了 randomProbability, randomProbabilityOrDefault, randomIndexProbability 方法；",
			"4. 增加了性能基准的单元测试，方便查看方法的性能与传统写法性能的差距。延时方法势必会消耗部分性能；",
			"",
			"优化(Optimization):",
			"1. 更新使用Babel7、Webpack5进行项目编译打包；",
			"2. 优化了 rand 方法的性能及表现；",
			"3. 优化了 min、minOrDefault、max、maxOrDefault 方法的性能及表现；",
			"4. 优化了 groupBy、distinct 等方法的性能及表现；",
			"",
			"修复(Fixed):",
			"1. 修复了 IEnumerable 中未注册 random、 randomOrDefault 方法的问题；"
		],
		"version": "2.2.0"
	},
	{
		"prepublish": true,
		"contents": [
			"调整(Change):",
			"",
			"新增(New):",
			"",
			"优化(Optimization):",
			"",
			"修复(Fixed):"
		],
		"version": "2.2.1.pre"
	}
]
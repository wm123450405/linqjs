(self.webpackChunklinq_js_docs=self.webpackChunklinq_js_docs||[]).push([[469],{33238:e=>{e.exports=[{publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"],version:"2.1.15"},{publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"],version:"2.1.16"},{publish:"2017-04-12",contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"],version:"2.1.17"},{publish:"2017-08-30",contents:["新增 Enumerable.typeAs 方法用来对指定类型设置 asEnumerable 转换时的参考类型","新增 Enumerable.types 对象,包含各参考类型的常量值","Enumerable.addPlugins、Enumerable.removePlugins 方法增加返回值,方便链式调用","新增 Enumerable.comparers.ignoreCase 忽略大小写的相等比较器","新增 IEnumerable.prototype.leftJoin、IEnumerable.prototype.rightJoin 方法用来对两个序列分别进行内部左联接与内部右联接","修复 concat 方法在参数值为 String 或 Arguments 类型是结果超出预期的bug","移除过时的功能 arrayComparer、predicateComparer","新增 Enumerable.extends.lazy 配置选项","修复 启用扩展后 对象上不能使用 getEnumerator 方法的问题","新增 IEnumerable.prototype.chunk 方法用来对序列进行分块","新增 IEnumerable.prototype.product 方法用来计算乘积","新增 IEnumerable.prototype.leftPad、IEnumerable.prototype.rightPad 方法","新增 IEnumerable.prototype.rand 方法","","Bugs","调用 Object 对象的 asEnumerable 方法将会返回一个不可控的结果"],version:"2.1.18"},{publish:"2017-09-08",contents:["新增(New):","1. 增加各 选择器(Selector)/比较器(Comparer)/筛选器(Predicate) 对 Number/Symbol 类型参数的支持","2. 新增 Enumerable.selectors.join 作为 defaultJoinSelector","3. 新增 IEnumerable.prototype.innerJoin 方法与原先的 join 方法功能一致, 主要为了区别仅有一个参数的情况下的逻辑","4. 新增 Enumerable.noConflict 方法 用于解决重复引用的问题","","优化(Optimization):","1. 优化了 join 方法的处理逻辑","2. 将 IGrouping.prototype.key 与 IChunk.prototype.index 设置成只读","3. 为 groupJoin, leftJoin, rightJoin 等方法的 resultSelector 参数设置了 defaultJoinSelector 默认值","4. 优化了 Enumerable.extend/Enumerable.unextend/Enumerable.addPlugins/Enumerble.removePlugins 等方法, 并新增了 Enumerable.extendAll/Enumerable.unextendAll 方法","","修复(Fixed):","1. 修复一处针对 String 扩展后 String.prototype.slice 返回超出预期的问题","2. 修复由 groupBy/groupJoin/chunk 等方法获取到的 IGrouping/IChunk 对象不能被重复遍历的问题","3. 修复对 Object 对象使用 asEnumerable 方法时不能返回此对象键值对序列或出现错误的bug"],version:"2.1.19"},{publish:"2017-09-22",contents:["新增(New):","1. 新增 IEnumerable.prototype.random / IEnumerable.prototype.randomOrDefault 方法, 用来从序列中随机获取一个元素","2. 新增 IEnumerable.prototype.wipe 方法, 用来剔除序列中满足条件指定数量的元素","3. 新增 IEnumerable.prototype.nearBy 方法, 用来对序列中相同且相邻的元素进行分组","4. 新增 Enumerable.between 方法, 生成范围内的整数序列","5. 新增 Enumerable.from 方法, 功能与 asEnumerable 方法一致","6. 为 Enumerable.range 方法新增第三个参数, 设置步长","7. 新增 Enumerable.generate 方法, 通过生成方法构建新序列","8. 新增 IEnumerable.prototype.separate / IEnumerable.prototype.combine 方法, 分别用来对递归的结构进行拆解与合并","","优化(Optimization):","1. 优化 chunk/leftPad/rightPad/rand 方法的逻辑","2. 优化 defaultValueSelector","","修复(Fixed):","1. 修复 开启扩展后 average/defaultIfEmpty/join 方法返回超出预期或报错的bug"],version:"2.1.20"},{publish:"2017-11-20",contents:["新增(New):","1. 新增 IEnumerable.prototype.isSub / IEnumerable.prototype.isSuper 方法, 用来判断两个序列的从属关系","2. 新增 IEnumerable.prototype.symmetric 方法, 用来计算两个序列的对称差集","","优化(Optimization):","1. 优化 orderBy/orderByDescending/thenBy/thenByDescending 方法的性能","","修复(Fixed):"],version:"2.1.21"},{publish:"2018-03-21",contents:["新增(New):","1. 新增 ITree 接口, 拥有对树形结构的基本操作. 包含: value, children, values 等属性, 包含: depth, degree, getChild, getValue, breadthTraverse, breadthSearch, breadthSubTree, depthTraverse, depthSearch, depthSubTree, lowestAncestor, isDescendantOf, isAncestorOf, path, pathTo, isBinary, isFullBinary, isCompleteBinary, isProfectBinary, asBinary 等方法","2. 新增 BinaryTree 类, 拥有对二叉树的基本操作. 包含: left, right 等属性, 包含: hasLeft, hasRight, preOrder, inOrder, postOrder 等方法","3. 修改 ICombine 继承 ITree 接口, 可进行树形结构的操作","4. 新增 IEnumerable.prototype.maxOrDefault, IEnumerable.prototype.minOrDefault 方法","5. 为 object 对象新增 asEnumerable(childrenSelector, valueSelector) 重载, 用于或一个 ITree 对象","6. 新增 toPreOrder, toInOrder, toPostOrder 方法, 用于生成一个完全二叉树, 分别使得此二叉树的 前序遍历|中序遍历|后序遍历 的结果与源序列一致","","优化(Optimization):","1. 优化 IteratorEnumerable","","修复(Fixed):"],version:"2.1.22"},{publish:"2018-03-29",contents:["新增(New):","1. 增加 ITree.prototype.toValue 方法,将树形结构转化 object 对象 ( JSON 数据 )","2. 增加 ITree.prototype.isParentOf, ITree.prototype.isChildOf, ITree.prototype.getParent, ITree.prototype.prev, ITree.prototype.prevAll, ITree.prototype.next, ITree.prototype.nextAll, ITree.prototype.siblings, ITree.prototype.getParentNode, ITree.prototype.prevNode, ITree.prototype.prevAllNodes, ITree.prototype.nextNode, ITree.prototype.nextAllNodes, ITree.prototype.siblingNodes, ITree.prototype.pathNodes, ITree.prototype.pathNodesTo 方法,操作树形的各节点关系","3. 增加 IEnumerable.prototype.each 方法,对序列中的每个元素执行一次操作,并返回序列本身 ( 与 forEach 方法的区别在于 each 方法可以继续链式调用 )","4. 增加 IEnumerable.prototype.split 方法,对序列按照指定的条件进行拆分","5. 增加 IEnumerable.prototype.indices 方法,用使用一个索引序列从源序列中生成一个新序列","6. 增加 IEnumerable.prototype.permutation, IEnumerable.prototype.combination 方法,用来计算排列与组合","7. 增加 Enumerable.setters.children, Enumerable.setters.value 属性,一个默认的 children/value 设置器","8. 增加 Enumerable.setters.property 方法,用来生成一个属性设置器","","优化(Optimization):","1. 优化 ITree.prototype.isAncestorOf, ITree.prototype.isDescendantOf 方法的性能","2. 优化 IEnumerable.prototype.chunk, IEnumerable.prototype.groupBy, IEnumerable.prototype.groupJoin 等方法性能","3. 优化 ITree.prototype.lowestAncestor 方法的性能","4. 优化 Enumerable.selectors.property 方法, 增加一个参数控制是否忽略无效的属性","","修复(Fixed):","1. 修复 ITree.prototype.lowestAncestor 在处理节点值为false的情况下返回错误的问题","2. 修复 ITree.prototype.lowestAncestor 在处理节点值类型与参数值类型不同但数值相等的情况下返回错误的问题"],version:"2.1.23"},{publish:"2020-03-03",contents:["新增(New):","1. 为一些方法增加别名, 方便其他语言使用者更容易的转移","2. 新增 conflict 方法用来判断一个序列中是否包含重复的元素","3. 新增 nearSplit 方法用来分割一个序列,与 split 方法区别在于连续的符合条件的分割元素之间将不会被分割出空序列","4. 新增 skipSame, takeSame 方法用来获取或忽略开头部分相同的元素","","优化(Optimization):","","修复(Fixed):","1. 修复 skipWhile, takeWhile 方法默认参数错误的bug"],version:"2.1.24"},{prepublish:!0,contents:["新增(New):","1. 增加 proportion、skipProportion, takeProportion 方法","","优化(Optimization):","","修复(Fixed):","1. 修复了 IEnumerable 中未注册 random、 randomOrDefault 方法的问题"],version:"2.1.25.pre"}]},55449:e=>{e.exports={publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"]}},36485:e=>{e.exports={publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"]}},52523:e=>{e.exports={publish:"2017-04-12",contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"]}},72063:e=>{e.exports={publish:"2017-08-30",contents:["新增 Enumerable.typeAs 方法用来对指定类型设置 asEnumerable 转换时的参考类型","新增 Enumerable.types 对象,包含各参考类型的常量值","Enumerable.addPlugins、Enumerable.removePlugins 方法增加返回值,方便链式调用","新增 Enumerable.comparers.ignoreCase 忽略大小写的相等比较器","新增 IEnumerable.prototype.leftJoin、IEnumerable.prototype.rightJoin 方法用来对两个序列分别进行内部左联接与内部右联接","修复 concat 方法在参数值为 String 或 Arguments 类型是结果超出预期的bug","移除过时的功能 arrayComparer、predicateComparer","新增 Enumerable.extends.lazy 配置选项","修复 启用扩展后 对象上不能使用 getEnumerator 方法的问题","新增 IEnumerable.prototype.chunk 方法用来对序列进行分块","新增 IEnumerable.prototype.product 方法用来计算乘积","新增 IEnumerable.prototype.leftPad、IEnumerable.prototype.rightPad 方法","新增 IEnumerable.prototype.rand 方法","","Bugs","调用 Object 对象的 asEnumerable 方法将会返回一个不可控的结果"]}},79342:e=>{e.exports={publish:"2017-09-08",contents:["新增(New):","1. 增加各 选择器(Selector)/比较器(Comparer)/筛选器(Predicate) 对 Number/Symbol 类型参数的支持","2. 新增 Enumerable.selectors.join 作为 defaultJoinSelector","3. 新增 IEnumerable.prototype.innerJoin 方法与原先的 join 方法功能一致, 主要为了区别仅有一个参数的情况下的逻辑","4. 新增 Enumerable.noConflict 方法 用于解决重复引用的问题","","优化(Optimization):","1. 优化了 join 方法的处理逻辑","2. 将 IGrouping.prototype.key 与 IChunk.prototype.index 设置成只读","3. 为 groupJoin, leftJoin, rightJoin 等方法的 resultSelector 参数设置了 defaultJoinSelector 默认值","4. 优化了 Enumerable.extend/Enumerable.unextend/Enumerable.addPlugins/Enumerble.removePlugins 等方法, 并新增了 Enumerable.extendAll/Enumerable.unextendAll 方法","","修复(Fixed):","1. 修复一处针对 String 扩展后 String.prototype.slice 返回超出预期的问题","2. 修复由 groupBy/groupJoin/chunk 等方法获取到的 IGrouping/IChunk 对象不能被重复遍历的问题","3. 修复对 Object 对象使用 asEnumerable 方法时不能返回此对象键值对序列或出现错误的bug"]}},68785:e=>{e.exports={publish:"2017-09-22",contents:["新增(New):","1. 新增 IEnumerable.prototype.random / IEnumerable.prototype.randomOrDefault 方法, 用来从序列中随机获取一个元素","2. 新增 IEnumerable.prototype.wipe 方法, 用来剔除序列中满足条件指定数量的元素","3. 新增 IEnumerable.prototype.nearBy 方法, 用来对序列中相同且相邻的元素进行分组","4. 新增 Enumerable.between 方法, 生成范围内的整数序列","5. 新增 Enumerable.from 方法, 功能与 asEnumerable 方法一致","6. 为 Enumerable.range 方法新增第三个参数, 设置步长","7. 新增 Enumerable.generate 方法, 通过生成方法构建新序列","8. 新增 IEnumerable.prototype.separate / IEnumerable.prototype.combine 方法, 分别用来对递归的结构进行拆解与合并","","优化(Optimization):","1. 优化 chunk/leftPad/rightPad/rand 方法的逻辑","2. 优化 defaultValueSelector","","修复(Fixed):","1. 修复 开启扩展后 average/defaultIfEmpty/join 方法返回超出预期或报错的bug"]}},54804:e=>{e.exports={publish:"2017-11-20",contents:["新增(New):","1. 新增 IEnumerable.prototype.isSub / IEnumerable.prototype.isSuper 方法, 用来判断两个序列的从属关系","2. 新增 IEnumerable.prototype.symmetric 方法, 用来计算两个序列的对称差集","","优化(Optimization):","1. 优化 orderBy/orderByDescending/thenBy/thenByDescending 方法的性能","","修复(Fixed):"]}},6140:e=>{e.exports={publish:"2018-03-21",contents:["新增(New):","1. 新增 ITree 接口, 拥有对树形结构的基本操作. 包含: value, children, values 等属性, 包含: depth, degree, getChild, getValue, breadthTraverse, breadthSearch, breadthSubTree, depthTraverse, depthSearch, depthSubTree, lowestAncestor, isDescendantOf, isAncestorOf, path, pathTo, isBinary, isFullBinary, isCompleteBinary, isProfectBinary, asBinary 等方法","2. 新增 BinaryTree 类, 拥有对二叉树的基本操作. 包含: left, right 等属性, 包含: hasLeft, hasRight, preOrder, inOrder, postOrder 等方法","3. 修改 ICombine 继承 ITree 接口, 可进行树形结构的操作","4. 新增 IEnumerable.prototype.maxOrDefault, IEnumerable.prototype.minOrDefault 方法","5. 为 object 对象新增 asEnumerable(childrenSelector, valueSelector) 重载, 用于或一个 ITree 对象","6. 新增 toPreOrder, toInOrder, toPostOrder 方法, 用于生成一个完全二叉树, 分别使得此二叉树的 前序遍历|中序遍历|后序遍历 的结果与源序列一致","","优化(Optimization):","1. 优化 IteratorEnumerable","","修复(Fixed):"]}},66208:e=>{e.exports={publish:"2018-03-29",contents:["新增(New):","1. 增加 ITree.prototype.toValue 方法,将树形结构转化 object 对象 ( JSON 数据 )","2. 增加 ITree.prototype.isParentOf, ITree.prototype.isChildOf, ITree.prototype.getParent, ITree.prototype.prev, ITree.prototype.prevAll, ITree.prototype.next, ITree.prototype.nextAll, ITree.prototype.siblings, ITree.prototype.getParentNode, ITree.prototype.prevNode, ITree.prototype.prevAllNodes, ITree.prototype.nextNode, ITree.prototype.nextAllNodes, ITree.prototype.siblingNodes, ITree.prototype.pathNodes, ITree.prototype.pathNodesTo 方法,操作树形的各节点关系","3. 增加 IEnumerable.prototype.each 方法,对序列中的每个元素执行一次操作,并返回序列本身 ( 与 forEach 方法的区别在于 each 方法可以继续链式调用 )","4. 增加 IEnumerable.prototype.split 方法,对序列按照指定的条件进行拆分","5. 增加 IEnumerable.prototype.indices 方法,用使用一个索引序列从源序列中生成一个新序列","6. 增加 IEnumerable.prototype.permutation, IEnumerable.prototype.combination 方法,用来计算排列与组合","7. 增加 Enumerable.setters.children, Enumerable.setters.value 属性,一个默认的 children/value 设置器","8. 增加 Enumerable.setters.property 方法,用来生成一个属性设置器","","优化(Optimization):","1. 优化 ITree.prototype.isAncestorOf, ITree.prototype.isDescendantOf 方法的性能","2. 优化 IEnumerable.prototype.chunk, IEnumerable.prototype.groupBy, IEnumerable.prototype.groupJoin 等方法性能","3. 优化 ITree.prototype.lowestAncestor 方法的性能","4. 优化 Enumerable.selectors.property 方法, 增加一个参数控制是否忽略无效的属性","","修复(Fixed):","1. 修复 ITree.prototype.lowestAncestor 在处理节点值为false的情况下返回错误的问题","2. 修复 ITree.prototype.lowestAncestor 在处理节点值类型与参数值类型不同但数值相等的情况下返回错误的问题"]}},34056:e=>{e.exports={publish:"2020-03-03",contents:["新增(New):","1. 为一些方法增加别名, 方便其他语言使用者更容易的转移","2. 新增 conflict 方法用来判断一个序列中是否包含重复的元素","3. 新增 nearSplit 方法用来分割一个序列,与 split 方法区别在于连续的符合条件的分割元素之间将不会被分割出空序列","4. 新增 skipSame, takeSame 方法用来获取或忽略开头部分相同的元素","","优化(Optimization):","","修复(Fixed):","1. 修复 skipWhile, takeWhile 方法默认参数错误的bug"]}},72046:e=>{e.exports={prepublish:!0,contents:["新增(New):","1. 增加 proportion、skipProportion, takeProportion 方法","","优化(Optimization):","","修复(Fixed):","1. 修复了 IEnumerable 中未注册 random、 randomOrDefault 方法的问题"]}},76377:e=>{e.exports=[{code:"introduction",title:"简介"},{code:"install",title:"安装"},{code:"guides",title:"教程",children:[{code:"instance",title:"获取 IEnumerable 实例",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"use",title:"开始使用",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"config",title:"配置",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"selector",title:"选择器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"predicate",title:"筛选器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"comparer",title:"比较器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"action",title:"执行器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"setter",title:"设置器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"iterator",title:"迭代器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"enumerator",title:"枚举器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"extend",title:"扩展",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"plugin",title:"插件",since:"2.1.15",deprecated:"2.1.25.pre"}]},{code:"apis",title:"API文档",children:[{code:"BinaryTree",title:"BinaryTree 类",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"Directory",title:"Directory 类",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Entry",title:"Entry 类",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable",title:"Enumerable 类",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.actions",title:"Enumerable.actions 对象",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.comparers",title:"Enumerable.comparers 对象",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.config",title:"Enumerable.config 对象",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.predicates",title:"Enumerable.predicates 对象",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.selectors",title:"Enumerable.selectors 对象",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.setters",title:"Enumerable.setters 对象",since:"2.1.20",deprecated:"2.1.25.pre"},{code:"IChunk",title:"IChunk 接口",since:"2.1.18",deprecated:"2.1.25.pre"},{code:"ICombine",title:"ICombine 接口",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"IEnumerable",title:"IEnumerable 接口",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IEnumerator",title:"IEnumerator 接口",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IGrouping",title:"IGrouping 接口",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IMapEnumerable",title:"IMapEnumerable 接口",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IOrderedEnumerable",title:"IOrderedEnumerable 接口",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"ITree",title:"ITree 接口",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"Lookup",title:"Lookup 类",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Plugin",title:"Plugin 类",since:"2.1.15",deprecated:"2.1.25.pre"}]},{code:"change",title:"更新日志"},{code:"about",title:"关于"}]},43925:e=>{e.exports=[{code:"introduction",title:"简介"},{code:"install",title:"安装"},"guides","apis",{code:"change",title:"更新日志"},{code:"about",title:"关于"}]},57218:e=>{e.exports={}},4635:e=>{e.exports={"1.js":'let fruits = [ "苹果", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\n// 确定数组中比 “香蕉” 更长的字符串\r\nlet longestName = fruits.asEnumerable().aggregate("香蕉",\r\n\t\t(longest, next) => next.length > longest.length ? next : longest,\r\n\t\t// 返回最终结果\r\n\t\tfruit => `水果 “${ fruit }”`);\r\n\r\nconsole.log(`最长的字符串是${ longestName }`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 最长的字符串是水果 “百香果”'}},30434:e=>{e.exports={"1.js":'// 创建一个宠物的数组。\r\nlet pets = [\r\n    { name: "小白", age: 10 },\r\n    { name: "小黑", age: 14 },\r\n    { name: "旺财", age: 6 }\r\n];\r\n\r\n// 确实是否所有的宠物名称\r\n// 都是“小”字开头的。\r\nlet allStartWithXiao = pets.asEnumerable().all(pet => pet.name.startsWith("小"));\r\n\r\nconsole.log(`${ allStartWithXiao ? "所有" : "不是所有" }宠物的名字都是以“小”字开头的。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n//  不是所有宠物的名字都是以“小”字开头的。',"2.js":'let people = [\r\n    {\r\n        lastName: "老王",\r\n        pets: [\r\n            { name: "小白", age: 10 },\r\n            { name: "机器人", age: 14 },\r\n            { name: "旺财", age: 6 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "老郑",\r\n        pets: [\r\n            { name: "雪诺", age: 1 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "老吴",\r\n        pets: [\r\n            { name: "贝贝", age: 8 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "老周",\r\n        pets: [\r\n            { name: "甜心", age: 2 },\r\n            { name: "大河", age: 13 }\r\n        ]\r\n    }\r\n];\r\n\r\n// 确定谁的宠物都是大于5岁的。\r\nlet names = people.asEnumerable()\r\n        .where(person => person.pets.all(pet => pet.age > 5))\r\n        .select(person => person.lastName);\r\n\r\nfor (let name of names) {\r\n    console.log(name);\r\n}\r\n\r\n/* 这段代码的输出结果如下：\r\n *\r\n * 老王\r\n * 老吴\r\n */'}},91600:e=>{e.exports={"1.js":'// 创建一个宠物的数组。\r\nlet pets = [\r\n    { name: "小白", age: 8, vaccinated: true },\r\n    { name: "机器人", age: 4, vaccinated: false },\r\n    { name: "旺财", age: 1, vaccinated: false }\r\n];\r\n\r\n// 确定是否存在年龄大于1岁且没有接种疫苗的宠物\r\nlet unvaccinated = pets.asEnumerable().any(p => p.age > 1 && p.vaccinated === false);\r\n\r\nconsole.log(`${ unvaccinated ? "有" : "没有" }超过一岁未接种疫苗的动物。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n//  有超过一岁未接种疫苗的动物。'}},14429:e=>{e.exports={}},14653:e=>{e.exports={"1.js":'let numbers = [ "10007", "37", 299846234235 ];\r\n\r\nlet average = numbers.asEnumerable().average();\r\n\r\nconsole.log(`平均数是${ average }。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 平均数是99948748093。'}},12202:e=>{e.exports={}},16447:e=>{e.exports={"1.js":"let array = [ 1, 2, 3 ];\r\n\r\n//数量为2的所有组合\r\nconsole.log(array.asEnumerable().combination(2).select(per => `[${ per.join('|') }]`).toArray());\r\n//数量为2的所有重复组合\r\nconsole.log(array.asEnumerable().combination(2, true).select(per => `[${ per.join('|') }]`).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// [1|2],[1|3],[2|3]\r\n// [1|1],[1|2],[1|3],[2|2],[2|3],[3|3]"}},98224:e=>{e.exports={}},36128:e=>{e.exports={"1.js":'let cats = [\r\n    { name: "花斑虎", age: 3 },\r\n    { name: "汤姆", age: 14 },\r\n    { name: "懒猫", age: 9 }\r\n];\r\n\r\nlet dogs = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 }\r\n];\r\n\r\nlet query = cats.asEnumerable().select(cat => cat.name)\r\n        .concat(dogs.asEnumerable().select(dog => dog.name));\r\n\r\nfor (let name of query) {\r\n    console.log(name);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 花斑虎\r\n// 汤姆\r\n// 懒猫\r\n// 小白\r\n// 机器人\r\n// 旺财'}},72641:e=>{e.exports={"1.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet fruit = "芒果";\r\n\r\nlet hasMango = fruits.asEnumerable().contains(fruit);\r\n\r\nconsole.log(`数组中${ hasMango ? "含" : "不含" }有“${ fruit }”。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 数组中含有“芒果”。',"2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果水果的名称和数目相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet fruits = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 },\r\n    { name: "柠檬", code: 12 }\r\n];\r\n\r\nlet apple = { name: "苹果", code: 9 };\r\nlet kiwi = { name: "奇异果", code: 8 };\r\n\r\nlet hasApple = fruits.asEnumerable().contains(apple, productComparer);\r\nlet hasKiwi = fruits.asEnumerable().contains(kiwi, productComparer);\r\n\r\nconsole.log("苹果? " + hasApple);\r\nconsole.log("奇异果? " + hasKiwi);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果? true\r\n 奇异果? false\r\n */'}},37907:e=>{e.exports={}},79826:e=>{e.exports={"1.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet numberOfFruits = fruits.asEnumerable().count();\r\n\r\nconsole.log(`数组中有${ numberOfFruits }种水果。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 数组中有6种水果。\r\n',"2.js":'let pets = [\r\n    { name: "小白", vaccinated: true },\r\n    { name: "机器人", vaccinated: false },\r\n    { name: "旺财", vaccinated: false }\r\n];\r\n\r\nlet numberUnvaccinated = pets.asEnumerable().count(p => p.vaccinated === false);\r\n\r\nconsole.log(`有${ numberUnvaccinated }个动物没有接种疫苗。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 有2个动物没有接种疫苗。',"3.js":'let pets = [\r\n    { name: "小白", vaccinated: true },\r\n    { name: "机器人", vaccinated: false },\r\n    { name: "旺财", vaccinated: false }\r\n];\r\n\r\nlet numberUnvaccinated = pets.asEnumerable().count({ vaccinated: false });\r\n\r\nconsole.log(`有${ numberUnvaccinated }个动物没有接种疫苗。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 有2个动物没有接种疫苗。'}},76124:e=>{e.exports={"1.js":'let defaultPet = { name: "默认宠物名称", age: 0 };\r\n\r\nlet pets1 = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 }\r\n];\r\n\r\nfor (let pet of pets1.asEnumerable().defaultIfEmpty(defaultPet)) {\r\n    console.log(`宠物名称是：${ pet.name }`);\r\n}\r\n\r\nconsole.log();\r\n\r\nlet pets2 = [];\r\n\r\nfor (let pet of pets2.asEnumerable().defaultIfEmpty(defaultPet)) {\r\n    console.log(`宠物名称是：${ pet.name }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 宠物名称是：小白\r\n 宠物名称是：机器人\r\n 宠物名称是：旺财\r\n\r\n 宠物名称是：默认宠物名称\r\n */'}},83423:e=>{e.exports={"1.js":'let ages = [ 21, 46, 46, 55, 17, 21, 55, 55 ];\r\n\r\nlet distinctAges = ages.asEnumerable().distinct();\r\n\r\nconsole.log("不重复的年龄有：");\r\n\r\nfor (let age of distinctAges) {\r\n    console.log(age);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 不重复的年龄有：\r\n 21\r\n 46\r\n 55\r\n 17\r\n */\r\n',"2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和编号相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet products = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 },\r\n    { name: "苹果", code: 9 },\r\n    { name: "柠檬", code: 12 }\r\n];\r\n\r\n// 去除重复\r\nlet noduplicates = products.asEnumerable().distinct(productComparer);\r\n\r\nfor (let product of noduplicates) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果 9\r\n 橘子 4\r\n 柠檬 12\r\n */'}},75468:e=>{e.exports={"1.js":'let names = [ "李小龙", "李连杰", "甄子丹", "成龙", "洪金宝" ];\r\n\r\nlet name = names.asEnumerable().elementAt(4);\r\n\r\nconsole.log(`名字是“${ name }”。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 名字是“洪金宝”。\r\n */'}},73567:e=>{e.exports={"1.js":'let names = [ "李小龙", "李连杰", "甄子丹", "成龙", "洪金宝" ];\r\n\r\nlet index = 20;\r\n\r\nlet name = names.asEnumerable().elementAtOrDefault(index, "【这个位置上没有人】");\r\n\r\nconsole.log(`在位置${ index }上的名字是“${ name }”。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 在位置20上的名字是“【这个位置上没有人】”。\r\n */'}},14436:e=>{e.exports={}},83764:e=>{e.exports={"1.js":"let numbers1 = [ 2.0, 2.0, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5 ];\r\nlet numbers2 = [ 2.2 ];\r\n\r\nlet onlyInFirstSet = numbers1.asEnumerable().except(numbers2);\r\n\r\nfor (let number of onlyInFirstSet) {\r\n    console.log(number);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 2\r\n 2.1\r\n 2.3\r\n 2.4\r\n 2.5\r\n */","2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和数目相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet fruits1 = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 },\r\n    { name: "柠檬", code: 12 }\r\n];\r\n\r\nlet fruits2 = [ { name: "苹果", code: 9 } ];\r\n\r\n//获取第一个数组中的全部元素\r\n//除了出现在第二个数组中的元素。\r\nlet except = fruits1.asEnumerable().except(fruits2, productComparer);\r\n\r\nfor (let product of except) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 橘子 4\r\n 柠檬 12\r\n */'}},92111:e=>{e.exports={}},501:e=>{e.exports={}},6582:e=>{e.exports={}},7314:e=>{e.exports={}},62238:e=>{e.exports={}},97738:e=>{e.exports={}},66021:e=>{e.exports={"1.js":"let numbers = [ 9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19 ];\r\n\r\nlet first = numbers.asEnumerable().first();\r\n\r\nconsole.log(first);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 9\r\n */","2.js":"let numbers = [ 9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19 ];\r\n\r\nlet first = numbers.asEnumerable().first(number => number > 80);\r\n\r\nconsole.log(first);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 92\r\n */"}},9519:e=>{e.exports={"1.js":"let numbers = [];\r\nlet first = numbers.asEnumerable().firstOrDefault(0);\r\nconsole.log(first);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 0\r\n */","2.js":'let names = [ "李小龙", "李连杰", "六小龄童", "甄子丹", "成龙", "洪金宝" ];\r\n\r\nlet firstLongName = names.asEnumerable().firstOrDefault("", name => name.length > 3);\r\n\r\nconsole.log(`第一个最长的名字是：“${ firstLongName }”。`);\r\n\r\nlet firstVeryLongName = names.asEnumerable().firstOrDefault("", name => name.length > 4);\r\n\r\nconsole.log(`${ firstVeryLongName === "" ? "没有" : "有" }名字的长度多于4个字。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 第一个最长的名字是：“六小龄童”。\r\n 没有名字的长度多于4个字。\r\n */'}},64594:e=>{e.exports={}},85762:e=>{e.exports={}},86929:e=>{e.exports={"1.js":'// 创建一个宠物的序列。\r\nlet pets = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 },\r\n    { name: "小黑", age: 4 }\r\n];\r\n\r\n// 使用年龄作为分组的键同时\r\n// 使用宠物的名字作为每个分组中的元素。\r\nlet query = pets.asEnumerable().groupBy(pet => pet.age, pet => pet.name);\r\n\r\n// 循环每个组的结果。\r\nfor (let petGroup of query) {\r\n    // 输出该组的键。\r\n    console.log(petGroup.key);\r\n    // 循环每个结果的内容。\r\n    for (let name of petGroup)\r\n        // 输出 IGrouping 中的值。\r\n        console.log(`  ${ name }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 8\r\n   小白\r\n 4\r\n   机器人\r\n   小黑\r\n 1\r\n   旺财\r\n */\r\n',"2-2.1.19.js":'// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: "小白", age: 8.3 },\r\n    { name: "机器人", age: 4.9 },\r\n    { name: "旺财", age: 1.5 },\r\n    { name: "小黑", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count(),\r\n        min: pets.min(pet => pet.age),\r\n        max: pets.max(pet => pet.age)\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log("\\n年龄组：" + result.key);\r\n    console.log("该组包含的宠物数量：" + result.count);\r\n    console.log("该组的最小年龄：" + result.min);\r\n    console.log("该组的最大年龄：" + result.max);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：8.3\r\n 该组的最大年龄：8.3\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n 该组的最小年龄：4.3\r\n 该组的最大年龄：4.9\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：1.5\r\n 该组的最大年龄：1.5\r\n */',"2.js":'// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: "小白", age: 8.3 },\r\n    { name: "机器人", age: 4.9 },\r\n    { name: "旺财", age: 1.5 },\r\n    { name: "小黑", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键与数量的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log("\\n年龄组：" + result.key);\r\n    console.log("该组包含的宠物数量：" + result.count);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n */',"3-2.1.19.js":'// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: "小白", age: 8.3 },\r\n    { name: "机器人", age: 4.9 },\r\n    { name: "旺财", age: 1.5 },\r\n    { name: "小黑", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count(),\r\n        min: ages.min(),\r\n        max: ages.max()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log("\\n年龄组：" + result.key);\r\n    console.log("该组包含的宠物数量：" + result.count);\r\n    console.log("该组的最小年龄：" + result.min);\r\n    console.log("该组的最大年龄：" + result.max);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：8.3\r\n 该组的最大年龄：8.3\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n 该组的最小年龄：4.3\r\n 该组的最大年龄：4.9\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：1.5\r\n 该组的最大年龄：1.5\r\n */',"3.js":'// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: "小白", age: 8.3 },\r\n    { name: "机器人", age: 4.9 },\r\n    { name: "旺财", age: 1.5 },\r\n    { name: "小黑", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log("\\n年龄组：" + result.key);\r\n    console.log("该组包含的宠物数量：" + result.count);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n */'}},1460:e=>{e.exports={"1.js":'let xi = { name: "习大大" };\r\nlet wang = { name: "王思聪" };\r\nlet li = { name: "李小龙" };\r\n\r\nlet white = { name: "小白", owner: wang };\r\nlet boots = { name: "机器人", owner: wang };\r\nlet black = { name: "黑蛋", owner: li };\r\nlet cai = { name: "旺财", owner: xi };\r\n\r\nlet people = [ xi, wang, li ];\r\nlet pets = [ white, boots, black, cai ];\r\n\r\n// 生成一个每个元素都包含\r\n// 主人名字和其所有宠物名字列表\r\n// 的新序列\r\nlet query = people.asEnumerable().groupJoin(pets,\r\n    (person, petCollection) => ({\r\n        ownerName: person.name,\r\n        pets: petCollection.select(pet => pet.name)\r\n    }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    // 输入该主人姓名。\r\n    console.log(`${ obj.ownerName }：`);\r\n    // 输入该主人所有宠物的名字。\r\n    for (let pet of obj.pets) {\r\n        console.log(`  ${ pet }`);\r\n    }\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 习大大：\r\n   旺财\r\n 王思聪：\r\n   小白\r\n   机器人\r\n 李小龙：\r\n   黑蛋\r\n */'}},35503:e=>{e.exports={}},78936:e=>{e.exports={}},51514:e=>{e.exports={"1.js":"let id1 = [ 44, 26, 92, 30, 71, 38 ];\r\nlet id2 = [ 39, 59, 83, 47, 26, 4, 30 ];\r\n\r\nlet both = id1.asEnumerable().intersect(id2);\r\n\r\nfor (let id of both) {\r\n    console.log(id);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 26\r\n 30\r\n */","2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和编号相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet store1 = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 }\r\n];\r\nlet store2 = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "柠檬", code: 12 }\r\n];\r\n\r\n// 获取所有的在第一个数组从出现\r\n// 又在第二个数组中出现了的产品\r\nlet duplicates = store1.asEnumerable().intersect(store2, productComparer);\r\n\r\nfor (let product of duplicates) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果 9\r\n */'}},99811:e=>{e.exports={"0.1.js":"[1, 2, 3].join('|');","1.1.js":'let xi = { name: "习大大" };\r\nlet wang = { name: "王思聪" };\r\nlet li = { name: "李小龙" };\r\n\r\nlet white = { name: "小白", owner: wang };\r\nlet boots = { name: "机器人", owner: wang };\r\nlet black = { name: "黑蛋", owner: li };\r\nlet cai = { name: "旺财", owner: xi };\r\n\r\nlet people = [ xi, wang, li ];\r\nlet pets = [ white, boots, black, cai ];\r\n\r\n// 从主人序列与宠物序列及其关系中\r\n// 构建一个 主人-宠物 键值对的新序列\r\n// 新序列的每个元素包含宠物名称和宠物主人的姓名\r\nlet query = people.asEnumerable().join(pets,\r\n    (person, pet) => ({ ownerName: person.name, pet: pet.name }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    console.log(`${ obj.ownerName } - ${ obj.pet }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 习大大 - 旺财\r\n 王思聪 - 小白\r\n 王思聪 - 机器人\r\n 李小龙 - 黑蛋\r\n */'}},15653:e=>{e.exports={}},44635:e=>{e.exports={}},21475:e=>{e.exports={}},62736:e=>{e.exports={}},6984:e=>{e.exports={"1.js":"let longs = [ 4294967296, 466855135, 81125 ];\r\n\r\nlet max = longs.asEnumerable().max();\r\n\r\nconsole.log(`最大的数字是${ max }。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 最大的数字是4294967296。\r\n */","2.js":'let pets = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 }\r\n];\r\n\r\nlet max = pets.asEnumerable().max(pet => pet.age + pet.name.length);\r\n\r\nconsole.log(`最大的年龄加名字长度是${ max }。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 最大的年龄加名字长度是10。\r\n */'}},4487:e=>{e.exports={"1.js":"let longs = [ 4294967296, 466855135, 81125 ];\r\n\r\nlet min = longs.asEnumerable().min();\r\n\r\nconsole.log(`最小的数字是${ min }。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 最小的数字是81125。\r\n */","2.js":'let pets = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 }\r\n];\r\n\r\nlet min = pets.asEnumerable().min(pet => pet.age);\r\n\r\nconsole.log(`年龄最小的宠物是${ min }岁。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄最小的宠物是1岁。\r\n */'}},60548:e=>{e.exports={"1-2.1.19.js":'let fruits = ["芒果", "橘子", "苹果", 3.0, "香蕉"];\r\n\r\n// 对序列执行 ofType 方法\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log("元素是 String 类型的有：");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 以下的查询展示了在 ofType 方法调用后使用 where 方法\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.asEnumerable().contains("果", Enumerable.comparers.ignoreCase()));\r\n\r\nconsole.log("\\n下列字符串包含 “果”：");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 元素是 String 类型的有：\r\n// 芒果\r\n// 橘子\r\n// 苹果\r\n// 香蕉\r\n//\r\n// 下列字符串包含 “果”：\r\n// 芒果\r\n// 苹果',"1.js":'let fruits = ["芒果", "橘子", "苹果", 3.0, "香蕉"];\r\n\r\n// 对序列执行 ofType 方法\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log("元素是 String 类型的有：");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 以下的查询展示了在 ofType 方法调用后使用 where 方法\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.toLowerCase().asEnumerable().contains("果"));\r\n\r\nconsole.log("\\n下列字符串包含 “果”：");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 元素是 String 类型的有：\r\n// 芒果\r\n// 橘子\r\n// 苹果\r\n// 香蕉\r\n//\r\n// 下列字符串包含 “果”：\r\n// 芒果\r\n// 苹果'}},81440:e=>{e.exports={"1.js":'let pets = [\r\n    { name: "小白", age: 8 },\r\n    { name: "机器人", age: 4 },\r\n    { name: "旺财", age: 1 }\r\n];\r\n\r\nlet query = pets.asEnumerable().orderBy(pet => pet.age);\r\n\r\nfor (let pet of query) {\r\n    console.log(`${ pet.name } - ${ pet.age }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 旺财 - 1\r\n 机器人 - 4\r\n 小白 - 8\r\n*/'}},10007:e=>{e.exports={"1.js":"const specialComparer = (d1, d2) => {\r\n    let f1 = d1 * 1e16 % 1e16 / 1e16;\r\n    let f2 = d2 * 1e16 % 1e16 / 1e16;\r\n    if (f1 === f2) {\r\n        return d1 - d2;\r\n    } else if (f1 > f2) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n};\r\n\r\nlet decimals = [ 6.2, 8.3, 0.5, 1.3, 6.3, 9.7 ];\r\n\r\nlet query = decimals.asEnumerable().orderByDescending(num => num, specialComparer);\r\n\r\nfor (let num of query) {\r\n    console.log(num);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 9.7\r\n 0.5\r\n 8.3\r\n 6.3\r\n 1.3\r\n 6.2\r\n*/"}},62754:e=>{e.exports={"1.js":"let array = [ 1, 2, 3 ];\r\n\r\n//数量为2的所有排列\r\nconsole.log(array.asEnumerable().permutation(2).select(per => `[${ per.join('|') }]`).toArray());\r\n//数量为2的所有重复排列\r\nconsole.log(array.asEnumerable().permutation(2, true).select(per => `[${ per.join('|') }]`).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// [1|2],[1|3],[2|1],[2|3],[3|1],[3|2]\r\n// [1|1],[1|2],[1|3],[2,1]|[2|2],[2|3],[3|1],[3|2],[3|3]"}},15590:e=>{e.exports={}},20684:e=>{e.exports={}},48631:e=>{e.exports={"1.js":'let fruits = [ "苹果", "百香果", "海南香蕉", "芒果", "橘子", "蓝莓", "新疆葡萄", "草莓" ];\r\n\r\nlet proportion = fruits.asEnumerable().proportion(fruit => fruit.length < 3);\r\n\r\nconsole.log((proportion * 100) + \'%\');\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 62.5%\r\n*/'}},10369:e=>{e.exports={}},15281:e=>{e.exports={}},90697:e=>{e.exports={}},67272:e=>{e.exports={}},20591:e=>{e.exports={}},272:e=>{e.exports={}},3330:e=>{e.exports={}},29480:e=>{e.exports={}},42642:e=>{e.exports={"1.js":"let squares = Enumerable.range(1, 10).select(x => x * x);\r\n\r\nfor (let num of squares) {\r\n    console.log(num);\r\n}\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 1\r\n 4\r\n 9\r\n 16\r\n 25\r\n 36\r\n 49\r\n 64\r\n 81\r\n 100\r\n*/","2.js":'let fruits = [ "苹果", "海南香蕉", "芒果", "沙糖桔", "西番莲的果实", "长城干红葡萄酒" ];\r\n\r\nlet query = fruits.asEnumerable().select((fruit, index) => ({ index, str: fruit.substring(0, index) }));\r\n\r\nfor (let obj of query) {\r\n    console.log(obj);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n {"index":0,"str":""}\r\n {"index":1,"str":"海"}\r\n {"index":2,"str":"芒果"}\r\n {"index":3,"str":"沙糖桔"}\r\n {"index":4,"str":"西番莲的"}\r\n {"index":5,"str":"长城干红葡"}\r\n*/'}},37606:e=>{e.exports={"1.js":'let petOwners = [\r\n    { name: "李小龙", pets: [ "小白", "旺财" ] },\r\n    { name: "成龙", pets: [ "大黄", "甜心" ] },\r\n    { name: "李连杰", pets: [ "花花", "狗带" ] }\r\n];\r\n\r\n// 使用 selectMany() 查询。\r\nlet query1 = petOwners.asEnumerable().selectMany(petOwner => petOwner.pets);\r\n\r\nconsole.log("使用 selectMany()：");\r\n\r\n// 只需要一个循环来遍历这个结果序列，\r\n// 因为它已经是一个一维序列了。\r\nfor (let pet of query1) {\r\n    console.log(pet);\r\n}\r\n\r\n// 下面的代码演示了如何使用 select()\r\n// 来代替 selectMany()。\r\nlet query2 = petOwners.asEnumerable().select(petOwner => petOwner.pets);\r\n\r\nconsole.log("\\n使用 select()：");\r\n\r\n// 需要两层循环来遍历结果序列，\r\n// 因为它是一个元素为序列的序列。\r\nfor (let petList of query2) {\r\n    for (let pet of petList) {\r\n        console.log(pet);\r\n    }\r\n    console.log();\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 使用 selectMany()：:\r\n 小白\r\n 旺财\r\n 大黄\r\n 甜心\r\n 花花\r\n 狗带\r\n\r\n 使用 select()：:\r\n 小白\r\n 旺财\r\n\r\n 大黄\r\n 甜心\r\n\r\n 花花\r\n 狗带\r\n\r\n*/',"2.js":'let petOwners = [\r\n    { name: "李小龙", pets: [ "小白", "小石头" ] },\r\n    { name: "成龙", pets: [ "大黄", "小甜心" ] },\r\n    { name: "李连杰", pets: [ "小花", "狗带" ] },\r\n    { name: "甄子丹", pets: [ "斑点" ] }\r\n];\r\n\r\n// 使用宠物列表中的宠物名字\r\n// 追加在宠物主人的序号后的方式\r\n// 投影序列中的元素。\r\nlet query = petOwners.asEnumerable().selectMany((petOwner, index) =>\r\n        petOwner.pets.asEnumerable().select(pet => index + pet));\r\n\r\nfor (let pet of query) {\r\n    console.log(pet);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 0小白\r\n// 0小石头\r\n// 1大黄\r\n// 1小甜心\r\n// 2小花\r\n// 2狗带\r\n// 3斑点',"3.js":'let petOwners = [\r\n    { name: "李小龙", pets: [ "小白", "小石头" ] },\r\n    { name: "成龙", pets: [ "大黄", "小甜心" ] },\r\n    { name: "李连杰", pets: [ "小花", "狗带" ] },\r\n    { name: "甄子丹", pets: [ "斑点" ] }\r\n];\r\n\r\n// 投影宠物主人的名称和宠物的名称。\r\nlet query = petOwners.asEnumerable().selectMany(petOwner => petOwner.pets, (petOwner, petName) => ({ petOwner, petName }))\r\n        .where(ownerAndPet => ownerAndPet.petName.startsWith("小"))\r\n        .select(ownerAndPet => ({\r\n            owner: ownerAndPet.petOwner.name,\r\n            pet: ownerAndPet.petName\r\n        }));\r\n\r\n// 输出结果。\r\nfor (let obj of query) {\r\n    console.log(obj);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// {"owner":"李小龙","pet":"小白"}\r\n// {"owner":"李小龙","pet":"小石头"}\r\n// {"owner":"成龙","pet":"小甜心"}\r\n// {"owner":"李连杰","pet":"小花"}'}},53069:e=>{e.exports={}},49880:e=>{e.exports={"1.js":'let pet1 = { name: "小白", age: 2 };\r\nlet pet2 = { name: "旺财", age: 8 };\r\n\r\n// 创建两个宠物列表.\r\nlet pets1 = [ pet1, pet2 ];\r\nlet pets2 = [ pet1, pet2 ];\r\n\r\nlet equal = pets1.asEnumerable().sequenceEqual(pets2);\r\n\r\nconsole.log(`这些宠物列表${ equal ? "是" : "不是" }相同的。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 这些宠物列表是相同的。\r\n*/',"2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和数目相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet storeA = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 }\r\n];\r\n\r\nlet storeB = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 }\r\n];\r\n\r\nlet equalAB = storeA.asEnumerable().sequenceEqual(storeB, productComparer);\r\n\r\nconsole.log("相同? " + equalAB);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 相同? True\r\n*/'}},71826:e=>{e.exports={}},12712:e=>{e.exports={"1.js":'let fruits1 = [ "橘子" ];\r\n\r\nlet fruit1 = fruits1.asEnumerable().single();\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 橘子\r\n*/',"2.js":'let fruits2 = [ "橘子", "苹果" ];\r\nlet fruit2 = null;\r\n\r\ntry {\r\n    fruit2 = fruits2.asEnumerable().single();\r\n    console.log(fruit2);\r\n} catch (e) {\r\n    console.log("集合中不包含恰好一个元素。");\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 集合中不包含恰好一个元素。\r\n*/\r\n',"3.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet fruit1 = fruits.asEnumerable().single(fruit => fruit.length > 2);\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 百香果\r\n*/',"4.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\nlet fruit2 = null;\r\n\r\ntry {\r\n    fruit2 = fruits.asEnumerable().single(fruit => fruit.length > 5);\r\n\r\n    console.log(fruit2);\r\n} catch (e) {\r\n    console.log("集合中不包含恰好一个长度超过5的元素。");\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 集合中不包含恰好一个长度超过5的元素。'}},46565:e=>{e.exports={"1.js":'let fruits1 = [ "橘子" ];\r\n\r\nlet fruit1 = fruits1.asEnumerable().singleOrDefault("没有这样的水果！");\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 橘子\r\n*/',"2.js":'let fruits2 = [];\r\n\r\nlet fruit2 = fruits2.asEnumerable().singleOrDefault("没有这样的水果！");\r\n\r\nconsole.log(fruit2);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 没有这样的水果！\r\n*/',"3.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet fruit1 = fruits.asEnumerable().singleOrDefault("没有这样的水果！", fruit => fruit.length > 2);\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 百香果\r\n*/',"4.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet fruit2 = fruits.asEnumerable().singleOrDefault("没有这样的水果！", fruit => fruit.length > 5);\r\n\r\nconsole.log(fruit2);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 没有这样的水果！\r\n*/'}},26082:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet lowerGrades = grades.asEnumerable().orderByDescending().skip(3);\r\n\r\nconsole.log("不包含最大三个数其余数字有：");\r\nfor (let grade of lowerGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 不包含最大三个数其余数字有：\r\n 82\r\n 70\r\n 59\r\n 56\r\n*/'}},32476:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet lowerFiftyPercentGrades = grades.asEnumerable().orderByDescending().skipProportion(0.5);\r\n\r\nconsole.log("50%名额外的低分成绩：");\r\nfor (let grade of lowerFiftyPercentGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 50%名额外的低分成绩：\r\n 82\r\n 70\r\n 59\r\n 56\r\n*/'}},33217:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet lowerGrades = grades.asEnumerable().orderByDescending().skipWhile(grade => grade >= 80);\r\n\r\nconsole.log("所有小于80的成绩：");\r\nfor (let grade of lowerGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 所有小于80的成绩：\r\n 70\r\n 59\r\n 56\r\n*/',"2.js":"let amounts = [ 5000, 2500, 9000, 8000, 6500, 4000, 1500, 5500 ];\r\n\r\nlet query = amounts.asEnumerable().skipWhile((amount, index) => amount > index * 1000);\r\n\r\nfor (let amount of query) {\r\n    console.log(amount);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 4000\r\n 1500\r\n 5500\r\n*/"}},44291:e=>{e.exports={}},46491:e=>{e.exports={}},2542:e=>{e.exports={}},12213:e=>{e.exports={}},41997:e=>{e.exports={"1.js":"let numbers = [ 43.68, 1.25, 583.7, 6.5 ];\r\n\r\nlet sum = numbers.asEnumerable().sum();\r\n\r\nconsole.log(`所有数的和是${ sum }。`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 所有数的和是635.13。\r\n*/","2.js":'let packages = [\r\n    { company: "化肥", weight: 25.2 },\r\n    { company: "水泥", weight: 18.7 },\r\n    { company: "海绵", weight: 6.0 },\r\n    { company: "黄沙", weight: 33.9 }\r\n];\r\n\r\nlet totalWeight = packages.asEnumerable().sum(pkg => pkg.weight);\r\n\r\nconsole.log(`所有袋子的总重量是：${ totalWeight }`);\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 所有袋子的总重量是：83.8\r\n*/'}},28338:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet topThreeGrades = grades.asEnumerable().orderByDescending().take(3);\r\n\r\nconsole.log("最高的三个成绩是：");\r\nfor (let grade of topThreeGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 最高的三个成绩是：\r\n 98\r\n 92\r\n 85\r\n*/'}},51575:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet topFiftyPercentGrades = grades.asEnumerable().orderByDescending().takeProportion(0.5);\r\n\r\nconsole.log("前50%名额的最高成绩是：");\r\nfor (let grade of topFiftyPercentGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 前50%名额的最高成绩是：\r\n 98\r\n 92\r\n 85\r\n*/'}},9627:e=>{e.exports={"1.js":'let fruits = [ "苹果", "香蕉", "芒果", "橘子", "百香果", "葡萄" ];\r\n\r\nlet query = fruits.asEnumerable().takeWhile(fruit => "橘子" !== fruit);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果\r\n 香蕉\r\n 芒果\r\n*/',"2.js":'let fruits = [ "苹果", "百香果", "香蕉", "芒果", "橘子", "蓝莓", "葡萄", "草莓" ];\r\n\r\nlet query = fruits.asEnumerable().takeWhile((fruit, index) => fruit.length >= index);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果\r\n 百香果\r\n 香蕉\r\n*/'}},4424:e=>{e.exports={}},6267:e=>{e.exports={}},94895:e=>{e.exports={}},22803:e=>{e.exports={}},14298:e=>{e.exports={"1.js":"let ints1 = [ 5, 3, 9, 7, 5, 9, 3, 7 ];\r\nlet ints2 = [ 8, 3, 6, 4, 4, 9, 1, 0 ];\r\n\r\nlet union = ints1.asEnumerable().union(ints2);\r\n\r\nfor (let num of union) {\r\n    console.log(num);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 5\r\n 3\r\n 9\r\n 7\r\n 8\r\n 6\r\n 4\r\n 1\r\n 0\r\n*/","2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和编号相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet store1 = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "橘子", code: 4 }\r\n];\r\n\r\nlet store2 = [\r\n    { name: "苹果", code: 9 },\r\n    { name: "柠檬", code: 12 }\r\n];\r\n\r\n//获取在两个序列中的所有产品\r\n//除了重复的部分。\r\nlet union = store1.asEnumerable().union(store2, productComparer);\r\n\r\nfor (let product of union) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果 9\r\n 橘子 4\r\n 柠檬 12\r\n*/'}},36117:e=>{e.exports={}},41283:e=>{e.exports={"1.js":'let fruits = [ "苹果", "百香果", "海南香蕉", "芒果", "橘子", "蓝莓", "新疆葡萄", "草莓" ];\r\n\r\nlet query = fruits.asEnumerable().where(fruit => fruit.length < 3);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 苹果\r\n 芒果\r\n 橘子\r\n 蓝莓\r\n 草莓\r\n*/',"2.js":"let numbers = [ 0, 30, 20, 15, 90, 85, 40, 75 ];\r\n\r\nlet query = numbers.asEnumerable().where((number, index) => number <= index * 10);\r\n\r\nfor (let number of query) {\r\n    console.log(number);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 0\r\n 20\r\n 15\r\n 40\r\n*/"}},72311:e=>{e.exports={}},21354:e=>{e.exports={"1.js":'let numbers = [ 1, 2, 3, 4 ];\r\nlet words = [ "一", "二", "三" ];\r\n\r\nlet numbersAndWords = numbers.asEnumerable().zip(words, (first, second) => first + " " + second);\r\n\r\nfor (let item of numbersAndWords) {\r\n    console.log(item);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n\r\n// 1 一\r\n// 2 二\r\n// 3 三'}},21683:e=>{e.exports={}},29234:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.asBinary().preOrder().toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,c,d,e"}},41411:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.breadthSearch(value => value === 'd' || value === 'e'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// e"}},89792:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.breadthSubTree(value => value === 'd' || value === 'e').select(node => node.value).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// e,d"}},3837:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.breadthSubTrees(value => value === 'd' || value === 'e').select(node => node.value).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// e,d"}},27958:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.breadthTraverse().toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,e,c,d"}},35675:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.degree());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 2"}},99065:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.depth());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 3"}},48344:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.depthSearch(value => value === 'd' || value === 'e'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// d"}},92706:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.depthSubTree(value => value === 'd' || value === 'e').select(node => node.value).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// d,e"}},95946:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.depthTraverse().toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,c,d,e"}},28312:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.getChild(1).value);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// e"}},44409:e=>{e.exports={"1.js":"let root = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(root.getParent('c'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// b"}},57112:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.getChild(0).getValue(1));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// d"}},88191:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isAncestorOf(tree.getChild(0).getChild(1)));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true","2.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isAncestorOf('c'));\r\nconsole.log(tree.isAncestorOf('f'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true\r\n// false"}},59170:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isBinary());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true"}},10283:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.getChild(1).isChildOf(tree));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true"}},93029:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isCompleteBinary());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true"}},62423:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.getChild(0).getChild(1).isDescendantOf(tree));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true"}},46064:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isFullBinary());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true"}},15509:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isParentOf(tree.getChild(1)));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// true","2.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isParentOf('c'));\r\nconsole.log(tree.isParentOf('e'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// false\r\n// true"}},20357:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isPerfectBinary());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// false"}},14678:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.isPrefectBinary());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// false"}},55655:e=>{e.exports={"1.js":"let root = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(root.lowestAncestor('c', 'd'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// b"}},30806:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        { value: 'b' },\r\n        { value: 'c' },\r\n        { value: 'd' },\r\n        { value: 'e' }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.next('c'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// d"}},84851:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        { value: 'b' },\r\n        { value: 'c' },\r\n        { value: 'd' },\r\n        { value: 'e' }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.nextAll('c').toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// d,e"}},70156:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.getChild(0).getChild(1).path(tree).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,d"}},30858:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.pathTo(tree.getChild(0).getChild(1)).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,d","2.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.pathTo('d').toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,d"}},64047:e=>{e.exports={"1.js":"let array = [ 1, 2, 3 ];\r\n\r\n//permutation\r\nconsole.log(array.permutation(2).select(per => `[${ per.join('|') }]`).toArray());\r\n//repetition permutation\r\nconsole.log(array.permutation(2, true).select(per => `[${ per.join('|') }]`).toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// [1|2],[1|3],[2|3]\r\n// [1|1],[1|2],[1|3],[2|2],[2|3],[3|3]"}},44430:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        { value: 'b' },\r\n        { value: 'c' },\r\n        { value: 'd' },\r\n        { value: 'e' }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.prev('d'));\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// c"}},20089:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        { value: 'b' },\r\n        { value: 'c' },\r\n        { value: 'd' },\r\n        { value: 'e' }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.prevAll('d').toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// b,c"}},26047:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        { value: 'b' },\r\n        { value: 'c' },\r\n        { value: 'd' },\r\n        { value: 'e' }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.siblings('d').toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// b,c,e"}},74893:e=>{e.exports={"config.as.js":"Enumerable.config.as = 'em';\r\nlet enumerable = [1, 2, 3].em();","config.as.try.js":"Enumerable.config.as = 'em';\r\nlet enumerable = [1, 2, 3].em();\r\nconsole.log(enumerable);","config.extends.js":"Enumerable.config.extends.array = true; //开启针对 Array 的扩展，使 Array 对象拥有 LINQ 的功能，可以直接使用 LINQ 提供的方法。（推荐开启）\r\nEnumerable.config.extends.string = true; //开启针对 String 的扩展，使 String 对象拥有 LINQ 的功能，可以直接使用 LINQ 提供的方法。（不建议开启）\r\nEnumerable.config.extends.object = true; //开启针对 Object 的扩展，使任何对象拥有 LINQ 的功能，可以直接使用 LINQ 提供的方法。（不建议开启）"}},51789:e=>{e.exports={"asEnumerable.js":"let a = [1, 2, 3].asEnumerable();\r\nlet o = ({ key: 1, value: 'a' }).asEnumerable();\r\nlet s = 'abc'.asEnumerable();","asEnumerable.try.js":"let a = [1, 2, 3].asEnumerable();\r\nconsole.log(a);\r\nlet o = ({ key: 1, value: 'a' }).asEnumerable();\r\nconsole.log(o);\r\nlet s = 'abc'.asEnumerable();\r\nconsole.log(s);","asTree.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);","asTree.try.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.pathTo('d').toArray());\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// a,b,d\r\n","Enumerable.asEnumerable.js":"let enumerable = Enumerable.asEnumerable([1, 2, 3]);","Enumerable.asEnumerable.try.js":"let enumerable = Enumerable.asEnumerable([1, 2, 3]);\r\nconsole.log(enumerable);","Enumerable.js":"let enumerable = Enumerable([1, 2, 3]);","Enumerable.try.js":"let enumerable = Enumerable([1, 2, 3]);\r\nconsole.log(enumerable);"}},84290:e=>{e.exports={"1.js":'let pets = [\r\n    { name: "小白", props: { age: 10, weight: 59 } },\r\n    { name: "小黑", props: { age: 14, weight: 50 } },\r\n    { name: "旺财", props: { age: 6, weight: 36 } }\r\n];\r\n\r\npets.asEnumerable().select("name");\r\n//上述代码等价于以下代码\r\npets.asEnumerable().select(pet => pet.name);',"1.try.js":'let pets = [\r\n    { name: "小白", props: { age: 10, weight: 59 } },\r\n    { name: "小黑", props: { age: 14, weight: 50 } },\r\n    { name: "旺财", props: { age: 6, weight: 36 } }\r\n];\r\n\r\nconsole.log(pets.asEnumerable().select("name"));\r\n//上述代码等价于以下代码\r\nconsole.log(pets.asEnumerable().select(pet => pet.name));\r\n',"2.js":"let arrays = [\r\n    [ 1, 2, 4, 8 ],\r\n    [ 1, 3, 9 ],\r\n    [ 1, 5 ]\r\n];\r\n\r\narrays.asEnumerable().select(1);\r\n//上述代码等价于以下代码\r\narrays.asEnumerable().select(array => array[1]);"}},92203:e=>{e.exports={"1.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\ntree.toValue(\"children\");\r\n//上述代码等价于以下代码\r\ntree.toValue((obj, value) => obj.children = value);","1.try.js":"let tree = ({\r\n    value: 'a',\r\n    children: [\r\n        {\r\n            value: 'b',\r\n            children: [\r\n                { value: 'c' },\r\n                { value: 'd' }\r\n            ]\r\n        },\r\n        { value: 'e', }\r\n    ]\r\n}).asEnumerable(node => node.children, node => node.value);\r\n\r\nconsole.log(tree.toValue(\"children\"));\r\n//上述代码等价于以下代码\r\nconsole.log(tree.toValue((obj, value) => obj.children = value));\r\n"}},1218:e=>{e.exports={"1.js":'let pets = [ { name: "小白", age: 8, vaccinated: true }, { name: "大黄", age: 4, vaccinated: false }, { name: "旺财", age: 1, vaccinated: false } ];\r\n\r\nlet unvaccinated = pets.asEnumerable().any(p => p.age > 1 && p.vaccinated === false);\r\n\r\nconsole.log(`${ unvaccinated ? "有" : "没有" }超过一岁未接种疫苗的动物。`);\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n//  有超过一岁未接种疫苗的动物。',"2.js":'let xi = { name: "习大大" }, wang = { name: "王思聪" }, li = { name: "李小龙" };\r\nlet white = { name: "小白", owner: wang }, boots = { name: "机器人", owner: wang }, black = { name: "黑蛋", owner: li }, cai = { name: "旺财", owner: xi };\r\nlet people = [ xi, wang, li ];\r\nlet pets = [ white, boots, black, cai ];\r\n\r\nlet query = people.asEnumerable().join(pets,\r\n    (person, pet) => ({ ownerName: person.name, pet: pet.name }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    console.log(`${ obj.ownerName } - ${ obj.pet }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 习大大 - 旺财\r\n 王思聪 - 小白\r\n 王思聪 - 机器人\r\n 李小龙 - 黑蛋\r\n */'}},24467:e=>{e.exports={title:"执行器",contents:[{title:"什么是执行器",descriptions:[{type:"description",content:"执行器是一个仅对输入值执行一系列计算的函数"},{type:"description",content:"通常一个执行器接受一个参数值, 或者额外接受输入值所在的序列中的索引作为第二个参数, 执行一系列计算, 但无需返回任何数值"},{type:"function",content:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"],optional:!0}]}}]}]}},68689:e=>{e.exports={title:"比较器",contents:[{title:"什么是比较器",descriptions:[{type:"description",content:"比较器是一个反映两个输入值之间关系的函数"}]},{title:"大小比较器",descriptions:[{type:"description",content:"大小比较器是一个反映两个输入值之间大小关系的比较器"},{type:"function",content:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{type:"see",content:{apis:"Enumerable.comparers",property:"default"}}]},{title:"相等比较器",descriptions:[{type:"description",content:"相等比较器是一个反映两个输入值是否相等的比较器"},{type:"function",content:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{type:"see",content:{apis:"Enumerable.comparers",property:"equality"}}]}]}},48973:e=>{e.exports={title:"配置",contents:[{title:"配置获取 IEnumerable 对象的方法",descriptions:[{type:"description",content:"默认的获取 IEnumerable 对象的方法名为 asEnumerable, 通过 config.as 属性可以修改此方法名"},{type:"example",content:{type:"javascript",href:"config.as.js",tryHref:"config.as.try.js"}},{type:"warning",content:"修改后 asEnumerable 方法依然有效"}]},{title:"配置内置对象的扩展",descriptions:[{type:"description",content:"使用如下方式可以对javascript中原生的对象进行扩展"},{type:"example",content:{type:"javascript",href:"config.extends.js",notTry:!0}}]}]}},9608:e=>{e.exports={title:"枚举器",contents:[{title:"什么是枚举器",descriptions:[]}]}},98262:e=>{e.exports={title:"扩展",contents:[{title:"为什么需要扩展",descriptions:[]},{title:"扩展对象",descriptions:[]}]}},54865:e=>{e.exports={title:"获取 IEnumerable 实例",contents:[{title:"通过 Enumerable 构造方法获取",descriptions:[{type:"description",content:"可以通过 Enumerable 类的构造方法获取一个 IEnumerable 对象"},{type:"example",content:{type:"javascript",href:"Enumerable.js",tryHref:"Enumerable.try.js"}},{type:"see",content:{apis:"Enumerable",constructor:!0}}]},{title:"通过 Enumerable.asEnumerable 方法获取",descriptions:[{type:"example",content:{type:"javascript",href:"Enumerable.asEnumerable.js",tryHref:"Enumerable.asEnumerable.try.js"}},{type:"see",content:{apis:"Enumerable",method:"asEnumerable"}}]},{title:"通过 asEnumerable 方法获取",descriptions:[{type:"description",content:"引入linq-js后, 任何对象都包含一个 asEnumerable 方法, 可以直接获取一个 IEnumerable 对象"},{type:"example",content:{type:"javascript",href:"asEnumerable.js",tryHref:"asEnumerable.try.js"}}]},{title:" 通过 Object.prototype.asEnumerable / Enumerable.asEnumerable 方法获取一个 ITree 对象",descriptions:[{type:"description",content:"可以通过 Object.prototype.asEnumerable / Enumerable.asEnumerable 从一个有树形结构的 objcet 对象上获取一个 ITree 对象"},{type:"warning",content:"需要最低版本:2.1.22"},{type:"example",content:{type:"javascript",href:"asTree.js",tryHref:"asTree.try.js"}},{type:"see",content:{apis:"Enumerable",method:"asEnumerable",index:1}}]}]}},19170:e=>{e.exports={title:"迭代器",contents:[{title:"什么是迭代器",descriptions:[]},{title:"ES6中的迭代器",descriptions:[]},{title:"迭代器的 asEnumerable 方法",descriptions:[{type:"description",content:"迭代器也存在 asEnumerable 方法, 同样返回一个 IEnumerable 对象. 由于遍历器的特殊性, 通过遍历器的 asEnumerable 方法获得的 IEnumerable 对象的元素只能被迭代一次, 或者其延迟执行的方法只能被执行一次"}]}]}},35687:e=>{e.exports={title:"插件",contents:[{title:"什么是插件",descriptions:[]},{title:"添加插件",descriptions:[]},{title:"移除插件",descriptions:[]}]}},10001:e=>{e.exports={title:"筛选器",contents:[{title:"什么是筛选器",descriptions:[{type:"description",content:"筛选器是一个判断输入参数是否满足条件的函数"},{type:"description",content:"通常一个筛选器接受一个参数值, 或者额外接受输入值所在的序列中的索引作为第二个参数, 返回一个 boolean 值表示该参数或与其索引是否满足指定的条件"},{type:"function",content:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"],optional:!0}]}}]}]}},13234:e=>{e.exports={title:"选择器",contents:[{title:"什么是选择器",descriptions:[{type:"description",content:"选择器是一个将输入值映射到一个输出值的函数"},{type:"description",content:"该函数接受一个或多个输入值, 有些情况下还接受输入值所在序列中的索引作为参数, 经过一系列自定义的运算, 最终返回一个对应的值, 返回值通常用来组成新的序列或进行其他运算"}]},{title:"一元选择器",descriptions:[{type:"function",content:{returns:{type:"any"},parameters:[{types:["any"],name:"element"},{types:["number"],name:"index",optional:!0}]}},{type:"see",content:{apis:"Enumerable.selectors",property:"default"}}]},{title:"二元选择器",descriptions:[{type:"function",content:{returns:{type:"any"},parameters:[{types:["any"],name:"first"},{types:["any"],name:"second"},{types:["number"],name:"index",optional:!0}]}}]},{title:"使用字符串/数字/符号代替一元选择器",descriptions:[{type:"description",content:"可以使用字符串、数字或符号代替一元选择器，以下实例展示字符串或数字代替的一元选择器与一元选择器的等价关系"},{type:"example",content:{type:"javascript",href:"1.js",tryHref:"1.try.js"}},{type:"example",content:{type:"javascript",href:"2.js",notTry:!0}},{type:"warning",content:"自 2.1.19 版本后才开始接受数字/符号参数"}]}]}},37753:e=>{e.exports={title:"设置器",contents:[{title:"什么是设置器",descriptions:[{type:"description",content:"设置器是一个将一个输入值设置到另一个输入值中的函数"},{type:"description",content:"该函数接受二个输入值, 将第二个参数的值设置到第一个参数的值中. 此方法不需要返回任何值"},{type:"warning",content:"自 2.1.23 版本后才能使用设置器"}]},{title:"使用字符串/数字/符号代替设置器",descriptions:[{type:"description",content:"可以使用字符串、数字或符号代替设置器，以下实例展示字符串或数字代替的设置器与设置器的等价关系"},{type:"example",content:{type:"javascript",href:"1.js",tryHref:"1.try.js"}}]}]}},59301:e=>{e.exports={title:"开始使用",contents:[{title:"可以使用 LINQ 中的一些方法",descriptions:[{type:"description",content:"获取到 IEnumerable 对象后既可以使用 LINQ 中提供的一些方法"},{type:"remark",content:"以下例子中展示了一些常用的 LINQ 功能"},{type:"example",content:{type:"javascript",href:"1.js"}},{type:"example",content:{type:"javascript",href:"2.js"}},{type:"see",content:{apis:"IEnumerable"}}]},{title:"可以使用原生 Array 的一些方法",descriptions:[{type:"description",content:"获取到 IEnumerable 对象后除了可以使用 LINQ 提供的一些方法的同时还可以使用原生 Array 提供的一些方法"},{type:"see",content:{apis:"IEnumerable"}}]}]}},34738:e=>{e.exports={icon:"",code:"install",title:"安装",contents:[{code:"addIn",title:"添加至项目",details:[{type:"example",runtime:"Node JS",scripts:[{type:"bash",script:"$ npm install --save linq-js"}]},{type:"example",runtime:"Bower",scripts:[{type:"bash",script:"$ bower install js-linq"}]}]},{code:"require",title:"引入",details:[{type:"example",descriptions:["模块化项目中可使用 require 引入"],scripts:[{type:"javascript",script:"const Enumerable = require('linq-js');"}],remarks:["说明:本module依赖于ES6,建议项目在中使用ES6,以下案例中将均使用ES6写法. 当然你依然可以选择使用传统的ES5的写法,比如:使用 function 代替 => 函数"]},{type:"example",descriptions:["也可以直接在 html 中引入"],scripts:[{type:"<script>",src:"libs/linq-js.min.js"},{type:"<script>",src:"libs/linq-js.js"}]}]}]}},41426:e=>{e.exports={code:"introduction",title:"简介",shields:[{href:"https://github.com/wm123450405/linqjs",image:"https://img.shields.io/github/release/wm123450405/linqjs.svg"},{href:"https://www.npmjs.com/package/linq-js",image:"https://img.shields.io/npm/v/linq-js.svg"},{href:"https://www.npmjs.com/package/linq-js",image:"https://img.shields.io/npm/dm/linq-js.svg"},{href:"https://travis-ci.org/wm123450405/linqjs",image:"https://img.shields.io/travis/wm123450405/linqjs.svg"}],contents:["对 JavaScript 中原生数组、对象进行扩展, 提供了一些对数据的操作方法.","包括对数组结构、树形结构、对象结构等数据进行 查询,排序,连接,合并,分组,分段,转换,遍历 等一系列功能.","可以用精炼和易懂的代码实现比较复杂的操作.","&nbsp;","一开始,在 ES5 的时代,我觉得 js 对数组的操作实在太繁琐了. 可能正是这种繁琐才有了像 underscore 这样优秀的 js 库的出现.","我本不是做前端出身的,我觉得其他语言对于数组或列表的操作要比 js 好用很多,提供了大量的方法和功能. 于是最早参考的 C#中的功能实现了一些方法, 就有了1.0版本.","后来,ES6 发布并普及开来,js 原生数组也增加了很多好用的功能,但是这还远远不够.","于是我又翻出了我的代码用 ES6 重写, 有了2.1版本, 并发布至npm上. 这一次我又借鉴了另外一些语言中的部分特性, 比如 php.我想我后面可能再会添加一些其他语言或框架类似的功能,比如 Java,Python 等.","后来我在 stackoverflow 中看到很多人对于树形结构的操作提了很多的问题,我像我的工具包应该要可以为他们提供帮助.于是在最新的几个版本中我加入了对树形结构的一些操作.","&nbsp;",'穷人,求捐赠: <a href="http://git.oschina.net/wm123450405/linqjs">http://git.oschina.net/wm123450405/linqjs</a> . 当然你的star也是对我最大的支持']}},73231:e=>{e.exports={name:"中文版"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
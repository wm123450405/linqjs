/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r={96776:(e,t,r)=>{(e.exports=r(9252)(void 0)).push([e.id,"/* BASICS */\n\n.CodeMirror {\n  /* Set height, width, borders, and global font properties here */\n  font-family: monospace;\n  height: 300px;\n  color: black;\n  direction: ltr;\n}\n\n/* PADDING */\n\n.CodeMirror-lines {\n  padding: 4px 0; /* Vertical padding around content */\n}\n.CodeMirror pre.CodeMirror-line,\n.CodeMirror pre.CodeMirror-line-like {\n  padding: 0 4px; /* Horizontal padding of content */\n}\n\n.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\n  background-color: white; /* The little square between H and V scrollbars */\n}\n\n/* GUTTER */\n\n.CodeMirror-gutters {\n  border-right: 1px solid #ddd;\n  background-color: #f7f7f7;\n  white-space: nowrap;\n}\n.CodeMirror-linenumbers {}\n.CodeMirror-linenumber {\n  padding: 0 3px 0 5px;\n  min-width: 20px;\n  text-align: right;\n  color: #999;\n  white-space: nowrap;\n}\n\n.CodeMirror-guttermarker { color: black; }\n.CodeMirror-guttermarker-subtle { color: #999; }\n\n/* CURSOR */\n\n.CodeMirror-cursor {\n  border-left: 1px solid black;\n  border-right: none;\n  width: 0;\n}\n/* Shown when moving in bi-directional text */\n.CodeMirror div.CodeMirror-secondarycursor {\n  border-left: 1px solid silver;\n}\n.cm-fat-cursor .CodeMirror-cursor {\n  width: auto;\n  border: 0 !important;\n  background: #7e7;\n}\n.cm-fat-cursor div.CodeMirror-cursors {\n  z-index: 1;\n}\n.cm-fat-cursor-mark {\n  background-color: rgba(20, 255, 20, 0.5);\n  -webkit-animation: blink 1.06s steps(1) infinite;\n  -moz-animation: blink 1.06s steps(1) infinite;\n  animation: blink 1.06s steps(1) infinite;\n}\n.cm-animate-fat-cursor {\n  width: auto;\n  border: 0;\n  -webkit-animation: blink 1.06s steps(1) infinite;\n  -moz-animation: blink 1.06s steps(1) infinite;\n  animation: blink 1.06s steps(1) infinite;\n  background-color: #7e7;\n}\n@-moz-keyframes blink {\n  0% {}\n  50% { background-color: transparent; }\n  100% {}\n}\n@-webkit-keyframes blink {\n  0% {}\n  50% { background-color: transparent; }\n  100% {}\n}\n@keyframes blink {\n  0% {}\n  50% { background-color: transparent; }\n  100% {}\n}\n\n/* Can style cursor different in overwrite (non-insert) mode */\n.CodeMirror-overwrite .CodeMirror-cursor {}\n\n.cm-tab { display: inline-block; text-decoration: inherit; }\n\n.CodeMirror-rulers {\n  position: absolute;\n  left: 0; right: 0; top: -50px; bottom: 0;\n  overflow: hidden;\n}\n.CodeMirror-ruler {\n  border-left: 1px solid #ccc;\n  top: 0; bottom: 0;\n  position: absolute;\n}\n\n/* DEFAULT THEME */\n\n.cm-s-default .cm-header {color: blue;}\n.cm-s-default .cm-quote {color: #090;}\n.cm-negative {color: #d44;}\n.cm-positive {color: #292;}\n.cm-header, .cm-strong {font-weight: bold;}\n.cm-em {font-style: italic;}\n.cm-link {text-decoration: underline;}\n.cm-strikethrough {text-decoration: line-through;}\n\n.cm-s-default .cm-keyword {color: #708;}\n.cm-s-default .cm-atom {color: #219;}\n.cm-s-default .cm-number {color: #164;}\n.cm-s-default .cm-def {color: #00f;}\n.cm-s-default .cm-variable,\n.cm-s-default .cm-punctuation,\n.cm-s-default .cm-property,\n.cm-s-default .cm-operator {}\n.cm-s-default .cm-variable-2 {color: #05a;}\n.cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}\n.cm-s-default .cm-comment {color: #a50;}\n.cm-s-default .cm-string {color: #a11;}\n.cm-s-default .cm-string-2 {color: #f50;}\n.cm-s-default .cm-meta {color: #555;}\n.cm-s-default .cm-qualifier {color: #555;}\n.cm-s-default .cm-builtin {color: #30a;}\n.cm-s-default .cm-bracket {color: #997;}\n.cm-s-default .cm-tag {color: #170;}\n.cm-s-default .cm-attribute {color: #00c;}\n.cm-s-default .cm-hr {color: #999;}\n.cm-s-default .cm-link {color: #00c;}\n\n.cm-s-default .cm-error {color: #f00;}\n.cm-invalidchar {color: #f00;}\n\n.CodeMirror-composing { border-bottom: 2px solid; }\n\n/* Default styles for common addons */\n\ndiv.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}\ndiv.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}\n.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }\n.CodeMirror-activeline-background {background: #e8f2ff;}\n\n/* STOP */\n\n/* The rest of this file contains styles related to the mechanics of\n   the editor. You probably shouldn't touch them. */\n\n.CodeMirror {\n  position: relative;\n  overflow: hidden;\n  background: white;\n}\n\n.CodeMirror-scroll {\n  overflow: scroll !important; /* Things will break if this is overridden */\n  /* 50px is the magic margin used to hide the element's real scrollbars */\n  /* See overflow: hidden in .CodeMirror */\n  margin-bottom: -50px; margin-right: -50px;\n  padding-bottom: 50px;\n  height: 100%;\n  outline: none; /* Prevent dragging from highlighting the element */\n  position: relative;\n}\n.CodeMirror-sizer {\n  position: relative;\n  border-right: 50px solid transparent;\n}\n\n/* The fake, visible scrollbars. Used to force redraw during scrolling\n   before actual scrolling happens, thus preventing shaking and\n   flickering artifacts. */\n.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\n  position: absolute;\n  z-index: 6;\n  display: none;\n  outline: none;\n}\n.CodeMirror-vscrollbar {\n  right: 0; top: 0;\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n.CodeMirror-hscrollbar {\n  bottom: 0; left: 0;\n  overflow-y: hidden;\n  overflow-x: scroll;\n}\n.CodeMirror-scrollbar-filler {\n  right: 0; bottom: 0;\n}\n.CodeMirror-gutter-filler {\n  left: 0; bottom: 0;\n}\n\n.CodeMirror-gutters {\n  position: absolute; left: 0; top: 0;\n  min-height: 100%;\n  z-index: 3;\n}\n.CodeMirror-gutter {\n  white-space: normal;\n  height: 100%;\n  display: inline-block;\n  vertical-align: top;\n  margin-bottom: -50px;\n}\n.CodeMirror-gutter-wrapper {\n  position: absolute;\n  z-index: 4;\n  background: none !important;\n  border: none !important;\n}\n.CodeMirror-gutter-background {\n  position: absolute;\n  top: 0; bottom: 0;\n  z-index: 4;\n}\n.CodeMirror-gutter-elt {\n  position: absolute;\n  cursor: default;\n  z-index: 4;\n}\n.CodeMirror-gutter-wrapper ::selection { background-color: transparent }\n.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }\n\n.CodeMirror-lines {\n  cursor: text;\n  min-height: 1px; /* prevents collapsing before first draw */\n}\n.CodeMirror pre.CodeMirror-line,\n.CodeMirror pre.CodeMirror-line-like {\n  /* Reset some styles that the rest of the page might have set */\n  -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;\n  border-width: 0;\n  background: transparent;\n  font-family: inherit;\n  font-size: inherit;\n  margin: 0;\n  white-space: pre;\n  word-wrap: normal;\n  line-height: inherit;\n  color: inherit;\n  z-index: 2;\n  position: relative;\n  overflow: visible;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-font-variant-ligatures: contextual;\n  font-variant-ligatures: contextual;\n}\n.CodeMirror-wrap pre.CodeMirror-line,\n.CodeMirror-wrap pre.CodeMirror-line-like {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  word-break: normal;\n}\n\n.CodeMirror-linebackground {\n  position: absolute;\n  left: 0; right: 0; top: 0; bottom: 0;\n  z-index: 0;\n}\n\n.CodeMirror-linewidget {\n  position: relative;\n  z-index: 2;\n  padding: 0.1px; /* Force widget margins to stay inside of the container */\n}\n\n.CodeMirror-widget {}\n\n.CodeMirror-rtl pre { direction: rtl; }\n\n.CodeMirror-code {\n  outline: none;\n}\n\n/* Force content-box sizing for the elements where we expect it */\n.CodeMirror-scroll,\n.CodeMirror-sizer,\n.CodeMirror-gutter,\n.CodeMirror-gutters,\n.CodeMirror-linenumber {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n}\n\n.CodeMirror-measure {\n  position: absolute;\n  width: 100%;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n\n.CodeMirror-cursor {\n  position: absolute;\n  pointer-events: none;\n}\n.CodeMirror-measure pre { position: static; }\n\ndiv.CodeMirror-cursors {\n  visibility: hidden;\n  position: relative;\n  z-index: 3;\n}\ndiv.CodeMirror-dragcursors {\n  visibility: visible;\n}\n\n.CodeMirror-focused div.CodeMirror-cursors {\n  visibility: visible;\n}\n\n.CodeMirror-selected { background: #d9d9d9; }\n.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }\n.CodeMirror-crosshair { cursor: crosshair; }\n.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }\n.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }\n\n.cm-searching {\n  background-color: #ffa;\n  background-color: rgba(255, 255, 0, .4);\n}\n\n/* Used to force a border model for a node */\n.cm-force-border { padding-right: .1px; }\n\n@media print {\n  /* Hide the cursor when printing */\n  .CodeMirror div.CodeMirror-cursors {\n    visibility: hidden;\n  }\n}\n\n/* See issue #2901 */\n.cm-tab-wrap-hack:after { content: ''; }\n\n/* Help users use markselection to safely style text background */\nspan.CodeMirror-selectedtext { background: none; }\n",""])},7557:(e,t,r)=>{(t=e.exports=r(9252)(void 0)).i(r(96776),""),t.i(r(98918),""),t.push([e.id,'a{cursor:pointer}img{border:0}pre{padding:0;word-break:normal;word-wrap:normal}pre>code{white-space:pre;padding:13.5px}pre>code.hljs{padding:13.5px}code{white-space:nowrap;overflow:auto;padding:5px;background-color:#272822}.hljs.inline{white-space:normal;vertical-align:middle;display:inline-block;margin-left:5px}body{position:absolute;height:100%;width:100%}#app{height:100%}.try{position:fixed;bottom:0.2em;right:0.2em;height:2em;background-color:white;z-index:9999}.try.active{left:0.2em;width:auto;height:30em;padding:0.5em;transition:height .4s;box-shadow:0 -2px 5px -2px black}.try.active>.code,.try.active>.CodeMirror{display:block}.try.active>.result{width:49%}.try.active>.result>.btns>*{display:inline-block}.try.active>.result>.btns>.expand{display:none}.try.active>.result>.list{display:block}.try>.code,.try>.CodeMirror{float:left;width:49%;height:29em;display:none;border:1px solid lightgray;font-family:Menlo,Monaco,Consolas,"Courier New",monospace}.try>.result{float:right;width:100%}.try>.result>.btns>*{word-break:keep-all;white-space:nowrap;display:none}.try>.result>.btns>.btn{padding:0.2em 0.5em;cursor:pointer}.try>.result>.btns>.expand{display:inline-block}.try>.result>.list{height:27em;overflow:auto;list-style:none;display:none;padding:0.5em 0}.try>.result>.list>li{font-size:12px;border-bottom:1px solid #f0f0f0;color:#222222}.try>.result>.list>li>pre{padding:0;margin:0;display:inline-block;border:0;border-radius:0;font-size:12px;background:none;line-height:1;overflow:inherit;color:#222222}.try>.result>.list>li:first-child{border-top:1px solid #f0f0f0}.try>.result>.list>li.result{color:#808080}.try>.result>.list>li.result>pre{color:#808080}.try>.result>.list>li.error{color:#ff0000}.try>.result>.list>li.error>pre{color:#ff0000}@media (max-width: 767px){.topbar{position:fixed;z-index:4;width:100%}.sidebar{position:fixed;z-index:3;bottom:0;top:52px}.sidebar+*{padding-left:65px;padding-top:52px}}@media (max-width: 767px){.navbar{margin-bottom:0}}.sidebar{height:100%;overflow:auto;background:white}.sidebar .list-group .list-group-item{padding:5px}@media (max-width: 767px){.sidebar .list-group .list-group-item{padding:5px 0}}.sidebar .panel{border-radius:0;border-bottom-width:0}.sidebar .panel:first-child{border-top-left-radius:2px;border-top-right-radius:2px}.sidebar .panel:last-child{border-bottom-left-radius:2px;border-bottom-right-radius:2px;border-bottom-width:1px}.sidebar .panel+.panel{margin-top:0}.sidebar .panel>.panel-heading a>i.first-word{border:1px solid #337ab7;border-radius:2px}.sidebar .panel>.panel-heading a .caret{transform:rotateZ(0deg);transition:transform 0.3s}.sidebar .panel>.panel-heading a.collapsed .caret{transform:rotateZ(-90deg)}.sidebar .panel>.panel-heading+.list-group>.list-group-item{padding-left:30px}.sidebar .panel>.panel-heading+.list-group>.list-group-item:first-child{border-top-width:1px}@media (max-width: 767px){.sidebar{width:50px;border-right:1px solid #e7e7e7;transition:width 0.4s}.sidebar.opened{border-right:0;width:100%}.sidebar.opened .panel{margin-bottom:0;border-bottom-width:1px}.sidebar.opened .panel>.panel-heading>a>span{display:inline-block}.sidebar.closed .panel>.panel-heading+.list-group{position:fixed;left:50px;right:0;top:52px;height:auto !important;overflow:hidden;background-color:white;transition:bottom 0.4s;z-index:1}.sidebar.closed .panel>.panel-heading+.list-group.collapse{bottom:100%}.sidebar.closed .panel>.panel-heading+.list-group.collapsing{bottom:100%;z-index:2}.sidebar.closed .panel>.panel-heading+.list-group.collapse.in{bottom:0}.sidebar.closed .panel>.panel-heading+.list-group>.list-group-item:first-child{border-top-width:0}.sidebar .panel{border-width:0;margin-bottom:1px;box-shadow:0 0}.sidebar .panel:last-child{border-bottom-width:0}.sidebar .panel>.panel-heading{background-color:transparent;padding:15px 0}.sidebar .panel>.panel-heading>a{white-space:nowrap}.sidebar .panel>.panel-heading>a>i{margin-right:10px}.sidebar .panel>.panel-heading>a>span{display:none}.sidebar .panel>.panel-heading+.list-group>.list-group-item{padding-left:20px}}.icon-mark{display:inline-block;width:16px;height:16px;line-height:16px;text-align:center;border-radius:8px;cursor:default}.indent{padding-left:20px}.indent .indent{padding-left:40px}\n',""])},25620:(e,t,r)=>{(e.exports=r(9252)(void 0)).push([e.id,".shields{display:inline-block;height:16px;line-height:16px;color:white;font-size:12px;cursor:default}.shields>span:first-child{border-top-left-radius:3px;border-bottom-left-radius:3px}.shields>span:last-child{border-top-right-radius:3px;border-bottom-right-radius:3px}.shields>.shields-subject{padding:3px;text-shadow:0 1px 1px black;background:linear-gradient(#5f5f5f, #4d4d4d)}.shields>.shields-status{padding:3px;text-shadow:0 1px 1px gray}.shields>.shields-status.yellow{background:linear-gradient(#dbb327, #c9a115)}\n",""])},98918:(e,t,r)=>{(e.exports=r(9252)(void 0)).push([e.id,"\r\n.cm-s-hybird.CodeMirror { background: #1d1f21; color: #c5c8c6; }\r\n.cm-s-hybird div.CodeMirror-selected { background: #2D2D2D; }\r\n.cm-s-hybird .CodeMirror-line::selection, .cm-s-hybird .CodeMirror-line > span::selection, .cm-s-hybird .CodeMirror-line > span > span::selection { background: #373b41; }\r\n.cm-s-hybird .CodeMirror-line::-moz-selection, .cm-s-hybird .CodeMirror-line > span::-moz-selection, .cm-s-hybird .CodeMirror-line > span > span::-moz-selection { background: #373b41; }\r\n.cm-s-hybird .CodeMirror-gutters { background: #000000; border-right: 0; }\r\n.cm-s-hybird .CodeMirror-guttermarker { color: #f2777a; }\r\n.cm-s-hybird .CodeMirror-guttermarker-subtle { color: #777; }\r\n.cm-s-hybird .CodeMirror-linenumber { color: #515151; }\r\n.cm-s-hybird .CodeMirror-cursor { border-left: 1px solid #6A6A6A; }\r\n\r\n.cm-s-hybird span.cm-comment { color: #707880; }\r\n.cm-s-hybird span.cm-atom { color: #c66; }\r\n.cm-s-hybird span.cm-number { color: #c66; }\r\n\r\n.cm-s-hybird span.cm-property, .cm-s-hybird span.cm-attribute { color: #c5c8c6; }\r\n.cm-s-hybird span.cm-keyword { color: #81a2be; }\r\n.cm-s-hybird span.cm-string, .cm-s-hybird span.cm-string-2 { color: #b5bd68; }\r\n\r\n.cm-s-hybird span.cm-variable { color: #8abeb7; }\r\n.cm-s-hybird span.cm-variable-2 { color: #8abeb7; }\r\n.cm-s-hybird span.cm-def { color: #c5c8c6; }\r\n.cm-s-hybird span.cm-bracket { color: #CCCCCC; }\r\n.cm-s-hybird span.cm-tag { color: #81a2be; }\r\n.cm-s-hybird span.cm-link { color: #c66; }\r\n.cm-s-hybird span.cm-error { background: #f2777a; color: #6A6A6A; }\r\n\r\n.cm-s-hybird .CodeMirror-activeline-background { background: #343600; }\r\n.cm-s-hybird .CodeMirror-matchingbracket { text-decoration: underline; color: white !important; }",""])},9252:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t){var o=(i=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+new Buffer(JSON.stringify(i)).toString("base64")+" */"),a=n.sources.map((function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"}));return[r].concat(a).concat([o]).join("\n")}var i;return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r})).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(n[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&n[i[0]]||(r&&!i[2]?i[2]=r:r&&(i[2]="("+i[2]+") and ("+r+")"),t.push(i))}},t}},94470:e=>{"use strict";var t=Object.prototype.hasOwnProperty,r=Object.prototype.toString,n=Object.defineProperty,o=Object.getOwnPropertyDescriptor,a=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===r.call(e)},i=function(e){if(!e||"[object Object]"!==r.call(e))return!1;var n,o=t.call(e,"constructor"),a=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!a)return!1;for(n in e);return void 0===n||t.call(e,n)},u=function(e,t){n&&"__proto__"===t.name?n(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},l=function(e,r){if("__proto__"===r){if(!t.call(e,r))return;if(o)return o(e,r).value}return e[r]};e.exports=function e(){var t,r,n,o,s,c,f=arguments[0],p=1,h=arguments.length,d=!1;for("boolean"==typeof f&&(d=f,f=arguments[1]||{},p=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});p<h;++p)if(null!=(t=arguments[p]))for(r in t)n=l(f,r),f!==(o=l(t,r))&&(d&&o&&(i(o)||(s=a(o)))?(s?(s=!1,c=n&&a(n)?n:[]):c=n&&i(n)?n:{},u(f,{name:r,newValue:e(d,c,o)})):void 0!==o&&u(f,{name:r,newValue:o}));return f}},55259:e=>{e.exports=[{name:"English",code:"en-us"},{name:"中文版",code:"zh-cn"}]},84004:e=>{e.exports=["2.1.15","2.1.16","2.1.17","2.1.18","2.1.19","2.1.20","2.1.21","2.1.22","2.1.23","2.1.24","2.2.0.pre"]},6532:(e,t,r)=>{var n;e.exports=function e(t,o,a){function i(l,s){if(!o[l]){if(!t[l]){var c=void 0;if(!s&&c)return n(l,!0);if(u)return u(l,!0);throw(c=new Error("Cannot find module '"+l+"'")).code="MODULE_NOT_FOUND",r(25393)}c=o[l]={exports:{}},t[l][0].call(c.exports,(function(e){return i(t[l][1][e]||e)}),c,c.exports,e,t,o,a)}return o[l].exports}for(var u=void 0,l=0;l<a.length;l++)i(a[l]);return i}({1:[function(e,t,r){t.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n},t.exports.default=t.exports,t.exports.__esModule=!0},{}],2:[function(e,t,r){t.exports=function(e){if(Array.isArray(e))return e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],3:[function(e,t,r){var n=e("./arrayLikeToArray.js");t.exports=function(e){if(Array.isArray(e))return n(e)},t.exports.default=t.exports,t.exports.__esModule=!0},{"./arrayLikeToArray.js":1}],4:[function(e,t,r){t.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],5:[function(e,t,r){t.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t.exports.default=t.exports,t.exports.__esModule=!0},{}],6:[function(e,t,r){var n=e("./setPrototypeOf.js"),o=e("./isNativeReflectConstruct.js");function a(e,r,i){return o()?t.exports=a=Reflect.construct:t.exports=a=function(e,t,r){var o=[null];return o.push.apply(o,t),o=new(Function.bind.apply(e,o)),r&&n(o,r.prototype),o},t.exports.default=t.exports,t.exports.__esModule=!0,a.apply(null,arguments)}t.exports=a,t.exports.default=t.exports,t.exports.__esModule=!0},{"./isNativeReflectConstruct.js":14,"./setPrototypeOf.js":20}],7:[function(e,t,r){function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],8:[function(e,t,r){t.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],9:[function(e,t,r){var n=e("./superPropBase.js");function o(e,r,a){return"undefined"!=typeof Reflect&&Reflect.get?t.exports=o=Reflect.get:t.exports=o=function(e,t,r){if(e=n(e,t))return(t=Object.getOwnPropertyDescriptor(e,t)).get?t.get.call(r):t.value},t.exports.default=t.exports,t.exports.__esModule=!0,o(e,r,a||e)}t.exports=o,t.exports.default=t.exports,t.exports.__esModule=!0},{"./superPropBase.js":22}],10:[function(e,t,r){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},t.exports.default=t.exports,t.exports.__esModule=!0,n(e)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},{}],11:[function(e,t,r){var n=e("./setPrototypeOf.js");t.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)},t.exports.default=t.exports,t.exports.__esModule=!0},{"./setPrototypeOf.js":20}],12:[function(e,t,r){t.exports=function(e){return e&&e.__esModule?e:{default:e}},t.exports.default=t.exports,t.exports.__esModule=!0},{}],13:[function(e,t,r){t.exports=function(e){return-1!==Function.toString.call(e).indexOf("[native code]")},t.exports.default=t.exports,t.exports.__esModule=!0},{}],14:[function(e,t,r){t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}},t.exports.default=t.exports,t.exports.__esModule=!0},{}],15:[function(e,t,r){t.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},t.exports.default=t.exports,t.exports.__esModule=!0},{}],16:[function(e,t,r){t.exports=function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a=[],i=!0,u=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){u=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(u)throw o}}return a}},t.exports.default=t.exports,t.exports.__esModule=!0},{}],17:[function(e,t,r){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.default=t.exports,t.exports.__esModule=!0},{}],18:[function(e,t,r){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.default=t.exports,t.exports.__esModule=!0},{}],19:[function(e,t,r){var n=e("@babel/runtime/helpers/typeof").default,o=e("./assertThisInitialized.js");t.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?o(e):t},t.exports.default=t.exports,t.exports.__esModule=!0},{"./assertThisInitialized.js":4,"@babel/runtime/helpers/typeof":24}],20:[function(e,t,r){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},t.exports.default=t.exports,t.exports.__esModule=!0,n(e,r)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},{}],21:[function(e,t,r){var n=e("./arrayWithHoles.js"),o=e("./iterableToArrayLimit.js"),a=e("./unsupportedIterableToArray.js"),i=e("./nonIterableRest.js");t.exports=function(e,t){return n(e)||o(e,t)||a(e,t)||i()},t.exports.default=t.exports,t.exports.__esModule=!0},{"./arrayWithHoles.js":2,"./iterableToArrayLimit.js":16,"./nonIterableRest.js":17,"./unsupportedIterableToArray.js":25}],22:[function(e,t,r){var n=e("./getPrototypeOf.js");t.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e},t.exports.default=t.exports,t.exports.__esModule=!0},{"./getPrototypeOf.js":10}],23:[function(e,t,r){var n=e("./arrayWithoutHoles.js"),o=e("./iterableToArray.js"),a=e("./unsupportedIterableToArray.js"),i=e("./nonIterableSpread.js");t.exports=function(e){return n(e)||o(e)||a(e)||i()},t.exports.default=t.exports,t.exports.__esModule=!0},{"./arrayWithoutHoles.js":3,"./iterableToArray.js":15,"./nonIterableSpread.js":18,"./unsupportedIterableToArray.js":25}],24:[function(e,t,r){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(e){return typeof e}:t.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t.exports.default=t.exports,t.exports.__esModule=!0,n(e)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},{}],25:[function(e,t,r){var n=e("./arrayLikeToArray.js");t.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}},t.exports.default=t.exports,t.exports.__esModule=!0},{"./arrayLikeToArray.js":1}],26:[function(e,t,r){var n=e("./getPrototypeOf.js"),o=e("./setPrototypeOf.js"),a=e("./isNativeFunction.js"),i=e("./construct.js");function u(e){var r="function"==typeof Map?new Map:void 0;return t.exports=u=function(e){if(null===e||!a(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(e))return r.get(e);r.set(e,t)}function t(){return i(e,arguments,n(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o(t,e)},t.exports.default=t.exports,t.exports.__esModule=!0,u(e)}t.exports=u,t.exports.default=t.exports,t.exports.__esModule=!0},{"./construct.js":6,"./getPrototypeOf.js":10,"./isNativeFunction.js":13,"./setPrototypeOf.js":20}],27:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":30}],28:[function(e,t,r){"use strict";function n(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===l.call(e)}function o(e){if(e&&"[object Object]"===l.call(e)){var t,r=u.call(e,"constructor"),n=e.constructor&&e.constructor.prototype&&u.call(e.constructor.prototype,"isPrototypeOf");if(!e.constructor||r||n){for(t in e);return void 0===t||u.call(e,t)}}}function a(e,t){s&&"__proto__"===t.name?s(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue}function i(e,t){if("__proto__"===t){if(!u.call(e,t))return;if(c)return c(e,t).value}return e[t]}var u=Object.prototype.hasOwnProperty,l=Object.prototype.toString,s=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.exports=function e(){var t,r,u,l,s,c=arguments[0],f=1,p=arguments.length,h=!1;for("boolean"==typeof c&&(h=c,c=arguments[1]||{},f=2),(null==c||"object"!=typeof c&&"function"!=typeof c)&&(c={});f<p;++f)if(null!=(t=arguments[f]))for(r in t)s=i(c,r),c!==(u=i(t,r))&&(h&&u&&(o(u)||(l=n(u)))?a(c,{name:r,newValue:e(h,s=l?(l=!1,s&&n(s)?s:[]):s&&o(s)?s:{},u)}):void 0!==u&&a(c,{name:r,newValue:u}));return c}},{}],29:[function(e,t,r){var n,o;function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}t=t.exports={},function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var l,s=[],c=!1,f=-1;function p(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&h())}function h(){if(!c){var e=u(p);c=!0;for(var t=s.length;t;){for(l=s,s=[];++f<t;)l&&l[f].run();f=-1,t=s.length}l=null,c=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function b(){}t.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];s.push(new d(e,t)),1!==s.length||c||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},t.title="browser",t.browser=!0,t.env={},t.argv=[],t.version="",t.versions={},t.on=b,t.addListener=b,t.once=b,t.off=b,t.removeListener=b,t.removeAllListeners=b,t.emit=b,t.prependListener=b,t.prependOnceListener=b,t.listeners=function(e){return[]},t.binding=function(e){throw new Error("process.binding is not supported")},t.cwd=function(){return"/"},t.chdir=function(e){throw new Error("process.chdir is not supported")},t.umask=function(){return 0}},{}],30:[function(e,t,r){t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(r){l=function(e,t,r){return e[t]=r}}function s(e,r,n,o){var a,i,u,l;return r=r&&r.prototype instanceof m?r:m,r=Object.create(r.prototype),o=new S(o||[]),r._invoke=(a=e,i=n,u=o,l=f,function(e,r){if(l===h)throw new Error("Generator is already running");if(l===d){if("throw"===e)throw r;return O()}for(u.method=e,u.arg=r;;){var n=u.delegate;if(n){var o=function e(r,n){var o;if((o=r.iterator[n.method])===t){if(n.delegate=null,"throw"===n.method){if(r.iterator.return&&(n.method="return",n.arg=t,e(r,n),"throw"===n.method))return b;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return b}return"throw"===(o=c(o,r.iterator,n.arg)).type?(n.method="throw",n.arg=o.arg,n.delegate=null,b):(o=o.arg)?o.done?(n[r.resultName]=o.value,n.next=r.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,b):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,b)}(n,u);if(o){if(o===b)continue;return o}}if("next"===u.method)u.sent=u._sent=u.arg;else if("throw"===u.method){if(l===f)throw l=d,u.arg;u.dispatchException(u.arg)}else"return"===u.method&&u.abrupt("return",u.arg);if(l=h,"normal"===(o=c(a,i,u)).type){if(l=u.done?d:p,o.arg!==b)return{value:o.arg,done:u.done}}else"throw"===o.type&&(l=d,u.method="throw",u.arg=o.arg)}}),r}function c(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",b={};function m(){}function v(){}function y(){}var g={};g[a]=function(){return this},(o=(o=Object.getPrototypeOf)&&o(o(E([]))))&&o!==r&&n.call(o,a)&&(g=o);var x=y.prototype=m.prototype=Object.create(g);function C(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){var r;this._invoke=function(o,a){function i(){return new t((function(r,i){!function r(o,a,i,u){if("throw"!==(o=c(e[o],e,a)).type){var l=o.arg;return(a=l.value)&&"object"==typeof a&&n.call(a,"__await")?t.resolve(a.__await).then((function(e){r("next",e,i,u)}),(function(e){r("throw",e,i,u)})):t.resolve(a).then((function(e){l.value=e,i(l)}),(function(e){return r("throw",e,i,u)}))}u(o.arg)}(o,a,r,i)}))}return r=r?r.then(i,i):i()}}function w(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(w,this),this.reset(!0)}function E(e){if(e){if(r=e[a])return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r,o=-1;return(r=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r}).next=r}}return{next:O}}function O(){return{value:t,done:!0}}return((v.prototype=x.constructor=y).constructor=v).displayName=l(y,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){return!!(e="function"==typeof e&&e.constructor)&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},C(k.prototype),k.prototype[i]=function(){return this},e.AsyncIterator=k,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new k(s(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(x),l(x,u,"Generator"),x[a]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t,r=[];for(t in e)r.push(t);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=E,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(R),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;0<=a;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(l&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;0<=r;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}var i=(a=a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc?null:a)?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,b):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),b},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),R(r),b}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n,o=r.completion;return"throw"===o.type&&(n=o.arg,R(r)),n}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:E(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),b}},e}("object"==typeof t?t.exports:{});try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},{}],31:[function(e,t,r){"use strict";var n=(l=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/helpers/defineProperty")),o=l(e("@babel/runtime/regenerator"));function a(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){u=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e){if(e[Symbol.iterator])return e;if(e.asEnumerable)return e.asEnumerable();throw new J(e)}var l,s=e("./core/core"),c=e("./methods/methods"),f=e("./methods/defaultPredicate"),p=e("./methods/defaultFalsePredicate"),h=e("./methods/defaultSelector"),d=e("./methods/defaultSameComparer"),b=e("./methods/defaultEqualityComparer"),m=e("./methods/defaultStrictEqualityComparer"),v=e("./methods/defaultComparer"),y=e("./methods/defaultResultSelector"),g=e("./methods/defaultJoinSelector"),x=e("./methods/defaultKeySelector"),C=e("./methods/defaultValueSelector"),k=e("./methods/defaultParentSelector"),w=e("./methods/defaultIndexSelector"),R=e("./methods/defaultChildrenSelector"),S=e("./methods/defaultChildrenSetter"),E=e("./methods/defaultValueSetter"),O=e("./methods/defaultAction"),A=e("./methods/arrayComparer"),P=e("./methods/predicateComparer"),_=e("./methods/propertySetter"),I=e("./methods/propertySelector"),T=e("./methods/regexpPredicate"),$=e("./methods/defaultExistsPredicate"),j=e("./methods/notPredicate"),D=e("./methods/equalityPredicate"),q=e("./methods/selectorPredicate"),M=e("./methods/greaterComparer"),B=e("./methods/lessComparer"),N=e("./methods/ignoreCaseComparer"),z=e("./core/exceptions/NoSuchElementsException"),L=e("./core/exceptions/OutOfRangeException"),F=e("./core/exceptions/TooManyElementsException"),U=e("./core/exceptions/KeysForMultiElementsException"),V=e("./core/exceptions/NeedExecuteBeforeException"),J=e("./core/exceptions/NotEnumerableException"),H=e("./core/exceptions/PluginRepeatException"),W=e("./core/exceptions/PropertyExpressionInvalidException"),K=e("./core/exceptions/InvalidFunctionException"),G=e("./core/exceptions/NotAncestorOfException"),Y=e("./core/IComparable"),Z=e("./core/IEquatable");(l=function e(t){return e.asEnumerable(t)}).getEnumerator=function(e){return new X(u(e))},l.getIterator=function(e){return u(e)[Symbol.iterator]()},l.repeat=function(e){return new ee(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)},l.range=function(e,t){return new te(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:1)},l.between=function(e,t){return new Ge(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:1)},l.generate=function(e){return new Ye(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)},l.empty=function(){return new re},l.asEnumerable=function(e,t){return e.asEnumerable?e.asEnumerable(t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:C):new ne(e)},l.from=function(e,t){return this.asEnumerable(e,t)},l.toArray=function(e){return s.isArray(e)?e:(e=u(e),Array.from(e))},l.toDictionary=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:d,o=new je,i=0;e=u(e),t=c.asSelector(t),r=c.asSelector(r),n=c.asSameComparer(n);var l,s=a(e);try{for(s.s();!(l=s.n()).done;){var f=l.value,p=t(f,i);if(o.has(p,n))throw new U(p);o.set(p,r(f,i),n),i++}}catch(e){s.e(e)}finally{s.f()}return o},l.toLookup=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:d,o=new De,i=0;e=u(e),t=c.asSelector(t),r=c.asSelector(r),n=c.asSameComparer(n);var l,s=a(e);try{for(s.s();!(l=s.n()).done;){var f=l.value,p=t(f,i);o.has(p,n)?o.get(p,n).push(r(f,i)):o.set(p,[r(f,i)],n),i++}}catch(e){s.e(e)}finally{s.f()}return o},l.toPreOrder=function(e){return new it(u(e))},l.toInOrder=function(e){return new ut(u(e))},l.toPostOrder=function(e){return new lt(u(e))},l.where=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f;return new oe(u(e),t)},l.select=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;return new ae(u(e),t)},l.distinct=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b;return new ue(u(e),t)},l.except=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;return new le(u(e),t,r)},l.union=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;return new se(u(e),t,r)},l.intersect=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;return new ce(u(e),t,r)},l.ofType=function(e,t){return new fe(u(e),t)},l.skip=function(e,t){return new pe(u(e),t)},l.skipWhile=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f;return new he(u(e),t)},l.skipSame=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d;return new de(u(e),t)},l.skipProportion=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return new be(u(e),t)},l.take=function(e,t){return new me(u(e),t)},l.takeWhile=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f;return new ve(u(e),t)},l.takeSame=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d;return new ye(u(e),t)},l.takeProportion=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return new ge(u(e),t)},l.orderBy=l.sorted=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return new Ce(u(e),t,r)},l.orderByDescending=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return new ke(u(e),t,r)},l.thenBy=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return e instanceof xe?new we(e,t,r):new Ce(u(e),t,r)},l.thenByDescending=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return e instanceof xe?new Re(e,t,r):new ke(u(e),t,r)},l.groupBy=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:b;return new Se(u(e),t,r,n,o)},l.selectMany=l.flatMap=l.flatten=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:y;return new Ee(u(e),t,r)},l.join=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:g,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h,a=5<arguments.length&&void 0!==arguments[5]?arguments[5]:b;return 2===arguments.length&&s.array$join?s.isArray(e)?s.array$join.call(e,t):s.array$join.call(this.toArray(u(e)),t):new Oe(u(e),u(t),r,n,o,a)},l.innerJoin=l.joining=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:g,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h,a=5<arguments.length&&void 0!==arguments[5]?arguments[5]:b;return new Oe(u(e),u(t),r,n,o,a)},l.leftJoin=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:g,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h,a=5<arguments.length&&void 0!==arguments[5]?arguments[5]:b;return new Ae(u(e),u(t),r,n,o,a)},l.rightJoin=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:g,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h,a=5<arguments.length&&void 0!==arguments[5]?arguments[5]:b;return new Pe(u(e),u(t),r,n,o,a)},l.groupJoin=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:g,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h,a=5<arguments.length&&void 0!==arguments[5]?arguments[5]:b;return new _e(u(e),u(t),r,n,o,a)},l.reverse=function(e){return new Ie(u(e))},l.zip=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:y;return new Te(u(e),t,r)},l.every=function(e,t,r){return s.isArray(e)&&s.array$every?s.array$every.call(e,t,r):this.all(e,(function(n,o){return t.call(r,n,o,e)}))},l.find=function(e,t,r){return s.isArray(e)&&s.array$find?s.array$find.call(e,t,r):this.firstOrDefault(e,void 0,(function(n,o){return t.call(r,n,o,e)}))},l.includes=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return s.isArray(e)&&s.array$includes?s.array$includes.call(e,t,r):s.isString(e)&&s.string$includes?s.string$includes.call(e,t,r):this.skip(e,r).contains(t)},l.map=function(e,t,r){return this.select(e,(function(n,o){return t.call(r,n,o,e)}))},l.filter=function(e,t,r){return this.where(e,(function(n,o){return t.call(r,n,o,e)}))},l.concat=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return new(Function.prototype.bind.apply(ie,s.array$concat.call([null],[u(e)],r)))},l.pop=function(e){if(s.isArray(e)&&s.array$pop)return s.array$pop.call(e);e=u(e);var t=this.toArray(e);return s.setProperty(e,Symbol.iterator,o.default.mark((function e(){var r,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=t.length-1,n=0;case 2:if(n<r)return e.next=5,t[n];e.next=8;break;case 5:n++,e.next=2;break;case 8:case"end":return e.stop()}}),e)}))),t[t.length-1]},l.push=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(s.isArray(e)&&s.array$push)return s.array$push.apply(e,r);e=u(e);var a=this.toArray(e);return s.setProperty(e,Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(a,"t0",1);case 1:return e.delegateYield(r,"t1",2);case 2:case"end":return e.stop()}}),e)}))),a.length+r.length},l.shift=function(e){if(s.isArray(e)&&s.array$shift)return s.array$shift.call(e);e=u(e);var t=(0,n.default)({},Symbol.iterator,e[Symbol.iterator]);return s.setProperty(e,Symbol.iterator,o.default.mark((function e(){var r,n,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=0,n=a(t),e.prev=2,n.s();case 4:if((i=n.n()).done){e.next=12;break}if(i=i.value,0<r)return e.next=9,i;e.next=9;break;case 9:r++;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),n.e(e.t0);case 17:return e.prev=17,n.f(),e.finish(17);case 20:case"end":return e.stop()}}),e,null,[[2,14,17,20]])}))),this.firstOrDefault(t)},l.unshift=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(s.isArray(e)&&s.array$unshift)return s.array$unshift.apply(e,r);e=u(e);var a=this.toArray(e);return s.setProperty(e,Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(r,"t0",1);case 1:return e.delegateYield(a,"t1",2);case 2:case"end":return e.stop()}}),e)}))),r.length+a.length},l.reduce=function(e,t,r){return s.isArray(e)&&s.array$reduce?s.array$reduce.call(e,t,r):this.aggregate(e,r,(function(r,n,o){return t(r,n,o,e)}))},l.reduceRight=function(e,t,r){return s.isArray(e)&&s.array$reduceRight?s.array$reduceRight.call(e,t,r):this.reverse(e).aggregate(r,(function(r,n,o){return t(r,n,o,e)}))},l.some=function(e,t,r){return s.isArray(e)&&s.array$some?s.array$some.call(e,t,r):this.any(e,(function(n,o){return t.call(r,n,o,e)}))},l.slice=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0;return new qe(u(e),t,r)},l.splice=function(e,t,r){for(var n,o=arguments.length,a=new Array(3<o?o-3:0),i=3;i<o;i++)a[i-3]=arguments[i];return s.isArray(e)&&s.array$splice?(n=s.array$splice).call.apply(n,[e,t,r].concat(a)):new(Function.prototype.bind.apply(Me,s.array$concat.call([null],[u(e),t,r],a)))},l.fill=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1/0;return new Be(u(e),t,r,n)},l.sort=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:v;return new Ne(u(e),t)},l.copyWithin=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1/0;return new ze(u(e),t,r,n)},l.defaultIfEmpty=function(e,t){return this.isEmpty(e)?new $e(t):this.asEnumerable(e)},l.all=l.allMatch=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,r=0;e=u(e),t=c.asPredicate(t);var n,o=a(e);try{for(o.s();!(n=o.n()).done;)if(!t(n.value,r++))return!1}catch(e){o.e(e)}finally{o.f()}return!0},l.any=l.anyMatch=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,r=0;e=u(e),t=c.asPredicate(t);var n,o=a(e);try{for(o.s();!(n=o.n()).done;)if(t(n.value,r++))return!0}catch(e){o.e(e)}finally{o.f()}return!1},l.isEmpty=function(e){return!this.any(e)},l.sequenceEqual=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;e=u(e),t=u(t),r=c.asEqualityComparer(r);for(var n,o,a=e[Symbol.iterator](),i=t[Symbol.iterator]();!((n=a.next()).done&(o=i.next()).done);){if(n.done!==o.done)return!1;if(!r(n.value,o.value))return!1}return!0},l.first=function(e){if((n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f)===f&&s.isProto(e)){if(0<e.length)return e[0];throw new z}var t=0;e=u(e);var r,n=c.asPredicate(n),o=a(e);try{for(o.s();!(r=o.n()).done;){var i=r.value;if(n(i,t++))return i}}catch(e){o.e(e)}finally{o.f()}throw new z},l.firstOrDefault=function(e,t){if((o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f)===f&&s.isProto(e))return 0<e.length?e[0]:t;var r=0;e=u(e);var n,o=c.asPredicate(o),i=a(e);try{for(i.s();!(n=i.n()).done;){var l=n.value;if(o(l,r++))return l}}catch(e){i.e(e)}finally{i.f()}return t},l.last=function(e){if((i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f)===f&&s.isProto(e)){if(0<e.length)return e[e.length-1];throw new z}var t,r=!1,n=0;e=u(e);var o,i=c.asPredicate(i),l=a(e);try{for(l.s();!(o=l.n()).done;){var p=o.value;i(p,n++)&&(t=p,r=!0)}}catch(e){l.e(e)}finally{l.f()}if(r)return t;throw new z},l.lastOrDefault=function(e,t){if((l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f)===f&&s.isProto(e))return 0<e.length?e[e.length-1]:t;var r,n=!1,o=0;e=u(e);var i,l=c.asPredicate(l),p=a(e);try{for(p.s();!(i=p.n()).done;){var h=i.value;l(h,o++)&&(r=h,n=!0)}}catch(e){p.e(e)}finally{p.f()}return n?r:t},l.single=function(e){if((i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f)===f&&s.isProto(e)){if(1===e.length)return e[0];throw new(0===e.length?z:F)}var t,r=0,n=0;e=u(e);var o,i=c.asPredicate(i),l=a(e);try{for(l.s();!(o=l.n()).done;){var p=o.value;if(i(p,n++)&&(t=p,2<=++r))break}}catch(e){l.e(e)}finally{l.f()}if(1===r)return t;throw new(0===r?z:F)},l.singleOrDefault=function(e,t){if((l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f)===f&&s.isProto(e)){if(1===e.length)return e[0];if(0===e.length)return t;throw new F}var r,n=0,o=0;e=u(e);var i,l=c.asPredicate(l),p=a(e);try{for(p.s();!(i=p.n()).done;){var h=i.value;if(l(h,o++)&&(r=h,2<=++n))break}}catch(e){p.e(e)}finally{p.f()}if(1===n)return r;if(0===n)return t;throw new F},l.count=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,r=0,n=0;e=u(e),t=c.asPredicate(t);var o,i=a(e);try{for(i.s();!(o=i.n()).done;)t(o.value,n++)&&r++}catch(e){i.e(e)}finally{i.f()}return r},l.proportion=function(e){if((i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f)===f)return 1;var t=0,r=0,n=0;e=u(e);var o,i=c.asPredicate(i),l=a(e);try{for(l.s();!(o=l.n()).done;)i(o.value,n++)&&r++,t++}catch(e){l.e(e)}finally{l.f()}return 0===t?1:r/t},l.aggregate=function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=0;e=u(e),n=c.asSelector(n);var i,l=a(e);try{for(l.s();!(i=l.n()).done;)t=r(t,i.value,o++)}catch(e){l.e(e)}finally{l.f()}return n(t)},l.sum=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=0,n=0;e=u(e),t=c.asSelector(t);var o,i=a(e);try{for(i.s();!(o=i.n()).done;){var l=o.value;if(r+=parseFloat(t(l,n++)),isNaN(r))return r}}catch(e){i.e(e)}finally{i.f()}return r},l.product=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=1,n=0;e=u(e),t=c.asSelector(t);var o,i=a(e);try{for(i.s();!(o=i.n()).done;){var l=o.value;if(r*=parseFloat(t(l,n++)),isNaN(r))return r}}catch(e){i.e(e)}finally{i.f()}return 0===n?NaN:r},l.max=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v,n=!1,o=!0,i=0;e=u(e),t=c.asSelector(t),r=c.asComparer(r);var l,s=a(e);try{for(s.s();!(l=s.n()).done;){var f=t(f=l.value,i++);n=!o&&0<r(n,f)?n:f,o=!1}}catch(e){s.e(e)}finally{s.f()}if(o)throw new z;return n},l.maxOrDefault=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:v,o=!1,i=!0,l=0;e=u(e),r=c.asSelector(r),n=c.asComparer(n);var s,f=a(e);try{for(f.s();!(s=f.n()).done;){var p=r(p=s.value,l++);o=!i&&0<n(o,p)?o:p,i=!1}}catch(e){f.e(e)}finally{f.f()}return i?t:o},l.min=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v,n=!1,o=!0,i=0;e=u(e),t=c.asSelector(t),r=c.asComparer(r);var l,s=a(e);try{for(s.s();!(l=s.n()).done;){var f=t(f=l.value,i++);n=!o&&r(n,f)<0?n:f,o=!1}}catch(e){s.e(e)}finally{s.f()}if(o)throw new z;return n},l.minOrDefault=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:v,o=!1,i=!0,l=0;e=u(e),r=c.asSelector(r),n=c.asComparer(n);var s,f=a(e);try{for(f.s();!(s=f.n()).done;){var p=r(p=s.value,l++);o=!i&&n(o,p)<0?o:p,i=!1}}catch(e){f.e(e)}finally{f.f()}if(i)throw t;return o},l.average=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=0,n=0,o=0;e=u(e),t=c.asSelector(t);var i,l=a(e);try{for(l.s();!(i=l.n()).done;){var s=i.value;if(r+=parseFloat(t(s,o++)),isNaN(r))return r;n++}}catch(e){l.e(e)}finally{l.f()}if(0!==n)return r/n;throw new z},l.contains=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;e=u(e),r=c.asEqualityComparer(r);var n,o=a(e);try{for(o.s();!(n=o.n()).done;)if(r(n.value,t))return!0}catch(e){o.e(e)}finally{o.f()}return!1},l.elementAt=function(e,t){if(s.isProto(e)){if(0<=t&&t<e.length)return e[t];throw new L(t)}if(0<=t){var r,n=a(e=u(e));try{for(n.s();!(r=n.n()).done;){var o=r.value;if(0==t--)return o}}catch(e){n.e(e)}finally{n.f()}}throw new L(t)},l.elementAtOrDefault=function(e,t,r){if(s.isProto(e))return 0<=t&&t<e.length?e[t]:r;if(0<=t){var n,o=a(e=u(e));try{for(o.s();!(n=o.n()).done;){var i=n.value;if(0==t--)return i}}catch(e){o.e(e)}finally{o.f()}}return r},l.indexOf=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if((i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:m)===m&&s.isArray(e)&&s.array$indexOf)return s.array$indexOf.call(e,t,r);if(i===m&&s.isString(e)&&s.string$indexOf)return s.string$indexOf.call(e,t,r);var n=0;e=u(e);var o,i=c.asStrictEqualityComparer(i),l=a(e);try{for(l.s();!(o=l.n()).done;){var f=o.value;if(r<=n&&i(f,t))return n;n++}}catch(e){l.e(e)}finally{l.f()}return-1},l.findIndex=function(e,t,r){if(s.isArray(e)&&s.array$findIndex)return s.array$findIndex.call(e,t,r);var n=0;e=u(e),t=c.asPredicate(t);var o,i,l=a(e);try{for(l.s();!(o=l.n()).done;){var f=o.value;if(i=n,t.call(r,f,i,e))return n;n++}}catch(e){l.e(e)}finally{l.f()}return-1},l.findLast=function(e,t,r){return this.lastOrDefault(e,void 0,(function(n,o){return t.call(r,n,o,e)}))},l.lastIndexOf=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:m;if(n===m&&s.isArray(e)&&s.array$lastIndexOf)return s.array$lastIndexOf.call(e,t,r);if(n===m&&s.isString(e)&&s.string$lastIndexOf)return s.string$lastIndexOf.call(e,t,r);e=this.toArray(u(e)),n=c.asStrictEqualityComparer(n),r<0&&(r=e.length+r);for(var o=Math.min(r,e.length-1);0<=o;o--)if(n(e[o],t))return o;return-1},l.findLastIndex=function(e,t,r){e=this.toArray(u(e)),t=c.asPredicate(t);for(var n,o=e.length-1;0<=o;o--){var a=e[o];if(n=o,t.call(r,a,n,e))return o}return-1},l.forEach=function(e){var t,r,n,o,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:O,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:void 0;if(s.isArray(e)&&s.array$forEach)s.array$forEach.call(e,i,l);else if(e instanceof Q){var c,f=a(e);try{for(f.s();!(c=f.n()).done;){var p=c.value;n=p.value,o=p.key,i.call(l,n,o,e)}}catch(e){f.e(e)}finally{f.f()}}else{var h,d=0,b=a(e=u(e));try{for(b.s();!(h=b.n()).done;)t=h.value,r=d++,i.call(l,t,r,e)}catch(e){b.e(e)}finally{b.f()}}},l.each=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:O;return new et(u(e),t)},l.indices=function(e,t){return new tt(u(e),u(t))},l.permutation=function(e,t){return new(2<arguments.length&&void 0!==arguments[2]&&arguments[2]?nt:rt)(u(e),t)},l.combination=function(e,t){return new(2<arguments.length&&void 0!==arguments[2]&&arguments[2]?at:ot)(u(e),t)},l.chunk=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return new Le(u(e),t,r)},l.split=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:p;return new Fe(u(e),t)},l.nearSplit=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:p;return new Ue(u(e),t)},l.leftPad=function(e,t,r){return new Ve(u(e),t,r)},l.rightPad=function(e,t,r){return new Je(u(e),t,r)},l.rand=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return new He(u(e),t)},l.random=function(e){if((e=this.toArray(u(e))).length)return e[Math.floor(Math.random()*e.length)];throw new z},l.randomOrDefault=function(e,t){return(e=this.toArray(u(e))).length?e[Math.floor(Math.random()*e.length)]:t},l.wipe=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return new We(u(e),t,r)},l.nearBy=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:b;return new Ke(u(e),t,r,n,o)},l.combine=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:k,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:x,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:b;return new Xe(u(e),t,r,n,o)},l.separate=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:R,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:C;return new Ze(u(e),t,r)},l.isSub=function(e,t){var r,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,o=a(e=u(e));try{for(o.s();!(r=o.n()).done;){var i=r.value;if(!this.contains(t,i,n))return!1}}catch(e){o.e(e)}finally{o.f()}return!0},l.isSuper=function(e,t){return this.isSub(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b)},l.symmetric=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;return new Qe(u(e),u(t),r)},l.conflict=function(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,o=[],i=0,l=(r=c.asSelector(r),n=c.asEqualityComparer(n),a(u(e)));try{for(l.s();!(t=l.n()).done;){var s,f=r(t.value,i),p=a(o);try{for(p.s();!(s=p.n()).done;)if(n(f,s.value))return!0}catch(e){p.e(e)}finally{p.f()}o.push(f),i++}}catch(e){l.e(e)}finally{l.f()}return!1},s.defineProperty(l,"comparers",(function(){return{get default(){return v},get equality(){return b},get same(){return d},get strict(){return m},array:function(e){return A(e,1<arguments.length&&void 0!==arguments[1]&&arguments[1],2<arguments.length&&void 0!==arguments[2]?arguments[2]:b)},predicate:function(e){return P(e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])},greater:function(e){return M(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b)},less:function(e){return B(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b)},ignoreCase:function(){return N(0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}}}),!0,!0),s.defineProperty(l,"setters",(function(){return{get children(){return S},get value(){return E},property:function(e){return _(e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])}}}),!0,!0),s.defineProperty(l,"selectors",(function(){return{get default(){return h},get key(){return x},get value(){return C},get children(){return R},get parent(){return k},get result(){return y},get join(){return g},get index(){return w},property:function(e){return I(e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])}}}),!0,!0),s.defineProperty(l,"actions",(function(){return{get default(){return O}}}),!0,!0),s.defineProperty(l,"predicates",(function(){return{get default(){return f},get exists(){return $},selector:function(e){return q(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:$)},not:function(){return j(0<arguments.length&&void 0!==arguments[0]?arguments[0]:$)},equality:function(e){return D(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b)},strict:function(e){return D(e,m)},same:function(e){return D(e,d)},regexp:function(e){return T(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)}}}),!0,!0),s.defineProperty(l,"exceptions",(function(){return{get NoSuchElementsException(){return z},get OutOfRangeException(){return L},get TooManyElementsException(){return F},get KeysForMultiElementsException(){return U},get NeedExecuteBeforeException(){return V},get PropertyExpressionInvalidException(){return W},get InvalidFunctionException(){return K},get PluginRepeatException(){return H},get NotAncestorOfException(){return G}}}),!0,!0),s.defineProperty(l,"IComparable",(function(){return Y}),!0,!0),s.defineProperty(l,"IEquatable",(function(){return Z}),!0,!0),t.exports=l,e("./plugin"),e("./extend");var X=e("./IEnumerator"),Q=(e("./IEnumerable"),e("./enumerables/IMapEnumerable")),ee=e("./enumerables/RepeatEnumerable"),te=e("./enumerables/RangeEnumerable"),re=e("./enumerables/EmptyEnumerable"),ne=e("./enumerables/IteratorEnumerable"),oe=e("./enumerables/WhereEnumerable"),ae=e("./enumerables/SelectEnumerable"),ie=e("./enumerables/ConcatEnumerable"),ue=e("./enumerables/DistinctEnumerable"),le=e("./enumerables/ExceptEnumerable"),se=e("./enumerables/UnionEnumerable"),ce=e("./enumerables/IntersectEnumerable"),fe=e("./enumerables/OfTypeEnumerable"),pe=e("./enumerables/SkipEnumerable"),he=e("./enumerables/SkipWhileEnumerable"),de=e("./enumerables/SkipSameEnumerable"),be=e("./enumerables/SkipProportionEnumerable"),me=e("./enumerables/TakeEnumerable"),ve=e("./enumerables/TakeWhileEnumerable"),ye=e("./enumerables/TakeSameEnumerable"),ge=e("./enumerables/TakeProportionEnumerable"),xe=e("./enumerables/IOrderedEnumerable"),Ce=e("./enumerables/OrderByEnumerable"),ke=e("./enumerables/OrderByDescendingEnumerable"),we=e("./enumerables/ThenByEnumerable"),Re=e("./enumerables/ThenByDescendingEnumerable"),Se=e("./enumerables/GroupedEnumerable"),Ee=e("./enumerables/SelectManyEnumerable"),Oe=e("./enumerables/JoinEnumerable"),Ae=e("./enumerables/LeftJoinEnumerable"),Pe=e("./enumerables/RightJoinEnumerable"),_e=e("./enumerables/GroupJoinEnumerable"),Ie=e("./enumerables/ReverseEnumerable"),Te=e("./enumerables/ZipEnumerable"),$e=e("./enumerables/SingleEnumerable"),je=e("./enumerables/Dictionary"),De=e("./enumerables/Lookup"),qe=e("./enumerables/SliceEnumerable"),Me=e("./enumerables/SpliceEnumerable"),Be=e("./enumerables/FillEnumerable"),Ne=e("./enumerables/SortEnumerable"),ze=e("./enumerables/CopyWithinEnumerable"),Le=e("./enumerables/ChunkEnumerable"),Fe=e("./enumerables/SplitEnumerable"),Ue=e("./enumerables/NearSplitEnumerable"),Ve=e("./enumerables/LeftPadEnumerable"),Je=e("./enumerables/RightPadEnumerable"),He=e("./enumerables/RandEnumerable"),We=e("./enumerables/WipeEnumerable"),Ke=e("./enumerables/NearGroupedEnumerable"),Ge=e("./enumerables/BetweenEnumerable"),Ye=e("./enumerables/GenerateEnumerable"),Ze=e("./enumerables/SeparateEnumerable"),Xe=e("./enumerables/CombineEnumerable"),Qe=e("./enumerables/SymmetricEnumerable"),et=e("./enumerables/EachEnumerable"),tt=e("./enumerables/IndicesEnumerable"),rt=e("./enumerables/PermutationEnumerable"),nt=e("./enumerables/PermutationRepeatableEnumerable"),ot=e("./enumerables/CombinationEnumerable"),at=e("./enumerables/CombinationRepeatableEnumerable"),it=e("./enumerables/PreOrderTree"),ut=e("./enumerables/InOrderTree"),lt=e("./enumerables/PostOrderTree")},{"./IEnumerable":32,"./IEnumerator":33,"./core/IComparable":34,"./core/IEquatable":35,"./core/core":36,"./core/exceptions/InvalidFunctionException":38,"./core/exceptions/KeysForMultiElementsException":39,"./core/exceptions/NeedExecuteBeforeException":40,"./core/exceptions/NoSuchElementsException":41,"./core/exceptions/NotAncestorOfException":42,"./core/exceptions/NotEnumerableException":43,"./core/exceptions/OutOfRangeException":44,"./core/exceptions/PluginRepeatException":45,"./core/exceptions/PropertyExpressionInvalidException":46,"./core/exceptions/TooManyElementsException":47,"./enumerables/BetweenEnumerable":49,"./enumerables/ChunkEnumerable":53,"./enumerables/CombinationEnumerable":54,"./enumerables/CombinationRepeatableEnumerable":55,"./enumerables/CombineEnumerable":56,"./enumerables/ConcatEnumerable":57,"./enumerables/CopyWithinEnumerable":58,"./enumerables/Dictionary":61,"./enumerables/DistinctEnumerable":62,"./enumerables/EachEnumerable":63,"./enumerables/EmptyEnumerable":64,"./enumerables/ExceptEnumerable":66,"./enumerables/FillEnumerable":67,"./enumerables/GenerateEnumerable":68,"./enumerables/GroupJoinEnumerable":70,"./enumerables/GroupedEnumerable":71,"./enumerables/IMapEnumerable":75,"./enumerables/IOrderedEnumerable":76,"./enumerables/InOrderTree":79,"./enumerables/IndicesEnumerable":80,"./enumerables/IntersectEnumerable":81,"./enumerables/IteratorEnumerable":83,"./enumerables/JoinEnumerable":84,"./enumerables/LeftJoinEnumerable":85,"./enumerables/LeftPadEnumerable":86,"./enumerables/Lookup":87,"./enumerables/NearGroupedEnumerable":89,"./enumerables/NearSplitEnumerable":90,"./enumerables/OfTypeEnumerable":94,"./enumerables/OrderByDescendingEnumerable":95,"./enumerables/OrderByEnumerable":96,"./enumerables/PermutationEnumerable":99,"./enumerables/PermutationRepeatableEnumerable":100,"./enumerables/PostOrderTree":102,"./enumerables/PreOrderTree":104,"./enumerables/RandEnumerable":107,"./enumerables/RangeEnumerable":108,"./enumerables/RepeatEnumerable":109,"./enumerables/ReverseEnumerable":110,"./enumerables/RightJoinEnumerable":111,"./enumerables/RightPadEnumerable":112,"./enumerables/SelectEnumerable":113,"./enumerables/SelectManyEnumerable":114,"./enumerables/SeparateEnumerable":115,"./enumerables/SingleEnumerable":118,"./enumerables/SkipEnumerable":119,"./enumerables/SkipProportionEnumerable":120,"./enumerables/SkipSameEnumerable":121,"./enumerables/SkipWhileEnumerable":122,"./enumerables/SliceEnumerable":123,"./enumerables/SortEnumerable":124,"./enumerables/SpliceEnumerable":125,"./enumerables/SplitEnumerable":126,"./enumerables/SymmetricEnumerable":128,"./enumerables/TakeEnumerable":129,"./enumerables/TakeProportionEnumerable":130,"./enumerables/TakeSameEnumerable":131,"./enumerables/TakeWhileEnumerable":132,"./enumerables/ThenByDescendingEnumerable":133,"./enumerables/ThenByEnumerable":134,"./enumerables/UnionEnumerable":136,"./enumerables/WhereEnumerable":137,"./enumerables/WipeEnumerable":138,"./enumerables/ZipEnumerable":139,"./extend":140,"./methods/arrayComparer":145,"./methods/defaultAction":146,"./methods/defaultChildrenSelector":147,"./methods/defaultChildrenSetter":148,"./methods/defaultComparer":149,"./methods/defaultEqualityComparer":150,"./methods/defaultExistsPredicate":151,"./methods/defaultFalsePredicate":152,"./methods/defaultIndexSelector":153,"./methods/defaultJoinSelector":154,"./methods/defaultKeySelector":155,"./methods/defaultParentSelector":156,"./methods/defaultPredicate":157,"./methods/defaultResultSelector":158,"./methods/defaultSameComparer":159,"./methods/defaultSelector":160,"./methods/defaultStrictEqualityComparer":161,"./methods/defaultValueSelector":162,"./methods/defaultValueSetter":163,"./methods/equalityPredicate":165,"./methods/greaterComparer":166,"./methods/ignoreCaseComparer":167,"./methods/lessComparer":168,"./methods/methods":169,"./methods/notPredicate":170,"./methods/predicateComparer":171,"./methods/propertySelector":173,"./methods/propertySetter":174,"./methods/regexpPredicate":175,"./methods/selectorPredicate":177,"./plugin":179,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/regenerator":27}],32:[function(e,t,r){"use strict";var n=(c=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/helpers/typeof")),o=c(e("@babel/runtime/helpers/classCallCheck")),a=c(e("@babel/runtime/helpers/createClass")),i=c(e("@babel/runtime/helpers/assertThisInitialized")),u=c(e("@babel/runtime/helpers/inherits")),l=c(e("@babel/runtime/helpers/possibleConstructorReturn")),s=c(e("@babel/runtime/helpers/getPrototypeOf")),c=c(e("@babel/runtime/helpers/wrapNativeSuper"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var p=e("./core/core"),h=e("./methods/defaultPredicate"),d=e("./methods/defaultFalsePredicate"),b=e("./methods/defaultSelector"),m=e("./methods/defaultSameComparer"),v=e("./methods/defaultEqualityComparer"),y=e("./methods/defaultStrictEqualityComparer"),g=e("./methods/defaultComparer"),x=e("./methods/defaultResultSelector"),C=e("./methods/defaultJoinSelector"),k=e("./methods/defaultKeySelector"),w=e("./methods/defaultValueSelector"),R=e("./methods/defaultParentSelector"),S=e("./methods/defaultChildrenSelector"),E=e("./methods/defaultAction"),O="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/),A="string",P="array",_="enumerable",I="object";c=function(e){(0,u.default)(r,e);var t=f(r);function r(e){(0,o.default)(this,r);var a=t.call(this),u=p.getType(e),s=e instanceof r?_:u===p.types.String?A:u===p.types.Array||u.endsWith(p.types.Iterator)?P:I;return p.defineProperty((0,i.default)(a),Symbol.toStringTag,"IEnumerable"),p.defineProperties((0,i.default)(a),{getProtoType:function(){return s===_?e.getProtoType():s},toString:function(){return s===A?this.join(""):s!==P&&s===_?e.toString.call(this):"["+this.join(",")+"]"},toProto:function(){return this.getProtoType()===A?this.join(""):this.getProtoType()===P?this.toArray():this.toObject()}}),O?(0,l.default)(a,new Proxy((0,i.default)(a),{get:function(e,t){return"symbol"!==(0,n.default)(t)&&!isNaN(t)&&p.isInteger(t)&&0<=t&&!(t in e)?e.elementAtOrDefault(t):"length"===t||"size"===t?e.count():e[t]},getOwnPropertyDescriptor:function(e,t){if("symbol"!==(0,n.default)(t)&&!isNaN(t)&&p.isInteger(t)&&0<=t&&!(t in e))return{enumerable:!0,configurable:!0,get:function(){return e.elementAtOrDefault(t)}};if("length"!==t&&"size"!==t)return Object.getOwnPropertyDescriptor(e,t);var r=Object.getOwnPropertyDescriptor(e,"length");return r.value=e.count(),r},ownKeys:function(e){return T.toArray(T.range(0,e.count()).select((function(e){return String(e)})).concat(Reflect.ownKeys(e)))}})):a}return(0,a.default)(r,[{key:"length",get:function(){return this.count()}},{key:"size",get:function(){return this.count()}},{key:"getEnumerator",value:function(){return T.getEnumerator(this)}},{key:"getIterator",value:function(){return T.getIterator(this)}},{key:"where",value:function(){return T.where(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"select",value:function(){return T.select(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)}},{key:"elementAt",value:function(e){return T.elementAt(this,e)}},{key:"elementAtOrDefault",value:function(e,t){return T.elementAtOrDefault(this,e,t)}},{key:"asEnumerable",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:w;return p.isUndefined(e)?this:T.asEnumerable(e,t)}},{key:"concat",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return T.concat.apply(T,[this].concat(t))}},{key:"distinct",value:function(){return T.distinct(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:v)}},{key:"except",value:function(e){return T.except(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"union",value:function(e){return T.union(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"intersect",value:function(e){return T.intersect(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"ofType",value:function(e){return T.ofType(this,e)}},{key:"skip",value:function(e){return T.skip(this,e)}},{key:"skipWhile",value:function(){return T.skipWhile(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"skipSame",value:function(){return T.skipSame(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:m)}},{key:"skipProportion",value:function(){return T.skipProportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)}},{key:"take",value:function(e){return T.take(this,e)}},{key:"takeWhile",value:function(){return T.takeWhile(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"takeSame",value:function(){return T.takeSame(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:m)}},{key:"takeProportion",value:function(){return T.takeProportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)}},{key:"sorted",value:function(){return T.sorted(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"orderBy",value:function(){return T.orderBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"orderByDescending",value:function(){return T.orderByDescending(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"groupBy",value:function(){return T.groupBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:x,3<arguments.length&&void 0!==arguments[3]?arguments[3]:v)}},{key:"selectMany",value:function(){return T.selectMany(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)}},{key:"flatMap",value:function(){return T.flatMap(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)}},{key:"flatten",value:function(){return T.flatten(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)}},{key:"join",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:v;return 1===arguments.length?T.join(this,e):T.join(this,e,t,r,n,o)}},{key:"joining",value:function(e){return T.joining(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:v)}},{key:"innerJoin",value:function(e){return T.join(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:v)}},{key:"leftJoin",value:function(e){return T.leftJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:v)}},{key:"rightJoin",value:function(e){return T.rightJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:v)}},{key:"groupJoin",value:function(e){return T.groupJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:v)}},{key:"defaultIfEmpty",value:function(e){return T.defaultIfEmpty(this,e)}},{key:"all",value:function(){return T.all(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"allMatch",value:function(){return T.allMatch(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"any",value:function(){return T.any(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"anyMatch",value:function(){return T.anyMatch(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"isEmpty",value:function(){return T.isEmpty(this)}},{key:"sequenceEqual",value:function(e){return T.sequenceEqual(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"first",value:function(){return T.first(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"firstOrDefault",value:function(e){return T.firstOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)}},{key:"last",value:function(){return T.last(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"lastOrDefault",value:function(e){return T.lastOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)}},{key:"single",value:function(){return T.single(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"singleOrDefault",value:function(e){return T.singleOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)}},{key:"count",value:function(){return T.count(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}},{key:"sum",value:function(){return T.sum(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)}},{key:"product",value:function(){return T.product(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)}},{key:"max",value:function(){return T.max(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"maxOrDefault",value:function(e){return T.maxOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:g)}},{key:"min",value:function(){return T.min(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"minOrDefault",value:function(e){return T.minOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:g)}},{key:"average",value:function(){return T.average(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)}},{key:"aggregate",value:function(e,t){return T.aggregate(this,e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b)}},{key:"contains",value:function(e){return T.contains(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"indexOf",value:function(e){return T.indexOf(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:y)}},{key:"findIndex",value:function(e,t){return T.findIndex(this,e,t)}},{key:"lastIndexOf",value:function(e){return T.lastIndexOf(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:y)}},{key:"findLast",value:function(e,t){return T.findLast(this,e,t)}},{key:"findLastIndex",value:function(e,t){return T.findLastIndex(this,e,t)}},{key:"reverse",value:function(){return T.reverse(this)}},{key:"zip",value:function(e){return T.zip(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)}},{key:"slice",value:function(){return T.slice(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0)}},{key:"every",value:function(e,t){return T.every(this,e,t)}},{key:"find",value:function(e,t){return T.find(this,e,t)}},{key:"includes",value:function(e){return T.includes(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)}},{key:"map",value:function(e,t){return T.map(this,e,t)}},{key:"filter",value:function(e,t){return T.filter(this,e,t)}},{key:"pop",value:function(){return T.pop(this)}},{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return T.push.apply(T,[this].concat(t))}},{key:"shift",value:function(){return T.shift(this)}},{key:"unshift",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return T.unshift.apply(T,[this].concat(t))}},{key:"reduce",value:function(e,t){return T.reduce(this,e,t)}},{key:"reduceRight",value:function(e,t){return T.reduceRight(this,e,t)}},{key:"some",value:function(e,t){return T.some(this,e,t)}},{key:"splice",value:function(e,t){for(var r=arguments.length,n=new Array(2<r?r-2:0),o=2;o<r;o++)n[o-2]=arguments[o];return T.splice.apply(T,[this,e,t].concat(n))}},{key:"fill",value:function(e){return T.fill(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0)}},{key:"sort",value:function(){return T.sort(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:g)}},{key:"copyWithin",value:function(){return T.copyWithin(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0)}},{key:"toArray",value:function(){return T.toArray(this)}},{key:"toObject",value:function(){return this.toDictionary(0<arguments.length&&void 0!==arguments[0]?arguments[0]:k,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w,2<arguments.length&&void 0!==arguments[2]?arguments[2]:m).toObject()}},{key:"toDictionary",value:function(){return T.toDictionary(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:m)}},{key:"toLookup",value:function(){return T.toLookup(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:m)}},{key:"toPreOrder",value:function(){return T.toPreOrder(this)}},{key:"toInOrder",value:function(){return T.toInOrder(this)}},{key:"toPostOrder",value:function(){return T.toPostOrder(this)}},{key:"forEach",value:function(){return T.forEach(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:E,1<arguments.length&&void 0!==arguments[1]?arguments[1]:void 0)}},{key:"each",value:function(){return T.each(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:E)}},{key:"indices",value:function(e){return T.indices(this,e)}},{key:"permutation",value:function(e){return T.permutation(this,e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])}},{key:"combination",value:function(e){return T.combination(this,e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])}},{key:"chunk",value:function(e){return T.chunk(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)}},{key:"split",value:function(){return T.split(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:d)}},{key:"nearSplit",value:function(){return T.nearSplit(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:d)}},{key:"leftPad",value:function(e,t){return T.leftPad(this,e,t)}},{key:"rightPad",value:function(e,t){return T.rightPad(this,e,t)}},{key:"rand",value:function(){return T.rand(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)}},{key:"random",value:function(){return T.random(this)}},{key:"randomOrDefault",value:function(e){return T.randomOrDefault(this,e)}},{key:"wipe",value:function(){return T.wipe(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)}},{key:"nearBy",value:function(){return T.nearBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:x,3<arguments.length&&void 0!==arguments[3]?arguments[3]:v)}},{key:"combine",value:function(){return T.combine(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:R,1<arguments.length&&void 0!==arguments[1]?arguments[1]:k,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:v)}},{key:"separate",value:function(){return T.separate(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:S,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w)}},{key:"isSub",value:function(e){return T.isSub(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"isSuper",value:function(e){return T.isSuper(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"symmetric",value:function(e){return T.symmetric(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"conflict",value:function(){return T.conflict(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:v)}},{key:"proportion",value:function(){return T.proportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}}]),r}((0,c.default)(Array)),t.exports=c;var T=e("./Enumerable")},{"./Enumerable":31,"./core/core":36,"./methods/defaultAction":146,"./methods/defaultChildrenSelector":147,"./methods/defaultComparer":149,"./methods/defaultEqualityComparer":150,"./methods/defaultFalsePredicate":152,"./methods/defaultJoinSelector":154,"./methods/defaultKeySelector":155,"./methods/defaultParentSelector":156,"./methods/defaultPredicate":157,"./methods/defaultResultSelector":158,"./methods/defaultSameComparer":159,"./methods/defaultSelector":160,"./methods/defaultStrictEqualityComparer":161,"./methods/defaultValueSelector":162,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/typeof":24,"@babel/runtime/helpers/wrapNativeSuper":26}],33:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault")(e("@babel/runtime/helpers/classCallCheck")),o=e("./core/core"),a=e("./core/exceptions/NeedExecuteBeforeException");e=function e(t){var r;(0,n.default)(this,e);var i=!1;o.defineProperties(this,{moveNext:function(){return!(i=r.next()).done},reset:function(){r=(t[Symbol.iterator]||t.asEnumerable()[Symbol.iterator])(),i=!1},get current(){if(i)return i.value;throw new a("moveNext")}}),this.reset()},t.exports=e},{"./core/core":36,"./core/exceptions/NeedExecuteBeforeException":40,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/interopRequireDefault":12}],34:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass"));t.exports=function(){function e(){(0,o.default)(this,e)}return(0,a.default)(e,[{key:"compare",value:function(e){return 0}}]),e}()},{"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/interopRequireDefault":12}],35:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass"));t.exports=function(){function e(){(0,o.default)(this,e)}return(0,a.default)(e,[{key:"equals",value:function(e){return!1}}]),e}()},{"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/interopRequireDefault":12}],36:[function(e,t,r){(function(r){(function(){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault")(e("@babel/runtime/helpers/typeof"));function o(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?a(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e){return e.name||(u.exec(e)||[])[2]||""}var u=/^(function\*?|class)\s+([^({\s]*)\s*[({].*/gi,l={isDev:function(){return void 0!==r&&r&&r.env&&"development"===r.env.NODE_ENV},getType:function(e){var t=(0,n.default)(e);if("undefined"===t)return this.types.Undefined;if("string"===t||e instanceof String)return this.types.String;if("number"===t||e instanceof Number)return this.types.Number;if("function"===t||e instanceof Function)return this.types.Function;var r=e[Symbol.toStringTag];return"Object"===(r=r||(r=Object.prototype.toString.call(e)).substring("[object ".length,r.length-1))||"Error"===r?i(e.constructor):"object"!==t?t.substring(0,1).toUpperCase()+t.substring(1):r},types:{get Undefined(){return"Undefined"},get String(){return"String"},get Array(){return"Array"},get Object(){return"Object"},get Map(){return"Map"},get Set(){return"Set"},get Function(){return"Function"},get RegExp(){return"RegExp"},get Boolean(){return"Boolean"},get Number(){return"Number"},get Symbol(){return"Symbol"},get Arguments(){return"Arguments"},get Iterator(){return"Iterator"},get Enumerable(){return"Enumerable"}},isUndefined:function(e){return this.getType(e)===this.types.Undefined},isString:function(e){return this.getType(e)===this.types.String},isArray:function(e){return this.getType(e)===this.types.Array},isNumber:function(e){return this.getType(e)===this.types.Number},isObject:function(e){return this.getType(e)===this.types.Object},isSet:function(e){return this.getType(e)===this.types.Set},isMap:function(e){return this.getType(e)===this.types.Map},isSymbol:function(e){return this.getType(e)===this.types.Symbol},isFunction:function(e){return this.getType(e)===this.types.Function},isArguments:function(e){return this.getType(e)===this.types.Arguments},isIterator:function(e){return this.getType(e).endsWith(this.types.Iterator)},isEnumerable:function(e){return this.getType(e).endsWith(this.types.Enumerable)},isProto:function(e){return(e=this.getType(e))===this.types.Array||e===this.types.String},isList:function(e){return(e=this.getType(e))===this.types.Array||e===this.types.Enumerable||e===this.types.Set},isInteger:function(e){return/^[-+]?\d+$/.test(e)||Number.isInteger(e)},asPascal:function(e){return"string"==typeof e?e.substring(0,1).toUpperCase()+e.substring(1):e},conflict:function(e,t){var r;"symbol"!==(0,n.default)(t)&&e.hasOwnProperty(t)&&(e.hasOwnProperty(r="o$"+t)||(this.isDev()&&console.warn(t+" already in "+this.getType(e)+", set original function to "+r),Object.defineProperty(e,r,{enumerable:!1,writable:!0,configurable:!0,value:e[t]})))},setProperty:function(e,t,r){var n=4<arguments.length&&void 0!==arguments[4]&&arguments[4];3<arguments.length&&void 0!==arguments[3]&&arguments[3]&&r instanceof Function?Object.defineProperty(e,t,{enumerable:n,configurable:!0,get:r}):Object.defineProperty(e,t,{enumerable:n,writable:!0,configurable:!0,value:r})},defineProperty:function(e,t,r){var n,o=3<arguments.length&&void 0!==arguments[3]&&arguments[3],a=4<arguments.length&&void 0!==arguments[4]&&arguments[4];this.conflict(e,t),t!==Symbol.iterator||(n=(i(r)||i(e[Symbol.iterator])).replace(/\s*Iterator$/gi," Iterator"))&&this.defineProperty(r,Symbol.toStringTag,n),this.setProperty(e,t,r,o,a)},defineProperties:function(e,t){var r,n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];for(r in t)t.hasOwnProperty(r)&&this.defineProperty(e,!0===n?this.asPascal(r):n?n+r:r,function(e,t){return function(){return e[t]}}(t,r),!0,!1)},undefineProperty:function(e,t){var r;"symbol"!==(0,n.default)(t)&&e.hasOwnProperty(t)&&(e.hasOwnProperty(r="o$"+t)?(Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:e[r]}),delete e[r]):delete e[t])},undefineProperties:function(e,t){var r,n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],a=o(t);try{for(a.s();!(r=a.n()).done;){var i=r.value;this.undefineProperty(e,!0===n?l.asPascal(i):n?n+i:i)}}catch(e){a.e(e)}finally{a.f()}},lazy:!1,array$every:Array.prototype.every,array$concat:Array.prototype.concat,array$splice:Array.prototype.splice,array$slice:Array.prototype.slice,array$fill:Array.prototype.fill,array$find:Array.prototype.find,array$includes:Array.prototype.includes,array$map:Array.prototype.map,array$filter:Array.prototype.filter,array$shift:Array.prototype.shift,array$unshift:Array.prototype.unshift,array$pop:Array.prototype.pop,array$push:Array.prototype.push,array$reduce:Array.prototype.reduce,array$reduceRight:Array.prototype.reduceRight,array$some:Array.prototype.some,array$sort:Array.prototype.sort,array$copyWithin:Array.prototype.copyWithin,array$join:Array.prototype.join,array$indexOf:Array.prototype.indexOf,array$lastIndexOf:Array.prototype.lastIndexOf,array$findIndex:Array.prototype.findIndex,array$forEach:Array.prototype.forEach,string$concat:String.prototype.concat,string$slice:String.prototype.slice,string$includes:String.prototype.includes,string$indexOf:String.prototype.indexOf,string$lastIndexOf:String.prototype.lastIndexOf};t.exports=l}).call(this)}).call(this,e("_process"))},{"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/typeof":24,_process:29}],37:[function(e,t,r){"use strict";var n=(l=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/helpers/classCallCheck")),o=l(e("@babel/runtime/helpers/assertThisInitialized")),a=l(e("@babel/runtime/helpers/inherits")),i=l(e("@babel/runtime/helpers/possibleConstructorReturn")),u=l(e("@babel/runtime/helpers/getPrototypeOf")),l=l(e("@babel/runtime/helpers/wrapNativeSuper"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var c=e("./../core");l=function(e){(0,a.default)(r,e);var t=s(r);function r(e){var a;return(0,n.default)(this,r),a=t.call(this,e),c.defineProperty((0,o.default)(a),"getType",(function(){return c.getType((0,o.default)(a))}),!0,!0),c.defineProperty((0,o.default)(a),"toString",(function(){return"".concat(c.getType((0,o.default)(a)),": ").concat(e)}),!1,!0),a}return r}((0,l.default)(Error)),t.exports=l},{"./../core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/wrapNativeSuper":26}],38:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"Invalid function value of can not convert to a function value, the original value is : "+r)}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],39:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./../core"),c=e("./Exception"),f=Object.prototype.toString.call({}),p=function(e){var t=e.toString();return t===f?"[object "+s.getType(e)+"]":t};t.exports=function(){(0,a.default)(t,c);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"Keys for multi elements, key:"+p(r))}return t}()},{"./../core":36,"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],40:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"Need execute method ["+r+"()] before")}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],41:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(){return(0,o.default)(this,t),e.call(this,"No such elements")}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],42:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./../core"),c=e("./Exception");t.exports=function(){(0,a.default)(t,c);var e=l(t);function t(r,n){return(0,o.default)(this,t),e.call(this,"'".concat(s.isUndefined(r.key)?r.value:r.key,"' is not ancestor node of '").concat(s.isUndefined(n.key)?n.value:n.key,"'"))}return t}()},{"./../core":36,"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],43:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception"),c=e("./../core");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"Value of type [".concat(c.getType(r),"] is not an enumerable value and can not convert to an enumerable value"))}return t}()},{"./../core":36,"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],44:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"Out of range, index:"+r)}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],45:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return(0,o.default)(this,t),e.call(this,n?'Can not add plugin with name "'.concat(r.name,'" because of this is a builtin property'):'Plugin with name "'.concat(r.name,'" has already added'))}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],46:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){return(0,o.default)(this,t),e.call(this,"The property expression is invalid. property is :"+r)}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],47:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Exception");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(){return(0,o.default)(this,t),e.call(this,"Too many elements")}return t}()},{"./Exception":37,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],48:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var c=e("./IterableEnumerable"),f=e("./../core/core"),p=e("./../methods/methods"),h=e("./../methods/defaultSelector"),d=e("./../methods/defaultJoinSelector"),b=e("./../methods/defaultEqualityComparer"),m=e("./../methods/defaultStrictEqualityComparer"),v=e("./../methods/defaultAction"),y=e("./../Enumerable");t.exports=function(){(0,i.default)(t,c);var e=s(t);function t(r){var n;return(0,o.default)(this,t),n=e.call(this,r),f.defineProperties((0,a.default)(n),{indexOf:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return(t=p.asStrictEqualityComparer(t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m))===m&&f.array$indexOf?f.array$indexOf.call(r,e,n):y.indexOf(this,e,n,t)},lastIndexOf:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0;return(t=p.asStrictEqualityComparer(t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m))===m&&f.array$lastIndexOf?f.array$lastIndexOf.call(r,e,n):y.lastIndexOf(this,e,n,t)},findIndex:function(e,t){return f.array$findIndex?f.array$findIndex.call(r,e,t):y.findIndex(this,e,t)},join:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h,o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:b;return n=p.asSelector(n),o=p.asSelector(o),a=p.asEqualityComparer(a),1===arguments.length&&f.array$join?f.array$join.call(r,e):y.join(this,e,t,n,o,a)},every:function(e,t){return f.array$every?f.array$every.call(r,e,t):y.every(this,e,t)},find:function(e,t){return f.array$find?f.array$find.call(r,e,t):y.find(this,e,t)},includes:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return f.array$includes?f.array$includes.call(r,e,t):y.includes(this,e,t)},pop:function(){return f.array$pop?f.array$pop.call(r):y.pop(this)},push:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return f.array$push?f.array$push.apply(r,t):y.push.apply(y,[this].concat(t))},shift:function(){return f.array$shift?f.array$shift.call(r):y.shift(this)},unshift:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return f.array$unshift?f.array$unshift.apply(r,t):y.unshift.apply(y,[this].concat(t))},reduce:function(e,t){return f.array$reduce?f.array$reduce.call(r,e,t):y.reduce(this,e,t)},reduceRight:function(e,t){return f.array$reduceRight?f.array$reduceRight.call(r,e,t):y.reduceRight(this,e,t)},some:function(e,t){return f.array$some?f.array$some.call(r,e,t):y.some(this,e,t)},forEach:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:v,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:void 0;f.array$forEach?f.array$forEach.call(r,t,n):y.forEach(this,t,n)}}),n}return t}()},{"./../Enumerable":31,"./../core/core":36,"./../methods/defaultAction":146,"./../methods/defaultEqualityComparer":150,"./../methods/defaultJoinSelector":154,"./../methods/defaultSelector":160,"./../methods/defaultStrictEqualityComparer":161,"./../methods/methods":169,"./IterableEnumerable":82,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],49:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return(0,a.default)(this,t),u=e.call(this,[]),p.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r;case 1:if(t<=n)return e.next=4,t;e.next=7;break;case 4:t+=l,e.next=1;break;case 7:case"end":return e.stop()}}),e)}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],50:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./ITree"),h=e("./../core/core"),d=e("./../Enumerable"),b=e("./GeneratorEnumerable"),m=e("./PreOrderEnumerable"),v=e("./InOrderEnumerable"),y=e("./PostOrderEnumerable"),g=Symbol("left"),x=Symbol("right");e=function(){(0,l.default)(t,p);var e=f(t);function t(r){(0,a.default)(this,t);var n=e.call(this,r.value,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(r.children||[],"t0",1);case 1:case"end":return e.stop()}}),e)}))),i=g,l=x,s=n[Symbol.iterator];return h.defineProperty((0,u.default)(n),Symbol.iterator,o.default.mark((function e(){var r,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=s(),(n=r.next()).done){e.next=16;break}return i=n.value&&new t(n.value),e.next=6,i;case 6:if((n=r.next()).done){e.next=13;break}return l=n.value&&new t(n.value),e.next=11,l;case 11:e.next=14;break;case 13:l=void 0;case 14:e.next=17;break;case 16:i=void 0;case 17:case"end":return e.stop()}}),e)}))),h.defineProperty((0,u.default)(n),"children",(function(){return new b(o.default.mark((function e(){var r,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=s(),(n=r.next()).done){e.next=16;break}return i=n.value&&new t(n.value),e.next=6,i;case 6:if((n=r.next()).done){e.next=13;break}return l=n.value&&new t(n.value),e.next=11,l;case 11:e.next=14;break;case 13:l=void 0;case 14:e.next=17;break;case 16:i=void 0;case 17:case"end":return e.stop()}}),e)})))}),!0,!0),h.defineProperty((0,u.default)(n),"left",(function(){return i===g?i=d.elementAtOrDefault((0,u.default)(n),0):i}),!0,!0),h.defineProperty((0,u.default)(n),"right",(function(){return l===x?l=d.elementAtOrDefault((0,u.default)(n),1):l}),!0,!0),n}return(0,i.default)(t,[{key:"hasLeft",value:function(){return!h.isUndefined(this.left)}},{key:"hasRight",value:function(){return!h.isUndefined(this.right)}},{key:"preOrder",value:function(){return new m(this)}},{key:"inOrder",value:function(){return new v(this)}},{key:"postOrder",value:function(){return new y(this)}},{key:"isBinary",get:function(){return!0}},{key:"asBinary",value:function(){return this}}]),t}(),t.exports=e},{"./../Enumerable":31,"./../core/core":36,"./GeneratorEnumerable":69,"./ITree":77,"./InOrderEnumerable":78,"./PostOrderEnumerable":101,"./PreOrderEnumerable":103,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],51:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[[r]];case 1:if(!t.length){e.next=22;break}n=c(t.shift()),e.prev=3,n.s();case 5:if((a=n.n()).done){e.next=12;break}return i=a.value,e.next=9,i.value;case 9:t.push(i);case 10:e.next=5;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(3),n.e(e.t0);case 17:return e.prev=17,n.f(),e.finish(17);case 20:e.next=1;break;case 22:case"end":return e.stop()}}),e,null,[[3,14,17,20]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],52:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,[]),n=b.asPredicate(n),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[[r]];case 1:if(!t.length){e.next=23;break}a=c(t.shift()),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=13;break}if(u=i.value,n(u.value))return e.next=10,u;e.next=10;break;case 10:t.push(u);case 11:e.next=5;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(3),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:e.next=1;break;case 23:case"end":return e.stop()}}),e,null,[[3,15,18,21]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],53:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=(e("./../Enumerable"),e("./../core/core")),h=e("./IChunk");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return(0,a.default)(this,t),u=e.call(this,r),l=l<0?(l%n+n)%n:l,p.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,s,c;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,a=[],u=r[Symbol.iterator](),s=function e(){var r,s=u.next();return s.done||(i&&i.count!==n&&(0===l||0!==t||i.count!==l)||(i&&t++,a.push(i={count:0,array:[]}),i.chunk=(r=i,new h(t,o.default.mark((function t(){var n;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=0;case 1:if(r.array.length>n||e()&&r.array.length>n)return t.next=4,r.array[n++];t.next=6;break;case 4:t.next=1;break;case 6:case"end":return t.stop()}}),t)}))))),i.array.push(s.value),i.count++),!s.done},c=0;case 5:if(!(a.length>c||s())){e.next=11;break}if(a.length>c)return e.next=9,a[c++].chunk;e.next=9;break;case 9:e.next=5;break;case 11:case"end":return e.stop()}}),e)}))),u}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./IChunk":72,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],54:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../Enumerable"),d=e("./IndicesEnumerable"),b=e("./../core/core"),m=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,l.default)(t,p);var e=f(t);function t(r,n){var l;return(0,i.default)(this,t),l=e.call(this,r),b.defineProperty((0,u.default)(l),Symbol.iterator,o.default.mark((function e(){var t,i,u,l,s,c,f;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r[Symbol.iterator](),i=h.range(0,n).toArray(),l=!(u=[]),s=function(){var e=t.next();return e.done?!(l=!0):(u.push(e.value),!0)},c=function(){for(var e=n-1;0<=e;e--){var t=!1;if(i[e]++,i[e]+(n-e)-1>=u.length&&(!l&&s()||(t=!0)),!t){for(var r=e+1,o=1;r<n;r++,o++)i[r]=i[e]+o;return!0}}return!1},f=i[n-1];case 7:if(!(u.length<=f)){e.next=12;break}if(s()){e.next=10;break}throw new m;case 10:e.next=7;break;case 12:return e.next=14,new d(u,(0,a.default)(i));case 14:if(c()){e.next=12;break}case 15:case"end":return e.stop()}}),e)}))),l}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NoSuchElementsException":41,"./IndicesEnumerable":80,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],55:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../Enumerable"),d=e("./IndicesEnumerable"),b=e("./../core/core"),m=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,l.default)(t,p);var e=f(t);function t(r,n){var l;return(0,i.default)(this,t),l=e.call(this,r),b.defineProperty((0,u.default)(l),Symbol.iterator,o.default.mark((function e(){var t,i,u,l,s,c;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r[Symbol.iterator](),i=h.repeat(0,n).toArray(),l=!(u=[]),c=function(){for(var e=n-1;0<=e;e--){var t=!1;if(i[e]++,i[e]>=u.length&&(!l&&s()||(t=!0)),!t){for(var r=e+1;r<n;r++)i[r]=i[e];return!0}}return!1},!(s=function(){var e=t.next();return e.done?!(l=!0):(u.push(e.value),!0)})()){e.next=12;break}case 7:return e.next=9,new d(u,(0,a.default)(i));case 9:if(c()){e.next=7;break}case 10:e.next=13;break;case 12:throw new m;case 13:case"end":return e.stop()}}),e)}))),l}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NoSuchElementsException":41,"./IndicesEnumerable":80,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],56:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../Enumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultKeySelector"),y=e("./../methods/defaultSelector"),g=e("./../methods/defaultParentSelector"),x=e("./../methods/defaultEqualityComparer"),C=e("./ICombine");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:g,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,f=4<arguments.length&&void 0!==arguments[4]?arguments[4]:x;return(0,a.default)(this,t),n=e.call(this,r),u=m.asSelector(u),l=m.asSelector(l),s=m.asSelector(s),f=m.asEqualityComparer(f),b.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,p,h,b,m,v,y,g;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=d.select(r,(function(e){return{key:l(e),parent:u(e),value:s(e),children:[]}})).toArray(),n=[],a=t.length,i=0;case 4:if(!(i<a)){e.next=22;break}p=t[i],h=!1,b=0;case 8:if(!(b<a)){e.next=18;break}if(i===b){e.next=15;break}if(g=t[b],f(g.key,p.parent))return g.children.push(p),h=!0,e.abrupt("break",18);e.next=15;break;case 15:b++,e.next=8;break;case 18:h||n.push(p);case 19:i++,e.next=4;break;case 22:m=function e(t){return new C(t.key,t.parent,t.value,o.default.mark((function r(){var n,a;return o.default.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:n=c(t.children),r.prev=1,n.s();case 3:if((a=n.n()).done){r.next=9;break}return a=a.value,r.next=7,e(a);case 7:r.next=3;break;case 9:r.next=14;break;case 11:r.prev=11,r.t0=r.catch(1),n.e(r.t0);case 14:return r.prev=14,n.f(),r.finish(14);case 17:case"end":return r.stop()}}),r,null,[[1,11,14,17]])})))},v=0,y=n;case 24:if(v<y.length)return g=y[v],e.next=28,m(g);e.next=31;break;case 28:v++,e.next=24;break;case 31:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultKeySelector":155,"./../methods/defaultParentSelector":156,"./../methods/defaultSelector":160,"./../methods/methods":169,"./ICombine":73,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],57:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){for(var n=arguments.length,u=new Array(1<n?n-1:0),l=1;l<n;l++)u[l-1]=arguments[l];(0,a.default)(this,t);var s,f=(s=e.call(this,r)).getProtoType();return d.defineProperty((0,i.default)(s),Symbol.iterator,o.default.mark((function e(){var t,n,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(r,"t0",1);case 1:t=c(u),e.prev=2,t.s();case 4:if((n=t.n()).done){e.next=23;break}if(a=n.value,d.isUndefined(a)||d.isString(a)&&"string"!==f||d.isArguments(a)){e.next=19;break}if(a[Symbol.iterator])return e.delegateYield(a,"t1",9);e.next=11;break;case 9:e.next=17;break;case 11:if(d.isIterator(a))return e.delegateYield(a.asEnumerable(),"t2",13);e.next=15;break;case 13:e.next=17;break;case 15:return e.next=17,a;case 17:e.next=21;break;case 19:return e.next=21,a;case 21:e.next=4;break;case 23:e.next=28;break;case 25:e.prev=25,e.t3=e.catch(2),t.e(e.t3);case 28:return e.prev=28,t.f(),e.finish(28);case 31:case"end":return e.stop()}}),e,null,[[2,25,28,31]])}))),s}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],58:[function(e,t,r){"use strict";var n=(b=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/regenerator")),o=b(e("@babel/runtime/helpers/toConsumableArray")),a=b(e("@babel/runtime/helpers/defineProperty")),i=b(e("@babel/runtime/helpers/classCallCheck")),u=b(e("@babel/runtime/helpers/inherits")),l=b(e("@babel/runtime/helpers/possibleConstructorReturn")),s=b(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=function(){(0,u.default)(t,h);var e=p(t);function t(r){var u,s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,f=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,p=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1/0;if((0,i.default)(this,t),u=e.call(this,r),d.isArray(r)&&d.array$copyWithin)return(0,l.default)(u,m.extend(d.array$copyWithin.call(r,s,f,p)));var h=(0,a.default)({},Symbol.iterator,r[Symbol.iterator]);return d.setProperty(r,Symbol.iterator,n.default.mark((function e(){var t,r,a,i,u,l,d,b,m;return n.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((s<0||f<0||p<0)&&(h=(0,o.default)(h),s<0&&(s=h.length+s),f<0&&(f=h.length+f),p<0&&(p=h.length+p)),!(f<=s)){e.next=34;break}t=0,r=[],a=c(h),e.prev=4,a.s();case 6:if((b=a.n()).done){e.next=24;break}if(i=b.value,f<=t&&t<p&&r.push(i),t<s)return e.next=12,i;e.next=14;break;case 12:e.next=21;break;case 14:if(r.length)return e.next=17,r.shift();e.next=19;break;case 17:e.next=21;break;case 19:return e.next=21,i;case 21:t++;case 22:e.next=6;break;case 24:e.next=29;break;case 26:e.prev=26,e.t0=e.catch(4),a.e(e.t0);case 29:return e.prev=29,a.f(),e.finish(29);case 32:e.next=72;break;case 34:u=0,l=[],d=c(h),e.prev=36,d.s();case 38:if((b=d.n()).done){e.next=63;break}if(m=b.value,u<s)return e.next=43,m;e.next=45;break;case 43:e.next=60;break;case 45:if(u<=p&&l.push(m),f<=u&&u<p)return l.shift(),e.next=50,m;e.next=52;break;case 50:e.next=60;break;case 52:if(u==p)return e.delegateYield(l,"t1",54);e.next=57;break;case 54:l=[],e.next=60;break;case 57:if(p<u)return e.next=60,m;e.next=60;break;case 60:u++;case 61:e.next=38;break;case 63:e.next=68;break;case 65:e.prev=65,e.t2=e.catch(36),d.e(e.t2);case 68:return e.prev=68,d.f(),e.finish(68);case 71:return e.delegateYield(l,"t3",72);case 72:case"end":return e.stop()}}),e,null,[[4,26,29,32],[36,65,68,71]])}))),(0,l.default)(u,r)}return t}();t.exports=b;var m=e("./../Enumerable")},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],59:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[r],n=[r[Symbol.iterator]()],a=!1;case 3:if(!t.length||!n.length){e.next=11;break}if(a){e.next=7;break}return e.next=7,t[t.length-1].value;case 7:i=n[n.length-1].next(),a=i.done?(n.pop(),t.pop(),!0):(t.push(i.value),n.push(i.value[Symbol.iterator]()),!1),e.next=3;break;case 11:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],60:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core"),h=e("./../methods/methods");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,[]),n=h.asPredicate(n),p.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[r],a=[r[Symbol.iterator]()],i=!1;case 3:if(!t.length||!a.length){e.next=11;break}if(!i&&n(t[t.length-1].value))return e.next=7,t[t.length-1];e.next=7;break;case 7:u=a[a.length-1].next(),i=u.done?(a.pop(),t.pop(),!0):(t.push(u.value),a.push(u.value[Symbol.iterator]()),!1),e.next=3;break;case 11:case"end":return e.stop()}}),e)}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],61:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var p=e("./MapEnumerable");t.exports=function(){(0,i.default)(t,p);var e=f(t);function t(){return(0,o.default)(this,t),e.call(this,new Map)}return(0,a.default)(t,[{key:"toObject",value:function(){var e,t={},r=s(this);try{for(r.s();!(e=r.n()).done;){var n=e.value;t[n.key]=n.value}}catch(e){r.e(e)}finally{r.f()}return t}}]),t}()},{"./MapEnumerable":88,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],62:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultEqualityComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:v;return(0,a.default)(this,t),n=e.call(this,r),u=b.asEqualityComparer(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],n=c(r),e.prev=2,n.s();case 4:if((a=n.n()).done){e.next=12;break}if(i=a.value,m.contains(t,i,u)){e.next=10;break}return t.push(i),e.next=10,i;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),n.e(e.t0);case 17:return e.prev=17,n.f(),e.finish(17);case 20:case"end":return e.stop()}}),e,null,[[2,14,17,20]])}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],63:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/defaultAction");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b;return(0,a.default)(this,t),n=e.call(this,r),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,n=c(r),e.prev=2,n.s();case 4:if((a=n.n()).done){e.next=11;break}return a=a.value,u(a,t++),e.next=9,a;case 9:e.next=4;break;case 11:e.next=16;break;case 13:e.prev=13,e.t0=e.catch(2),n.e(e.t0);case 16:return e.prev=16,n.f(),e.finish(16);case 19:case"end":return e.stop()}}),e,null,[[2,13,16,19]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultAction":146,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],64:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(){var r;return(0,a.default)(this,t),r=e.call(this,[]),p.defineProperty((0,i.default)(r),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield([],"t0",1);case 1:case"end":return e.stop()}}),e)}))),r}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],65:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass"));t.exports=function(){function e(t,r){(0,o.default)(this,e),this.key=t,this.value=r}return(0,a.default)(e,[{key:"toString",value:function(){return"{"+this.key+":"+this.value+"}"}},{key:"toObject",value:function(){return{key:this.key,value:this.value}}}]),e}()},{"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/interopRequireDefault":12}],66:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultEqualityComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,r),l=b.asEqualityComparer(l),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=13;break}if(u=i.value,m.contains(n,u,l)){e.next=11;break}if(m.contains(t,u,l)){e.next=11;break}return t.push(u),e.next=11,u;case 11:e.next=4;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[2,15,18,21]])}))),u}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],67:[function(e,t,r){"use strict";var n=(b=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/regenerator")),o=b(e("@babel/runtime/helpers/toConsumableArray")),a=b(e("@babel/runtime/helpers/defineProperty")),i=b(e("@babel/runtime/helpers/classCallCheck")),u=b(e("@babel/runtime/helpers/inherits")),l=b(e("@babel/runtime/helpers/possibleConstructorReturn")),s=b(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=function(){(0,u.default)(t,h);var e=p(t);function t(r,u){var s,f=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,p=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1/0;if((0,i.default)(this,t),s=e.call(this,r),d.isArray(r)&&d.array$fill)return(0,l.default)(s,m.extend(d.array$fill.call(r,u,f,p)));var h=(0,a.default)({},Symbol.iterator,r[Symbol.iterator]);return d.setProperty(r,Symbol.iterator,n.default.mark((function e(){var t,r,a;return n.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(f<0||p<0)&&(h=(0,o.default)(h),f<0&&(f=h.length+f),p<0&&(p=h.length+p)),t=0,r=c(h),e.prev=3,r.s();case 5:if((a=r.n()).done){e.next=17;break}if(a=a.value,t<f||p<=t)return e.next=10,a;e.next=12;break;case 10:e.next=14;break;case 12:return e.next=14,u;case 14:t++;case 15:e.next=5;break;case 17:e.next=22;break;case 19:e.prev=19,e.t0=e.catch(3),r.e(e.t0);case 22:return e.prev=22,r.f(),e.finish(22);case 25:case"end":return e.stop()}}),e,null,[[3,19,22,25]])}))),(0,l.default)(s,r)}return t}();t.exports=b;var m=e("./../Enumerable")},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],68:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0;case 1:if(t<u)return e.next=4,r(t);e.next=7;break;case 4:t++,e.next=1;break;case 7:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],69:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var c=e("./../IEnumerable"),f=e("./../core/core");t.exports=function(){(0,i.default)(t,c);var e=s(t);function t(r){var n;return(0,o.default)(this,t),n=e.call(this,[]),f.defineProperty((0,a.default)(n),Symbol.iterator,(function(){return r()})),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],70:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf")),s=n(e("@babel/runtime/regenerator"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultJoinSelector"),v=e("./../methods/defaultEqualityComparer"),y=e("./../methods/defaultSelector"),g=e("./IGrouping"),x=e("./Entry"),C=function(e,t,r,n){return new g(t,s.default.mark((function o(){var a;return s.default.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:a=0;case 1:if(!(e.length>a||n())){o.next=9;break}if(!(e.length>a)){o.next=7;break}if(r(t,e[a].key))return o.next=6,e[a].value;o.next=6;break;case 6:a++;case 7:o.next=1;break;case 9:case"end":return o.stop()}}),o)})))};e=function(){(0,i.default)(t,h);var e=p(t);function t(r,n){var i,u=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m,l=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,f=4<arguments.length&&void 0!==arguments[4]?arguments[4]:y,p=5<arguments.length&&void 0!==arguments[5]?arguments[5]:v;return(0,o.default)(this,t),i=e.call(this,r),l=b.asSelector(l),f=b.asSelector(f),p=b.asEqualityComparer(p),d.defineProperty((0,a.default)(i),Symbol.iterator,s.default.mark((function e(){var t,o,a,i,h,d,b,m;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=o=0,i=n[Symbol.iterator](),h=function(){var e,r=i.next();return r.done||(e=r.value,t.push(new x(f(e,a++),e))),!r.done},d=c(r),e.prev=3,d.s();case 5:if((m=d.n()).done){e.next=13;break}return b=m.value,m=l(b,o++),e.next=10,u(b,C(t,m,p,h));case 10:o++;case 11:e.next=5;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(3),d.e(e.t0);case 18:return e.prev=18,d.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[3,15,18,21]])}))),i}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultJoinSelector":154,"./../methods/defaultSelector":160,"./../methods/methods":169,"./Entry":65,"./IGrouping":74,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],71:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core"),h=e("./../methods/methods"),d=e("./../Enumerable"),b=e("./../methods/defaultSelector"),m=e("./../methods/defaultResultSelector"),v=e("./../methods/defaultEqualityComparer"),y=e("./../methods/equalityPredicate"),g=e("./IGrouping");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:m,c=4<arguments.length&&void 0!==arguments[4]?arguments[4]:v;return(0,a.default)(this,t),n=e.call(this,r),u=h.asSelector(u),l=h.asSelector(l),s=h.asSelector(s),c=h.asEqualityComparer(c),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,f,p,h;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],n=new Map,a=Symbol("noneKey"),i=r[Symbol.iterator](),f=function e(){var r,s,f,p,h=i.next();return h.done||(r=u(h.value),s=l(h.value),(f=d.where(n.keys(),y(r,c)).firstOrDefault(a))===a?(n.set(r,[]),t.push(new g(r,(p=r,o.default.mark((function t(){var r,a;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=n.get(p),a=0;case 2:if(!(r.length>a||e())){t.next=8;break}if(r.length>a)return t.next=6,r[a++];t.next=6;break;case 6:t.next=2;break;case 8:case"end":return t.stop()}}),t)})))))):r=f,n.get(r).push(s)),!h.done},p=0;case 6:if(!(t.length>p||f())){e.next=13;break}if(t.length>p)return h=t[p++],e.next=11,s(h.key,h);e.next=11;break;case 11:e.next=6;break;case 13:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultResultSelector":158,"./../methods/defaultSelector":160,"./../methods/equalityPredicate":165,"./../methods/methods":169,"./IGrouping":74,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],72:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var c=e("./GeneratorEnumerable"),f=e("./../core/core");e=function(){(0,i.default)(t,c);var e=s(t);function t(r,n){(0,o.default)(this,t),n=e.call(this,n),f.defineProperty((0,a.default)(n),"index",(function(){return r}),!0,!0);var i=n[Symbol.iterator];return f.defineProperty((0,a.default)(n),Symbol.iterator,(function(){return i()})),n}return t}(),t.exports=e},{"./../core/core":36,"./GeneratorEnumerable":69,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],73:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/get")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./ITree"),h=e("./../core/core"),d=e("./../methods/defaultValueSetter"),b=e("./../methods/defaultChildrenSetter");e=function(){(0,l.default)(t,p);var e=f(t);function t(r,n,a,u){(0,o.default)(this,t),u=e.call(this,a,u),h.defineProperty((0,i.default)(u),"parent",(function(){return n}),!0,!0),h.defineProperty((0,i.default)(u),"key",(function(){return r}),!0,!0);var l=u[Symbol.iterator];return h.defineProperty((0,i.default)(u),Symbol.iterator,(function(){return l()})),u}return(0,a.default)(t,[{key:"toObject",value:function(){var e=(0,u.default)((0,c.default)(t.prototype),"toObject",this).call(this);return void 0!==this.key&&null!==this.key&&(e.key=this.key),void 0!==this.parent&&null!==this.parent&&(e.parent=this.parent),e}},{key:"toValue",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d;return r=(0,u.default)((0,c.default)(t.prototype),"toObject",this).call(this,e,r),void 0!==this.key&&null!==this.key&&(r.key=this.key),void 0!==this.parent&&null!==this.parent&&(r.parent=this.parent),r}}]),t}(),t.exports=e},{"./../core/core":36,"./../methods/defaultChildrenSetter":148,"./../methods/defaultValueSetter":163,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/get":9,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],74:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var c=e("./GeneratorEnumerable"),f=e("./../core/core");e=function(){(0,i.default)(t,c);var e=s(t);function t(r,n){(0,o.default)(this,t),n=e.call(this,n),f.defineProperty((0,a.default)(n),"key",(function(){return r}),!0,!0);var i=n[Symbol.iterator];return f.defineProperty((0,a.default)(n),Symbol.iterator,(function(){return i()})),n}return t}(),t.exports=e},{"./../core/core":36,"./GeneratorEnumerable":69,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],75:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var p=e("./../IEnumerable"),h=(e("./../core/core"),e("./../methods/methods")),d=e("./../Enumerable"),b=e("./../methods/defaultKeySelector"),m=e("./../methods/defaultValueSelector"),v=e("./../methods/defaultSameComparer"),y=e("./../methods/defaultAction");t.exports=function(){(0,i.default)(t,p);var e=f(t);function t(){return(0,o.default)(this,t),e.call(this,{})}return(0,a.default)(t,[{key:"toObject",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return e=h.asSelector(e),t=h.asSelector(t),r=h.asSameComparer(r),this.toDictionary(e,t,r).toObject()}},{key:"toDictionary",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return e=h.asSelector(e),t=h.asSelector(t),r=h.asSameComparer(r),d.toDictionary(this,e,t,r)}},{key:"toLookup",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return e=h.asSelector(e),t=h.asSelector(t),r=h.asSameComparer(r),d.toLookup(this,e,t,r)}},{key:"forEach",value:function(){var e,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:y,r=s(this);try{for(r.s();!(e=r.n()).done;){var n=e.value;t(n.value,n.key)}}catch(e){r.e(e)}finally{r.f()}}}]),t}()},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultAction":146,"./../methods/defaultKeySelector":155,"./../methods/defaultSameComparer":159,"./../methods/defaultValueSelector":162,"./../methods/methods":169,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],76:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultSelector"),y=e("./../methods/defaultComparer"),g=Symbol.for("FIRST");(e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:y;return(0,a.default)(this,t),n=e.call(this,r),u=b.asComparer(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l,s,f;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],n=g,a=c(r);try{for(a.s();!(i=a.n()).done;)l=i.value,n===g?n=l:u(n,l)<=0?t.push(l):(t.unshift(n),n=l)}catch(e){a.e(e)}finally{a.f()}if(n!==g)return e.next=7,n;e.next=24;break;case 7:s=c(t.sort(u)),e.prev=8,s.s();case 10:if((f=s.n()).done){e.next=16;break}return f=f.value,e.next=14,f;case 14:e.next=10;break;case 16:e.next=21;break;case 18:e.prev=18,e.t0=e.catch(8),s.e(e.t0);case 21:return e.prev=21,s.f(),e.finish(21);case 24:case"end":return e.stop()}}),e,null,[[8,18,21,24]])}))),d.defineProperties((0,i.default)(n),{thenBy:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:v,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:y;return e=b.asSelector(e),t=b.asComparer(t),m.thenBy(this,e,t)},thenByDescending:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:v,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:y;return e=b.asSelector(e),t=b.asComparer(t),m.thenByDescending(this,e,t)}}),d.defineProperty((0,i.default)(n),t.source,r),d.defineProperty((0,i.default)(n),t.orderByComparer,u),n}return t}()).source=Symbol("IOrderedEnumerable.source"),e.orderByComparer=Symbol("IOrderedEnumerable.orderByComparer"),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultComparer":149,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],77:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/toConsumableArray")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return p(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?p(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}e("extend");var d=e("./GeneratorEnumerable"),b=e("./../Enumerable"),m=e("./../core/core"),v=e("./../core/exceptions/NotAncestorOfException"),y=e("./../methods/methods"),g=e("./../methods/defaultPredicate"),x=e("./../methods/defaultEqualityComparer"),C=e("./../methods/defaultValueSetter"),k=e("./../methods/defaultChildrenSetter"),w=function(){(0,l.default)(t,d);var e=h(t);function t(r,n){(0,a.default)(this,t),n=e.call(this,n),m.defineProperty((0,u.default)(n),"value",(function(){return r}),!0,!0);var o=n[Symbol.iterator];return m.defineProperty((0,u.default)(n),Symbol.iterator,(function(){return o()})),m.defineProperty((0,u.default)(n),"children",(function(){return new d(o)}),!0,!0),n}return(0,i.default)(t,[{key:"values",get:function(){return b.select(this.children,(function(e){return e.value}))}},{key:"getChild",value:function(e){return b.elementAt(this.children,e)}},{key:"getValue",value:function(e){return this.getChild(e).value}},{key:"toValue",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:k,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:C,r=(t=y.asSetter(t),e=y.asSetter(e),{});void 0!==this.value&&t(r,this.value);var n=b.select(this,(function(r){return r.toValue(e,t)})).toArray();return n.length&&e(r,n),r}},{key:"toObject",value:function(){var e={value:this.value},t=b.select(this,(function(e){return e.toObject()})).toArray();return t.length&&(e.children=t),m.isUndefined(this.parent)||(e.parent=this.parent),e}},{key:"breadthTraverse",value:function(){return new O(this)}},{key:"breadthSearch",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:g;return b.first(this.breadthTraverse(),e)}},{key:"breadthSubTree",value:function(e){return new P(this,e)}},{key:"depthTraverse",value:function(){return new A(this)}},{key:"depthSearch",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:g;return b.first(this.depthTraverse(),e)}},{key:"depthSubTree",value:function(e){return new _(this,e)}},{key:"lowestAncestor",value:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=r.length,a=new Array(o).fill(!1),i=function e(n){var i,u=0,l=f(r);try{for(l.s();!(i=l.n()).done;){var s=i.value;if(!a[u]&&t.isSameNode(n,s)){a[u]=!0,o--;break}u++}}catch(n){l.e(n)}finally{l.f()}var c,p=f(n);try{for(p.s();!(c=p.n()).done;){var h=e(c.value);if(h)return h;if(0===o)return n}}catch(n){p.e(n)}finally{p.f()}return!1}(this);if(i)return i.value;throw new v(this,r[a.map((function(e,t){return{match:e,index:t}})).find((function(e){return!e.match})).index])}},{key:"isChildOf",value:function(e){return e.isParentOf(this)}},{key:"isParentOf",value:function(e){return b.any(this,(function(r){return t.isSameNode(r,e)}))}},{key:"isDescendantOf",value:function(e){return e.isAncestorOf(this)}},{key:"isAncestorOf",value:function(e){return function r(n){if(t.isSameNode(n,e))return!0;var o,a=f(n);try{for(a.s();!(o=a.n()).done;)if(r(o.value))return!0}catch(n){a.e(n)}finally{a.f()}return!1}(this)}},{key:"getParent",value:function(e){return this.getParentNode(e).value}},{key:"getParentNode",value:function(e){var r=function r(n){if(t.isSameNode(n,e))return!0;var o,a=f(n);try{for(a.s();!(o=a.n()).done;){var i=r(o.value);if(!0===i)return n;if(i)return i}}catch(n){a.e(n)}finally{a.f()}return!1}(this);if(r&&!0!==r)return r;throw new v(this,e)}},{key:"prevAllNodes",value:function(e){return new j(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"prevNode",value:function(e){return b.last(this.prevAllNodes(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g))}},{key:"nextAllNodes",value:function(e){return new D(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"nextNode",value:function(e){return b.first(this.nextAllNodes(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g))}},{key:"siblingNodes",value:function(e){return new q(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"prevAll",value:function(e){return new I(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"prev",value:function(e){return b.last(this.prevAll(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g))}},{key:"nextAll",value:function(e){return new T(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"next",value:function(e){return b.first(this.nextAll(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g))}},{key:"siblings",value:function(e){return new $(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:g)}},{key:"path",value:function(e){return e.pathTo(this)}},{key:"pathTo",value:function(e){return new S(this,e)}},{key:"pathNodes",value:function(e){return e.pathNodesTo(this)}},{key:"pathNodesTo",value:function(e){return new E(this,e)}},{key:"degree",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:g;return e=y.asPredicate(e),b.count(this.children,(function(t,r){return e(t.value,r)}))}},{key:"depth",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:g;return e=y.asPredicate(e),b.where(this.children,(function(t,r){return e(t.value,r)})).maxOrDefault(0,(function(t){return t.depth(e)}))+1}},{key:"isBinary",value:function(){return this.degree()<=2&&b.all(this.children,(function(e){return e.isBinary()}))}},{key:"isFullBinary",value:function(){var e=this.degree();return 0===e||2===e&&b.all(this.children,(function(e){return e.isFullBinary()}))}},{key:"isCompleteBinary",value:function(){for(var e,t=[this],r=!1;t.length;)if(e=t.shift(),r){if(0!==e.degree())return!1}else{var n=e.degree();if(2<n)return!1;2!==n&&(r=!0),t.push.apply(t,(0,o.default)(e.children))}return!0}},{key:"isPerfectBinary",value:function(){for(var e=[this],t=[];e.length;){var r,n=(r=e.shift()).degree();if(0===n){if(t.length)return!1}else{if(2!==n)return!1;t.push.apply(t,(0,o.default)(r.children))}!e.length&&t.length&&(e=t,t=[])}return!0}},{key:"asBinary",value:function(){return new R(this)}}]),t}();w.isSameNode=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:x;return r=y.asComparer(r),e===t||r(e.value,t instanceof w?t.value:t)},t.exports=w;var R=e("./BinaryTree"),S=e("./PathToEnumerable"),E=e("./PathNodesToEnumerable"),O=e("./BreadthEnumerable"),A=e("./DepthEnumerable"),P=e("./BreadthSubTreeEnumerable"),_=e("./DepthSubTreeEnumerable"),I=e("./PrevEnumerable"),T=e("./NextEnumerable"),$=e("./SiblingsEnumerable"),j=e("./PrevNodesEnumerable"),D=e("./NextNodesEnumerable"),q=e("./SiblingNodesEnumerable")},{"./../Enumerable":31,"./../core/core":36,"./../core/exceptions/NotAncestorOfException":42,"./../methods/defaultChildrenSetter":148,"./../methods/defaultEqualityComparer":150,"./../methods/defaultPredicate":157,"./../methods/defaultValueSetter":163,"./../methods/methods":169,"./BinaryTree":50,"./BreadthEnumerable":51,"./BreadthSubTreeEnumerable":52,"./DepthEnumerable":59,"./DepthSubTreeEnumerable":60,"./GeneratorEnumerable":69,"./NextEnumerable":91,"./NextNodesEnumerable":92,"./PathNodesToEnumerable":97,"./PathToEnumerable":98,"./PrevEnumerable":105,"./PrevNodesEnumerable":106,"./SiblingNodesEnumerable":116,"./SiblingsEnumerable":117,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/createClass":7,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,extend:28}],78:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.hasLeft())return e.delegateYield(new t(r.left),"t0",2);e.next=2;break;case 2:return e.next=4,r.value;case 4:if(r.hasRight())return e.delegateYield(new t(r.right),"t1",6);e.next=6;break;case 6:case"end":return e.stop()}}),e)}))),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],79:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./BinaryTree"),c=e("./../Enumerable"),f=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,a.default)(t,s);var e=l(t);function t(r){(0,o.default)(this,t);var n={},a=c.toArray(r);if(!a.length)throw new f;for(var i=[n],u=1;u<a.length;u+=2){var l,s,p=i.shift();2<=a.length-u?(p.children=[l={},s={}],i.push(l,s)):(p.children=[p={}],i.push(p))}var h=0;return function e(t){t.children&&1<=t.children.length&&e(t.children[0]),t.value=a[h++],t.children&&2===t.children.length&&e(t.children[1])}(n),e.call(this,n)}return t}(),t.exports=e},{"./../Enumerable":31,"./../core/exceptions/NoSuchElementsException":41,"./BinaryTree":50,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],80:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,r),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,l,s;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n[Symbol.iterator](),(a=t.next()).done){e.next=32;break}i=0,u=[],l=c(r),e.prev=6,l.s();case 8:if((s=l.n()).done){e.next=24;break}if(s=s.value,u.push(s),i===a.value)return e.next=14,s;e.next=21;break;case 14:if(!(a=t.next()).done&&a.value<=i)return e.next=17,u[a.value];e.next=19;break;case 17:e.next=14;break;case 19:if(a.done)return e.abrupt("break",24);e.next=21;break;case 21:i++;case 22:e.next=8;break;case 24:e.next=29;break;case 26:e.prev=26,e.t0=e.catch(6),l.e(e.t0);case 29:return e.prev=29,l.f(),e.finish(29);case 32:case"end":return e.stop()}}),e,null,[[6,26,29,32]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],81:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultEqualityComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,r),l=b.asEqualityComparer(l),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=13;break}if(u=i.value,!m.contains(n,u,l)){e.next=11;break}if(m.contains(t,u,l)){e.next=11;break}return t.push(u),e.next=11,u;case 11:e.next=4;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[2,15,18,21]])}))),u}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],82:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,r),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(r,"t0",1);case 1:case"end":return e.stop()}}),e)}))),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],83:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./IterableEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){(0,a.default)(this,t);var n=e.call(this,r),u=[],l=!0;return p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!l){e.next=10;break}case 1:if((t=r.next()).done){e.next=7;break}return e.next=4,t.value;case 4:u.push(t.value),e.next=1;break;case 7:l=!1,e.next=11;break;case 10:return e.delegateYield(u,"t0",11);case 11:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../core/core":36,"./IterableEnumerable":82,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],84:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultJoinSelector"),v=e("./../methods/defaultEqualityComparer"),y=e("./../methods/defaultSelector");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,f=4<arguments.length&&void 0!==arguments[4]?arguments[4]:y,p=5<arguments.length&&void 0!==arguments[5]?arguments[5]:v;return(0,a.default)(this,t),u=e.call(this,r),s=b.asSelector(s),f=b.asSelector(f),p=b.asEqualityComparer(p),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,h,d,b,m,v,y;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=0,i=c(r),e.prev=2,i.s();case 4:if((m=i.n()).done){e.next=52;break}if(u=m.value,h=s(u,a),0!==a){e.next=31;break}d=0,b=c(n),e.prev=10,b.s();case 12:if((m=b.n()).done){e.next=21;break}if(y=m.value,m=f(y,d++),t.push({key:m,element:y}),p(h,m))return e.next=19,l(u,y);e.next=19;break;case 19:e.next=12;break;case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(10),b.e(e.t0);case 26:return e.prev=26,b.f(),e.finish(26);case 29:e.next=49;break;case 31:v=c(t),e.prev=32,v.s();case 34:if((y=v.n()).done){e.next=41;break}if(y=y.value,p(h,y.key))return e.next=39,l(u,y.element);e.next=39;break;case 39:e.next=34;break;case 41:e.next=46;break;case 43:e.prev=43,e.t1=e.catch(32),v.e(e.t1);case 46:return e.prev=46,v.f(),e.finish(46);case 49:a++;case 50:e.next=4;break;case 52:e.next=57;break;case 54:e.prev=54,e.t2=e.catch(2),i.e(e.t2);case 57:return e.prev=57,i.f(),e.finish(57);case 60:case"end":return e.stop()}}),e,null,[[2,54,57,60],[10,23,26,29],[32,43,46,49]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultJoinSelector":154,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],85:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultJoinSelector"),v=e("./../methods/defaultEqualityComparer"),y=e("./../methods/defaultSelector");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,f=4<arguments.length&&void 0!==arguments[4]?arguments[4]:y,p=5<arguments.length&&void 0!==arguments[5]?arguments[5]:v;return(0,a.default)(this,t),u=e.call(this,r),s=b.asSelector(s),f=b.asSelector(f),p=b.asEqualityComparer(p),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,h,d,b,m,v,y,g,x;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=0,i=c(r),e.prev=2,i.s();case 4:if((v=i.n()).done){e.next=62;break}if(u=v.value,h=s(u,a),0!==a){e.next=36;break}d=0,b=!1,m=c(n),e.prev=11,m.s();case 13:if((v=m.n()).done){e.next=23;break}if(x=v.value,v=f(x,d++),t.push({key:v,element:x}),p(h,v))return b=!0,e.next=21,l(u,x);e.next=21;break;case 21:e.next=13;break;case 23:e.next=28;break;case 25:e.prev=25,e.t0=e.catch(11),m.e(e.t0);case 28:return e.prev=28,m.f(),e.finish(28);case 31:if(b){e.next=34;break}return e.next=34,l(u);case 34:e.next=59;break;case 36:y=!1,g=c(t),e.prev=38,g.s();case 40:if((x=g.n()).done){e.next=48;break}if(x=x.value,p(h,x.key))return y=!0,e.next=46,l(u,x.element);e.next=46;break;case 46:e.next=40;break;case 48:e.next=53;break;case 50:e.prev=50,e.t1=e.catch(38),g.e(e.t1);case 53:return e.prev=53,g.f(),e.finish(53);case 56:if(y){e.next=59;break}return e.next=59,l(u);case 59:a++;case 60:e.next=4;break;case 62:e.next=67;break;case 64:e.prev=64,e.t2=e.catch(2),i.e(e.t2);case 67:return e.prev=67,i.f(),e.finish(67);case 70:case"end":return e.stop()}}),e,null,[[2,64,67,70],[11,25,28,31],[38,50,53,56]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultJoinSelector":154,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],86:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../Enumerable"),h=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n,u){var l;return(0,a.default)(this,t),l=e.call(this,r),h.defineProperty((0,i.default)(l),Symbol.iterator,o.default.mark((function e(){var t,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=p.toArray(r),a=t.length;case 2:if(a<n)return e.next=5,u;e.next=8;break;case 5:a++,e.next=2;break;case 8:return e.delegateYield(t,"t0",9);case 9:case"end":return e.stop()}}),e)}))),l}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],87:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./Dictionary");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(){return(0,o.default)(this,t),e.call(this)}return t}()},{"./Dictionary":61,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],88:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./IMapEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultSameComparer"),v=e("./../methods/equalityPredicate"),y=e("./Entry");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=c(r.keys()),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=9;break}return n=n.value,e.next=7,new y(n,r.get(n));case 7:e.next=3;break;case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),t.e(e.t0);case 14:return e.prev=14,t.f(),e.finish(14);case 17:case"end":return e.stop()}}),e,null,[[1,11,14,17]])}))),d.defineProperties((0,i.default)(n),{get:function(e){var t;return(t=b.asSameComparer(t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m))===m?r.get(e):r.get(this.keys().singleOrDefault(e,v(e,t)))},set:function(e,t){var n;return(n=b.asSameComparer(n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m))===m?r.set(e,t):r.set(this.keys().singleOrDefault(e,v(e,n)),t),this},has:function(e){var t;return(t=b.asSameComparer(t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m))===m?r.has(e):this.keys().contains(e,t)},delete:function(e){var t;return(t=b.asSameComparer(t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m))===m?r.delete(e):r.delete(this.keys().singleOrDefault(e,v(e,t)))},keys:function(){return r.keys().asEnumerable()},values:function(){return r.values().asEnumerable()},entries:function(){return r.entries().asEnumerable()}}),n}return t}(),t.exports=e},{"./../core/core":36,"./../methods/defaultSameComparer":159,"./../methods/equalityPredicate":165,"./../methods/methods":169,"./Entry":65,"./IMapEnumerable":75,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],89:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core"),h=e("./../methods/methods"),d=(e("./../Enumerable"),e("./../methods/defaultSelector")),b=e("./../methods/defaultResultSelector"),m=e("./../methods/defaultEqualityComparer"),v=(e("./../methods/equalityPredicate"),e("./IGrouping"));e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:d,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,c=4<arguments.length&&void 0!==arguments[4]?arguments[4]:m;return(0,a.default)(this,t),n=e.call(this,r),u=h.asSelector(u),l=h.asSelector(l),s=h.asSelector(s),c=h.asEqualityComparer(c),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,f,p,h,d;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],n=[],a=Symbol("noneKey"),i=a,f=r[Symbol.iterator](),p=function e(){var r,s,p,h=f.next();return h.done||(r=u(h.value),s=l(h.value),i!==a&&c(r,i)||(n=[],i=r,t.push(new v(r,(p=n,o.default.mark((function t(){var r;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0;case 1:if(!(p.length>r||e())){t.next=7;break}if(p.length>r)return t.next=5,p[r++];t.next=5;break;case 5:t.next=1;break;case 7:case"end":return t.stop()}}),t)})))))),n.push(s)),!h.done},h=0;case 7:if(!(t.length>h||p())){e.next=14;break}if(t.length>h)return d=t[h++],e.next=12,s(d.key,d);e.next=12;break;case 12:e.next=7;break;case 14:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultResultSelector":158,"./../methods/defaultSelector":160,"./../methods/equalityPredicate":165,"./../methods/methods":169,"./IGrouping":74,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],90:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./IChunk"),p=e("./../IEnumerable"),h=e("./../core/core"),d=e("./../methods/methods"),b=e("./../methods/defaultFalsePredicate");e=function(){(0,u.default)(t,p);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b;return(0,a.default)(this,t),n=e.call(this,r),u=d.asPredicate(u),h.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l,s,c,p,h;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r[Symbol.iterator](),a=[],i=[],l=n=0,c=function(){var e;i.push(s=new f(n++,(e=a,o.default.mark((function t(){var r;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0;case 1:if(e.length>r||p()&&e.length>r)return t.next=4,e[r++];t.next=6;break;case 4:t.next=1;break;case 6:case"end":return t.stop()}}),t)})))))},p=function e(){var r=t.next();if(r.done)return!1;if(u(r.value,l++)){if(!(a.length||s&&0===s.index))return e();a=[],c()}else a.push(r.value);return!0},c(),h=0;case 9:if(!(i.length>h||p())){e.next=15;break}if(i.length>h)return e.next=13,i[h++];e.next=13;break;case 13:e.next=9;break;case 15:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultFalsePredicate":152,"./../methods/methods":169,"./IChunk":72,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],91:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=r.getParentNode(n),t=!1,a=c(i.children),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=13;break}if(u=i.value,t&&l(u.value))return e.next=10,u.value;e.next=10;break;case 10:!t&&h.isSameNode(u,n)&&(t=!0);case 11:e.next=5;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(3),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[3,15,18,21]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],92:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=r.getParentNode(n),t=!1,a=c(i.children),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=13;break}if(u=i.value,t&&l(u.value))return e.next=10,u;e.next=10;break;case 10:!t&&h.isSameNode(u,n)&&(t=!0);case 11:e.next=5;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(3),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[3,15,18,21]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],93:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./IMapEnumerable"),p=e("./../core/core"),h=e("./Entry");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,n=Object.keys(r);case 1:if(t<n.length)return a=n[t],e.next=5,new h(a,r[a]);e.next=8;break;case 5:t++,e.next=1;break;case 8:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../core/core":36,"./Entry":65,"./IMapEnumerable":75,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],94:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=function(e){return e instanceof Boolean||!0===e||!1===e},m=function(e){return e instanceof String||d.getType(e)===d.types.String},v=function(e){return e instanceof Array||d.getType(e)===d.types.Array||Array.isArray&&Array.isArray(e)},y=function(e){return e instanceof Object&&!(e instanceof RegExp||v(e)||x(e))},g=function(e){return e instanceof Number||d.getType(e)===d.types.Number},x=function(e){return e instanceof Function||d.getType(e)===d.types.Function},C=function(e){return function(t){return t instanceof e}},k=function(e){return function(t){return d.getType(t).toUpperCase()===e.toUpperCase()}};e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){(0,a.default)(this,t);var u=e.call(this,r),l=n===Boolean?b:n===String?m:n===Array?v:n===Number?g:n===Function?x:n===Object?y:(d.getType(n)===d.types.String?k:C)(n);return d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=c(r),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=10;break}if(n=n.value,l(n))return e.next=8,n;e.next=8;break;case 8:e.next=3;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),t.e(e.t0);case 15:return e.prev=15,t.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,null,[[1,12,15,18]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],95:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./IOrderedEnumerable"),c=e("./../methods/methods"),f=e("./../methods/defaultSelector"),p=e("./../methods/defaultComparer"),h=e("./../methods/selectorComparer"),d=e("./../methods/descendingComparer");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:p;return(0,o.default)(this,t),n=c.asSelector(n),a=c.asComparer(a),e.call(this,r,d(h(n,a)))}return t}()},{"./../methods/defaultComparer":149,"./../methods/defaultSelector":160,"./../methods/descendingComparer":164,"./../methods/methods":169,"./../methods/selectorComparer":176,"./IOrderedEnumerable":76,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],96:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./IOrderedEnumerable"),c=e("./../methods/methods"),f=e("./../methods/defaultSelector"),p=e("./../methods/defaultComparer"),h=e("./../methods/selectorComparer");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:p;return(0,o.default)(this,t),n=c.asSelector(n),a=c.asComparer(a),e.call(this,r,h(n,a))}return t}()},{"./../methods/defaultComparer":149,"./../methods/defaultSelector":160,"./../methods/methods":169,"./../methods/selectorComparer":176,"./IOrderedEnumerable":76,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],97:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./ITree"),b=e("./../core/core"),m=e("./../core/exceptions/NotAncestorOfException");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,[]),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(a=function e(t,r){if(t.push(r),d.isSameNode(r,n))return t;var o,a=c(r);try{for(a.s();!(o=a.n()).done;)if(e(t,o.value))return t}catch(t){a.e(t)}finally{a.f()}return t.pop(),!1}([],r))){e.next=22;break}t=c(a),e.prev=4,t.s();case 6:if((a=t.n()).done){e.next=12;break}return a=a.value,e.next=10,a;case 10:e.next=6;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(4),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:e.next=23;break;case 22:throw new m(r,n);case 23:case"end":return e.stop()}}),e,null,[[4,14,17,20]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NotAncestorOfException":42,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],98:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./ITree"),b=e("./../core/core"),m=e("./../core/exceptions/NotAncestorOfException");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,[]),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(a=function e(t,r){if(t.push(r),d.isSameNode(r,n))return t;var o,a=c(r);try{for(a.s();!(o=a.n()).done;)if(e(t,o.value))return t}catch(t){a.e(t)}finally{a.f()}return t.pop(),!1}([],r))){e.next=22;break}t=c(a),e.prev=4,t.s();case 6:if((a=t.n()).done){e.next=12;break}return a=a.value,e.next=10,a.value;case 10:e.next=6;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(4),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:e.next=23;break;case 22:throw new m(r,n);case 23:case"end":return e.stop()}}),e,null,[[4,14,17,20]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NotAncestorOfException":42,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],99:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../Enumerable"),d=e("./IndicesEnumerable"),b=e("./../core/core"),m=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,l.default)(t,p);var e=f(t);function t(r,n){var l;return(0,i.default)(this,t),l=e.call(this,r),b.defineProperty((0,u.default)(l),Symbol.iterator,o.default.mark((function e(){var t,i,u,l,s,c,f,p;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r[Symbol.iterator](),i=h.range(0,n).toArray(),u=h.repeat(!0,n).toArray(),s=!(l=[]),c=function(){var e=t.next();if(e.done)return!(s=!0);for(l.push(e.value);u.length<l.length;)u.push(!1);return!0},f=function(){for(var e=n-1;0<=e;e--){var t=u[i[e]]=!1;do{if(i[e]++,l.length<=i[e]&&(!s&&c()||(t=!0),s))break}while(u[i[e]]);if(!t){u[i[e]]=!0;for(var r=e+1;r<n;r++)for(var o=0;o<u.length;o++)if(!u[o]){i[r]=o,u[o]=!0;break}return!0}}return!1},p=i[n-1];case 8:if(!(l.length<=p)){e.next=13;break}if(c()){e.next=11;break}throw new m;case 11:e.next=8;break;case 13:return e.next=15,new d(l,(0,a.default)(i));case 15:if(f()){e.next=13;break}case 16:case"end":return e.stop()}}),e)}))),l}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NoSuchElementsException":41,"./IndicesEnumerable":80,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],100:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../Enumerable"),d=e("./IndicesEnumerable"),b=e("./../core/core"),m=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,l.default)(t,p);var e=f(t);function t(r,n){var l;return(0,i.default)(this,t),l=e.call(this,r),b.defineProperty((0,u.default)(l),Symbol.iterator,o.default.mark((function e(){var t,i,u,l,s,c;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r[Symbol.iterator](),i=h.repeat(0,n).toArray(),l=!(u=[]),c=function(){for(var e=n-1;0<=e;e--){i[e]++;var t=!1;if(u.length<=i[e]&&(!l&&s()||(t=!(i[e]=0))),!t)return!0}return!1},!(s=function(){var e=t.next();return e.done?!(l=!0):(u.push(e.value),!0)})()){e.next=12;break}case 7:return e.next=9,new d(u,(0,a.default)(i));case 9:if(c()){e.next=7;break}case 10:e.next=13;break;case 12:throw new m;case 13:case"end":return e.stop()}}),e)}))),l}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../core/exceptions/NoSuchElementsException":41,"./IndicesEnumerable":80,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],101:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.hasLeft())return e.delegateYield(new t(r.left),"t0",2);e.next=2;break;case 2:if(r.hasRight())return e.delegateYield(new t(r.right),"t1",4);e.next=4;break;case 4:return e.next=6,r.value;case 6:case"end":return e.stop()}}),e)}))),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],102:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./BinaryTree"),c=e("./../Enumerable"),f=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,a.default)(t,s);var e=l(t);function t(r){(0,o.default)(this,t);var n={},a=c.toArray(r);if(!a.length)throw new f;for(var i=[n],u=1;u<a.length;u+=2){var l,s,p=i.shift();2<=a.length-u?(p.children=[l={},s={}],i.push(l,s)):(p.children=[p={}],i.push(p))}var h=0;return function e(t){t.children&&1<=t.children.length&&e(t.children[0]),t.children&&2===t.children.length&&e(t.children[1]),t.value=a[h++]}(n),e.call(this,n)}return t}(),t.exports=e},{"./../Enumerable":31,"./../core/exceptions/NoSuchElementsException":41,"./BinaryTree":50,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],103:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.value;case 2:if(r.hasLeft())return e.delegateYield(new t(r.left),"t0",4);e.next=4;break;case 4:if(r.hasRight())return e.delegateYield(new t(r.right),"t1",6);e.next=6;break;case 6:case"end":return e.stop()}}),e)}))),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],104:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./BinaryTree"),c=e("./../Enumerable"),f=e("./../core/exceptions/NoSuchElementsException");e=function(){(0,a.default)(t,s);var e=l(t);function t(r){(0,o.default)(this,t);var n={},a=c.toArray(r);if(!a.length)throw new f;for(var i=[n],u=1;u<a.length;u+=2){var l,s,p=i.shift();2<=a.length-u?(p.children=[l={},s={}],i.push(l,s)):(p.children=[p={}],i.push(p))}var h=0;return function e(t){t.value=a[h++],t.children&&1<=t.children.length&&e(t.children[0]),t.children&&2===t.children.length&&e(t.children[1])}(n),e.call(this,n)}return t}(),t.exports=e},{"./../Enumerable":31,"./../core/exceptions/NoSuchElementsException":41,"./BinaryTree":50,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],105:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=r.getParentNode(n),t=c(a.children),e.prev=2,t.s();case 4:if((a=t.n()).done){e.next=13;break}if(i=a.value,h.isSameNode(i,n))return e.abrupt("break",13);e.next=8;break;case 8:if(l(i.value))return e.next=11,i.value;e.next=11;break;case 11:e.next=4;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),t.e(e.t0);case 18:return e.prev=18,t.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[2,15,18,21]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],106:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=r.getParentNode(n),t=c(a.children),e.prev=2,t.s();case 4:if((a=t.n()).done){e.next=13;break}if(i=a.value,h.isSameNode(i,n))return e.abrupt("break",13);e.next=8;break;case 8:if(l(i.value))return e.next=11,i;e.next=11;break;case 11:e.next=4;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),t.e(e.t0);case 18:return e.prev=18,t.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[2,15,18,21]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],107:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../Enumerable"),h=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,l=2<arguments.length&&void 0!==arguments[2]&&arguments[2];return(0,a.default)(this,t),n=e.call(this,r),h.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,s;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=p.toArray(r),!l){e.next=11;break}n=0;case 3:if(n<u)return e.next=6,t[Math.floor(t.length*Math.random())];e.next=9;break;case 6:n++,e.next=3;break;case 9:e.next=21;break;case 11:s=0;case 12:if(s<u)return a=Math.floor((t.length-s)*Math.random())+s,i=t[a],t[a]=t[s],e.next=18,i;e.next=21;break;case 18:s++,e.next=12;break;case 21:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],108:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return(0,a.default)(this,t),u=e.call(this,[]),p.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,a=r;case 1:if(t<n)return e.next=4,a;e.next=7;break;case 4:t++,a+=l,e.next=1;break;case 7:case"end":return e.stop()}}),e)}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],109:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0;case 1:if(t<u)return e.next=4,r;e.next=7;break;case 4:t++,e.next=1;break;case 7:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],110:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../Enumerable"),h=e("./../core/core");e=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,r),h.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=p.toArray(r),n=t.length,n-=1;case 2:if(0<=n)return e.next=5,t[n];e.next=8;break;case 5:n--,e.next=2;break;case 8:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],111:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultJoinSelector"),v=e("./../methods/defaultEqualityComparer"),y=e("./../methods/defaultSelector");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m,s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:y,f=4<arguments.length&&void 0!==arguments[4]?arguments[4]:y,p=5<arguments.length&&void 0!==arguments[5]?arguments[5]:v;return(0,a.default)(this,t),u=e.call(this,r),s=b.asSelector(s),f=b.asSelector(f),p=b.asEqualityComparer(p),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,h,d,b,m,v,y,g,x;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=0,i=c(n),e.prev=2,i.s();case 4:if((v=i.n()).done){e.next=62;break}if(u=v.value,h=f(u,a),0!==a){e.next=36;break}d=0,b=!1,m=c(r),e.prev=11,m.s();case 13:if((v=m.n()).done){e.next=23;break}if(x=v.value,v=s(x,d++),t.push({key:v,element:x}),p(v,h))return b=!0,e.next=21,l(x,u);e.next=21;break;case 21:e.next=13;break;case 23:e.next=28;break;case 25:e.prev=25,e.t0=e.catch(11),m.e(e.t0);case 28:return e.prev=28,m.f(),e.finish(28);case 31:if(b){e.next=34;break}return e.next=34,l(void 0,u);case 34:e.next=59;break;case 36:y=!1,g=c(t),e.prev=38,g.s();case 40:if((x=g.n()).done){e.next=48;break}if(x=x.value,p(x.key,h))return y=!0,e.next=46,l(x.element,u);e.next=46;break;case 46:e.next=40;break;case 48:e.next=53;break;case 50:e.prev=50,e.t1=e.catch(38),g.e(e.t1);case 53:return e.prev=53,g.f(),e.finish(53);case 56:if(y){e.next=59;break}return e.next=59,l(void 0,u);case 59:a++;case 60:e.next=4;break;case 62:e.next=67;break;case 64:e.prev=64,e.t2=e.catch(2),i.e(e.t2);case 67:return e.prev=67,i.f(),e.finish(67);case 70:case"end":return e.stop()}}),e,null,[[2,64,67,70],[11,25,28,31],[38,50,53,56]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/defaultJoinSelector":154,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],112:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n,u){var l;return(0,a.default)(this,t),l=e.call(this,r),d.defineProperty((0,i.default)(l),Symbol.iterator,o.default.mark((function e(){var t,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=c(r),e.prev=1,t.s();case 3:if((a=t.n()).done){e.next=10;break}return a=a.value,n--,e.next=8,a;case 8:e.next=3;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),t.e(e.t0);case 15:return e.prev=15,t.f(),e.finish(15);case 18:i=0;case 19:if(i<n)return e.next=22,u;e.next=25;break;case 22:i++,e.next=19;break;case 25:case"end":return e.stop()}}),e,null,[[1,12,15,18]])}))),l}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],113:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultSelector");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asSelector(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,n=c(r),e.prev=2,n.s();case 4:if((a=n.n()).done){e.next=10;break}return a=a.value,e.next=8,u(a,t++);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),n.e(e.t0);case 15:return e.prev=15,n.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,null,[[2,12,15,18]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],114:[function(e,t,r){"use strict";var n=(v=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/regenerator")),o=v(e("@babel/runtime/helpers/classCallCheck")),a=v(e("@babel/runtime/helpers/assertThisInitialized")),i=v(e("@babel/runtime/helpers/inherits")),u=v(e("@babel/runtime/helpers/possibleConstructorReturn")),l=v(e("@babel/runtime/helpers/getPrototypeOf"));function s(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../core/core"),d=e("./../methods/methods"),b=e("./../methods/defaultSelector"),m=e("./../methods/defaultResultSelector"),v=function(){(0,i.default)(t,p);var e=f(t);function t(r){var i,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m;return(0,o.default)(this,t),i=e.call(this,r),u=d.asSelector(u),h.defineProperty((0,a.default)(i),Symbol.iterator,n.default.mark((function e(){var t,o,a,i,c;return n.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,o=s(r),e.prev=2,o.s();case 4:if((c=o.n()).done){e.next=25;break}a=c.value,i=s(y.asEnumerable(u(a,t++))),e.prev=7,i.s();case 9:if((c=i.n()).done){e.next=15;break}return c=c.value,e.next=13,l(a,c);case 13:e.next=9;break;case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(7),i.e(e.t0);case 20:return e.prev=20,i.f(),e.finish(20);case 23:e.next=4;break;case 25:e.next=30;break;case 27:e.prev=27,e.t1=e.catch(2),o.e(e.t1);case 30:return e.prev=30,o.f(),e.finish(30);case 33:case"end":return e.stop()}}),e,null,[[2,27,30,33],[7,17,20,23]])}))),i}return t}();t.exports=v;var y=e("./../Enumerable")},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultResultSelector":158,"./../methods/defaultSelector":160,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],115:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../Enumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultValueSelector"),y=e("./../methods/defaultChildrenSelector");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:y,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),n=e.call(this,r),u=m.asSelector(u),l=m.asSelector(l),b.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=c(r),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=22;break}if(a=n.value,b.isUndefined(a))return e.next=8,a;e.next=10;break;case 8:e.next=20;break;case 10:if(i=u(a),!b.isList(i)){e.next=18;break}if(a!==i)return e.next=15,l(a);e.next=15;break;case 15:return e.delegateYield(d.separate(i,u,l),"t0",16);case 16:e.next=20;break;case 18:return e.next=20,l(a);case 20:e.next=3;break;case 22:e.next=27;break;case 24:e.prev=24,e.t1=e.catch(1),t.e(e.t1);case 27:return e.prev=27,t.f(),e.finish(27);case 30:case"end":return e.stop()}}),e,null,[[1,24,27,30]])}))),n}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultChildrenSelector":147,"./../methods/defaultValueSelector":162,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],116:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=r.getParentNode(n),t=!1,a=c(i.children),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=16;break}if(u=i.value,t||!h.isSameNode(u,n)){e.next=11;break}t=!0,e.next=14;break;case 11:if(l(u.value))return e.next=14,u;e.next=14;break;case 14:e.next=5;break;case 16:e.next=21;break;case 18:e.prev=18,e.t0=e.catch(3),a.e(e.t0);case 21:return e.prev=21,a.f(),e.finish(21);case 24:case"end":return e.stop()}}),e,null,[[3,18,21,24]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],117:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./ITree"),d=e("./../IEnumerable"),b=e("./../core/core"),m=e("./../methods/methods"),v=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,d);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,[]),l=m.asPredicate(l),b.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=r.getParentNode(n),t=!1,a=c(i.children),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=16;break}if(u=i.value,t||!h.isSameNode(u,n)){e.next=11;break}t=!0,e.next=14;break;case 11:if(l(u.value))return e.next=14,u.value;e.next=14;break;case 14:e.next=5;break;case 16:e.next=21;break;case 18:e.prev=18,e.t0=e.catch(3),a.e(e.t0);case 21:return e.prev=21,a.f(),e.finish(21);case 24:case"end":return e.stop()}}),e,null,[[3,18,21,24]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],118:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core");t.exports=function(){(0,u.default)(t,f);var e=c(t);function t(r){var n;return(0,a.default)(this,t),n=e.call(this,[]),p.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r;case 2:case"end":return e.stop()}}),e)}))),n}return t}()},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],119:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,r),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=12;break}if(i=i.value,n<=t)return e.next=9,i;e.next=9;break;case 9:t++;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),a.e(e.t0);case 17:return e.prev=17,a.f(),e.finish(17);case 20:case"end":return e.stop()}}),e,null,[[2,14,17,20]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],120:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return(0,a.default)(this,t),n=e.call(this,r),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l,s,f,p,h;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(0<u)){e.next=12;break}n=t=0,a=[],i=c(r);try{for(i.s();!(l=i.n()).done;)s=l.value,t++,a.push(s),n+1<=t*u&&(n++,a.shift())}catch(e){i.e(e)}finally{i.f()}f=0,p=a;case 5:if(f<p.length)return h=p[f],e.next=9,h;e.next=12;break;case 9:f++,e.next=5;break;case 12:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],121:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultSameComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asComparer(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l,s;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=n=!(t=!0),i=c(r),e.prev=2,i.s();case 4:if((l=i.n()).done){e.next=22;break}if(s=l.value,!t){e.next=11;break}n=s,t=!1,e.next=20;break;case 11:if(a)return e.next=14,s;e.next=16;break;case 14:e.next=20;break;case 16:if(u(s,n)){e.next=20;break}return a=!0,e.next=20,s;case 20:e.next=4;break;case 22:e.next=27;break;case 24:e.prev=24,e.t0=e.catch(2),i.e(e.t0);case 27:return e.prev=27,i.f(),e.finish(27);case 30:case"end":return e.stop()}}),e,null,[[2,24,27,30]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultSameComparer":159,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],122:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asPredicate(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=!0,n=0,a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=12;break}if(l=i.value,t=t&&u(l,n++)){e.next=10;break}return e.next=10,l;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),a.e(e.t0);case 17:return e.prev=17,a.f(),e.finish(17);case 20:case"end":return e.stop()}}),e,null,[[2,14,17,20]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],123:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return p(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?p(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var d=e("./../IEnumerable"),b=e("./../core/core");e=function(){(0,l.default)(t,d);var e=h(t);function t(r){var n,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,s=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0;return(0,i.default)(this,t),n=e.call(this,r),b.defineProperty((0,u.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(l<0||s<0)&&(r=(0,a.default)(r),l<0&&(l=Math.max(r.length+l,0)),s<0&&(s=Math.max(r.length+s,0))),t=0,n=f(r),e.prev=3,n.s();case 5:if((i=n.n()).done){e.next=17;break}if(i=i.value,l<=t&&t<s)return e.next=10,i;e.next=12;break;case 10:e.next=14;break;case 12:if(s<=t)return e.abrupt("break",17);e.next=14;break;case 14:t++;case 15:e.next=5;break;case 17:e.next=22;break;case 19:e.prev=19,e.t0=e.catch(3),n.e(e.t0);case 22:return e.prev=22,n.f(),e.finish(22);case 25:case"end":return e.stop()}}),e,null,[[3,19,22,25]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],124:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/defineProperty")),u=n(e("@babel/runtime/helpers/classCallCheck")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var p=e("./../IEnumerable"),h=e("./../methods/defaultComparer"),d=e("./../core/core"),b=e("./../methods/methods");t.exports=function(){(0,l.default)(t,p);var e=f(t);function t(r){var n,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;if((0,u.default)(this,t),n=e.call(this,r),l=b.asComparer(l),d.isArray(r)&&d.array$sort)return(0,s.default)(n,m.extend(d.array$sort.call(r,l)));var c=(0,i.default)({},Symbol.iterator,r[Symbol.iterator]);return d.setProperty(r,Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield((0,a.default)(c).sort(l),"t0",1);case 1:case"end":return e.stop()}}),e)}))),(0,s.default)(n,r)}return t}();var m=e("./../Enumerable")},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultComparer":149,"./../methods/methods":169,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/regenerator":27}],125:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/defineProperty")),i=n(e("@babel/runtime/helpers/classCallCheck")),u=n(e("@babel/runtime/helpers/assertThisInitialized")),l=n(e("@babel/runtime/helpers/inherits")),s=n(e("@babel/runtime/helpers/possibleConstructorReturn")),c=n(e("@babel/runtime/helpers/getPrototypeOf"));function f(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return p(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?p(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,c.default)(e);return n=t?(r=(0,c.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,s.default)(this,n)}}var d=e("./../IEnumerable"),b=e("./../core/core");e=function(){(0,l.default)(t,d);var e=h(t);function t(r,n,l){for(var s,c,p,h,d=arguments.length,m=new Array(3<d?d-3:0),v=3;v<d;v++)m[v-3]=arguments[v];return(0,i.default)(this,t),s=e.call(this,r),b.isArray(r)&&b.array$splice?(p=(c=b.array$splice).call.apply(c,[r,n,l].concat(m)),b.setProperty((0,u.default)(s),Symbol.iterator,o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(p,"t0",1);case 1:case"end":return e.stop()}}),e)})))):(l=void 0===l?1/0:l,h=(0,a.default)({},Symbol.iterator,r[Symbol.iterator]),b.setProperty(r,Symbol.iterator,o.default.mark((function e(){var t,r,a,i,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,r=f(h),e.prev=2,r.s();case 4:if((u=r.n()).done){e.next=35;break}if(a=u.value,t<n)return e.next=9,a;e.next=11;break;case 9:e.next=32;break;case 11:if(t!=n){e.next=29;break}i=f(m),e.prev=13,i.s();case 15:if((u=i.n()).done){e.next=21;break}return u=u.value,e.next=19,u;case 19:e.next=15;break;case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(13),i.e(e.t0);case 26:return e.prev=26,i.f(),e.finish(26);case 29:if(n+l<=t)return e.next=32,a;e.next=32;break;case 32:t++;case 33:e.next=4;break;case 35:e.next=40;break;case 37:e.prev=37,e.t1=e.catch(2),r.e(e.t1);case 40:return e.prev=40,r.f(),e.finish(40);case 43:case"end":return e.stop()}}),e,null,[[2,37,40,43],[13,23,26,29]])}))),b.setProperty((0,u.default)(s),Symbol.iterator,o.default.mark((function e(){var t,r,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,r=f(h),e.prev=2,r.s();case 4:if((a=r.n()).done){e.next=12;break}if(a=a.value,n<=t&&t<n+l)return e.next=9,a;e.next=9;break;case 9:t++;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),r.e(e.t0);case 17:return e.prev=17,r.f(),e.finish(17);case 20:case"end":return e.stop()}}),e,null,[[2,14,17,20]])})))),s}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],126:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./IChunk"),p=e("./../IEnumerable"),h=e("./../core/core"),d=e("./../methods/methods"),b=e("./../methods/defaultFalsePredicate");e=function(){(0,u.default)(t,p);var e=c(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:b;return(0,a.default)(this,t),n=e.call(this,r),u=d.asPredicate(u),h.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l,s,c,p;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r[Symbol.iterator](),a=[],i=[],l=n=0,s=function(){var e;i.push(new f(n++,(e=a,o.default.mark((function t(){var r;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0;case 1:if(e.length>r||c()&&e.length>r)return t.next=4,e[r++];t.next=6;break;case 4:t.next=1;break;case 6:case"end":return t.stop()}}),t)})))))},c=function(){var e=t.next();return!e.done&&(u(e.value,l++)?(a=[],s()):a.push(e.value),!0)},s(),p=0;case 9:if(!(i.length>p||c())){e.next=15;break}if(i.length>p)return e.next=13,i[p++];e.next=13;break;case 13:e.next=9;break;case 15:case"end":return e.stop()}}),e)}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultFalsePredicate":152,"./../methods/methods":169,"./IChunk":72,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],127:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/assertThisInitialized")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var c=e("./IterableEnumerable"),f=e("./../core/core"),p=e("./../methods/methods"),h=e("./../methods/defaultStrictEqualityComparer"),d=e("./../Enumerable");t.exports=function(){(0,i.default)(t,c);var e=s(t);function t(r){var n;return(0,o.default)(this,t),n=e.call(this,r),f.defineProperties((0,a.default)(n),{indexOf:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return(t=p.asStrictEqualityComparer(t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h))===h&&f.string$indexOf?f.string$indexOf.call(r,e,n):d.indexOf(this,e,n,t)},lastIndexOf:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0;return(t=p.asStrictEqualityComparer(t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h))===h&&f.string$lastIndexOf?f.string$lastIndexOf.call(r,e,n):d.lastIndexOf(this,e,n,t)},includes:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return f.string$includes?f.string$includes.call(r,e,t):d.includes(this,e,t)}}),n}return t}()},{"./../Enumerable":31,"./../core/core":36,"./../methods/defaultStrictEqualityComparer":161,"./../methods/methods":169,"./IterableEnumerable":82,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],128:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultEqualityComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,r),l=b.asEqualityComparer(l),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,s,f;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=c(r),e.prev=2,a.s();case 4:if((s=a.n()).done){e.next=13;break}if(i=s.value,m.contains(n,i,l)){e.next=11;break}if(m.contains(t,i,l)){e.next=11;break}return t.push(i),e.next=11,i;case 11:e.next=4;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:u=c(n),e.prev=22,u.s();case 24:if((s=u.n()).done){e.next=33;break}if(f=s.value,m.contains(r,f,l)){e.next=31;break}if(m.contains(t,f,l)){e.next=31;break}return t.push(f),e.next=31,f;case 31:e.next=24;break;case 33:e.next=38;break;case 35:e.prev=35,e.t1=e.catch(22),u.e(e.t1);case 38:return e.prev=38,u.f(),e.finish(38);case 41:case"end":return e.stop()}}),e,null,[[2,15,18,21],[22,35,38,41]])}))),u}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],129:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u;return(0,a.default)(this,t),u=e.call(this,r),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=15;break}if(i=i.value,t<n)return e.next=9,i;e.next=11;break;case 9:e.next=12;break;case 11:return e.abrupt("break",15);case 12:t++;case 13:e.next=4;break;case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),a.e(e.t0);case 20:return e.prev=20,a.f(),e.finish(20);case 23:case"end":return e.stop()}}),e,null,[[2,17,20,23]])}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],130:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1;return(0,a.default)(this,t),n=e.call(this,r),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(0<u)){e.next=23;break}n=t=0,a=[],i=c(r),e.prev=3,i.s();case 5:if((l=i.n()).done){e.next=15;break}if(l=l.value,t++,a.push(l),n+1<=t*u)return n++,e.next=13,a.shift();e.next=13;break;case 13:e.next=5;break;case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(3),i.e(e.t0);case 20:return e.prev=20,i.f(),e.finish(20);case 23:case"end":return e.stop()}}),e,null,[[3,17,20,23]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],131:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultSameComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asComparer(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i,l;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=!(t=!0),a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=21;break}if(l=i.value,t)return n=l,t=!1,e.next=11,l;e.next=13;break;case 11:e.next=19;break;case 13:if(u(l,n))return e.next=16,l;e.next=18;break;case 16:e.next=19;break;case 18:return e.abrupt("break",21);case 19:e.next=4;break;case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(2),a.e(e.t0);case 26:return e.prev=26,a.f(),e.finish(26);case 29:case"end":return e.stop()}}),e,null,[[2,23,26,29]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultSameComparer":159,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],132:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asPredicate(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=!0,n=0,a=c(r),e.prev=2,a.s();case 4:if((i=a.n()).done){e.next=15;break}if(i=i.value,t=t&&u(i,n++))return e.next=10,i;e.next=12;break;case 10:e.next=13;break;case 12:return e.abrupt("break",15);case 13:e.next=4;break;case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),a.e(e.t0);case 20:return e.prev=20,a.f(),e.finish(20);case 23:case"end":return e.stop()}}),e,null,[[2,17,20,23]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],133:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./IOrderedEnumerable"),c=e("./../methods/methods"),f=e("./../methods/thenByComparer"),p=e("./../methods/selectorComparer"),h=e("./../methods/defaultSelector"),d=e("./../methods/defaultComparer"),b=e("./../methods/descendingComparer");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:d;return(0,o.default)(this,t),n=c.asSelector(n),a=c.asComparer(a),e.call(this,r[s.source],f(r[s.orderByComparer],b(p(n,a))))}return t}()},{"./../methods/defaultComparer":149,"./../methods/defaultSelector":160,"./../methods/descendingComparer":164,"./../methods/methods":169,"./../methods/selectorComparer":176,"./../methods/thenByComparer":178,"./IOrderedEnumerable":76,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],134:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/inherits")),i=n(e("@babel/runtime/helpers/possibleConstructorReturn")),u=n(e("@babel/runtime/helpers/getPrototypeOf"));function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);return n=t?(r=(0,u.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,i.default)(this,n)}}var s=e("./IOrderedEnumerable"),c=e("./../methods/methods"),f=e("./../methods/thenByComparer"),p=e("./../methods/selectorComparer"),h=e("./../methods/defaultSelector"),d=e("./../methods/defaultComparer");t.exports=function(){(0,a.default)(t,s);var e=l(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:d;return(0,o.default)(this,t),n=c.asSelector(n),a=c.asComparer(a),e.call(this,r[s.source],f(r[s.orderByComparer],p(n,a)))}return t}()},{"./../methods/defaultComparer":149,"./../methods/defaultSelector":160,"./../methods/methods":169,"./../methods/selectorComparer":176,"./../methods/thenByComparer":178,"./IOrderedEnumerable":76,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19}],135:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,l.default)(e);return n=t?(r=(0,l.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,u.default)(this,n)}}var p=e("./ITree"),h=e("./../methods/methods"),d=e("./../methods/defaultChildrenSelector"),b=e("./../methods/defaultValueSelector");e=function(){(0,i.default)(t,p);var e=f(t);function t(r){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:d,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b;return(0,a.default)(this,t),n=h.asSelector(n),i=h.asSelector(i),e.call(this,i(r),o.default.mark((function e(){var a,u;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(u=n(r))){e.next=19;break}a=s(u),e.prev=3,a.s();case 5:if((u=a.n()).done){e.next=11;break}return u=u.value,e.next=9,new t(u,n,i);case 9:e.next=5;break;case 11:e.next=16;break;case 13:e.prev=13,e.t0=e.catch(3),a.e(e.t0);case 16:return e.prev=16,a.f(),e.finish(16);case 19:case"end":return e.stop()}}),e,null,[[3,13,16,19]])})))}return t}(),t.exports=e},{"./../methods/defaultChildrenSelector":147,"./../methods/defaultValueSelector":162,"./../methods/methods":169,"./ITree":77,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],136:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../Enumerable"),v=e("./../methods/defaultEqualityComparer");e=function(){(0,u.default)(t,h);var e=p(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:v;return(0,a.default)(this,t),u=e.call(this,r),l=b.asEqualityComparer(l),d.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,s,f;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],a=c(r),e.prev=2,a.s();case 4:if((s=a.n()).done){e.next=12;break}if(i=s.value,m.contains(t,i,l)){e.next=10;break}return t.push(i),e.next=10,i;case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),a.e(e.t0);case 17:return e.prev=17,a.f(),e.finish(17);case 20:u=c(n),e.prev=21,u.s();case 23:if((s=u.n()).done){e.next=31;break}if(f=s.value,m.contains(t,f,l)){e.next=29;break}return t.push(f),e.next=29,f;case 29:e.next=23;break;case 31:e.next=36;break;case 33:e.prev=33,e.t1=e.catch(21),u.e(e.t1);case 36:return e.prev=36,u.f(),e.finish(36);case 39:case"end":return e.stop()}}),e,null,[[2,14,17,20],[21,33,36,39]])}))),u}return t}(),t.exports=e},{"./../Enumerable":31,"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultEqualityComparer":150,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],137:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;return(0,a.default)(this,t),n=e.call(this,r),u=b.asPredicate(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=0,n=c(r),e.prev=2,n.s();case 4:if((a=n.n()).done){e.next=11;break}if(a=a.value,u(a,t++))return e.next=9,a;e.next=9;break;case 9:e.next=4;break;case 11:e.next=16;break;case 13:e.prev=13,e.t0=e.catch(2),n.e(e.t0);case 16:return e.prev=16,n.f(),e.finish(16);case 19:case"end":return e.stop()}}),e,null,[[2,13,16,19]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],138:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var h=e("./../IEnumerable"),d=e("./../core/core"),b=e("./../methods/methods"),m=e("./../methods/defaultPredicate");e=function(){(0,u.default)(t,h);var e=p(t);function t(r){var n,u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return(0,a.default)(this,t),n=e.call(this,r),u=b.asPredicate(u),d.defineProperty((0,i.default)(n),Symbol.iterator,o.default.mark((function e(){var t,n,a,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t=0,a=c(r),e.prev=3,a.s();case 5:if((i=a.n()).done){e.next=13;break}if(i=i.value,0!==l&&l<n||!u(i,t++))return e.next=10,i;e.next=11;break;case 10:n++;case 11:e.next=5;break;case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(3),a.e(e.t0);case 18:return e.prev=18,a.f(),e.finish(18);case 21:case"end":return e.stop()}}),e,null,[[3,15,18,21]])}))),n}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultPredicate":157,"./../methods/methods":169,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],139:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),a=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/assertThisInitialized")),u=n(e("@babel/runtime/helpers/inherits")),l=n(e("@babel/runtime/helpers/possibleConstructorReturn")),s=n(e("@babel/runtime/helpers/getPrototypeOf"));function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,s.default)(e);return n=t?(r=(0,s.default)(this).constructor,Reflect.construct(n,arguments,r)):n.apply(this,arguments),(0,l.default)(this,n)}}var f=e("./../IEnumerable"),p=e("./../core/core"),h=e("./../methods/defaultResultSelector");e=function(){(0,u.default)(t,f);var e=c(t);function t(r,n){var u,l=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h;return(0,a.default)(this,t),u=e.call(this,r),p.defineProperty((0,i.default)(u),Symbol.iterator,o.default.mark((function e(){var t,a,i,u,s;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=r[Symbol.iterator](),a=n[Symbol.iterator](),s=0;case 3:if(i=t.next(),u=a.next(),i.done||u.done){e.next=8;break}return e.next=8,l(i.value,u.value,s++);case 8:if(!i.done||!u.done){e.next=3;break}case 9:case"end":return e.stop()}}),e)}))),u}return t}(),t.exports=e},{"./../IEnumerable":32,"./../core/core":36,"./../methods/defaultResultSelector":158,"@babel/runtime/helpers/assertThisInitialized":4,"@babel/runtime/helpers/classCallCheck":5,"@babel/runtime/helpers/getPrototypeOf":10,"@babel/runtime/helpers/inherits":11,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/possibleConstructorReturn":19,"@babel/runtime/regenerator":27}],140:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/defineProperty")),a=n(e("@babel/runtime/helpers/toConsumableArray")),i=n(e("@babel/runtime/helpers/typeof")),u=n(e("@babel/runtime/helpers/slicedToArray"));function l(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var c=e("./core/core"),f=e("./Enumerable"),p=e("./methods/methods"),h=e("./methods/defaultPredicate"),d=e("./methods/defaultFalsePredicate"),b=e("./methods/defaultSelector"),m=e("./methods/defaultJoinSelector"),v=e("./methods/defaultSameComparer"),y=e("./methods/defaultEqualityComparer"),g=e("./methods/defaultStrictEqualityComparer"),x=e("./methods/defaultComparer"),C=e("./methods/defaultResultSelector"),k=e("./methods/defaultKeySelector"),w=e("./methods/defaultValueSelector"),R=e("./methods/defaultParentSelector"),S=e("./methods/defaultChildrenSelector"),E=e("./methods/defaultAction"),O=new Map,A={getEnumerator:function(){return f.getEnumerator(this)},getIterator:function(){return f.getIterator(this)},where:function(){return f.where(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},select:function(){return f.select(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)},elementAt:function(e){return f.elementAt(this,e)},elementAtOrDefault:function(e,t){return f.elementAtOrDefault(this,e,t)},distinct:function(){return f.distinct(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:y)},except:function(e){return f.except(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},union:function(e){return f.union(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},intersect:function(e){return f.intersect(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},ofType:function(e){return f.ofType(this,e)},skip:function(e){return f.skip(this,e)},skipWhile:function(){return f.skipWhile(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},skipProportion:function(){return f.skipProportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)},skipSame:function(){return f.skipSame(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:v)},take:function(e){return f.take(this,e)},takeWhile:function(){return f.takeWhile(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},takeSame:function(){return f.takeSame(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:v)},takeProportion:function(){return f.takeProportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)},sorted:function(){return f.sorted(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)},orderBy:function(){return f.orderBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)},orderByDescending:function(){return f.orderByDescending(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)},groupBy:function(){return f.groupBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:C,3<arguments.length&&void 0!==arguments[3]?arguments[3]:y)},selectMany:function(){return f.selectMany(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C)},flatMap:function(){return f.flatMap(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C)},flatten:function(){return f.flatten(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C)},join:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:y;return 1===arguments.length?f.join(this,e):f.join(this,e,t,r,n,o)},joining:function(e){return f.joining(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:y)},innerJoin:function(e){return f.innerJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:y)},leftJoin:function(e){return f.leftJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:y)},rightJoin:function(e){return f.rightJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:y)},groupJoin:function(e){return f.groupJoin(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:m,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:b,4<arguments.length&&void 0!==arguments[4]?arguments[4]:y)},defaultIfEmpty:function(e){return f.defaultIfEmpty(this,e)},all:function(){return f.all(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},allMatch:function(){return f.allMatch(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},any:function(){return f.any(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},anyMatch:function(){return f.anyMatch(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},isEmpty:function(){return f.isEmpty(this)},sequenceEqual:function(e){return f.sequenceEqual(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},first:function(){return f.first(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},firstOrDefault:function(e){return f.firstOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)},last:function(){return f.last(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},lastOrDefault:function(e){return f.lastOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)},single:function(){return f.single(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},singleOrDefault:function(e){return f.singleOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:h)},count:function(){return f.count(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)},sum:function(){return f.sum(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)},product:function(){return f.product(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)},max:function(){return f.max(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)},maxOrDefault:function(e){return f.maxOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:x)},min:function(){return f.min(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:x)},minOrDefault:function(e){return f.minOrDefault(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:x)},average:function(){return f.average(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b)},aggregate:function(e,t){return f.aggregate(this,e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b)},contains:function(e){return f.contains(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},indexOf:function(e){return f.indexOf(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:g)},findIndex:function(e,t){return f.findIndex(this,e,t)},lastIndexOf:function(e){return f.lastIndexOf(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0,2<arguments.length&&void 0!==arguments[2]?arguments[2]:g)},findLast:function(e,t){return f.findLast(this,e,t)},findLastIndex:function(e,t){return f.findLastIndex(this,e,t)},reverse:function(){return f.reverse(this)},copyWithin:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0;return c.isArray(this)&&c.array$copyWithin&&!c.lazy?c.array$copyWithin.call(this,e,t,r):f.copyWithin(this,e,t,r)},every:function(e,t){return f.every(this,e,t)},fill:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1/0;return c.isArray(this)&&c.array$fill&&!c.lazy?c.array$fill.call(this,e,t,r):f.fill(this,e,t,r)},filter:function(e,t){return(c.isArray(this)||c.isArguments(this))&&c.array$filter&&!c.lazy?c.array$filter.call(this,e,t):f.filter(this,e,t)},find:function(e,t){return f.find(this,e,t)},includes:function(e){return f.includes(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)},map:function(e,t){return(c.isArray(this)||c.isArguments(this))&&c.array$map&&!c.lazy?c.array$map.call(this,e,t):f.map(this,e,t)},pop:function(){return f.pop(this)},push:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return f.push.apply(f,c.array$concat.call([this],t))},shift:function(){return f.shift(this)},unshift:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return f.unshift.apply(f,c.array$concat.call([this],t))},reduce:function(e,t){return f.reduce(this,e,t)},reduceRight:function(e,t){return f.reduceRight(this,e,t)},slice:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0;return c.isString(this)&&c.string$slice&&!c.lazy?c.string$slice.call(this,e,t):(c.isArray(this)||c.isArguments(this))&&c.array$slice&&!c.lazy?c.array$slice.call(this,e,t):f.slice(this,e,t)},splice:function(e,t){for(var r=arguments.length,n=new Array(2<r?r-2:0),o=2;o<r;o++)n[o-2]=arguments[o];return f.splice.apply(f,c.array$concat.call([this,e,t],n))},some:function(e,t){return f.some(this,e,t)},sort:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:x;return c.isArray(this)&&c.array$sort&&!c.lazy?c.array$sort.call(this,p.asComparer(e)):f.sort(this,e)},zip:function(e){return f.zip(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:C)},toArray:function(){return f.toArray(this)},toObject:function(){return f.toDictionary(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:k,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w,2<arguments.length&&void 0!==arguments[2]?arguments[2]:v).toObject()},toPreOrder:function(){return f.toPreOrder(this)},toInOrder:function(){return f.toInOrder(this)},toPostOrder:function(){return f.toPostOrder(this)},forEach:function(){return f.forEach(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:E,1<arguments.length&&void 0!==arguments[1]?arguments[1]:void 0)},each:function(){return f.each(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:E)},indices:function(e){return f.indices(this,e)},permutation:function(e){return f.permutation(this,e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])},combination:function(e){return f.combination(this,e,1<arguments.length&&void 0!==arguments[1]&&arguments[1])},chunk:function(e){return f.chunk(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)},split:function(){return f.split(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:d)},nearSplit:function(){return f.nearSplit(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:d)},leftPad:function(e,t){return f.leftPad(this,e,t)},rightPad:function(e,t){return f.rightPad(this,e,t)},rand:function(){return f.rand(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:0)},random:function(){return f.random(this)},randomOrDefault:function(e){return f.randomOrDefault(this,e)},wipe:function(){return f.wipe(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0)},nearBy:function(){return f.nearBy(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:C,3<arguments.length&&void 0!==arguments[3]?arguments[3]:y)},combine:function(){return f.combine(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:R,1<arguments.length&&void 0!==arguments[1]?arguments[1]:k,2<arguments.length&&void 0!==arguments[2]?arguments[2]:b,3<arguments.length&&void 0!==arguments[3]?arguments[3]:y)},separate:function(){return f.separate(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:S,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w)},isSub:function(e){return f.isSub(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},isSuper:function(e){return f.isSuper(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},symmetric:function(e){return f.symmetric(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},conflict:function(){return f.conflict(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:y)},concat:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return c.isString(this)&&c.string$concat&&!c.lazy?c.string$concat.apply(this,t):(c.isArray(this)||c.isArguments(this))&&c.array$concat&&!c.lazy?c.array$concat.apply(this,t):f.concat.apply(f,c.array$concat.call([this],t))},proportion:function(){return f.proportion(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:h)}};c.defineProperty(f,"extends",(function(){var e,t=new Map,r=l(O);try{for(r.s();!(e=r.n()).done;){var n,o=(0,u.default)(e.value,2),a=o[0],i=o[1],s=new Map,c=l(i);try{for(c.s();!(n=c.n()).done;){var f=(0,u.default)(n.value,2),p=f[0],h=f[1];s.set(p,h)}}catch(e){c.e(e)}finally{c.f()}t.set(a,s)}}catch(e){r.e(e)}finally{r.f()}return t}),!0,!0),f.unextendAll=function(){var e,t=l(this.extends);try{for(t.s();!(e=t.n()).done;){var r,n=(0,u.default)(e.value,2),o=n[0],a=l(n[1]);try{for(a.s();!(r=a.n()).done;){var i=(0,u.default)(r.value,2),s=i[0],c=i[1];f.unextend(s,o,!0,c)}}catch(e){a.e(e)}finally{a.f()}}}catch(e){t.e(e)}finally{t.f()}},f.extendAll=function(e){var t,r=l(e);try{for(r.s();!(t=r.n()).done;){var n,o=(0,u.default)(t.value,2),a=o[0],i=l(o[1]);try{for(i.s();!(n=i.n()).done;){var s=(0,u.default)(n.value,2),c=s[0],p=s[1];f.extend(c,a,!0,p)}}catch(e){i.e(e)}finally{i.f()}}}catch(e){r.e(e)}finally{r.f()}},f.unextend=function(e,t){var r,n,o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],u=3<arguments.length&&void 0!==arguments[3]&&arguments[3];if("object"!==(0,i.default)(e)||c.getType(t)!==c.types.String)return e;if(!o||(r=e,n=t,o=u,O.has(n)&&O.get(n).has(r)&&O.get(n).get(r)===o&&(O.get(n).delete(r),f.isEmpty(O.get(n))&&O.delete(n),1))){c.undefineProperties(e,[].concat((0,a.default)(Object.keys(A)),["toDictionary","toLookup"]),u);var s,p=l(this.plugins);try{for(p.s();!(s=p.n()).done;){var h=s.value;(this.isEmpty(h.types)||this.contains(h.types,t))&&c.undefineProperties(e,[h.name],u)}}catch(e){p.e(e)}finally{p.f()}}return e},f.extend=function(e,t){var r=this,n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],a=3<arguments.length&&void 0!==arguments[3]&&arguments[3];if("object"!==(0,i.default)(e)||c.getType(t)!==c.types.String)return e;if(!n||function(e,t,r,n){var o,a=l(O);try{for(a.s();!(o=a.n()).done;)if((0,u.default)(o.value,2)[1].has(e))return!1}catch(e){a.e(e)}finally{a.f()}return O.has(t)||O.set(t,new Map),(t=O.get(t)).has(e)&&t.get(e)!==r&&n&&c.isFunction(n)&&n(t.get(e)),t.set(e,r),!0}(e,t,a,(function(o){return r.unextend(e,t,n,o)}))){c.defineProperties(e,A,a),t!==c.types.Object?c.defineProperties(e,{toDictionary:function(){return f.toDictionary(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:v)},toLookup:function(){return f.toLookup(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:b,1<arguments.length&&void 0!==arguments[1]?arguments[1]:b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:v)}},a):c.defineProperties(e,{toDictionary:function(){return f.toDictionary(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:k,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w,2<arguments.length&&void 0!==arguments[2]?arguments[2]:v)},toLookup:function(){return f.toLookup(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:k,1<arguments.length&&void 0!==arguments[1]?arguments[1]:w,2<arguments.length&&void 0!==arguments[2]?arguments[2]:v)}},a);var s,p=l(this.plugins);try{for(p.s();!(s=p.n()).done;){var h=s.value;(this.isEmpty(h.types)||this.contains(h.types,t))&&c.defineProperties(e,(0,o.default)({},h.name,function(e){return function(){return f[e].apply(f,[this].concat(arguments))}}(h.name)),a)}}catch(a){p.e(a)}finally{p.f()}}return e}},{"./Enumerable":31,"./core/core":36,"./methods/defaultAction":146,"./methods/defaultChildrenSelector":147,"./methods/defaultComparer":149,"./methods/defaultEqualityComparer":150,"./methods/defaultFalsePredicate":152,"./methods/defaultJoinSelector":154,"./methods/defaultKeySelector":155,"./methods/defaultParentSelector":156,"./methods/defaultPredicate":157,"./methods/defaultResultSelector":158,"./methods/defaultSameComparer":159,"./methods/defaultSelector":160,"./methods/defaultStrictEqualityComparer":161,"./methods/defaultValueSelector":162,"./methods/methods":169,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/slicedToArray":21,"@babel/runtime/helpers/toConsumableArray":23,"@babel/runtime/helpers/typeof":24}],141:[function(e,t,r){"use strict";function n(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var a=e("./Enumerable"),i=e("./core/core"),u=[Array,Map,Set],l=["keys","values","entries"];t.exports={install:function(){a.extend(Array.prototype,i.types.Array,!0),function(e){var t,r=n(u);try{for(r.s();!(t=r.n()).done;){var o=t.value;if(o){var l,s=n(e);try{for(s.s();!(l=s.n()).done;){var c=l.value;i.defineProperty(o.prototype,c,function(e){return function(){return a.extend(e.apply(this,arguments),i.types.Array)}}(o.prototype[c]))}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){r.e(e)}finally{r.f()}}(l)},uninstall:function(){a.unextend(Array.prototype,i.types.Array,!0),function(e){var t,r=n(u);try{for(r.s();!(t=r.n()).done;){var o=t.value;o&&i.undefineProperties(o.prototype,e)}}catch(e){r.e(e)}finally{r.f()}}(l)}}},{"./Enumerable":31,"./core/core":36}],142:[function(e,t,r){"use strict";var n=e("./Enumerable"),o=e("./core/core");t.exports={install:function(){n.extend(Object.prototype,o.types.Object,!0)},uninstall:function(){n.unextend(Object.prototype,o.types.Object,!0)}}},{"./Enumerable":31,"./core/core":36}],143:[function(e,t,r){"use strict";var n=e("./Enumerable"),o=e("./core/core");t.exports={install:function(){n.extend(String.prototype,o.types.String,!0)},uninstall:function(){n.unextend(String.prototype,o.types.String,!0)}}},{"./Enumerable":31,"./core/core":36}],144:[function(e,t,n){(function(r){(function(){"use strict";function n(e){delete String.prototype[e],delete Array.prototype[e],delete Map.prototype[e],delete Set.prototype[e],delete Object.prototype[e]}function o(e,t){t.config.as!==f&&n(t.config.as),n(f),e.config.extends.array=t.config.extends.array,t.config.extends.array=!1,e.config.extends.string=t.config.extends.string,t.config.extends.string=!1,e.config.extends.object=t.config.extends.object,t.config.extends.object=!1,e.extends=t.extends,t.unextendAll&&t.unextendAll()}function a(e,t){var r=t.config.as;r!==(t.config.as=f)&&(t.config.as=r),t.config.extends.array=e.config.extends.array,t.config.extends.string=e.config.extends.string,t.config.extends.object=e.config.extends.object,t.extendAll(e.extends)}var i,u=(l=e("@babel/runtime/helpers/interopRequireDefault"))(e("@babel/runtime/helpers/defineProperty")),l=l(e("@babel/runtime/helpers/typeof")),s="object"===(void 0===r?"undefined":(0,l.default)(r))?r:"object"===("undefined"==typeof window?"undefined":(0,l.default)(window))?window:"object"===("undefined"==typeof self?"undefined":(0,l.default)(self))?self:void 0,c='Can not set this config after call the noConflict method. If you want, you can use Enumerable.noConflict method with one parameter which value is "true" to set Enumerable of global back to this module',f="asEnumerable",p=Symbol("typeAs"),h={config:{extends:{array:!1,string:!1,object:!1}},extends:new Map};function d(e){e!==f&&E.as&&E.as!==f&&n(E.as),b.defineProperties(String.prototype,(0,u.default)({},e,(function(){return new g(this)}))),b.defineProperties(Array.prototype,(0,u.default)({},e,(function(){return new y(this)}))),b.defineProperties(Map.prototype,(0,u.default)({},e,(function(){return new v(this)}))),b.defineProperties(Set.prototype,(0,u.default)({},e,(function(){return new y(this)}))),b.defineProperties(Object.prototype,(0,u.default)({},e,(function(e,t){return b.isIterator(this)?new x(this):this[p]===b.types.String?new g(this):this[p]===b.types.Array||this[p]===b.types.Set?new y(this):this[p]===b.types.Map?new v(this):this[p]===b.types.Iterator?new x(this):b.isUndefined(e)?new C(this):new k(this,e,t)}))),E.as=e}s.Enumerable&&(o(h,i=s.Enumerable),delete s.Enumerable,console.warn("You may require this module twice or more. I suggest you to only require once. If you must to, you can also use Enumerable.noConflict method to solve the conflict"));var b=e("./core/core"),m=e("./Enumerable"),v=e("./enumerables/MapEnumerable"),y=e("./enumerables/ArrayEnumerable"),g=e("./enumerables/StringEnumerable"),x=e("./enumerables/IteratorEnumerable"),C=e("./enumerables/ObjectEnumerable"),k=e("./enumerables/TreeEnumerable"),w=e("./linq-array"),R=e("./linq-object"),S=e("./linq-string"),E={extends:{array:!1,object:!1,string:!1,lazy:!1},as:f,noConflict:!1},O={config:{extends:{array:!1,object:!1,string:!1}},extends:[]};d(f),m.typeAs=function(e,t){(e=e.constructor.prototype!==e?e.prototype:e)[p]=t},m.types=b.types,m.config={extends:{set array(e){E.noConflict?console.warn(c):(E.extends.array!==e&&(e?w.install():w.uninstall()),E.extends.array=e)},get array(){return E.extends.array},set object(e){E.noConflict?console.warn(c):(E.extends.object!==e&&(e?R.install():R.uninstall()),E.extends.object=e)},get object(){return E.extends.object},set string(e){E.noConflict?console.warn(c):(E.extends.string!==e&&(e?S.install():S.uninstall()),E.extends.string=e)},get string(){return E.extends.string},set lazy(e){E.extends.lazy!==e&&(b.lazy=e),E.extends.lazy=e},get lazy(){return E.extends.lazy}},set as(e){d(e)},get as(){return E.as}},m.noConflict=function(){var e,t=0<arguments.length&&void 0!==arguments[0]&&arguments[0];return!0!==t&&this.isConflict&&(o(O,this),E.noConflict=!0,a(h,s.Enumerable=i),e=s.Enumerable.noConflict,s.Enumerable.noConflict=function(){return!0===(0<arguments.length&&void 0!==arguments[0]&&arguments[0])?(o(h,s.Enumerable),E.noConflict=!1,a(O,m),s.Enumerable.noConflict=e,m):e()}),t&&b.isFunction(t)&&t(m),m},b.defineProperty(m,"isConflict",(function(){return i&&!E.noConflict}),!0,!0),t.exports=s.Enumerable=m}).call(this)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{})},{"./Enumerable":31,"./core/core":36,"./enumerables/ArrayEnumerable":48,"./enumerables/IteratorEnumerable":83,"./enumerables/MapEnumerable":88,"./enumerables/ObjectEnumerable":93,"./enumerables/StringEnumerable":127,"./enumerables/TreeEnumerable":135,"./linq-array":141,"./linq-object":142,"./linq-string":143,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/typeof":24}],145:[function(e,t,r){"use strict";var n=e("./defaultEqualityComparer");t.exports=function(e){function t(){return-1===u?u=i.count():u}var r=1<arguments.length&&void 0!==arguments[1]&&arguments[1],a=o.asEqualityComparer(a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:n),i=e.asEnumerable(),u=-1;return function(e,n){return(e=-1===(e=i.indexOf(e,0,a))&&r?t():e)-(-1===(n=i.indexOf(n,0,a))&&r?t():n)}};var o=e("./methods")},{"./defaultEqualityComparer":150,"./methods":169}],146:[function(e,t,r){"use strict";t.exports=function(e,t){}},{}],147:[function(e,t,r){"use strict";t.exports=function(e,t){return void 0===e.children?e:e.children}},{}],148:[function(e,t,r){"use strict";t.exports=function(e,t){null!=e&&(e.children=t)}},{}],149:[function(e,t,r){"use strict";var n=e("./../core/IComparable");t.exports=function(e,t){return e instanceof n?e.compare(t):t instanceof n?-t.compare(e):t<e?1:e==t?0:-1}},{"./../core/IComparable":34}],150:[function(e,t,r){"use strict";var n=e("./../core/IEquatable");t.exports=function(e,t){return e instanceof n?e.equals(t):t instanceof n?t.equals(e):e==t}},{"./../core/IEquatable":35}],151:[function(e,t,r){"use strict";t.exports=function(e,t){return null!=e}},{}],152:[function(e,t,r){"use strict";t.exports=function(e,t){return!1}},{}],153:[function(e,t,r){"use strict";t.exports=function(e,t){return t}},{}],154:[function(e,t,r){"use strict";t.exports=function(e,t){return{outer:e,inner:t}}},{}],155:[function(e,t,r){"use strict";t.exports=function(e,t){return void 0===e.key?e:e.key}},{}],156:[function(e,t,r){"use strict";t.exports=function(e,t){return e.parent}},{}],157:[function(e,t,r){"use strict";t.exports=function(e,t){return!0}},{}],158:[function(e,t,r){"use strict";t.exports=function(e,t){return t}},{}],159:[function(e,t,r){"use strict";t.exports=function(e,t){return e===t||"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}},{}],160:[function(e,t,r){"use strict";t.exports=function(e,t){return e}},{}],161:[function(e,t,r){"use strict";t.exports=function(e,t){return e===t}},{}],162:[function(e,t,r){"use strict";t.exports=function(e,t){return void 0===e.value?e:e.value}},{}],163:[function(e,t,r){"use strict";t.exports=function(e,t){null!=e&&(e.value=t)}},{}],164:[function(e,t,r){"use strict";t.exports=function(e){return function(t,r){return-e(t,r)}}},{}],165:[function(e,t,r){"use strict";var n=e("./defaultEqualityComparer");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;return t=o.asEqualityComparer(t),function(r,n){return t(r,e)}};var o=e("./methods")},{"./defaultEqualityComparer":150,"./methods":169}],166:[function(e,t,r){"use strict";var n=e("./defaultEqualityComparer");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;return function(r,n){return(t=o.asEqualityComparer(t))(r,n)?0:e(r,n)?1:-1}};var o=e("./methods")},{"./defaultEqualityComparer":150,"./methods":169}],167:[function(e,t,r){"use strict";var n=e("./defaultSelector");t.exports=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:n;return e=o.asSelector(e),function(t,r){return(t=e(t))===(r=e(r))||t&&r&&t.toString().toLowerCase()===r.toString().toLowerCase()}};var o=e("./methods")},{"./defaultSelector":160,"./methods":169}],168:[function(e,t,r){"use strict";var n=e("./defaultEqualityComparer");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;return function(r,n){return(t=o.asEqualityComparer(t))(r,n)?0:e(r,n)?-1:1}};var o=e("./methods")},{"./defaultEqualityComparer":150,"./methods":169}],169:[function(e,t,r){"use strict";var n=e("./../core/core"),o=e("./../core/exceptions/InvalidFunctionException"),a={asSelector:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return u(e);if(t===n.types.Function)return e;throw new o(e)},asSetter:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return i(e);if(t===n.types.Function)return e;throw new o(e)},asPredicate:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return l(e);if(t===n.types.Function)return e;if(t===n.types.RegExp)return m(e);if(t===n.types.Array||t===n.types.Object)return b(e);throw new o(e)},asEqualityComparer:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return s(e,c);if(t===n.types.Function)return e;throw new o(e)},asStrictEqualityComparer:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return s(e,f);if(t===n.types.Function)return e;throw new o(e)},asSameComparer:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return s(e,p);if(t===n.types.Function)return e;throw new o(e)},asComparer:function(e){var t=n.getType(e);if(t===n.types.String||t===n.types.Number||t===n.types.Symbol)return s(e,h);if(t===n.types.Array||t===n.types.Enumerable)return d(e);if(t===n.types.Function)return e;throw new o(e)}};t.exports=a;var i=e("./propertySetter"),u=e("./propertySelector"),l=e("./selectorPredicate"),s=e("./selectorComparer"),c=e("./defaultEqualityComparer"),f=e("./defaultStrictEqualityComparer"),p=e("./defaultSameComparer"),h=e("./defaultComparer"),d=e("./arrayComparer"),b=e("./propertiesPredicate"),m=e("./regexpPredicate")},{"./../core/core":36,"./../core/exceptions/InvalidFunctionException":38,"./arrayComparer":145,"./defaultComparer":149,"./defaultEqualityComparer":150,"./defaultSameComparer":159,"./defaultStrictEqualityComparer":161,"./propertiesPredicate":172,"./propertySelector":173,"./propertySetter":174,"./regexpPredicate":175,"./selectorComparer":176,"./selectorPredicate":177}],170:[function(e,t,r){"use strict";var n=e("./defaultExistsPredicate");t.exports=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:n;return e=o.asPredicate(e),function(t,r){return!e(t,r)}};var o=e("./methods")},{"./defaultExistsPredicate":151,"./methods":169}],171:[function(e,t,r){"use strict";t.exports=function(e){function t(){return-1===o?o=n.count():o}var r=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=e.asEnumerable(),o=-1;return function(e,o){var a=-1===(a=n.findIndex((function(t){return t(e)})))&&r?t():a,i=n.findIndex((function(e){return e(o)}));return a-(-1===i&&r?t():i)}},e("./methods")},{"./methods":169}],172:[function(e,t,r){"use strict";function n(e,t,r){for(var o in t){var i=a(o)(e),l=t[o];if((o=u.getType(i))!==u.getType(l))return!1;if(o===u.types.Object||o===u.types.Array){if(!n(i,l,r))return!1}else if(!r(i,l))return!1}return!0}var o=e("./defaultSameComparer"),a=e("./propertySelector");t.exports=function(e){var t=i.asEqualityComparer(t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:o);return function(r){return n(r,e,t)}};var i=e("./methods"),u=e("./../core/core")},{"./../core/core":36,"./defaultSameComparer":159,"./methods":169,"./propertySelector":173}],173:[function(e,t,r){"use strict";var n=e("./../core/core"),o=e("./../core/exceptions/PropertyExpressionInvalidException"),a=/^(([_$\w][_$\w\d]*)|(\[((\d+)|'([^']+)'|"([^"]+)")]))(\.([_$\w][_$\w\d]*)|(\[((\d+)|'([^']+)'|"([^"]+)")]))*$/gi,i=/(?:^|\.)([_$\w][_$\w\d]*)|\[(?:(\d+)|'([^']+)'|"([^"]+)")]/gi;t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(n.isSymbol(e)||n.isNumber(e))return function(t,r){return null!=t?t[e]:t};if(""===e)return function(e,t){return e};if(a.lastIndex=0,a.test(e))return function(t){var r;for(i.lastIndex=0;null!=t&&(r=i.exec(e));)t=t[r[1]||r[2]||r[3]||r[4]];return t};if(!t)throw new o(e)}},{"./../core/core":36,"./../core/exceptions/PropertyExpressionInvalidException":46}],174:[function(e,t,r){"use strict";var n=e("./../core/core"),o=e("./../core/exceptions/PropertyExpressionInvalidException"),a=/^(([_$\w][_$\w\d]*)|(\[((\d+)|'([^']+)'|"([^"]+)")]))(\.([_$\w][_$\w\d]*)|(\[((\d+)|'([^']+)'|"([^"]+)")]))*$/gi,i=/(?:^|\.)([_$\w][_$\w\d]*)|\[(?:(\d+)|'([^']+)'|"([^"]+)")]/gi,u=Symbol("first");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(n.isSymbol(e)||n.isNumber(e))return function(r,n){if(null!=r)r[e]=n;else if(!t)throw new o(e)};if(""===e)throw new o(e);if(a.lastIndex=0,a.test(e))return function(r,n){var a;i.lastIndex=0;for(var l=u;null!=r&&(a=i.exec(e));)l!==u&&(r=r[l]),l=a[1]||a[2]||a[3]||a[4];if(null!=r&&l!==u)r[l]=n;else if(!t)throw new o(e)};if(!t)throw new o(e)}},{"./../core/core":36,"./../core/exceptions/PropertyExpressionInvalidException":46}],175:[function(e,t,r){"use strict";var n=e("./defaultSelector");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;return t=o.asSelector(t),function(r){return e.test(t(r))}};var o=e("./methods")},{"./defaultSelector":160,"./methods":169}],176:[function(e,t,r){"use strict";t.exports=function(e,t){return e=n.asSelector(e),function(r,n){return t(e(r),e(n))}};var n=e("./methods")},{"./methods":169}],177:[function(e,t,r){"use strict";var n=e("./defaultExistsPredicate");t.exports=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;return e=o.asSelector(e),t=o.asPredicate(t),function(r,n){return t(e(r,n),n)}};var o=e("./methods")},{"./defaultExistsPredicate":151,"./methods":169}],178:[function(e,t,r){"use strict";t.exports=function(e,t){return function(r,n){var o=e(r,n);return 0===o?t(r,n):o}}},{}],179:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/helpers/defineProperty")),a=n(e("@babel/runtime/helpers/slicedToArray"));function i(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return{s:t=function(){},n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){i=!0,o=e},f:function(){try{a||null==r.return||r.return()}finally{if(i)throw o}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function l(e,t){return e.name===t.name}function s(e){return function(){return f[e].apply(f,[this].concat(arguments))}}var c=e("./core/core"),f=e("./Enumerable"),p=e("./IEnumerable"),h=e("./core/exceptions/PluginRepeatException"),d=[];c.defineProperty(f,"plugins",(function(){return this.select(d,(function(e){return{get name(){return e.name},get value(){return e.value},get types(){return e.types}}})).toArray()}),!0,!0),f.addPlugins=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,u=t;n<u.length;n++){var b=u[n];if(b.name&&b.value){if(this.contains(d,b,l))throw new h(b);if(void 0!==f[b.name])throw new h(b,!0);b.types=b.types||[],d.push(b),f[b.name]=function(e){return function(){return e.apply(f,arguments)}}(b.value),p.prototype[b.name]=s(b.name);var m,v=i(this.extends);try{for(v.s();!(m=v.n()).done;){var y,g=(0,a.default)(m.value,2),x=g[0],C=i(g[1]);try{for(C.s();!(y=C.n()).done;){var k=(0,a.default)(y.value,2),w=k[0],R=k[1];(this.isEmpty(b.types)||this.contains(b.types,x))&&c.defineProperties(w,(0,o.default)({},b.name,s(b.name)),R)}}catch(e){C.e(e)}finally{C.f()}}}catch(e){v.e(e)}finally{v.f()}}else console.error("Not a plugin value")}return this},f.removePlugins=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,o=t;n<o.length;n++){var u=o[n];c.getType(u)===c.types.String&&(u={name:u});var s=this.indexOf(d,u,0,l);if(-1!==s){u=d[s],d.splice(s,1),delete f[u.name],delete p.prototype[u.name];var h,b=i(this.extends);try{for(b.s();!(h=b.n()).done;){var m,v=(0,a.default)(h.value,2),y=v[0],g=i(v[1]);try{for(g.s();!(m=g.n()).done;){var x=(0,a.default)(m.value,2),C=x[0],k=x[1];(this.isEmpty(u.types)||this.contains(u.types,y))&&c.undefineProperties(C,[u.name],k)}}catch(e){g.e(e)}finally{g.f()}}}catch(e){b.e(e)}finally{b.f()}}else console.error('No plugin find with name "'.concat(u.name,'"'))}return this}},{"./Enumerable":31,"./IEnumerable":32,"./core/core":36,"./core/exceptions/PluginRepeatException":45,"@babel/runtime/helpers/defineProperty":8,"@babel/runtime/helpers/interopRequireDefault":12,"@babel/runtime/helpers/slicedToArray":21}]},{},[144])(144)},25393:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=25393,e.exports=t},42849:(e,t,r)=>{const n=r(6532),o=r(94470),a=/\.pre$/gi,i=e=>e.replace(a,"");e.exports={defaultLang:"zh-cn",versions:r(84004),get earliest(){return this.versions[0]},get lastest(){return n.last(this.versions,(e=>!a.test(e)))},get newest(){return this.versions[this.versions.length-1]},module:e=>"linq-js-"+(e.endsWith(".pre")?"pre":e),historys(e){if(e){let t=0;return n.zip(e,n.skip(e,1).concat([0]),((e,r)=>{let n=e.deprecated||r&&r.since&&this.prevVersion(r.since);return e.ref&&t&&(e=o(!0,{},t,e)),e.deprecated=n,t=e}))}return n.empty()},versionComparer(e,t){let r=n.zip(i(e).split("."),i(t).split("."),((e,t)=>({ver:e,otherVer:t}))).firstOrDefault({ver:0,otherVer:0},(e=>e.ver!==e.otherVer));return r.ver===r.otherVer?0:parseInt(r.ver)>parseInt(r.otherVer)?1:-1},prevVersion(e){return n.where(this.versions,(t=>this.versionComparer(t,e)<0)).max("",this.versionComparer)},nextVersion(e){return n.where(this.versions,(t=>this.versionComparer(t,e)>0)).min("",this.versionComparer)},preVersion(e){let t=e.split(".");return t[t.length-1]=parseInt(t[t.length-1])+1,t.join(".")+".pre"},asVersion:e=>i(e),maxVersion(...e){return n.max(e,"",this.versionComparer)},minVersion(...e){return n.min(e,"",this.versionComparer)},isNewer(e,t){let r=n.zip(i(e||this.earliest).split("."),i(t).split("."),((e,t)=>({ver:e,baseVer:t}))).firstOrDefault({ver:0,baseVer:0},(e=>e.ver!==e.baseVer));return parseInt(r.ver)<=parseInt(r.baseVer)},isOlder(e,t){let r=n.zip(i(e||this.newest).split("."),i(t).split("."),((e,t)=>({ver:e,baseVer:t}))).firstOrDefault({ver:0,baseVer:0},(e=>e.ver!==e.baseVer));return parseInt(r.ver)>=parseInt(r.baseVer)},capitalize:e=>e?(e=e.toString()).charAt(0).toUpperCase()+e.slice(1):"",upper:e=>e?e.toString().toUpperCase():"",lower:e=>e?e.toString().toLowerCase():""}},75040:()=>{$(document).on("click",'[data-toggle="toggleClass"]',(e=>{let t=$(e.target);"toggleClass"!==t.data("toggle")&&(t=t.closest('[data-toggle="toggleClass"]'));let r=(t.is("a")?t.attr("href"):"")||t.data("target");r&&$(r).toggleClass(t.data("classes")),e.preventDefault()}))},40063:(e,t,r)=>{r(72100).filter("json",(function(e,t=!1){let r=typeof e;if("undefined"===r)return t?"":"undefined";if("string"===r||"number"===r||"boolean"===r)return e;{let t=e.toString();return"[object Object]"===t?JSON.stringify(e):t}}))},75293:(e,t,r)=>{e.exports=(e,t,n,o)=>"2.2.0.pre"===e?Promise.all([r.e(535),r.e(261)]).then(function(e){t&&(n&&n(),t(r(15535)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.24"===e?Promise.resolve().then(function(e){t&&(n&&n(),t(r(6532)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.23"===e?r.e(148).then(function(e){t&&(n&&n(),t(r(50392)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.22"===e?r.e(228).then(function(e){t&&(n&&n(),t(r(99855)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.21"===e?r.e(561).then(function(e){t&&(n&&n(),t(r(55860)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.20"===e?r.e(543).then(function(e){t&&(n&&n(),t(r(14696)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.19"===e?r.e(581).then(function(e){t&&(n&&n(),t(r(95871)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.18"===e?r.e(721).then(function(e){t&&(n&&n(),t(r(11536)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.17"===e?r.e(384).then(function(e){t&&(n&&n(),t(r(67857)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.16"===e?r.e(741).then(function(e){t&&(n&&n(),t(r(33928)),o&&o())}.bind(null,r)).catch(r.oe):"2.1.15"===e?r.e(937).then(function(e){t&&(n&&n(),t(r(86154)),o&&o())}.bind(null,r)).catch(r.oe):void 0},15587:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{type:String,generics:Array}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("span",{staticClass:"hljs-class"},[r("span",{class:[e.isKeyword(e.type)?"hljs-keyword":"hljs-title"]},[e._v(e._s(e.type))]),e._v(" "),e.generics&&e.generics.length?[r("span",{staticClass:"hljs-symbol"},[e._v("<")]),e._v(" "),e._l(e.generics,(function(t,n){return[0!==n?r("span",[e._v(",")]):e._e(),e._v(" "),r("code-class",{attrs:{type:t.name,generics:t.generics}})]})),e._v(" "),r("span",{staticClass:"hljs-symbol"},[e._v(">")])]:e._e()],2)}),[],!1,null,null,null).exports},34006:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{overload:Object,className:String,methodName:String,isObject:Boolean}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("code",{staticClass:"hljs"},[e.className?r("span",{staticClass:"hljs-class"},[r("span",{staticClass:"hljs-title"},[e._v(e._s(e.className))])]):e._e(),e.className&&e.methodName&&!e.overload.static&&e.isObject?[e._v("."),r("span",{staticClass:"hljs-built_in"},[e._v("prototype")])]:e._e(),e.methodName?[e._v("."),r("span",{staticClass:"hljs-attribute"},[e._v(e._s(e.methodName))])]:e._e(),e._v("\n    (\n    "),e._l(e.overload.parameters,(function(t,n){return[0!==n?[e._v(",")]:e._e(),e._v(" "),r("br"),e._v(" "),r("span",{staticClass:"hljs-params",staticStyle:{"padding-left":"4em"}},[t.params?r("span",{staticClass:"hljs-symbol"},[e._v("...")]):e._e(),e._v(e._s(t.name))]),e._v(" "),r("span",{staticClass:"hljs-symbol"},[e._v(":")]),e._v(" "),e._l(t.types,(function(n,o){return[0!==o?[r("span",{staticClass:"hljs-symbol"},[e._v(" || ")])]:e._e(),e._v(" "),t.params?[r("code-class",{attrs:{type:"array"}}),e._v(" "),r("span",{staticClass:"hljs-symbol"},[e._v("<")]),e._v(" "),r("code-class",{attrs:{type:n}}),e._v(" "),r("span",{staticClass:"hljs-symbol"},[e._v(">")])]:r("code-class",{attrs:{type:n}})]})),e._v(" "),void 0!==t.defaultValue?[e._v(" = "),r("span",{staticClass:"hljs-variable"},[e._v(e._s(t.defaultValue))])]:e._e()]})),e._v(" "),e.overload.parameters&&e.overload.parameters.length?[r("br")]:e._e(),e._v("\n    )\n    "),r("span",{staticClass:"hljs-symbol"},[e._v(":")]),e._v(" "),r("code-class",{attrs:{type:e.overload.returns.type,generics:e.overload.returns.generics}})],2)}),[],!1,null,null,null).exports},4162:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{name:{type:String,default:"function"},type:[String,Object],generics:Array,declare:Object},computed:{typeName(){return"string"==typeof this.type||this.type instanceof String?this.type:this.type.name},typeGenerics(){return"string"==typeof this.type||this.type instanceof String?this.generics:this.type.generics}}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("code",{staticClass:"hljs inline",attrs:{title:e.typeName}},[e.typeName&&"function"===e.typeName.toLowerCase()&&e.declare?[r("span",{staticClass:"hljs-function"},[e._v(e._s(e.name))]),e._v("\n        (\n        "),e._l(e.declare.parameters,(function(t,n){return[t.optional?[e._v("[")]:e._e(),e._v(" "),0!==n?[e._v(",")]:e._e(),e._v(" "),r("span",{staticClass:"hljs-params"},[e._v(e._s(t.name))]),e._v(" "),r("span",{staticClass:"hljs-symbol"},[e._v(":")]),e._v(" "),e._l(t.types,(function(t,n){return[0!==n?[r("span",{staticClass:"hljs-symbol"},[e._v(" || ")])]:e._e(),e._v(" "),r("code-class",{attrs:{type:t}})]})),e._v(" "),t.defaultValue?[e._v(" = "),r("span",{staticClass:"hljs-variable"},[e._v(e._s(t.defaultValue))])]:e._e(),e._v(" "),t.optional?[e._v("]")]:e._e()]})),e._v("\n        )\n        "),r("span",{staticClass:"hljs-symbol"},[e._v(":")]),e._v(" "),r("code-class",{attrs:{type:e.declare.returns.type,generics:e.declare.returns.generics}})]:r("code-class",{attrs:{type:e.typeName,generics:e.typeGenerics}})],2)}),[],!1,null,null,null).exports},37969:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={name:"ContentTemplate",props:{title:String}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e.title?r("div",[r("h1",[e._v(e._s(e.title))])]):e._e(),e._v(" "),r("div",[e._t("default")],2),e._v(" "),r("div")])}),[],!1,null,null,null).exports},35755:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{to:String,toVersion:String}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement;return(e._self._c||t)("router-link",{attrs:{to:"/"+(e.$route.params.lang||"zh-cn")+"/"+(e.toVersion?e.toVersion+"/":e.version!==e.lastest?e.version+"/":"")+e.to}},[e._t("default")],2)}),[],!1,null,null,null).exports},79164:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{id:String}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("a",{attrs:{href:"#"+e.$route.path+"#"+e.id,id:e.id}},[r("i",{staticClass:"fa fa-fw fa-link"})])}),[],!1,null,null,null).exports},73192:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{to:String},methods:{scrollById(){this.scrollTo($("#"+this.to))}}};const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement;return(e._self._c||t)("a",{attrs:{href:"#"+e.$route.path+"#"+e.to},on:{click:e.scrollById}},[e._t("default")],2)}),[],!1,null,null,null).exports},11025:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r(6532);const o={props:{see:Object,title:String},data:()=>({directory:[]}),computed:{subject(){return this.directory&&this.see.guide&&!this.see.title?n.firstOrDefault(n.firstOrDefault(this.directory,{children:[]},(e=>"guides"===e.code)).children,{title:""},(e=>e.code===this.see.guide)).title||this.see.guide||this.title:this.title||this.see.title||this.see.guide||""}},mounted(){this.see.guide&&!this.see.title&&this.getJson(["directory"]).then((e=>{this.directory=e}))},methods:{outerLink(e){return e?e.replace(/{language}/gi,this.lang):""}}};const a=(0,r(51900).Z)(o,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("span",[e.see.guide?r("lang-link",{attrs:{to:"guides/"+e.see.guide}},[e._v(e._s(e.subject))]):e._e(),e._v(" "),!e.see.guide&&e.see.apis?r("lang-link",{attrs:{to:"apis/"+e.see.apis+(e.see.property?"/property/"+e.see.property:e.see.method?"/method/"+e.see.method+(void 0!==e.see.index?"/"+e.see.index:""):"")}},[e._v(e._s(e.see.apis?e.see.apis+(e.see.property?"."+e.see.property:e.see.method?"."+e.see.method:""):e.subject))]):e._e(),e._v(" "),e.see.guide||e.see.apis||!e.see.mark?e._e():r("mark-to",{attrs:{to:e.see.href}},[e._v(e._s(e.subject))]),e._v(" "),e.see.guide||e.see.apis||e.see.mark||!e.see.inner?e._e():r("lang-link",{attrs:{to:e.see.href}},[e._v(e._s(e.subject))]),e._v(" "),e.see.guide||e.see.mark||e.see.inner||e.see.apis||!e.see.href?e._e():r("a",{attrs:{target:"_blank",href:e.outerLink(e.see.href)}},[e._v(e._s(e.subject))])],1)}),[],!1,null,null,null).exports},17596:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});const n={props:{subject:String,status:String,color:String,title:String}};r(16664);const o=(0,r(51900).Z)(n,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("span",{staticClass:"shields",attrs:{title:e.title||(e.subject&&e.status?e.subject+": "+e.status:e.subject||e.status)}},[e.subject?r("span",{staticClass:"shields-subject"},[e._v(e._s(e.subject))]):e._e(),e.status?r("span",{staticClass:"shields-status",class:e.color},[e._v(e._s(e.status))]):e._e()])}),[],!1,null,null,null).exports},51900:(e,t,r)=>{"use strict";function n(e,t,r,n,o,a,i,u){var l,s="function"==typeof e?e.options:e;if(t&&(s.render=t,s.staticRenderFns=r,s._compiled=!0),n&&(s.functional=!0),a&&(s._scopeId="data-v-"+a),i?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},s._ssrRegister=l):o&&(l=u?function(){o.call(this,(s.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(s.functional){s._injectStyles=l;var c=s.render;s.render=function(e,t){return l.call(t),c(e,t)}}else{var f=s.beforeCreate;s.beforeCreate=f?[].concat(f,l):[l]}return{exports:e,options:s}}r.d(t,{Z:()=>n})},6195:e=>{"use strict";function t(e,t){for(var r in t)e[r]=t[r];return e}var r=/[!'()*]/g,n=function(e){return"%"+e.charCodeAt(0).toString(16)},o=/%2C/g,a=function(e){return encodeURIComponent(e).replace(r,n).replace(o,",")};function i(e){try{return decodeURIComponent(e)}catch(e){0}return e}var u=function(e){return null==e||"object"==typeof e?e:String(e)};function l(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var r=e.replace(/\+/g," ").split("="),n=i(r.shift()),o=r.length>0?i(r.join("=")):null;void 0===t[n]?t[n]=o:Array.isArray(t[n])?t[n].push(o):t[n]=[t[n],o]})),t):t}function s(e){var t=e?Object.keys(e).map((function(t){var r=e[t];if(void 0===r)return"";if(null===r)return a(t);if(Array.isArray(r)){var n=[];return r.forEach((function(e){void 0!==e&&(null===e?n.push(a(t)):n.push(a(t)+"="+a(e)))})),n.join("&")}return a(t)+"="+a(r)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var c=/\/?$/;function f(e,t,r,n){var o=n&&n.options.stringifyQuery,a=t.query||{};try{a=p(a)}catch(e){}var i={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:a,params:t.params||{},fullPath:b(t,o),matched:e?d(e):[]};return r&&(i.redirectedFrom=b(r,o)),Object.freeze(i)}function p(e){if(Array.isArray(e))return e.map(p);if(e&&"object"==typeof e){var t={};for(var r in e)t[r]=p(e[r]);return t}return e}var h=f(null,{path:"/"});function d(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function b(e,t){var r=e.path,n=e.query;void 0===n&&(n={});var o=e.hash;return void 0===o&&(o=""),(r||"/")+(t||s)(n)+o}function m(e,t,r){return t===h?e===t:!!t&&(e.path&&t.path?e.path.replace(c,"")===t.path.replace(c,"")&&(r||e.hash===t.hash&&v(e.query,t.query)):!(!e.name||!t.name)&&(e.name===t.name&&(r||e.hash===t.hash&&v(e.query,t.query)&&v(e.params,t.params))))}function v(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var r=Object.keys(e).sort(),n=Object.keys(t).sort();return r.length===n.length&&r.every((function(r,o){var a=e[r];if(n[o]!==r)return!1;var i=t[r];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?v(a,i):String(a)===String(i)}))}function y(e){for(var t=0;t<e.matched.length;t++){var r=e.matched[t];for(var n in r.instances){var o=r.instances[n],a=r.enteredCbs[n];if(o&&a){delete r.enteredCbs[n];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var g={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,r){var n=r.props,o=r.children,a=r.parent,i=r.data;i.routerView=!0;for(var u=a.$createElement,l=n.name,s=a.$route,c=a._routerViewCache||(a._routerViewCache={}),f=0,p=!1;a&&a._routerRoot!==a;){var h=a.$vnode?a.$vnode.data:{};h.routerView&&f++,h.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(i.routerViewDepth=f,p){var d=c[l],b=d&&d.component;return b?(d.configProps&&x(b,i,d.route,d.configProps),u(b,i,o)):u()}var m=s.matched[f],v=m&&m.components[l];if(!m||!v)return c[l]=null,u();c[l]={component:v},i.registerRouteInstance=function(e,t){var r=m.instances[l];(t&&r!==e||!t&&r===e)&&(m.instances[l]=t)},(i.hook||(i.hook={})).prepatch=function(e,t){m.instances[l]=t.componentInstance},i.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==m.instances[l]&&(m.instances[l]=e.componentInstance),y(s)};var g=m.props&&m.props[l];return g&&(t(c[l],{route:s,configProps:g}),x(v,i,s,g)),u(v,i,o)}};function x(e,r,n,o){var a=r.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,o);if(a){a=r.props=t({},a);var i=r.attrs=r.attrs||{};for(var u in a)e.props&&u in e.props||(i[u]=a[u],delete a[u])}}function C(e,t,r){var n=e.charAt(0);if("/"===n)return e;if("?"===n||"#"===n)return t+e;var o=t.split("/");r&&o[o.length-1]||o.pop();for(var a=e.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var u=a[i];".."===u?o.pop():"."!==u&&o.push(u)}return""!==o[0]&&o.unshift(""),o.join("/")}function k(e){return e.replace(/\/\//g,"/")}var w=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},R=B,S=_,E=function(e,t){return T(_(e,t),t)},O=T,A=M,P=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function _(e,t){for(var r,n=[],o=0,a=0,i="",u=t&&t.delimiter||"/";null!=(r=P.exec(e));){var l=r[0],s=r[1],c=r.index;if(i+=e.slice(a,c),a=c+l.length,s)i+=s[1];else{var f=e[a],p=r[2],h=r[3],d=r[4],b=r[5],m=r[6],v=r[7];i&&(n.push(i),i="");var y=null!=p&&null!=f&&f!==p,g="+"===m||"*"===m,x="?"===m||"*"===m,C=r[2]||u,k=d||b;n.push({name:h||o++,prefix:p||"",delimiter:C,optional:x,repeat:g,partial:y,asterisk:!!v,pattern:k?j(k):v?".*":"[^"+$(C)+"]+?"})}}return a<e.length&&(i+=e.substr(a)),i&&n.push(i),n}function I(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function T(e,t){for(var r=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(r[n]=new RegExp("^(?:"+e[n].pattern+")$",q(t)));return function(t,n){for(var o="",a=t||{},i=(n||{}).pretty?I:encodeURIComponent,u=0;u<e.length;u++){var l=e[u];if("string"!=typeof l){var s,c=a[l.name];if(null==c){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(w(c)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var f=0;f<c.length;f++){if(s=i(c[f]),!r[u].test(s))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(s)+"`");o+=(0===f?l.prefix:l.delimiter)+s}}else{if(s=l.asterisk?encodeURI(c).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):i(c),!r[u].test(s))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+s+'"');o+=l.prefix+s}}else o+=l}return o}}function $(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function j(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function D(e,t){return e.keys=t,e}function q(e){return e&&e.sensitive?"":"i"}function M(e,t,r){w(t)||(r=t||r,t=[]);for(var n=(r=r||{}).strict,o=!1!==r.end,a="",i=0;i<e.length;i++){var u=e[i];if("string"==typeof u)a+=$(u);else{var l=$(u.prefix),s="(?:"+u.pattern+")";t.push(u),u.repeat&&(s+="(?:"+l+s+")*"),a+=s=u.optional?u.partial?l+"("+s+")?":"(?:"+l+"("+s+"))?":l+"("+s+")"}}var c=$(r.delimiter||"/"),f=a.slice(-c.length)===c;return n||(a=(f?a.slice(0,-c.length):a)+"(?:"+c+"(?=$))?"),a+=o?"$":n&&f?"":"(?="+c+"|$)",D(new RegExp("^"+a,q(r)),t)}function B(e,t,r){return w(t)||(r=t||r,t=[]),r=r||{},e instanceof RegExp?function(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return D(e,t)}(e,t):w(e)?function(e,t,r){for(var n=[],o=0;o<e.length;o++)n.push(B(e[o],t,r).source);return D(new RegExp("(?:"+n.join("|")+")",q(r)),t)}(e,t,r):function(e,t,r){return M(_(e,r),t,r)}(e,t,r)}R.parse=S,R.compile=E,R.tokensToFunction=O,R.tokensToRegExp=A;var N=Object.create(null);function z(e,t,r){t=t||{};try{var n=N[e]||(N[e]=R.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),n(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function L(e,r,n,o){var a="string"==typeof e?{path:e}:e;if(a._normalized)return a;if(a.name){var i=(a=t({},e)).params;return i&&"object"==typeof i&&(a.params=t({},i)),a}if(!a.path&&a.params&&r){(a=t({},a))._normalized=!0;var s=t(t({},r.params),a.params);if(r.name)a.name=r.name,a.params=s;else if(r.matched.length){var c=r.matched[r.matched.length-1].path;a.path=z(c,s,r.path)}else 0;return a}var f=function(e){var t="",r="",n=e.indexOf("#");n>=0&&(t=e.slice(n),e=e.slice(0,n));var o=e.indexOf("?");return o>=0&&(r=e.slice(o+1),e=e.slice(0,o)),{path:e,query:r,hash:t}}(a.path||""),p=r&&r.path||"/",h=f.path?C(f.path,p,n||a.append):p,d=function(e,t,r){void 0===t&&(t={});var n,o=r||l;try{n=o(e||"")}catch(e){n={}}for(var a in t){var i=t[a];n[a]=Array.isArray(i)?i.map(u):u(i)}return n}(f.query,a.query,o&&o.options.parseQuery),b=a.hash||f.hash;return b&&"#"!==b.charAt(0)&&(b="#"+b),{_normalized:!0,path:h,query:d,hash:b}}var F,U=function(){},V={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var r=this,n=this.$router,o=this.$route,a=n.resolve(this.to,o,this.append),i=a.location,u=a.route,l=a.href,s={},p=n.options.linkActiveClass,h=n.options.linkExactActiveClass,d=null==p?"router-link-active":p,b=null==h?"router-link-exact-active":h,v=null==this.activeClass?d:this.activeClass,y=null==this.exactActiveClass?b:this.exactActiveClass,g=u.redirectedFrom?f(null,L(u.redirectedFrom),null,n):u;s[y]=m(o,g,this.exactPath),s[v]=this.exact||this.exactPath?s[y]:function(e,t){return 0===e.path.replace(c,"/").indexOf(t.path.replace(c,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var r in t)if(!(r in e))return!1;return!0}(e.query,t.query)}(o,g);var x=s[y]?this.ariaCurrentValue:null,C=function(e){J(e)&&(r.replace?n.replace(i,U):n.push(i,U))},k={click:J};Array.isArray(this.event)?this.event.forEach((function(e){k[e]=C})):k[this.event]=C;var w={class:s},R=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:u,navigate:C,isActive:s[v],isExactActive:s[y]});if(R){if(1===R.length)return R[0];if(R.length>1||!R.length)return 0===R.length?e():e("span",{},R)}if("a"===this.tag)w.on=k,w.attrs={href:l,"aria-current":x};else{var S=H(this.$slots.default);if(S){S.isStatic=!1;var E=S.data=t({},S.data);for(var O in E.on=E.on||{},E.on){var A=E.on[O];O in k&&(E.on[O]=Array.isArray(A)?A:[A])}for(var P in k)P in E.on?E.on[P].push(k[P]):E.on[P]=C;var _=S.data.attrs=t({},S.data.attrs);_.href=l,_["aria-current"]=x}else w.on=k}return e(this.tag,w,this.$slots.default)}};function J(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function H(e){if(e)for(var t,r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=H(t.children)))return t}}var W="undefined"!=typeof window;function K(e,t,r,n,o){var a=t||[],i=r||Object.create(null),u=n||Object.create(null);e.forEach((function(e){G(a,i,u,e,o)}));for(var l=0,s=a.length;l<s;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),s--,l--);return{pathList:a,pathMap:i,nameMap:u}}function G(e,t,r,n,o,a){var i=n.path,u=n.name;var l=n.pathToRegexpOptions||{},s=function(e,t,r){r||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return k(t.path+"/"+e)}(i,o,l.strict);"boolean"==typeof n.caseSensitive&&(l.sensitive=n.caseSensitive);var c={path:s,regex:Y(s,l),components:n.components||{default:n.component},alias:n.alias?"string"==typeof n.alias?[n.alias]:n.alias:[],instances:{},enteredCbs:{},name:u,parent:o,matchAs:a,redirect:n.redirect,beforeEnter:n.beforeEnter,meta:n.meta||{},props:null==n.props?{}:n.components?n.props:{default:n.props}};if(n.children&&n.children.forEach((function(n){var o=a?k(a+"/"+n.path):void 0;G(e,t,r,n,c,o)})),t[c.path]||(e.push(c.path),t[c.path]=c),void 0!==n.alias)for(var f=Array.isArray(n.alias)?n.alias:[n.alias],p=0;p<f.length;++p){0;var h={path:f[p],children:n.children};G(e,t,r,h,o,c.path||"/")}u&&(r[u]||(r[u]=c))}function Y(e,t){return R(e,[],t)}function Z(e,t){var r=K(e),n=r.pathList,o=r.pathMap,a=r.nameMap;function i(e,r,i){var u=L(e,r,!1,t),s=u.name;if(s){var c=a[s];if(!c)return l(null,u);var f=c.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof u.params&&(u.params={}),r&&"object"==typeof r.params)for(var p in r.params)!(p in u.params)&&f.indexOf(p)>-1&&(u.params[p]=r.params[p]);return u.path=z(c.path,u.params),l(c,u,i)}if(u.path){u.params={};for(var h=0;h<n.length;h++){var d=n[h],b=o[d];if(X(b.regex,u.path,u.params))return l(b,u,i)}}return l(null,u)}function u(e,r){var n=e.redirect,o="function"==typeof n?n(f(e,r,null,t)):n;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return l(null,r);var u=o,s=u.name,c=u.path,p=r.query,h=r.hash,d=r.params;if(p=u.hasOwnProperty("query")?u.query:p,h=u.hasOwnProperty("hash")?u.hash:h,d=u.hasOwnProperty("params")?u.params:d,s){a[s];return i({_normalized:!0,name:s,query:p,hash:h,params:d},void 0,r)}if(c){var b=function(e,t){return C(e,t.parent?t.parent.path:"/",!0)}(c,e);return i({_normalized:!0,path:z(b,d),query:p,hash:h},void 0,r)}return l(null,r)}function l(e,r,n){return e&&e.redirect?u(e,n||r):e&&e.matchAs?function(e,t,r){var n=i({_normalized:!0,path:z(r,t.params)});if(n){var o=n.matched,a=o[o.length-1];return t.params=n.params,l(a,t)}return l(null,t)}(0,r,e.matchAs):f(e,r,n,t)}return{match:i,addRoute:function(e,t){var r="object"!=typeof e?a[e]:void 0;K([t||e],n,o,a,r),r&&K(r.alias.map((function(e){return{path:e,children:[t]}})),n,o,a,r)},getRoutes:function(){return n.map((function(e){return o[e]}))},addRoutes:function(e){K(e,n,o,a)}}}function X(e,t,r){var n=t.match(e);if(!n)return!1;if(!r)return!0;for(var o=1,a=n.length;o<a;++o){var u=e.keys[o-1];u&&(r[u.name||"pathMatch"]="string"==typeof n[o]?i(n[o]):n[o])}return!0}var Q=W&&window.performance&&window.performance.now?window.performance:Date;function ee(){return Q.now().toFixed(3)}var te=ee();function re(){return te}function ne(e){return te=e}var oe=Object.create(null);function ae(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,r=window.location.href.replace(e,""),n=t({},window.history.state);return n.key=re(),window.history.replaceState(n,"",r),window.addEventListener("popstate",le),function(){window.removeEventListener("popstate",le)}}function ie(e,t,r,n){if(e.app){var o=e.options.scrollBehavior;o&&e.app.$nextTick((function(){var a=function(){var e=re();if(e)return oe[e]}(),i=o.call(e,t,r,n?a:null);i&&("function"==typeof i.then?i.then((function(e){he(e,a)})).catch((function(e){0})):he(i,a))}))}}function ue(){var e=re();e&&(oe[e]={x:window.pageXOffset,y:window.pageYOffset})}function le(e){ue(),e.state&&e.state.key&&ne(e.state.key)}function se(e){return fe(e.x)||fe(e.y)}function ce(e){return{x:fe(e.x)?e.x:window.pageXOffset,y:fe(e.y)?e.y:window.pageYOffset}}function fe(e){return"number"==typeof e}var pe=/^#\d/;function he(e,t){var r,n="object"==typeof e;if(n&&"string"==typeof e.selector){var o=pe.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(o){var a=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var r=document.documentElement.getBoundingClientRect(),n=e.getBoundingClientRect();return{x:n.left-r.left-t.x,y:n.top-r.top-t.y}}(o,a={x:fe((r=a).x)?r.x:0,y:fe(r.y)?r.y:0})}else se(e)&&(t=ce(e))}else n&&se(e)&&(t=ce(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var de,be=W&&((-1===(de=window.navigator.userAgent).indexOf("Android 2.")&&-1===de.indexOf("Android 4.0")||-1===de.indexOf("Mobile Safari")||-1!==de.indexOf("Chrome")||-1!==de.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function me(e,r){ue();var n=window.history;try{if(r){var o=t({},n.state);o.key=re(),n.replaceState(o,"",e)}else n.pushState({key:ne(ee())},"",e)}catch(t){window.location[r?"replace":"assign"](e)}}function ve(e){me(e,!0)}function ye(e,t,r){var n=function(o){o>=e.length?r():e[o]?t(e[o],(function(){n(o+1)})):n(o+1)};n(0)}var ge={redirected:2,aborted:4,cancelled:8,duplicated:16};function xe(e,t){return ke(e,t,ge.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return we.forEach((function(r){r in e&&(t[r]=e[r])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function Ce(e,t){return ke(e,t,ge.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function ke(e,t,r,n){var o=new Error(n);return o._isRouter=!0,o.from=e,o.to=t,o.type=r,o}var we=["params","query","hash"];function Re(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Se(e,t){return Re(e)&&e._isRouter&&(null==t||e.type===t)}function Ee(e){return function(t,r,n){var o=!1,a=0,i=null;Oe(e,(function(e,t,r,u){if("function"==typeof e&&void 0===e.cid){o=!0,a++;var l,s=_e((function(t){var o;((o=t).__esModule||Pe&&"Module"===o[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:F.extend(t),r.components[u]=t,--a<=0&&n()})),c=_e((function(e){var t="Failed to resolve async component "+u+": "+e;i||(i=Re(e)?e:new Error(t),n(i))}));try{l=e(s,c)}catch(e){c(e)}if(l)if("function"==typeof l.then)l.then(s,c);else{var f=l.component;f&&"function"==typeof f.then&&f.then(s,c)}}})),o||n()}}function Oe(e,t){return Ae(e.map((function(e){return Object.keys(e.components).map((function(r){return t(e.components[r],e.instances[r],e,r)}))})))}function Ae(e){return Array.prototype.concat.apply([],e)}var Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function _e(e){var t=!1;return function(){for(var r=[],n=arguments.length;n--;)r[n]=arguments[n];if(!t)return t=!0,e.apply(this,r)}}var Ie=function(e,t){this.router=e,this.base=function(e){if(!e)if(W){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=h,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Te(e,t,r,n){var o=Oe(e,(function(e,n,o,a){var i=function(e,t){"function"!=typeof e&&(e=F.extend(e));return e.options[t]}(e,t);if(i)return Array.isArray(i)?i.map((function(e){return r(e,n,o,a)})):r(i,n,o,a)}));return Ae(n?o.reverse():o)}function $e(e,t){if(t)return function(){return e.apply(t,arguments)}}Ie.prototype.listen=function(e){this.cb=e},Ie.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},Ie.prototype.onError=function(e){this.errorCbs.push(e)},Ie.prototype.transitionTo=function(e,t,r){var n,o=this;try{n=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var a=this.current;this.confirmTransition(n,(function(){o.updateRoute(n),t&&t(n),o.ensureURL(),o.router.afterHooks.forEach((function(e){e&&e(n,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(e){e(n)})))}),(function(e){r&&r(e),e&&!o.ready&&(Se(e,ge.redirected)&&a===h||(o.ready=!0,o.readyErrorCbs.forEach((function(t){t(e)}))))}))},Ie.prototype.confirmTransition=function(e,t,r){var n=this,o=this.current;this.pending=e;var a,i,u=function(e){!Se(e)&&Re(e)&&(n.errorCbs.length?n.errorCbs.forEach((function(t){t(e)})):console.error(e)),r&&r(e)},l=e.matched.length-1,s=o.matched.length-1;if(m(e,o)&&l===s&&e.matched[l]===o.matched[s])return this.ensureURL(),u(((i=ke(a=o,e,ge.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var c=function(e,t){var r,n=Math.max(e.length,t.length);for(r=0;r<n&&e[r]===t[r];r++);return{updated:t.slice(0,r),activated:t.slice(r),deactivated:e.slice(r)}}(this.current.matched,e.matched),f=c.updated,p=c.deactivated,h=c.activated,d=[].concat(function(e){return Te(e,"beforeRouteLeave",$e,!0)}(p),this.router.beforeHooks,function(e){return Te(e,"beforeRouteUpdate",$e)}(f),h.map((function(e){return e.beforeEnter})),Ee(h)),b=function(t,r){if(n.pending!==e)return u(Ce(o,e));try{t(e,o,(function(t){!1===t?(n.ensureURL(!0),u(function(e,t){return ke(e,t,ge.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(o,e))):Re(t)?(n.ensureURL(!0),u(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(u(xe(o,e)),"object"==typeof t&&t.replace?n.replace(t):n.push(t)):r(t)}))}catch(e){u(e)}};ye(d,b,(function(){ye(function(e){return Te(e,"beforeRouteEnter",(function(e,t,r,n){return function(e,t,r){return function(n,o,a){return e(n,o,(function(e){"function"==typeof e&&(t.enteredCbs[r]||(t.enteredCbs[r]=[]),t.enteredCbs[r].push(e)),a(e)}))}}(e,r,n)}))}(h).concat(n.router.resolveHooks),b,(function(){if(n.pending!==e)return u(Ce(o,e));n.pending=null,t(e),n.router.app&&n.router.app.$nextTick((function(){y(e)}))}))}))},Ie.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Ie.prototype.setupListeners=function(){},Ie.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=h,this.pending=null};var je=function(e){function t(t,r){e.call(this,t,r),this._startLocation=De(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,r=t.options.scrollBehavior,n=be&&r;n&&this.listeners.push(ae());var o=function(){var r=e.current,o=De(e.base);e.current===h&&o===e._startLocation||e.transitionTo(o,(function(e){n&&ie(t,e,r,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,r){var n=this,o=this.current;this.transitionTo(e,(function(e){me(k(n.base+e.fullPath)),ie(n.router,e,o,!1),t&&t(e)}),r)},t.prototype.replace=function(e,t,r){var n=this,o=this.current;this.transitionTo(e,(function(e){ve(k(n.base+e.fullPath)),ie(n.router,e,o,!1),t&&t(e)}),r)},t.prototype.ensureURL=function(e){if(De(this.base)!==this.current.fullPath){var t=k(this.base+this.current.fullPath);e?me(t):ve(t)}},t.prototype.getCurrentLocation=function(){return De(this.base)},t}(Ie);function De(e){var t=window.location.pathname;return e&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var qe=function(e){function t(t,r,n){e.call(this,t,r),n&&function(e){var t=De(e);if(!/^\/#/.test(t))return window.location.replace(k(e+"/#"+t)),!0}(this.base)||Me()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,r=be&&t;r&&this.listeners.push(ae());var n=function(){var t=e.current;Me()&&e.transitionTo(Be(),(function(n){r&&ie(e.router,n,t,!0),be||Le(n.fullPath)}))},o=be?"popstate":"hashchange";window.addEventListener(o,n),this.listeners.push((function(){window.removeEventListener(o,n)}))}},t.prototype.push=function(e,t,r){var n=this,o=this.current;this.transitionTo(e,(function(e){ze(e.fullPath),ie(n.router,e,o,!1),t&&t(e)}),r)},t.prototype.replace=function(e,t,r){var n=this,o=this.current;this.transitionTo(e,(function(e){Le(e.fullPath),ie(n.router,e,o,!1),t&&t(e)}),r)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Be()!==t&&(e?ze(t):Le(t))},t.prototype.getCurrentLocation=function(){return Be()},t}(Ie);function Me(){var e=Be();return"/"===e.charAt(0)||(Le("/"+e),!1)}function Be(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function Ne(e){var t=window.location.href,r=t.indexOf("#");return(r>=0?t.slice(0,r):t)+"#"+e}function ze(e){be?me(Ne(e)):window.location.hash=e}function Le(e){be?ve(Ne(e)):window.location.replace(Ne(e))}var Fe=function(e){function t(t,r){e.call(this,t,r),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,r){var n=this;this.transitionTo(e,(function(e){n.stack=n.stack.slice(0,n.index+1).concat(e),n.index++,t&&t(e)}),r)},t.prototype.replace=function(e,t,r){var n=this;this.transitionTo(e,(function(e){n.stack=n.stack.slice(0,n.index).concat(e),t&&t(e)}),r)},t.prototype.go=function(e){var t=this,r=this.index+e;if(!(r<0||r>=this.stack.length)){var n=this.stack[r];this.confirmTransition(n,(function(){var e=t.current;t.index=r,t.updateRoute(n),t.router.afterHooks.forEach((function(t){t&&t(n,e)}))}),(function(e){Se(e,ge.duplicated)&&(t.index=r)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(Ie),Ue=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Z(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!be&&!1!==e.fallback,this.fallback&&(t="hash"),W||(t="abstract"),this.mode=t,t){case"history":this.history=new je(this,e.base);break;case"hash":this.history=new qe(this,e.base,this.fallback);break;case"abstract":this.history=new Fe(this,e.base);break;default:0}},Ve={currentRoute:{configurable:!0}};function Je(e,t){return e.push(t),function(){var r=e.indexOf(t);r>-1&&e.splice(r,1)}}Ue.prototype.match=function(e,t,r){return this.matcher.match(e,t,r)},Ve.currentRoute.get=function(){return this.history&&this.history.current},Ue.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var r=t.apps.indexOf(e);r>-1&&t.apps.splice(r,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var r=this.history;if(r instanceof je||r instanceof qe){var n=function(e){r.setupListeners(),function(e){var n=r.current,o=t.options.scrollBehavior;be&&o&&"fullPath"in e&&ie(t,e,n,!1)}(e)};r.transitionTo(r.getCurrentLocation(),n,n)}r.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},Ue.prototype.beforeEach=function(e){return Je(this.beforeHooks,e)},Ue.prototype.beforeResolve=function(e){return Je(this.resolveHooks,e)},Ue.prototype.afterEach=function(e){return Je(this.afterHooks,e)},Ue.prototype.onReady=function(e,t){this.history.onReady(e,t)},Ue.prototype.onError=function(e){this.history.onError(e)},Ue.prototype.push=function(e,t,r){var n=this;if(!t&&!r&&"undefined"!=typeof Promise)return new Promise((function(t,r){n.history.push(e,t,r)}));this.history.push(e,t,r)},Ue.prototype.replace=function(e,t,r){var n=this;if(!t&&!r&&"undefined"!=typeof Promise)return new Promise((function(t,r){n.history.replace(e,t,r)}));this.history.replace(e,t,r)},Ue.prototype.go=function(e){this.history.go(e)},Ue.prototype.back=function(){this.go(-1)},Ue.prototype.forward=function(){this.go(1)},Ue.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},Ue.prototype.resolve=function(e,t,r){var n=L(e,t=t||this.history.current,r,this),o=this.match(n,t),a=o.redirectedFrom||o.fullPath;return{location:n,route:o,href:function(e,t,r){var n="hash"===r?"#"+t:t;return e?k(e+"/"+n):n}(this.history.base,a,this.mode),normalizedTo:n,resolved:o}},Ue.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ue.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==h&&this.history.transitionTo(this.history.getCurrentLocation())},Ue.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==h&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ue.prototype,Ve),Ue.install=function e(t){if(!e.installed||F!==t){e.installed=!0,F=t;var r=function(e){return void 0!==e},n=function(e,t){var n=e.$options._parentVnode;r(n)&&r(n=n.data)&&r(n=n.registerRouteInstance)&&n(e,t)};t.mixin({beforeCreate:function(){r(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,n(this,this)},destroyed:function(){n(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",g),t.component("RouterLink",V);var o=t.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Ue.version="3.5.1",Ue.isNavigationFailure=Se,Ue.NavigationFailureType=ge,Ue.START_LOCATION=h,W&&window.Vue&&window.Vue.use(Ue),e.exports=Ue},79793:(e,t,r)=>{var n=r(7557);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,r(45346).Z)("512b0d06",n,!0,{})},16664:(e,t,r)=>{var n=r(25620);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,r(45346).Z)("164bf08c",n,!0,{})},45346:(e,t,r)=>{"use strict";function n(e,t){for(var r=[],n={},o=0;o<t.length;o++){var a=t[o],i=a[0],u={id:e+":"+o,css:a[1],media:a[2],sourceMap:a[3]};n[i]?n[i].parts.push(u):r.push(n[i]={id:i,parts:[u]})}return r}r.d(t,{Z:()=>d});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=o&&(document.head||document.getElementsByTagName("head")[0]),u=null,l=0,s=!1,c=function(){},f=null,p="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function d(e,t,r,o){s=r,f=o||{};var i=n(e,t);return b(i),function(t){for(var r=[],o=0;o<i.length;o++){var u=i[o];(l=a[u.id]).refs--,r.push(l)}t?b(i=n(e,t)):i=[];for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete a[l.id]}}}}function b(e){for(var t=0;t<e.length;t++){var r=e[t],n=a[r.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](r.parts[o]);for(;o<r.parts.length;o++)n.parts.push(v(r.parts[o]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length)}else{var i=[];for(o=0;o<r.parts.length;o++)i.push(v(r.parts[o]));a[r.id]={id:r.id,refs:1,parts:i}}}}function m(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function v(e){var t,r,n=document.querySelector("style["+p+'~="'+e.id+'"]');if(n){if(s)return c;n.parentNode.removeChild(n)}if(h){var o=l++;n=u||(u=m()),t=x.bind(null,n,o,!1),r=x.bind(null,n,o,!0)}else n=m(),t=C.bind(null,n),r=function(){n.parentNode.removeChild(n)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else r()}}var y,g=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function x(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function C(e,t){var r=t.css,n=t.media,o=t.sourceMap;if(n&&e.setAttribute("media",n),f.ssrId&&e.setAttribute(p,t.id),o&&(r+="\n/*# sourceURL="+o.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},72100:(e,t,r)=>{e.exports=r(91317)},91317:(e,t,r)=>{"use strict";var n=Object.freeze({});function o(e){return null==e}function a(e){return null!=e}function i(e){return!0===e}function u(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var s=Object.prototype.toString;function c(e){return"[object Object]"===s.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function p(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function h(e){return null==e?"":Array.isArray(e)||c(e)&&e.toString===s?JSON.stringify(e,null,2):String(e)}function d(e){var t=parseFloat(e);return isNaN(t)?e:t}function b(e,t){for(var r=Object.create(null),n=e.split(","),o=0;o<n.length;o++)r[n[o]]=!0;return t?function(e){return r[e.toLowerCase()]}:function(e){return r[e]}}var m=b("slot,component",!0),v=b("key,ref,slot,slot-scope,is");function y(e,t){if(e.length){var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var g=Object.prototype.hasOwnProperty;function x(e,t){return g.call(e,t)}function C(e){var t=Object.create(null);return function(r){return t[r]||(t[r]=e(r))}}var k=/-(\w)/g,w=C((function(e){return e.replace(k,(function(e,t){return t?t.toUpperCase():""}))})),R=C((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,E=C((function(e){return e.replace(S,"-$1").toLowerCase()})),O=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function r(r){var n=arguments.length;return n?n>1?e.apply(t,arguments):e.call(t,r):e.call(t)}return r._length=e.length,r};function A(e,t){t=t||0;for(var r=e.length-t,n=new Array(r);r--;)n[r]=e[r+t];return n}function P(e,t){for(var r in t)e[r]=t[r];return e}function _(e){for(var t={},r=0;r<e.length;r++)e[r]&&P(t,e[r]);return t}function I(e,t,r){}var T=function(e,t,r){return!1},$=function(e){return e};function j(e,t){if(e===t)return!0;var r=l(e),n=l(t);if(!r||!n)return!r&&!n&&String(e)===String(t);try{var o=Array.isArray(e),a=Array.isArray(t);if(o&&a)return e.length===t.length&&e.every((function(e,r){return j(e,t[r])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||a)return!1;var i=Object.keys(e),u=Object.keys(t);return i.length===u.length&&i.every((function(r){return j(e[r],t[r])}))}catch(e){return!1}}function D(e,t){for(var r=0;r<e.length;r++)if(j(e[r],t))return r;return-1}function q(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var M="data-server-rendered",B=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],z={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:T,isReservedAttr:T,isUnknownElement:T,getTagNamespace:I,parsePlatformTagName:$,mustUseProp:T,async:!0,_lifecycleHooks:N},L=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function F(e,t,r,n){Object.defineProperty(e,t,{value:r,enumerable:!!n,writable:!0,configurable:!0})}var U,V=new RegExp("[^"+L.source+".$_\\d]"),J="__proto__"in{},H="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=W&&WXEnvironment.platform.toLowerCase(),G=H&&window.navigator.userAgent.toLowerCase(),Y=G&&/msie|trident/.test(G),Z=G&&G.indexOf("msie 9.0")>0,X=G&&G.indexOf("edge/")>0,Q=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===K),ee=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),te={}.watch,re=!1;if(H)try{var ne={};Object.defineProperty(ne,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,ne)}catch(n){}var oe=function(){return void 0===U&&(U=!H&&!W&&void 0!==r.g&&r.g.process&&"server"===r.g.process.env.VUE_ENV),U},ae=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ie(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,le="undefined"!=typeof Symbol&&ie(Symbol)&&"undefined"!=typeof Reflect&&ie(Reflect.ownKeys);ue="undefined"!=typeof Set&&ie(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var se=I,ce=0,fe=function(){this.id=ce++,this.subs=[]};fe.prototype.addSub=function(e){this.subs.push(e)},fe.prototype.removeSub=function(e){y(this.subs,e)},fe.prototype.depend=function(){fe.target&&fe.target.addDep(this)},fe.prototype.notify=function(){for(var e=this.subs.slice(),t=0,r=e.length;t<r;t++)e[t].update()},fe.target=null;var pe=[];function he(e){pe.push(e),fe.target=e}function de(){pe.pop(),fe.target=pe[pe.length-1]}var be=function(e,t,r,n,o,a,i,u){this.tag=e,this.data=t,this.children=r,this.text=n,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=u,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},me={child:{configurable:!0}};me.child.get=function(){return this.componentInstance},Object.defineProperties(be.prototype,me);var ve=function(e){void 0===e&&(e="");var t=new be;return t.text=e,t.isComment=!0,t};function ye(e){return new be(void 0,void 0,void 0,String(e))}function ge(e){var t=new be(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var xe=Array.prototype,Ce=Object.create(xe);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=xe[e];F(Ce,e,(function(){for(var r=[],n=arguments.length;n--;)r[n]=arguments[n];var o,a=t.apply(this,r),i=this.__ob__;switch(e){case"push":case"unshift":o=r;break;case"splice":o=r.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var ke=Object.getOwnPropertyNames(Ce),we=!0;function Re(e){we=e}var Se=function(e){var t;this.value=e,this.dep=new fe,this.vmCount=0,F(e,"__ob__",this),Array.isArray(e)?(J?(t=Ce,e.__proto__=t):function(e,t,r){for(var n=0,o=r.length;n<o;n++){var a=r[n];F(e,a,t[a])}}(e,Ce,ke),this.observeArray(e)):this.walk(e)};function Ee(e,t){var r;if(l(e)&&!(e instanceof be))return x(e,"__ob__")&&e.__ob__ instanceof Se?r=e.__ob__:we&&!oe()&&(Array.isArray(e)||c(e))&&Object.isExtensible(e)&&!e._isVue&&(r=new Se(e)),t&&r&&r.vmCount++,r}function Oe(e,t,r,n,o){var a=new fe,i=Object.getOwnPropertyDescriptor(e,t);if(!i||!1!==i.configurable){var u=i&&i.get,l=i&&i.set;u&&!l||2!==arguments.length||(r=e[t]);var s=!o&&Ee(r);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=u?u.call(e):r;return fe.target&&(a.depend(),s&&(s.dep.depend(),Array.isArray(t)&&function e(t){for(var r=void 0,n=0,o=t.length;n<o;n++)(r=t[n])&&r.__ob__&&r.__ob__.dep.depend(),Array.isArray(r)&&e(r)}(t))),t},set:function(t){var n=u?u.call(e):r;t===n||t!=t&&n!=n||u&&!l||(l?l.call(e,t):r=t,s=!o&&Ee(t),a.notify())}})}}function Ae(e,t,r){if(Array.isArray(e)&&f(t))return e.length=Math.max(e.length,t),e.splice(t,1,r),r;if(t in e&&!(t in Object.prototype))return e[t]=r,r;var n=e.__ob__;return e._isVue||n&&n.vmCount?r:n?(Oe(n.value,t,r),n.dep.notify(),r):(e[t]=r,r)}function Pe(e,t){if(Array.isArray(e)&&f(t))e.splice(t,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount||x(e,t)&&(delete e[t],r&&r.dep.notify())}}Se.prototype.walk=function(e){for(var t=Object.keys(e),r=0;r<t.length;r++)Oe(e,t[r])},Se.prototype.observeArray=function(e){for(var t=0,r=e.length;t<r;t++)Ee(e[t])};var _e=z.optionMergeStrategies;function Ie(e,t){if(!t)return e;for(var r,n,o,a=le?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++)"__ob__"!==(r=a[i])&&(n=e[r],o=t[r],x(e,r)?n!==o&&c(n)&&c(o)&&Ie(n,o):Ae(e,r,o));return e}function Te(e,t,r){return r?function(){var n="function"==typeof t?t.call(r,r):t,o="function"==typeof e?e.call(r,r):e;return n?Ie(n,o):o}:t?e?function(){return Ie("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function $e(e,t){var r=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return r?function(e){for(var t=[],r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r]);return t}(r):r}function je(e,t,r,n){var o=Object.create(e||null);return t?P(o,t):o}_e.data=function(e,t,r){return r?Te(e,t,r):t&&"function"!=typeof t?e:Te(e,t)},N.forEach((function(e){_e[e]=$e})),B.forEach((function(e){_e[e+"s"]=je})),_e.watch=function(e,t,r,n){if(e===te&&(e=void 0),t===te&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var o={};for(var a in P(o,e),t){var i=o[a],u=t[a];i&&!Array.isArray(i)&&(i=[i]),o[a]=i?i.concat(u):Array.isArray(u)?u:[u]}return o},_e.props=_e.methods=_e.inject=_e.computed=function(e,t,r,n){if(!e)return t;var o=Object.create(null);return P(o,e),t&&P(o,t),o},_e.provide=Te;var De=function(e,t){return void 0===t?e:t};function qe(e,t,r){if("function"==typeof t&&(t=t.options),function(e,t){var r=e.props;if(r){var n,o,a={};if(Array.isArray(r))for(n=r.length;n--;)"string"==typeof(o=r[n])&&(a[w(o)]={type:null});else if(c(r))for(var i in r)o=r[i],a[w(i)]=c(o)?o:{type:o};e.props=a}}(t),function(e,t){var r=e.inject;if(r){var n=e.inject={};if(Array.isArray(r))for(var o=0;o<r.length;o++)n[r[o]]={from:r[o]};else if(c(r))for(var a in r){var i=r[a];n[a]=c(i)?P({from:a},i):{from:i}}}}(t),function(e){var t=e.directives;if(t)for(var r in t){var n=t[r];"function"==typeof n&&(t[r]={bind:n,update:n})}}(t),!t._base&&(t.extends&&(e=qe(e,t.extends,r)),t.mixins))for(var n=0,o=t.mixins.length;n<o;n++)e=qe(e,t.mixins[n],r);var a,i={};for(a in e)u(a);for(a in t)x(e,a)||u(a);function u(n){var o=_e[n]||De;i[n]=o(e[n],t[n],r,n)}return i}function Me(e,t,r,n){if("string"==typeof r){var o=e[t];if(x(o,r))return o[r];var a=w(r);if(x(o,a))return o[a];var i=R(a);return x(o,i)?o[i]:o[r]||o[a]||o[i]}}function Be(e,t,r,n){var o=t[e],a=!x(r,e),i=r[e],u=Fe(Boolean,o.type);if(u>-1)if(a&&!x(o,"default"))i=!1;else if(""===i||i===E(e)){var l=Fe(String,o.type);(l<0||u<l)&&(i=!0)}if(void 0===i){i=function(e,t,r){if(x(t,"default")){var n=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:"function"==typeof n&&"Function"!==ze(t.type)?n.call(e):n}}(n,o,e);var s=we;Re(!0),Ee(i),Re(s)}return i}var Ne=/^\s*function (\w+)/;function ze(e){var t=e&&e.toString().match(Ne);return t?t[1]:""}function Le(e,t){return ze(e)===ze(t)}function Fe(e,t){if(!Array.isArray(t))return Le(t,e)?0:-1;for(var r=0,n=t.length;r<n;r++)if(Le(t[r],e))return r;return-1}function Ue(e,t,r){he();try{if(t)for(var n=t;n=n.$parent;){var o=n.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(n,e,t,r))return}catch(e){Je(e,n,"errorCaptured hook")}}Je(e,t,r)}finally{de()}}function Ve(e,t,r,n,o){var a;try{(a=r?e.apply(t,r):e.call(t))&&!a._isVue&&p(a)&&!a._handled&&(a.catch((function(e){return Ue(e,n,o+" (Promise/async)")})),a._handled=!0)}catch(e){Ue(e,n,o)}return a}function Je(e,t,r){if(z.errorHandler)try{return z.errorHandler.call(null,e,t,r)}catch(t){t!==e&&He(t,null,"config.errorHandler")}He(e,t,r)}function He(e,t,r){if(!H&&!W||"undefined"==typeof console)throw e;console.error(e)}var We,Ke=!1,Ge=[],Ye=!1;function Ze(){Ye=!1;var e=Ge.slice(0);Ge.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ie(Promise)){var Xe=Promise.resolve();We=function(){Xe.then(Ze),Q&&setTimeout(I)},Ke=!0}else if(Y||"undefined"==typeof MutationObserver||!ie(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())We="undefined"!=typeof setImmediate&&ie(setImmediate)?function(){setImmediate(Ze)}:function(){setTimeout(Ze,0)};else{var Qe=1,et=new MutationObserver(Ze),tt=document.createTextNode(String(Qe));et.observe(tt,{characterData:!0}),We=function(){Qe=(Qe+1)%2,tt.data=String(Qe)},Ke=!0}function rt(e,t){var r;if(Ge.push((function(){if(e)try{e.call(t)}catch(e){Ue(e,t,"nextTick")}else r&&r(t)})),Ye||(Ye=!0,We()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){r=e}))}var nt=new ue;function ot(e){!function e(t,r){var n,o,a=Array.isArray(t);if(!(!a&&!l(t)||Object.isFrozen(t)||t instanceof be)){if(t.__ob__){var i=t.__ob__.dep.id;if(r.has(i))return;r.add(i)}if(a)for(n=t.length;n--;)e(t[n],r);else for(n=(o=Object.keys(t)).length;n--;)e(t[o[n]],r)}}(e,nt),nt.clear()}var at=C((function(e){var t="&"===e.charAt(0),r="~"===(e=t?e.slice(1):e).charAt(0),n="!"===(e=r?e.slice(1):e).charAt(0);return{name:e=n?e.slice(1):e,once:r,capture:n,passive:t}}));function it(e,t){function r(){var e=arguments,n=r.fns;if(!Array.isArray(n))return Ve(n,null,arguments,t,"v-on handler");for(var o=n.slice(),a=0;a<o.length;a++)Ve(o[a],null,e,t,"v-on handler")}return r.fns=e,r}function ut(e,t,r,n,a,u){var l,s,c,f;for(l in e)s=e[l],c=t[l],f=at(l),o(s)||(o(c)?(o(s.fns)&&(s=e[l]=it(s,u)),i(f.once)&&(s=e[l]=a(f.name,s,f.capture)),r(f.name,s,f.capture,f.passive,f.params)):s!==c&&(c.fns=s,e[l]=c));for(l in t)o(e[l])&&n((f=at(l)).name,t[l],f.capture)}function lt(e,t,r){var n;e instanceof be&&(e=e.data.hook||(e.data.hook={}));var u=e[t];function l(){r.apply(this,arguments),y(n.fns,l)}o(u)?n=it([l]):a(u.fns)&&i(u.merged)?(n=u).fns.push(l):n=it([u,l]),n.merged=!0,e[t]=n}function st(e,t,r,n,o){if(a(t)){if(x(t,r))return e[r]=t[r],o||delete t[r],!0;if(x(t,n))return e[r]=t[n],o||delete t[n],!0}return!1}function ct(e){return u(e)?[ye(e)]:Array.isArray(e)?function e(t,r){var n,l,s,c,f=[];for(n=0;n<t.length;n++)o(l=t[n])||"boolean"==typeof l||(c=f[s=f.length-1],Array.isArray(l)?l.length>0&&(ft((l=e(l,(r||"")+"_"+n))[0])&&ft(c)&&(f[s]=ye(c.text+l[0].text),l.shift()),f.push.apply(f,l)):u(l)?ft(c)?f[s]=ye(c.text+l):""!==l&&f.push(ye(l)):ft(l)&&ft(c)?f[s]=ye(c.text+l.text):(i(t._isVList)&&a(l.tag)&&o(l.key)&&a(r)&&(l.key="__vlist"+r+"_"+n+"__"),f.push(l)));return f}(e):void 0}function ft(e){return a(e)&&a(e.text)&&!1===e.isComment}function pt(e,t){if(e){for(var r=Object.create(null),n=le?Reflect.ownKeys(e):Object.keys(e),o=0;o<n.length;o++){var a=n[o];if("__ob__"!==a){for(var i=e[a].from,u=t;u;){if(u._provided&&x(u._provided,i)){r[a]=u._provided[i];break}u=u.$parent}if(!u&&"default"in e[a]){var l=e[a].default;r[a]="function"==typeof l?l.call(t):l}}}return r}}function ht(e,t){if(!e||!e.length)return{};for(var r={},n=0,o=e.length;n<o;n++){var a=e[n],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==t&&a.fnContext!==t||!i||null==i.slot)(r.default||(r.default=[])).push(a);else{var u=i.slot,l=r[u]||(r[u]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var s in r)r[s].every(dt)&&delete r[s];return r}function dt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function bt(e){return e.isComment&&e.asyncFactory}function mt(e,t,r){var o,a=Object.keys(t).length>0,i=e?!!e.$stable:!a,u=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&r&&r!==n&&u===r.$key&&!a&&!r.$hasNormal)return r;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=vt(t,l,e[l]))}else o={};for(var s in t)s in o||(o[s]=yt(t,s));return e&&Object.isExtensible(e)&&(e._normalized=o),F(o,"$stable",i),F(o,"$key",u),F(o,"$hasNormal",a),o}function vt(e,t,r){var n=function(){var e=arguments.length?r.apply(null,arguments):r({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:ct(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!bt(t))?void 0:e};return r.proxy&&Object.defineProperty(e,t,{get:n,enumerable:!0,configurable:!0}),n}function yt(e,t){return function(){return e[t]}}function gt(e,t){var r,n,o,i,u;if(Array.isArray(e)||"string"==typeof e)for(r=new Array(e.length),n=0,o=e.length;n<o;n++)r[n]=t(e[n],n);else if("number"==typeof e)for(r=new Array(e),n=0;n<e;n++)r[n]=t(n+1,n);else if(l(e))if(le&&e[Symbol.iterator]){r=[];for(var s=e[Symbol.iterator](),c=s.next();!c.done;)r.push(t(c.value,r.length)),c=s.next()}else for(i=Object.keys(e),r=new Array(i.length),n=0,o=i.length;n<o;n++)u=i[n],r[n]=t(e[u],u,n);return a(r)||(r=[]),r._isVList=!0,r}function xt(e,t,r,n){var o,a=this.$scopedSlots[e];a?(r=r||{},n&&(r=P(P({},n),r)),o=a(r)||("function"==typeof t?t():t)):o=this.$slots[e]||("function"==typeof t?t():t);var i=r&&r.slot;return i?this.$createElement("template",{slot:i},o):o}function Ct(e){return Me(this.$options,"filters",e)||$}function kt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function wt(e,t,r,n,o){var a=z.keyCodes[t]||r;return o&&n&&!z.keyCodes[t]?kt(o,n):a?kt(a,e):n?E(n)!==t:void 0===e}function Rt(e,t,r,n,o){if(r&&l(r)){var a;Array.isArray(r)&&(r=_(r));var i=function(i){if("class"===i||"style"===i||v(i))a=e;else{var u=e.attrs&&e.attrs.type;a=n||z.mustUseProp(t,u,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=w(i),s=E(i);l in a||s in a||(a[i]=r[i],o&&((e.on||(e.on={}))["update:"+i]=function(e){r[i]=e}))};for(var u in r)i(u)}return e}function St(e,t){var r=this._staticTrees||(this._staticTrees=[]),n=r[e];return n&&!t||Ot(n=r[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),n}function Et(e,t,r){return Ot(e,"__once__"+t+(r?"_"+r:""),!0),e}function Ot(e,t,r){if(Array.isArray(e))for(var n=0;n<e.length;n++)e[n]&&"string"!=typeof e[n]&&At(e[n],t+"_"+n,r);else At(e,t,r)}function At(e,t,r){e.isStatic=!0,e.key=t,e.isOnce=r}function Pt(e,t){if(t&&c(t)){var r=e.on=e.on?P({},e.on):{};for(var n in t){var o=r[n],a=t[n];r[n]=o?[].concat(o,a):a}}return e}function _t(e,t,r,n){t=t||{$stable:!r};for(var o=0;o<e.length;o++){var a=e[o];Array.isArray(a)?_t(a,t,r):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return n&&(t.$key=n),t}function It(e,t){for(var r=0;r<t.length;r+=2){var n=t[r];"string"==typeof n&&n&&(e[t[r]]=t[r+1])}return e}function Tt(e,t){return"string"==typeof e?t+e:e}function $t(e){e._o=Et,e._n=d,e._s=h,e._l=gt,e._t=xt,e._q=j,e._i=D,e._m=St,e._f=Ct,e._k=wt,e._b=Rt,e._v=ye,e._e=ve,e._u=_t,e._g=Pt,e._d=It,e._p=Tt}function jt(e,t,r,o,a){var u,l=this,s=a.options;x(o,"_uid")?(u=Object.create(o))._original=o:(u=o,o=o._original);var c=i(s._compiled),f=!c;this.data=e,this.props=t,this.children=r,this.parent=o,this.listeners=e.on||n,this.injections=pt(s.inject,o),this.slots=function(){return l.$slots||mt(e.scopedSlots,l.$slots=ht(r,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return mt(e.scopedSlots,this.slots())}}),c&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=mt(e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,r,n){var a=Lt(u,e,t,r,n,f);return a&&!Array.isArray(a)&&(a.fnScopeId=s._scopeId,a.fnContext=o),a}:this._c=function(e,t,r,n){return Lt(u,e,t,r,n,f)}}function Dt(e,t,r,n,o){var a=ge(e);return a.fnContext=r,a.fnOptions=n,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function qt(e,t){for(var r in t)e[w(r)]=t[r]}$t(jt.prototype);var Mt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;Mt.prepatch(r,r)}else(e.componentInstance=function(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},n=e.data.inlineTemplate;return a(n)&&(r.render=n.render,r.staticRenderFns=n.staticRenderFns),new e.componentOptions.Ctor(r)}(e,Yt)).$mount(t?e.elm:void 0,t)},prepatch:function(e,t){var r=t.componentOptions;!function(e,t,r,o,a){var i=o.data.scopedSlots,u=e.$scopedSlots,l=!!(i&&!i.$stable||u!==n&&!u.$stable||i&&e.$scopedSlots.$key!==i.$key||!i&&e.$scopedSlots.$key),s=!!(a||e.$options._renderChildren||l);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=a,e.$attrs=o.data.attrs||n,e.$listeners=r||n,t&&e.$options.props){Re(!1);for(var c=e._props,f=e.$options._propKeys||[],p=0;p<f.length;p++){var h=f[p],d=e.$options.props;c[h]=Be(h,d,t,e)}Re(!0),e.$options.propsData=t}r=r||n;var b=e.$options._parentListeners;e.$options._parentListeners=r,Gt(e,r,b),s&&(e.$slots=ht(a,o.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,r.propsData,r.listeners,t,r.children)},insert:function(e){var t,r=e.context,n=e.componentInstance;n._isMounted||(n._isMounted=!0,er(n,"mounted")),e.data.keepAlive&&(r._isMounted?((t=n)._inactive=!1,rr.push(t)):Qt(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,r){if(!(r&&(t._directInactive=!0,Xt(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)e(t.$children[n]);er(t,"deactivated")}}(t,!0):t.$destroy())}},Bt=Object.keys(Mt);function Nt(e,t,r,u,s){if(!o(e)){var c=r.$options._base;if(l(e)&&(e=c.extend(e)),"function"==typeof e){var f;if(o(e.cid)&&void 0===(e=function(e,t){if(i(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var r=Ut;if(r&&a(e.owners)&&-1===e.owners.indexOf(r)&&e.owners.push(r),i(e.loading)&&a(e.loadingComp))return e.loadingComp;if(r&&!a(e.owners)){var n=e.owners=[r],u=!0,s=null,c=null;r.$on("hook:destroyed",(function(){return y(n,r)}));var f=function(e){for(var t=0,r=n.length;t<r;t++)n[t].$forceUpdate();e&&(n.length=0,null!==s&&(clearTimeout(s),s=null),null!==c&&(clearTimeout(c),c=null))},h=q((function(r){e.resolved=Vt(r,t),u?n.length=0:f(!0)})),d=q((function(t){a(e.errorComp)&&(e.error=!0,f(!0))})),b=e(h,d);return l(b)&&(p(b)?o(e.resolved)&&b.then(h,d):p(b.component)&&(b.component.then(h,d),a(b.error)&&(e.errorComp=Vt(b.error,t)),a(b.loading)&&(e.loadingComp=Vt(b.loading,t),0===b.delay?e.loading=!0:s=setTimeout((function(){s=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,f(!1))}),b.delay||200)),a(b.timeout)&&(c=setTimeout((function(){c=null,o(e.resolved)&&d(null)}),b.timeout)))),u=!1,e.loading?e.loadingComp:e.resolved}}(f=e,c)))return function(e,t,r,n,o){var a=ve();return a.asyncFactory=e,a.asyncMeta={data:t,context:r,children:n,tag:o},a}(f,t,r,u,s);t=t||{},Cr(e),a(t.model)&&function(e,t){var r=e.model&&e.model.prop||"value",n=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var o=t.on||(t.on={}),i=o[n],u=t.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(u):i!==u)&&(o[n]=[u].concat(i)):o[n]=u}(e.options,t);var h=function(e,t,r){var n=t.options.props;if(!o(n)){var i={},u=e.attrs,l=e.props;if(a(u)||a(l))for(var s in n){var c=E(s);st(i,l,s,c,!0)||st(i,u,s,c,!1)}return i}}(t,e);if(i(e.options.functional))return function(e,t,r,o,i){var u=e.options,l={},s=u.props;if(a(s))for(var c in s)l[c]=Be(c,s,t||n);else a(r.attrs)&&qt(l,r.attrs),a(r.props)&&qt(l,r.props);var f=new jt(r,l,i,o,e),p=u.render.call(null,f._c,f);if(p instanceof be)return Dt(p,r,f.parent,u);if(Array.isArray(p)){for(var h=ct(p)||[],d=new Array(h.length),b=0;b<h.length;b++)d[b]=Dt(h[b],r,f.parent,u);return d}}(e,h,t,r,u);var d=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var b=t.slot;t={},b&&(t.slot=b)}!function(e){for(var t=e.hook||(e.hook={}),r=0;r<Bt.length;r++){var n=Bt[r],o=t[n],a=Mt[n];o===a||o&&o._merged||(t[n]=o?zt(a,o):a)}}(t);var m=e.options.name||s;return new be("vue-component-"+e.cid+(m?"-"+m:""),t,void 0,void 0,void 0,r,{Ctor:e,propsData:h,listeners:d,tag:s,children:u},f)}}}function zt(e,t){var r=function(r,n){e(r,n),t(r,n)};return r._merged=!0,r}function Lt(e,t,r,n,s,c){return(Array.isArray(r)||u(r))&&(s=n,n=r,r=void 0),i(c)&&(s=2),function(e,t,r,n,u){if(a(r)&&a(r.__ob__))return ve();if(a(r)&&a(r.is)&&(t=r.is),!t)return ve();var s,c,f;(Array.isArray(n)&&"function"==typeof n[0]&&((r=r||{}).scopedSlots={default:n[0]},n.length=0),2===u?n=ct(n):1===u&&(n=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(n)),"string"==typeof t)?(c=e.$vnode&&e.$vnode.ns||z.getTagNamespace(t),s=z.isReservedTag(t)?new be(z.parsePlatformTagName(t),r,n,void 0,void 0,e):r&&r.pre||!a(f=Me(e.$options,"components",t))?new be(t,r,n,void 0,void 0,e):Nt(f,r,e,n,t)):s=Nt(t,r,e,n);return Array.isArray(s)?s:a(s)?(a(c)&&function e(t,r,n){if(t.ns=r,"foreignObject"===t.tag&&(r=void 0,n=!0),a(t.children))for(var u=0,l=t.children.length;u<l;u++){var s=t.children[u];a(s.tag)&&(o(s.ns)||i(n)&&"svg"!==s.tag)&&e(s,r,n)}}(s,c),a(r)&&function(e){l(e.style)&&ot(e.style),l(e.class)&&ot(e.class)}(r),s):ve()}(e,t,r,n,s)}var Ft,Ut=null;function Vt(e,t){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function Jt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var r=e[t];if(a(r)&&(a(r.componentOptions)||bt(r)))return r}}function Ht(e,t){Ft.$on(e,t)}function Wt(e,t){Ft.$off(e,t)}function Kt(e,t){var r=Ft;return function n(){null!==t.apply(null,arguments)&&r.$off(e,n)}}function Gt(e,t,r){Ft=e,ut(t,r||{},Ht,Wt,Kt,e),Ft=void 0}var Yt=null;function Zt(e){var t=Yt;return Yt=e,function(){Yt=t}}function Xt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Qt(e,t){if(t){if(e._directInactive=!1,Xt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var r=0;r<e.$children.length;r++)Qt(e.$children[r]);er(e,"activated")}}function er(e,t){he();var r=e.$options[t],n=t+" hook";if(r)for(var o=0,a=r.length;o<a;o++)Ve(r[o],e,null,e,n);e._hasHookEvent&&e.$emit("hook:"+t),de()}var tr=[],rr=[],nr={},or=!1,ar=!1,ir=0,ur=0,lr=Date.now;if(H&&!Y){var sr=window.performance;sr&&"function"==typeof sr.now&&lr()>document.createEvent("Event").timeStamp&&(lr=function(){return sr.now()})}function cr(){var e,t;for(ur=lr(),ar=!0,tr.sort((function(e,t){return e.id-t.id})),ir=0;ir<tr.length;ir++)(e=tr[ir]).before&&e.before(),t=e.id,nr[t]=null,e.run();var r=rr.slice(),n=tr.slice();ir=tr.length=rr.length=0,nr={},or=ar=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Qt(e[t],!0)}(r),function(e){for(var t=e.length;t--;){var r=e[t],n=r.vm;n._watcher===r&&n._isMounted&&!n._isDestroyed&&er(n,"updated")}}(n),ae&&z.devtools&&ae.emit("flush")}var fr=0,pr=function(e,t,r,n,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),n?(this.deep=!!n.deep,this.user=!!n.user,this.lazy=!!n.lazy,this.sync=!!n.sync,this.before=n.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++fr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!V.test(e)){var t=e.split(".");return function(e){for(var r=0;r<t.length;r++){if(!e)return;e=e[t[r]]}return e}}}(t),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()};pr.prototype.get=function(){var e;he(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Ue(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ot(e),de(),this.cleanupDeps()}return e},pr.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},pr.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},pr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==nr[t]){if(nr[t]=!0,ar){for(var r=tr.length-1;r>ir&&tr[r].id>e.id;)r--;tr.splice(r+1,0,e)}else tr.push(e);or||(or=!0,rt(cr))}}(this)},pr.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user){var r='callback for watcher "'+this.expression+'"';Ve(this.cb,this.vm,[e,t],this.vm,r)}else this.cb.call(this.vm,e,t)}}},pr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pr.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},pr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var hr={enumerable:!0,configurable:!0,get:I,set:I};function dr(e,t,r){hr.get=function(){return this[t][r]},hr.set=function(e){this[t][r]=e},Object.defineProperty(e,r,hr)}var br={lazy:!0};function mr(e,t,r){var n=!oe();"function"==typeof r?(hr.get=n?vr(t):yr(r),hr.set=I):(hr.get=r.get?n&&!1!==r.cache?vr(t):yr(r.get):I,hr.set=r.set||I),Object.defineProperty(e,t,hr)}function vr(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),fe.target&&t.depend(),t.value}}function yr(e){return function(){return e.call(this,this)}}function gr(e,t,r,n){return c(r)&&(n=r,r=r.handler),"string"==typeof r&&(r=e[r]),e.$watch(t,r,n)}var xr=0;function Cr(e){var t=e.options;if(e.super){var r=Cr(e.super);if(r!==e.superOptions){e.superOptions=r;var n=function(e){var t,r=e.options,n=e.sealedOptions;for(var o in r)r[o]!==n[o]&&(t||(t={}),t[o]=r[o]);return t}(e);n&&P(e.extendOptions,n),(t=e.options=qe(r,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function kr(e){this._init(e)}function wr(e){return e&&(e.Ctor.options.name||e.tag)}function Rr(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(r=e,"[object RegExp]"===s.call(r)&&e.test(t));var r}function Sr(e,t){var r=e.cache,n=e.keys,o=e._vnode;for(var a in r){var i=r[a];if(i){var u=i.name;u&&!t(u)&&Er(r,a,n,o)}}}function Er(e,t,r,n){var o=e[t];!o||n&&o.tag===n.tag||o.componentInstance.$destroy(),e[t]=null,y(r,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=xr++,t._isVue=!0,e&&e._isComponent?function(e,t){var r=e.$options=Object.create(e.constructor.options),n=t._parentVnode;r.parent=t.parent,r._parentVnode=n;var o=n.componentOptions;r.propsData=o.propsData,r._parentListeners=o.listeners,r._renderChildren=o.children,r._componentTag=o.tag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=qe(Cr(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,r=t.parent;if(r&&!t.abstract){for(;r.$options.abstract&&r.$parent;)r=r.$parent;r.$children.push(e)}e.$parent=r,e.$root=r?r.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Gt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,o=r&&r.context;e.$slots=ht(t._renderChildren,o),e.$scopedSlots=n,e._c=function(t,r,n,o){return Lt(e,t,r,n,o,!1)},e.$createElement=function(t,r,n,o){return Lt(e,t,r,n,o,!0)};var a=r&&r.data;Oe(e,"$attrs",a&&a.attrs||n,null,!0),Oe(e,"$listeners",t._parentListeners||n,null,!0)}(t),er(t,"beforeCreate"),function(e){var t=pt(e.$options.inject,e);t&&(Re(!1),Object.keys(t).forEach((function(r){Oe(e,r,t[r])})),Re(!0))}(t),function(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var r=e.$options.propsData||{},n=e._props={},o=e.$options._propKeys=[];e.$parent&&Re(!1);var a=function(a){o.push(a);var i=Be(a,t,r,e);Oe(n,a,i),a in e||dr(e,"_props",a)};for(var i in t)a(i);Re(!0)}(e,t.props),t.methods&&function(e,t){for(var r in e.$options.props,t)e[r]="function"!=typeof t[r]?I:O(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;c(t=e._data="function"==typeof t?function(e,t){he();try{return e.call(t,t)}catch(e){return Ue(e,t,"data()"),{}}finally{de()}}(t,e):t||{})||(t={});for(var r,n=Object.keys(t),o=e.$options.props,a=(e.$options.methods,n.length);a--;){var i=n[a];o&&x(o,i)||36!==(r=(i+"").charCodeAt(0))&&95!==r&&dr(e,"_data",i)}Ee(t,!0)}(e):Ee(e._data={},!0),t.computed&&function(e,t){var r=e._computedWatchers=Object.create(null),n=oe();for(var o in t){var a=t[o],i="function"==typeof a?a:a.get;n||(r[o]=new pr(e,i||I,I,br)),o in e||mr(e,o,a)}}(e,t.computed),t.watch&&t.watch!==te&&function(e,t){for(var r in t){var n=t[r];if(Array.isArray(n))for(var o=0;o<n.length;o++)gr(e,r,n[o]);else gr(e,r,n)}}(e,t.watch)}(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),er(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(kr),function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=Ae,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,r){if(c(t))return gr(this,e,t,r);(r=r||{}).user=!0;var n=new pr(this,e,t,r);if(r.immediate){var o='callback for immediate watcher "'+n.expression+'"';he(),Ve(t,this,[n.value],this,o),de()}return function(){n.teardown()}}}(kr),function(e){var t=/^hook:/;e.prototype.$on=function(e,r){var n=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)n.$on(e[o],r);else(n._events[e]||(n._events[e]=[])).push(r),t.test(e)&&(n._hasHookEvent=!0);return n},e.prototype.$once=function(e,t){var r=this;function n(){r.$off(e,n),t.apply(r,arguments)}return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(e)){for(var n=0,o=e.length;n<o;n++)r.$off(e[n],t);return r}var a,i=r._events[e];if(!i)return r;if(!t)return r._events[e]=null,r;for(var u=i.length;u--;)if((a=i[u])===t||a.fn===t){i.splice(u,1);break}return r},e.prototype.$emit=function(e){var t=this._events[e];if(t){t=t.length>1?A(t):t;for(var r=A(arguments,1),n='event handler for "'+e+'"',o=0,a=t.length;o<a;o++)Ve(t[o],this,r,this,n)}return this}}(kr),function(e){e.prototype._update=function(e,t){var r=this,n=r.$el,o=r._vnode,a=Zt(r);r._vnode=e,r.$el=o?r.__patch__(o,e):r.__patch__(r.$el,e,t,!1),a(),n&&(n.__vue__=null),r.$el&&(r.$el.__vue__=r),r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode&&(r.$parent.$el=r.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){er(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||y(t.$children,e),e._watcher&&e._watcher.teardown();for(var r=e._watchers.length;r--;)e._watchers[r].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),er(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(kr),function(e){$t(e.prototype),e.prototype.$nextTick=function(e){return rt(e,this)},e.prototype._render=function(){var e,t=this,r=t.$options,n=r.render,o=r._parentVnode;o&&(t.$scopedSlots=mt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{Ut=t,e=n.call(t._renderProxy,t.$createElement)}catch(r){Ue(r,t,"render"),e=t._vnode}finally{Ut=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof be||(e=ve()),e.parent=o,e}}(kr);var Or=[String,RegExp,Array],Ar={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Or,exclude:Or,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,t=this.keys,r=this.vnodeToCache,n=this.keyToCache;if(r){var o=r.tag,a=r.componentInstance,i=r.componentOptions;e[n]={name:wr(i),tag:o,componentInstance:a},t.push(n),this.max&&t.length>parseInt(this.max)&&Er(e,t[0],t,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Er(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Sr(e,(function(e){return Rr(t,e)}))})),this.$watch("exclude",(function(t){Sr(e,(function(e){return!Rr(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=Jt(e),r=t&&t.componentOptions;if(r){var n=wr(r),o=this.include,a=this.exclude;if(o&&(!n||!Rr(o,n))||a&&n&&Rr(a,n))return t;var i=this.cache,u=this.keys,l=null==t.key?r.Ctor.cid+(r.tag?"::"+r.tag:""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,y(u,l),u.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return z}};Object.defineProperty(e,"config",t),e.util={warn:se,extend:P,mergeOptions:qe,defineReactive:Oe},e.set=Ae,e.delete=Pe,e.nextTick=rt,e.observable=function(e){return Ee(e),e},e.options=Object.create(null),B.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,P(e.options.components,Ar),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var r=A(arguments,1);return r.unshift(this),"function"==typeof e.install?e.install.apply(e,r):"function"==typeof e&&e.apply(null,r),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=qe(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var r=this,n=r.cid,o=e._Ctor||(e._Ctor={});if(o[n])return o[n];var a=e.name||r.options.name,i=function(e){this._init(e)};return(i.prototype=Object.create(r.prototype)).constructor=i,i.cid=t++,i.options=qe(r.options,e),i.super=r,i.options.props&&function(e){var t=e.options.props;for(var r in t)dr(e.prototype,"_props",r)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var r in t)mr(e.prototype,r,t[r])}(i),i.extend=r.extend,i.mixin=r.mixin,i.use=r.use,B.forEach((function(e){i[e]=r[e]})),a&&(i.options.components[a]=i),i.superOptions=r.options,i.extendOptions=e,i.sealedOptions=P({},i.options),o[n]=i,i}}(e),function(e){B.forEach((function(t){e[t]=function(e,r){return r?("component"===t&&c(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===t&&"function"==typeof r&&(r={bind:r,update:r}),this.options[t+"s"][e]=r,r):this.options[t+"s"][e]}}))}(e)}(kr),Object.defineProperty(kr.prototype,"$isServer",{get:oe}),Object.defineProperty(kr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(kr,"FunctionalRenderContext",{value:jt}),kr.version="2.6.14";var Pr=b("style,class"),_r=b("input,textarea,option,select,progress"),Ir=function(e,t,r){return"value"===r&&_r(e)&&"button"!==t||"selected"===r&&"option"===e||"checked"===r&&"input"===e||"muted"===r&&"video"===e},Tr=b("contenteditable,draggable,spellcheck"),$r=b("events,caret,typing,plaintext-only"),jr=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Dr="http://www.w3.org/1999/xlink",qr=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Mr=function(e){return qr(e)?e.slice(6,e.length):""},Br=function(e){return null==e||!1===e};function Nr(e,t){return{staticClass:zr(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function zr(e,t){return e?t?e+" "+t:e:t||""}function Lr(e){return Array.isArray(e)?function(e){for(var t,r="",n=0,o=e.length;n<o;n++)a(t=Lr(e[n]))&&""!==t&&(r&&(r+=" "),r+=t);return r}(e):l(e)?function(e){var t="";for(var r in e)e[r]&&(t&&(t+=" "),t+=r);return t}(e):"string"==typeof e?e:""}var Fr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ur=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Jr=function(e){return Ur(e)||Vr(e)};function Hr(e){return Vr(e)?"svg":"math"===e?"math":void 0}var Wr=Object.create(null),Kr=b("text,number,password,search,email,tel,url");function Gr(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}var Yr=Object.freeze({createElement:function(e,t){var r=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&r.setAttribute("multiple","multiple"),r},createElementNS:function(e,t){return document.createElementNS(Fr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,r){e.insertBefore(t,r)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Zr={create:function(e,t){Xr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Xr(e,!0),Xr(t))},destroy:function(e){Xr(e,!0)}};function Xr(e,t){var r=e.data.ref;if(a(r)){var n=e.context,o=e.componentInstance||e.elm,i=n.$refs;t?Array.isArray(i[r])?y(i[r],o):i[r]===o&&(i[r]=void 0):e.data.refInFor?Array.isArray(i[r])?i[r].indexOf(o)<0&&i[r].push(o):i[r]=[o]:i[r]=o}}var Qr=new be("",{},[]),en=["create","activate","update","remove","destroy"];function tn(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var r,n=a(r=e.data)&&a(r=r.attrs)&&r.type,o=a(r=t.data)&&a(r=r.attrs)&&r.type;return n===o||Kr(n)&&Kr(o)}(e,t)||i(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function rn(e,t,r){var n,o,i={};for(n=t;n<=r;++n)a(o=e[n].key)&&(i[o]=n);return i}var nn={create:on,update:on,destroy:function(e){on(e,Qr)}};function on(e,t){(e.data.directives||t.data.directives)&&function(e,t){var r,n,o,a=e===Qr,i=t===Qr,u=un(e.data.directives,e.context),l=un(t.data.directives,t.context),s=[],c=[];for(r in l)n=u[r],o=l[r],n?(o.oldValue=n.value,o.oldArg=n.arg,sn(o,"update",t,e),o.def&&o.def.componentUpdated&&c.push(o)):(sn(o,"bind",t,e),o.def&&o.def.inserted&&s.push(o));if(s.length){var f=function(){for(var r=0;r<s.length;r++)sn(s[r],"inserted",t,e)};a?lt(t,"insert",f):f()}if(c.length&&lt(t,"postpatch",(function(){for(var r=0;r<c.length;r++)sn(c[r],"componentUpdated",t,e)})),!a)for(r in u)l[r]||sn(u[r],"unbind",e,e,i)}(e,t)}var an=Object.create(null);function un(e,t){var r,n,o=Object.create(null);if(!e)return o;for(r=0;r<e.length;r++)(n=e[r]).modifiers||(n.modifiers=an),o[ln(n)]=n,n.def=Me(t.$options,"directives",n.name);return o}function ln(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function sn(e,t,r,n,o){var a=e.def&&e.def[t];if(a)try{a(r.elm,e,r,n,o)}catch(n){Ue(n,r.context,"directive "+e.name+" "+t+" hook")}}var cn=[Zr,nn];function fn(e,t){var r=t.componentOptions;if(!(a(r)&&!1===r.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var n,i,u=t.elm,l=e.data.attrs||{},s=t.data.attrs||{};for(n in a(s.__ob__)&&(s=t.data.attrs=P({},s)),s)i=s[n],l[n]!==i&&pn(u,n,i,t.data.pre);for(n in(Y||X)&&s.value!==l.value&&pn(u,"value",s.value),l)o(s[n])&&(qr(n)?u.removeAttributeNS(Dr,Mr(n)):Tr(n)||u.removeAttribute(n))}}function pn(e,t,r,n){n||e.tagName.indexOf("-")>-1?hn(e,t,r):jr(t)?Br(r)?e.removeAttribute(t):(r="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,r)):Tr(t)?e.setAttribute(t,function(e,t){return Br(t)||"false"===t?"false":"contenteditable"===e&&$r(t)?t:"true"}(t,r)):qr(t)?Br(r)?e.removeAttributeNS(Dr,Mr(t)):e.setAttributeNS(Dr,t,r):hn(e,t,r)}function hn(e,t,r){if(Br(r))e.removeAttribute(t);else{if(Y&&!Z&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==r&&!e.__ieph){var n=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",n)};e.addEventListener("input",n),e.__ieph=!0}e.setAttribute(t,r)}}var dn={create:fn,update:fn};function bn(e,t){var r=t.elm,n=t.data,i=e.data;if(!(o(n.staticClass)&&o(n.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var u=function(e){for(var t=e.data,r=e,n=e;a(n.componentInstance);)(n=n.componentInstance._vnode)&&n.data&&(t=Nr(n.data,t));for(;a(r=r.parent);)r&&r.data&&(t=Nr(t,r.data));return function(e,t){return a(e)||a(t)?zr(e,Lr(t)):""}(t.staticClass,t.class)}(t),l=r._transitionClasses;a(l)&&(u=zr(u,Lr(l))),u!==r._prevClass&&(r.setAttribute("class",u),r._prevClass=u)}}var mn,vn,yn,gn,xn,Cn,kn={create:bn,update:bn},wn=/[\w).+\-_$\]]/;function Rn(e){var t,r,n,o,a,i=!1,u=!1,l=!1,s=!1,c=0,f=0,p=0,h=0;for(n=0;n<e.length;n++)if(r=t,t=e.charCodeAt(n),i)39===t&&92!==r&&(i=!1);else if(u)34===t&&92!==r&&(u=!1);else if(l)96===t&&92!==r&&(l=!1);else if(s)47===t&&92!==r&&(s=!1);else if(124!==t||124===e.charCodeAt(n+1)||124===e.charCodeAt(n-1)||c||f||p){switch(t){case 34:u=!0;break;case 39:i=!0;break;case 96:l=!0;break;case 40:p++;break;case 41:p--;break;case 91:f++;break;case 93:f--;break;case 123:c++;break;case 125:c--}if(47===t){for(var d=n-1,b=void 0;d>=0&&" "===(b=e.charAt(d));d--);b&&wn.test(b)||(s=!0)}}else void 0===o?(h=n+1,o=e.slice(0,n).trim()):m();function m(){(a||(a=[])).push(e.slice(h,n).trim()),h=n+1}if(void 0===o?o=e.slice(0,n).trim():0!==h&&m(),a)for(n=0;n<a.length;n++)o=Sn(o,a[n]);return o}function Sn(e,t){var r=t.indexOf("(");if(r<0)return'_f("'+t+'")('+e+")";var n=t.slice(0,r),o=t.slice(r+1);return'_f("'+n+'")('+e+(")"!==o?","+o:o)}function En(e,t){console.error("[Vue compiler]: "+e)}function On(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function An(e,t,r,n,o){(e.props||(e.props=[])).push(Mn({name:t,value:r,dynamic:o},n)),e.plain=!1}function Pn(e,t,r,n,o){(o?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(Mn({name:t,value:r,dynamic:o},n)),e.plain=!1}function _n(e,t,r,n){e.attrsMap[t]=r,e.attrsList.push(Mn({name:t,value:r},n))}function In(e,t,r,n,o,a,i,u){(e.directives||(e.directives=[])).push(Mn({name:t,rawName:r,value:n,arg:o,isDynamicArg:a,modifiers:i},u)),e.plain=!1}function Tn(e,t,r){return r?"_p("+t+',"'+e+'")':e+t}function $n(e,t,r,o,a,i,u,l){var s;(o=o||n).right?l?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete o.right):o.middle&&(l?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),o.capture&&(delete o.capture,t=Tn("!",t,l)),o.once&&(delete o.once,t=Tn("~",t,l)),o.passive&&(delete o.passive,t=Tn("&",t,l)),o.native?(delete o.native,s=e.nativeEvents||(e.nativeEvents={})):s=e.events||(e.events={});var c=Mn({value:r.trim(),dynamic:l},u);o!==n&&(c.modifiers=o);var f=s[t];Array.isArray(f)?a?f.unshift(c):f.push(c):s[t]=f?a?[c,f]:[f,c]:c,e.plain=!1}function jn(e,t,r){var n=Dn(e,":"+t)||Dn(e,"v-bind:"+t);if(null!=n)return Rn(n);if(!1!==r){var o=Dn(e,t);if(null!=o)return JSON.stringify(o)}}function Dn(e,t,r){var n;if(null!=(n=e.attrsMap[t]))for(var o=e.attrsList,a=0,i=o.length;a<i;a++)if(o[a].name===t){o.splice(a,1);break}return r&&delete e.attrsMap[t],n}function qn(e,t){for(var r=e.attrsList,n=0,o=r.length;n<o;n++){var a=r[n];if(t.test(a.name))return r.splice(n,1),a}}function Mn(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Bn(e,t,r){var n=r||{},o=n.number,a="$$v";n.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),o&&(a="_n("+a+")");var i=Nn(t,a);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+i+"}"}}function Nn(e,t){var r=function(e){if(e=e.trim(),mn=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<mn-1)return(gn=e.lastIndexOf("."))>-1?{exp:e.slice(0,gn),key:'"'+e.slice(gn+1)+'"'}:{exp:e,key:null};for(vn=e,gn=xn=Cn=0;!Ln();)Fn(yn=zn())?Vn(yn):91===yn&&Un(yn);return{exp:e.slice(0,xn),key:e.slice(xn+1,Cn)}}(e);return null===r.key?e+"="+t:"$set("+r.exp+", "+r.key+", "+t+")"}function zn(){return vn.charCodeAt(++gn)}function Ln(){return gn>=mn}function Fn(e){return 34===e||39===e}function Un(e){var t=1;for(xn=gn;!Ln();)if(Fn(e=zn()))Vn(e);else if(91===e&&t++,93===e&&t--,0===t){Cn=gn;break}}function Vn(e){for(var t=e;!Ln()&&(e=zn())!==t;);}var Jn,Hn="__r";function Wn(e,t,r){var n=Jn;return function o(){null!==t.apply(null,arguments)&&Yn(e,o,r,n)}}var Kn=Ke&&!(ee&&Number(ee[1])<=53);function Gn(e,t,r,n){if(Kn){var o=ur,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Jn.addEventListener(e,t,re?{capture:r,passive:n}:r)}function Yn(e,t,r,n){(n||Jn).removeEventListener(e,t._wrapper||t,r)}function Zn(e,t){if(!o(e.data.on)||!o(t.data.on)){var r=t.data.on||{},n=e.data.on||{};Jn=t.elm,function(e){if(a(e.__r)){var t=Y?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(r),ut(r,n,Gn,Yn,Wn,t.context),Jn=void 0}}var Xn,Qn={create:Zn,update:Zn};function eo(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var r,n,i=t.elm,u=e.data.domProps||{},l=t.data.domProps||{};for(r in a(l.__ob__)&&(l=t.data.domProps=P({},l)),u)r in l||(i[r]="");for(r in l){if(n=l[r],"textContent"===r||"innerHTML"===r){if(t.children&&(t.children.length=0),n===u[r])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===r&&"PROGRESS"!==i.tagName){i._value=n;var s=o(n)?"":String(n);to(i,s)&&(i.value=s)}else if("innerHTML"===r&&Vr(i.tagName)&&o(i.innerHTML)){(Xn=Xn||document.createElement("div")).innerHTML="<svg>"+n+"</svg>";for(var c=Xn.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;c.firstChild;)i.appendChild(c.firstChild)}else if(n!==u[r])try{i[r]=n}catch(e){}}}}function to(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var r=!0;try{r=document.activeElement!==e}catch(e){}return r&&e.value!==t}(e,t)||function(e,t){var r=e.value,n=e._vModifiers;if(a(n)){if(n.number)return d(r)!==d(t);if(n.trim)return r.trim()!==t.trim()}return r!==t}(e,t))}var ro={create:eo,update:eo},no=C((function(e){var t={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}));function oo(e){var t=ao(e.style);return e.staticStyle?P(e.staticStyle,t):t}function ao(e){return Array.isArray(e)?_(e):"string"==typeof e?no(e):e}var io,uo=/^--/,lo=/\s*!important$/,so=function(e,t,r){if(uo.test(t))e.style.setProperty(t,r);else if(lo.test(r))e.style.setProperty(E(t),r.replace(lo,""),"important");else{var n=fo(t);if(Array.isArray(r))for(var o=0,a=r.length;o<a;o++)e.style[n]=r[o];else e.style[n]=r}},co=["Webkit","Moz","ms"],fo=C((function(e){if(io=io||document.createElement("div").style,"filter"!==(e=w(e))&&e in io)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<co.length;r++){var n=co[r]+t;if(n in io)return n}}));function po(e,t){var r=t.data,n=e.data;if(!(o(r.staticStyle)&&o(r.style)&&o(n.staticStyle)&&o(n.style))){var i,u,l=t.elm,s=n.staticStyle,c=n.normalizedStyle||n.style||{},f=s||c,p=ao(t.data.style)||{};t.data.normalizedStyle=a(p.__ob__)?P({},p):p;var h=function(e,t){for(var r,n={},o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(r=oo(o.data))&&P(n,r);(r=oo(e.data))&&P(n,r);for(var a=e;a=a.parent;)a.data&&(r=oo(a.data))&&P(n,r);return n}(t);for(u in f)o(h[u])&&so(l,u,"");for(u in h)(i=h[u])!==f[u]&&so(l,u,null==i?"":i)}}var ho={create:po,update:po},bo=/\s+/;function mo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(bo).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var r=" "+(e.getAttribute("class")||"")+" ";r.indexOf(" "+t+" ")<0&&e.setAttribute("class",(r+t).trim())}}function vo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(bo).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var r=" "+(e.getAttribute("class")||"")+" ",n=" "+t+" ";r.indexOf(n)>=0;)r=r.replace(n," ");(r=r.trim())?e.setAttribute("class",r):e.removeAttribute("class")}}function yo(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&P(t,go(e.name||"v")),P(t,e),t}return"string"==typeof e?go(e):void 0}}var go=C((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),xo=H&&!Z,Co="transition",ko="animation",wo="transition",Ro="transitionend",So="animation",Eo="animationend";xo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(wo="WebkitTransition",Ro="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(So="WebkitAnimation",Eo="webkitAnimationEnd"));var Oo=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Ao(e){Oo((function(){Oo(e)}))}function Po(e,t){var r=e._transitionClasses||(e._transitionClasses=[]);r.indexOf(t)<0&&(r.push(t),mo(e,t))}function _o(e,t){e._transitionClasses&&y(e._transitionClasses,t),vo(e,t)}function Io(e,t,r){var n=$o(e,t),o=n.type,a=n.timeout,i=n.propCount;if(!o)return r();var u=o===Co?Ro:Eo,l=0,s=function(){e.removeEventListener(u,c),r()},c=function(t){t.target===e&&++l>=i&&s()};setTimeout((function(){l<i&&s()}),a+1),e.addEventListener(u,c)}var To=/\b(transform|all)(,|$)/;function $o(e,t){var r,n=window.getComputedStyle(e),o=(n[wo+"Delay"]||"").split(", "),a=(n[wo+"Duration"]||"").split(", "),i=jo(o,a),u=(n[So+"Delay"]||"").split(", "),l=(n[So+"Duration"]||"").split(", "),s=jo(u,l),c=0,f=0;return t===Co?i>0&&(r=Co,c=i,f=a.length):t===ko?s>0&&(r=ko,c=s,f=l.length):f=(r=(c=Math.max(i,s))>0?i>s?Co:ko:null)?r===Co?a.length:l.length:0,{type:r,timeout:c,propCount:f,hasTransform:r===Co&&To.test(n[wo+"Property"])}}function jo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,r){return Do(t)+Do(e[r])})))}function Do(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function qo(e,t){var r=e.elm;a(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var n=yo(e.data.transition);if(!o(n)&&!a(r._enterCb)&&1===r.nodeType){for(var i=n.css,u=n.type,s=n.enterClass,c=n.enterToClass,f=n.enterActiveClass,p=n.appearClass,h=n.appearToClass,b=n.appearActiveClass,m=n.beforeEnter,v=n.enter,y=n.afterEnter,g=n.enterCancelled,x=n.beforeAppear,C=n.appear,k=n.afterAppear,w=n.appearCancelled,R=n.duration,S=Yt,E=Yt.$vnode;E&&E.parent;)S=E.context,E=E.parent;var O=!S._isMounted||!e.isRootInsert;if(!O||C||""===C){var A=O&&p?p:s,P=O&&b?b:f,_=O&&h?h:c,I=O&&x||m,T=O&&"function"==typeof C?C:v,$=O&&k||y,j=O&&w||g,D=d(l(R)?R.enter:R),M=!1!==i&&!Z,B=No(T),N=r._enterCb=q((function(){M&&(_o(r,_),_o(r,P)),N.cancelled?(M&&_o(r,A),j&&j(r)):$&&$(r),r._enterCb=null}));e.data.show||lt(e,"insert",(function(){var t=r.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),T&&T(r,N)})),I&&I(r),M&&(Po(r,A),Po(r,P),Ao((function(){_o(r,A),N.cancelled||(Po(r,_),B||(Bo(D)?setTimeout(N,D):Io(r,u,N)))}))),e.data.show&&(t&&t(),T&&T(r,N)),M||B||N()}}}function Mo(e,t){var r=e.elm;a(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var n=yo(e.data.transition);if(o(n)||1!==r.nodeType)return t();if(!a(r._leaveCb)){var i=n.css,u=n.type,s=n.leaveClass,c=n.leaveToClass,f=n.leaveActiveClass,p=n.beforeLeave,h=n.leave,b=n.afterLeave,m=n.leaveCancelled,v=n.delayLeave,y=n.duration,g=!1!==i&&!Z,x=No(h),C=d(l(y)?y.leave:y),k=r._leaveCb=q((function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),g&&(_o(r,c),_o(r,f)),k.cancelled?(g&&_o(r,s),m&&m(r)):(t(),b&&b(r)),r._leaveCb=null}));v?v(w):w()}function w(){k.cancelled||(!e.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),p&&p(r),g&&(Po(r,s),Po(r,f),Ao((function(){_o(r,s),k.cancelled||(Po(r,c),x||(Bo(C)?setTimeout(k,C):Io(r,u,k)))}))),h&&h(r,k),g||x||k())}}function Bo(e){return"number"==typeof e&&!isNaN(e)}function No(e){if(o(e))return!1;var t=e.fns;return a(t)?No(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function zo(e,t){!0!==t.data.show&&qo(t)}var Lo=function(e){var t,r,n={},l=e.modules,s=e.nodeOps;for(t=0;t<en.length;++t)for(n[en[t]]=[],r=0;r<l.length;++r)a(l[r][en[t]])&&n[en[t]].push(l[r][en[t]]);function c(e){var t=s.parentNode(e);a(t)&&s.removeChild(t,e)}function f(e,t,r,o,u,l,c){if(a(e.elm)&&a(l)&&(e=l[c]=ge(e)),e.isRootInsert=!u,!function(e,t,r,o){var u=e.data;if(a(u)){var l=a(e.componentInstance)&&u.keepAlive;if(a(u=u.hook)&&a(u=u.init)&&u(e,!1),a(e.componentInstance))return p(e,t),h(r,e.elm,o),i(l)&&function(e,t,r,o){for(var i,u=e;u.componentInstance;)if(a(i=(u=u.componentInstance._vnode).data)&&a(i=i.transition)){for(i=0;i<n.activate.length;++i)n.activate[i](Qr,u);t.push(u);break}h(r,e.elm,o)}(e,t,r,o),!0}}(e,t,r,o)){var f=e.data,b=e.children,m=e.tag;a(m)?(e.elm=e.ns?s.createElementNS(e.ns,m):s.createElement(m,e),y(e),d(e,b,t),a(f)&&v(e,t),h(r,e.elm,o)):i(e.isComment)?(e.elm=s.createComment(e.text),h(r,e.elm,o)):(e.elm=s.createTextNode(e.text),h(r,e.elm,o))}}function p(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,m(e)?(v(e,t),y(e)):(Xr(e),t.push(e))}function h(e,t,r){a(e)&&(a(r)?s.parentNode(r)===e&&s.insertBefore(e,t,r):s.appendChild(e,t))}function d(e,t,r){if(Array.isArray(t))for(var n=0;n<t.length;++n)f(t[n],r,e.elm,null,!0,t,n);else u(e.text)&&s.appendChild(e.elm,s.createTextNode(String(e.text)))}function m(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function v(e,r){for(var o=0;o<n.create.length;++o)n.create[o](Qr,e);a(t=e.data.hook)&&(a(t.create)&&t.create(Qr,e),a(t.insert)&&r.push(e))}function y(e){var t;if(a(t=e.fnScopeId))s.setStyleScope(e.elm,t);else for(var r=e;r;)a(t=r.context)&&a(t=t.$options._scopeId)&&s.setStyleScope(e.elm,t),r=r.parent;a(t=Yt)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&s.setStyleScope(e.elm,t)}function g(e,t,r,n,o,a){for(;n<=o;++n)f(r[n],a,e,t,!1,r,n)}function x(e){var t,r,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<n.destroy.length;++t)n.destroy[t](e);if(a(t=e.children))for(r=0;r<e.children.length;++r)x(e.children[r])}function C(e,t,r){for(;t<=r;++t){var n=e[t];a(n)&&(a(n.tag)?(k(n),x(n)):c(n.elm))}}function k(e,t){if(a(t)||a(e.data)){var r,o=n.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function r(){0==--r.listeners&&c(e)}return r.listeners=t,r}(e.elm,o),a(r=e.componentInstance)&&a(r=r._vnode)&&a(r.data)&&k(r,t),r=0;r<n.remove.length;++r)n.remove[r](e,t);a(r=e.data.hook)&&a(r=r.remove)?r(e,t):t()}else c(e.elm)}function w(e,t,r,n){for(var o=r;o<n;o++){var i=t[o];if(a(i)&&tn(e,i))return o}}function R(e,t,r,u,l,c){if(e!==t){a(t.elm)&&a(u)&&(t=u[l]=ge(t));var p=t.elm=e.elm;if(i(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?O(e.elm,t,r):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var h,d=t.data;a(d)&&a(h=d.hook)&&a(h=h.prepatch)&&h(e,t);var b=e.children,v=t.children;if(a(d)&&m(t)){for(h=0;h<n.update.length;++h)n.update[h](e,t);a(h=d.hook)&&a(h=h.update)&&h(e,t)}o(t.text)?a(b)&&a(v)?b!==v&&function(e,t,r,n,i){for(var u,l,c,p=0,h=0,d=t.length-1,b=t[0],m=t[d],v=r.length-1,y=r[0],x=r[v],k=!i;p<=d&&h<=v;)o(b)?b=t[++p]:o(m)?m=t[--d]:tn(b,y)?(R(b,y,n,r,h),b=t[++p],y=r[++h]):tn(m,x)?(R(m,x,n,r,v),m=t[--d],x=r[--v]):tn(b,x)?(R(b,x,n,r,v),k&&s.insertBefore(e,b.elm,s.nextSibling(m.elm)),b=t[++p],x=r[--v]):tn(m,y)?(R(m,y,n,r,h),k&&s.insertBefore(e,m.elm,b.elm),m=t[--d],y=r[++h]):(o(u)&&(u=rn(t,p,d)),o(l=a(y.key)?u[y.key]:w(y,t,p,d))?f(y,n,e,b.elm,!1,r,h):tn(c=t[l],y)?(R(c,y,n,r,h),t[l]=void 0,k&&s.insertBefore(e,c.elm,b.elm)):f(y,n,e,b.elm,!1,r,h),y=r[++h]);p>d?g(e,o(r[v+1])?null:r[v+1].elm,r,h,v,n):h>v&&C(t,p,d)}(p,b,v,r,c):a(v)?(a(e.text)&&s.setTextContent(p,""),g(p,null,v,0,v.length-1,r)):a(b)?C(b,0,b.length-1):a(e.text)&&s.setTextContent(p,""):e.text!==t.text&&s.setTextContent(p,t.text),a(d)&&a(h=d.hook)&&a(h=h.postpatch)&&h(e,t)}}}function S(e,t,r){if(i(r)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var n=0;n<t.length;++n)t[n].data.hook.insert(t[n])}var E=b("attrs,class,staticClass,staticStyle,key");function O(e,t,r,n){var o,u=t.tag,l=t.data,s=t.children;if(n=n||l&&l.pre,t.elm=e,i(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return p(t,r),!0;if(a(u)){if(a(s))if(e.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return!1}else{for(var c=!0,f=e.firstChild,h=0;h<s.length;h++){if(!f||!O(f,s[h],r,n)){c=!1;break}f=f.nextSibling}if(!c||f)return!1}else d(t,s,r);if(a(l)){var b=!1;for(var m in l)if(!E(m)){b=!0,v(t,r);break}!b&&l.class&&ot(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,r,u){if(!o(t)){var l,c=!1,p=[];if(o(e))c=!0,f(t,p);else{var h=a(e.nodeType);if(!h&&tn(e,t))R(e,t,p,null,null,u);else{if(h){if(1===e.nodeType&&e.hasAttribute(M)&&(e.removeAttribute(M),r=!0),i(r)&&O(e,t,p))return S(t,p,!0),e;l=e,e=new be(s.tagName(l).toLowerCase(),{},[],void 0,l)}var d=e.elm,b=s.parentNode(d);if(f(t,p,d._leaveCb?null:b,s.nextSibling(d)),a(t.parent))for(var v=t.parent,y=m(t);v;){for(var g=0;g<n.destroy.length;++g)n.destroy[g](v);if(v.elm=t.elm,y){for(var k=0;k<n.create.length;++k)n.create[k](Qr,v);var w=v.data.hook.insert;if(w.merged)for(var E=1;E<w.fns.length;E++)w.fns[E]()}else Xr(v);v=v.parent}a(b)?C([e],0,0):a(e.tag)&&x(e)}}return S(t,p,c),t.elm}a(e)&&x(e)}}({nodeOps:Yr,modules:[dn,kn,Qn,ro,ho,H?{create:zo,activate:zo,remove:function(e,t){!0!==e.data.show?Mo(e,t):t()}}:{}].concat(cn)});Z&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Go(e,"input")}));var Fo={inserted:function(e,t,r,n){"select"===r.tag?(n.elm&&!n.elm._vOptions?lt(r,"postpatch",(function(){Fo.componentUpdated(e,t,r)})):Uo(e,t,r.context),e._vOptions=[].map.call(e.options,Ho)):("textarea"===r.tag||Kr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Wo),e.addEventListener("compositionend",Ko),e.addEventListener("change",Ko),Z&&(e.vmodel=!0)))},componentUpdated:function(e,t,r){if("select"===r.tag){Uo(e,t,r.context);var n=e._vOptions,o=e._vOptions=[].map.call(e.options,Ho);o.some((function(e,t){return!j(e,n[t])}))&&(e.multiple?t.value.some((function(e){return Jo(e,o)})):t.value!==t.oldValue&&Jo(t.value,o))&&Go(e,"change")}}};function Uo(e,t,r){Vo(e,t,r),(Y||X)&&setTimeout((function(){Vo(e,t,r)}),0)}function Vo(e,t,r){var n=t.value,o=e.multiple;if(!o||Array.isArray(n)){for(var a,i,u=0,l=e.options.length;u<l;u++)if(i=e.options[u],o)a=D(n,Ho(i))>-1,i.selected!==a&&(i.selected=a);else if(j(Ho(i),n))return void(e.selectedIndex!==u&&(e.selectedIndex=u));o||(e.selectedIndex=-1)}}function Jo(e,t){return t.every((function(t){return!j(t,e)}))}function Ho(e){return"_value"in e?e._value:e.value}function Wo(e){e.target.composing=!0}function Ko(e){e.target.composing&&(e.target.composing=!1,Go(e.target,"input"))}function Go(e,t){var r=document.createEvent("HTMLEvents");r.initEvent(t,!0,!0),e.dispatchEvent(r)}function Yo(e){return!e.componentInstance||e.data&&e.data.transition?e:Yo(e.componentInstance._vnode)}var Zo={model:Fo,show:{bind:function(e,t,r){var n=t.value,o=(r=Yo(r)).data&&r.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;n&&o?(r.data.show=!0,qo(r,(function(){e.style.display=a}))):e.style.display=n?a:"none"},update:function(e,t,r){var n=t.value;!n!=!t.oldValue&&((r=Yo(r)).data&&r.data.transition?(r.data.show=!0,n?qo(r,(function(){e.style.display=e.__vOriginalDisplay})):Mo(r,(function(){e.style.display="none"}))):e.style.display=n?e.__vOriginalDisplay:"none")},unbind:function(e,t,r,n,o){o||(e.style.display=e.__vOriginalDisplay)}}},Xo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Qo(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Qo(Jt(t.children)):e}function ea(e){var t={},r=e.$options;for(var n in r.propsData)t[n]=e[n];var o=r._parentListeners;for(var a in o)t[w(a)]=o[a];return t}function ta(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ra=function(e){return e.tag||bt(e)},na=function(e){return"show"===e.name},oa={name:"transition",props:Xo,abstract:!0,render:function(e){var t=this,r=this.$slots.default;if(r&&(r=r.filter(ra)).length){var n=this.mode,o=r[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=Qo(o);if(!a)return o;if(this._leaving)return ta(e,o);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:u(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=ea(this),s=this._vnode,c=Qo(s);if(a.data.directives&&a.data.directives.some(na)&&(a.data.show=!0),c&&c.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,c)&&!bt(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var f=c.data.transition=P({},l);if("out-in"===n)return this._leaving=!0,lt(f,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ta(e,o);if("in-out"===n){if(bt(a))return s;var p,h=function(){p()};lt(l,"afterEnter",h),lt(l,"enterCancelled",h),lt(f,"delayLeave",(function(e){p=e}))}}return o}}},aa=P({tag:String,moveClass:String},Xo);function ia(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ua(e){e.data.newPos=e.elm.getBoundingClientRect()}function la(e){var t=e.data.pos,r=e.data.newPos,n=t.left-r.left,o=t.top-r.top;if(n||o){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+n+"px,"+o+"px)",a.transitionDuration="0s"}}delete aa.mode;var sa={Transition:oa,TransitionGroup:{props:aa,beforeMount:function(){var e=this,t=this._update;this._update=function(r,n){var o=Zt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,r,n)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),n=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=ea(this),u=0;u<o.length;u++){var l=o[u];l.tag&&null!=l.key&&0!==String(l.key).indexOf("__vlist")&&(a.push(l),r[l.key]=l,(l.data||(l.data={})).transition=i)}if(n){for(var s=[],c=[],f=0;f<n.length;f++){var p=n[f];p.data.transition=i,p.data.pos=p.elm.getBoundingClientRect(),r[p.key]?s.push(p):c.push(p)}this.kept=e(t,null,s),this.removed=c}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(ia),e.forEach(ua),e.forEach(la),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var r=e.elm,n=r.style;Po(r,t),n.transform=n.WebkitTransform=n.transitionDuration="",r.addEventListener(Ro,r._moveCb=function e(n){n&&n.target!==r||n&&!/transform$/.test(n.propertyName)||(r.removeEventListener(Ro,e),r._moveCb=null,_o(r,t))})}})))},methods:{hasMove:function(e,t){if(!xo)return!1;if(this._hasMove)return this._hasMove;var r=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){vo(r,e)})),mo(r,t),r.style.display="none",this.$el.appendChild(r);var n=$o(r);return this.$el.removeChild(r),this._hasMove=n.hasTransform}}}};kr.config.mustUseProp=Ir,kr.config.isReservedTag=Jr,kr.config.isReservedAttr=Pr,kr.config.getTagNamespace=Hr,kr.config.isUnknownElement=function(e){if(!H)return!0;if(Jr(e))return!1;if(e=e.toLowerCase(),null!=Wr[e])return Wr[e];var t=document.createElement(e);return e.indexOf("-")>-1?Wr[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Wr[e]=/HTMLUnknownElement/.test(t.toString())},P(kr.options.directives,Zo),P(kr.options.components,sa),kr.prototype.__patch__=H?Lo:I,kr.prototype.$mount=function(e,t){return function(e,t,r){var n;return e.$el=t,e.$options.render||(e.$options.render=ve),er(e,"beforeMount"),n=function(){e._update(e._render(),r)},new pr(e,n,I,{before:function(){e._isMounted&&!e._isDestroyed&&er(e,"beforeUpdate")}},!0),r=!1,null==e.$vnode&&(e._isMounted=!0,er(e,"mounted")),e}(this,e=e&&H?Gr(e):void 0,t)},H&&setTimeout((function(){z.devtools&&ae&&ae.emit("init",kr)}),0);var ca,fa=/\{\{((?:.|\r?\n)+?)\}\}/g,pa=/[-.*+?^${}()|[\]\/\\]/g,ha=C((function(e){var t=e[0].replace(pa,"\\$&"),r=e[1].replace(pa,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+r,"g")})),da={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var r=Dn(e,"class");r&&(e.staticClass=JSON.stringify(r));var n=jn(e,"class",!1);n&&(e.classBinding=n)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}},ba={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var r=Dn(e,"style");r&&(e.staticStyle=JSON.stringify(no(r)));var n=jn(e,"style",!1);n&&(e.styleBinding=n)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},ma=b("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),va=b("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ya=b("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),ga=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,xa=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ca="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+L.source+"]*",ka="((?:"+Ca+"\\:)?"+Ca+")",wa=new RegExp("^<"+ka),Ra=/^\s*(\/?)>/,Sa=new RegExp("^<\\/"+ka+"[^>]*>"),Ea=/^<!DOCTYPE [^>]+>/i,Oa=/^<!\--/,Aa=/^<!\[/,Pa=b("script,style,textarea",!0),_a={},Ia={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Ta=/&(?:lt|gt|quot|amp|#39);/g,$a=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,ja=b("pre,textarea",!0),Da=function(e,t){return e&&ja(e)&&"\n"===t[0]};function qa(e,t){var r=t?$a:Ta;return e.replace(r,(function(e){return Ia[e]}))}var Ma,Ba,Na,za,La,Fa,Ua,Va,Ja=/^@|^v-on:/,Ha=/^v-|^@|^:|^#/,Wa=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ka=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Ga=/^\(|\)$/g,Ya=/^\[.*\]$/,Za=/:(.*)$/,Xa=/^:|^\.|^v-bind:/,Qa=/\.[^.\]]+(?=[^\]]*$)/g,ei=/^v-slot(:|$)|^#/,ti=/[\r\n]/,ri=/[ \f\t\r\n]+/g,ni=C((function(e){return(ca=ca||document.createElement("div")).innerHTML=e,ca.textContent})),oi="_empty_";function ai(e,t,r){return{type:1,tag:e,attrsList:t,attrsMap:fi(t),rawAttrsMap:{},parent:r,children:[]}}function ii(e,t){var r,n;(n=jn(r=e,"key"))&&(r.key=n),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=jn(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Dn(e,"scope"),e.slotScope=t||Dn(e,"slot-scope")):(t=Dn(e,"slot-scope"))&&(e.slotScope=t);var r=jn(e,"slot");if(r&&(e.slotTarget='""'===r?'"default"':r,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Pn(e,"slot",r,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot"))),"template"===e.tag){var n=qn(e,ei);if(n){var o=si(n),a=o.name,i=o.dynamic;e.slotTarget=a,e.slotTargetDynamic=i,e.slotScope=n.value||oi}}else{var u=qn(e,ei);if(u){var l=e.scopedSlots||(e.scopedSlots={}),s=si(u),c=s.name,f=s.dynamic,p=l[c]=ai("template",[],e);p.slotTarget=c,p.slotTargetDynamic=f,p.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=p,!0})),p.slotScope=u.value||oi,e.children=[],e.plain=!1}}}(e),function(e){"slot"===e.tag&&(e.slotName=jn(e,"name"))}(e),function(e){var t;(t=jn(e,"is"))&&(e.component=t),null!=Dn(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var o=0;o<Na.length;o++)e=Na[o](e,t)||e;return function(e){var t,r,n,o,a,i,u,l,s=e.attrsList;for(t=0,r=s.length;t<r;t++)if(n=o=s[t].name,a=s[t].value,Ha.test(n))if(e.hasBindings=!0,(i=ci(n.replace(Ha,"")))&&(n=n.replace(Qa,"")),Xa.test(n))n=n.replace(Xa,""),a=Rn(a),(l=Ya.test(n))&&(n=n.slice(1,-1)),i&&(i.prop&&!l&&"innerHtml"===(n=w(n))&&(n="innerHTML"),i.camel&&!l&&(n=w(n)),i.sync&&(u=Nn(a,"$event"),l?$n(e,'"update:"+('+n+")",u,null,!1,0,s[t],!0):($n(e,"update:"+w(n),u,null,!1,0,s[t]),E(n)!==w(n)&&$n(e,"update:"+E(n),u,null,!1,0,s[t])))),i&&i.prop||!e.component&&Ua(e.tag,e.attrsMap.type,n)?An(e,n,a,s[t],l):Pn(e,n,a,s[t],l);else if(Ja.test(n))n=n.replace(Ja,""),(l=Ya.test(n))&&(n=n.slice(1,-1)),$n(e,n,a,i,!1,0,s[t],l);else{var c=(n=n.replace(Ha,"")).match(Za),f=c&&c[1];l=!1,f&&(n=n.slice(0,-(f.length+1)),Ya.test(f)&&(f=f.slice(1,-1),l=!0)),In(e,n,o,a,f,l,i,s[t])}else Pn(e,n,JSON.stringify(a),s[t]),!e.component&&"muted"===n&&Ua(e.tag,e.attrsMap.type,n)&&An(e,n,"true",s[t])}(e),e}function ui(e){var t;if(t=Dn(e,"v-for")){var r=function(e){var t=e.match(Wa);if(t){var r={};r.for=t[2].trim();var n=t[1].trim().replace(Ga,""),o=n.match(Ka);return o?(r.alias=n.replace(Ka,"").trim(),r.iterator1=o[1].trim(),o[2]&&(r.iterator2=o[2].trim())):r.alias=n,r}}(t);r&&P(e,r)}}function li(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function si(e){var t=e.name.replace(ei,"");return t||"#"!==e.name[0]&&(t="default"),Ya.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function ci(e){var t=e.match(Qa);if(t){var r={};return t.forEach((function(e){r[e.slice(1)]=!0})),r}}function fi(e){for(var t={},r=0,n=e.length;r<n;r++)t[e[r].name]=e[r].value;return t}var pi=/^xmlns:NS\d+/,hi=/^NS\d+:/;function di(e){return ai(e.tag,e.attrsList.slice(),e.parent)}var bi,mi,vi=[da,ba,{preTransformNode:function(e,t){if("input"===e.tag){var r,n=e.attrsMap;if(!n["v-model"])return;if((n[":type"]||n["v-bind:type"])&&(r=jn(e,"type")),n.type||r||!n["v-bind"]||(r="("+n["v-bind"]+").type"),r){var o=Dn(e,"v-if",!0),a=o?"&&("+o+")":"",i=null!=Dn(e,"v-else",!0),u=Dn(e,"v-else-if",!0),l=di(e);ui(l),_n(l,"type","checkbox"),ii(l,t),l.processed=!0,l.if="("+r+")==='checkbox'"+a,li(l,{exp:l.if,block:l});var s=di(e);Dn(s,"v-for",!0),_n(s,"type","radio"),ii(s,t),li(l,{exp:"("+r+")==='radio'"+a,block:s});var c=di(e);return Dn(c,"v-for",!0),_n(c,":type",r),ii(c,t),li(l,{exp:o,block:c}),i?l.else=!0:u&&(l.elseif=u),l}}}}],yi={expectHTML:!0,modules:vi,directives:{model:function(e,t,r){var n=t.value,o=t.modifiers,a=e.tag,i=e.attrsMap.type;if(e.component)return Bn(e,n,o),!1;if("select"===a)!function(e,t,r){var n='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r&&r.number?"_n(val)":"val")+"});";$n(e,"change",n=n+" "+Nn(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}(e,n,o);else if("input"===a&&"checkbox"===i)!function(e,t,r){var n=r&&r.number,o=jn(e,"value")||"null",a=jn(e,"true-value")||"true",i=jn(e,"false-value")||"false";An(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),$n(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+i+");if(Array.isArray($$a)){var $$v="+(n?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Nn(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Nn(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Nn(t,"$$c")+"}",null,!0)}(e,n,o);else if("input"===a&&"radio"===i)!function(e,t,r){var n=r&&r.number,o=jn(e,"value")||"null";An(e,"checked","_q("+t+","+(o=n?"_n("+o+")":o)+")"),$n(e,"change",Nn(t,o),null,!0)}(e,n,o);else if("input"===a||"textarea"===a)!function(e,t,r){var n=e.attrsMap.type,o=r||{},a=o.lazy,i=o.number,u=o.trim,l=!a&&"range"!==n,s=a?"change":"range"===n?Hn:"input",c="$event.target.value";u&&(c="$event.target.value.trim()"),i&&(c="_n("+c+")");var f=Nn(t,c);l&&(f="if($event.target.composing)return;"+f),An(e,"value","("+t+")"),$n(e,s,f,null,!0),(u||i)&&$n(e,"blur","$forceUpdate()")}(e,n,o);else if(!z.isReservedTag(a))return Bn(e,n,o),!1;return!0},text:function(e,t){t.value&&An(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&An(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:ma,mustUseProp:Ir,canBeLeftOpenTag:va,isReservedTag:Jr,getTagNamespace:Hr,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(vi)},gi=C((function(e){return b("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));var xi=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Ci=/\([^)]*?\);*$/,ki=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,wi={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Ri={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Si=function(e){return"if("+e+")return null;"},Ei={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Si("$event.target !== $event.currentTarget"),ctrl:Si("!$event.ctrlKey"),shift:Si("!$event.shiftKey"),alt:Si("!$event.altKey"),meta:Si("!$event.metaKey"),left:Si("'button' in $event && $event.button !== 0"),middle:Si("'button' in $event && $event.button !== 1"),right:Si("'button' in $event && $event.button !== 2")};function Oi(e,t){var r=t?"nativeOn:":"on:",n="",o="";for(var a in e){var i=Ai(e[a]);e[a]&&e[a].dynamic?o+=a+","+i+",":n+='"'+a+'":'+i+","}return n="{"+n.slice(0,-1)+"}",o?r+"_d("+n+",["+o.slice(0,-1)+"])":r+n}function Ai(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return Ai(e)})).join(",")+"]";var t=ki.test(e.value),r=xi.test(e.value),n=ki.test(e.value.replace(Ci,""));if(e.modifiers){var o="",a="",i=[];for(var u in e.modifiers)if(Ei[u])a+=Ei[u],wi[u]&&i.push(u);else if("exact"===u){var l=e.modifiers;a+=Si(["ctrl","shift","alt","meta"].filter((function(e){return!l[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else i.push(u);return i.length&&(o+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Pi).join("&&")+")return null;"}(i)),a&&(o+=a),"function($event){"+o+(t?"return "+e.value+".apply(null, arguments)":r?"return ("+e.value+").apply(null, arguments)":n?"return "+e.value:e.value)+"}"}return t||r?e.value:"function($event){"+(n?"return "+e.value:e.value)+"}"}function Pi(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var r=wi[e],n=Ri[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(r)+",$event.key,"+JSON.stringify(n)+")"}var _i={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(r){return"_b("+r+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:I},Ii=function(e){this.options=e,this.warn=e.warn||En,this.transforms=On(e.modules,"transformCode"),this.dataGenFns=On(e.modules,"genData"),this.directives=P(P({},_i),e.directives);var t=e.isReservedTag||T;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Ti(e,t){var r=new Ii(t);return{render:"with(this){return "+(e?"script"===e.tag?"null":$i(e,r):'_c("div")')+"}",staticRenderFns:r.staticRenderFns}}function $i(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return ji(e,t);if(e.once&&!e.onceProcessed)return Di(e,t);if(e.for&&!e.forProcessed)return Mi(e,t);if(e.if&&!e.ifProcessed)return qi(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var r=e.slotName||'"default"',n=Li(e,t),o="_t("+r+(n?",function(){return "+n+"}":""),a=e.attrs||e.dynamicAttrs?Vi((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:w(e.name),value:e.value,dynamic:e.dynamic}}))):null,i=e.attrsMap["v-bind"];return!a&&!i||n||(o+=",null"),a&&(o+=","+a),i&&(o+=(a?"":",null")+","+i),o+")"}(e,t);var r;if(e.component)r=function(e,t,r){var n=t.inlineTemplate?null:Li(t,r,!0);return"_c("+e+","+Bi(t,r)+(n?","+n:"")+")"}(e.component,e,t);else{var n;(!e.plain||e.pre&&t.maybeComponent(e))&&(n=Bi(e,t));var o=e.inlineTemplate?null:Li(e,t,!0);r="_c('"+e.tag+"'"+(n?","+n:"")+(o?","+o:"")+")"}for(var a=0;a<t.transforms.length;a++)r=t.transforms[a](e,r);return r}return Li(e,t)||"void 0"}function ji(e,t){e.staticProcessed=!0;var r=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+$i(e,t)+"}"),t.pre=r,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Di(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return qi(e,t);if(e.staticInFor){for(var r="",n=e.parent;n;){if(n.for){r=n.key;break}n=n.parent}return r?"_o("+$i(e,t)+","+t.onceId+++","+r+")":$i(e,t)}return ji(e,t)}function qi(e,t,r,n){return e.ifProcessed=!0,function e(t,r,n,o){if(!t.length)return o||"_e()";var a=t.shift();return a.exp?"("+a.exp+")?"+i(a.block)+":"+e(t,r,n,o):""+i(a.block);function i(e){return n?n(e,r):e.once?Di(e,r):$i(e,r)}}(e.ifConditions.slice(),t,r,n)}function Mi(e,t,r,n){var o=e.for,a=e.alias,i=e.iterator1?","+e.iterator1:"",u=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(n||"_l")+"(("+o+"),function("+a+i+u+"){return "+(r||$i)(e,t)+"})"}function Bi(e,t){var r="{",n=function(e,t){var r=e.directives;if(r){var n,o,a,i,u="directives:[",l=!1;for(n=0,o=r.length;n<o;n++){a=r[n],i=!0;var s=t.directives[a.name];s&&(i=!!s(e,a,t.warn)),i&&(l=!0,u+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}return l?u.slice(0,-1)+"]":void 0}}(e,t);n&&(r+=n+","),e.key&&(r+="key:"+e.key+","),e.ref&&(r+="ref:"+e.ref+","),e.refInFor&&(r+="refInFor:true,"),e.pre&&(r+="pre:true,"),e.component&&(r+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)r+=t.dataGenFns[o](e);if(e.attrs&&(r+="attrs:"+Vi(e.attrs)+","),e.props&&(r+="domProps:"+Vi(e.props)+","),e.events&&(r+=Oi(e.events,!1)+","),e.nativeEvents&&(r+=Oi(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(r+="slot:"+e.slotTarget+","),e.scopedSlots&&(r+=function(e,t,r){var n=e.for||Object.keys(t).some((function(e){var r=t[e];return r.slotTargetDynamic||r.if||r.for||Ni(r)})),o=!!e.if;if(!n)for(var a=e.parent;a;){if(a.slotScope&&a.slotScope!==oi||a.for){n=!0;break}a.if&&(o=!0),a=a.parent}var i=Object.keys(t).map((function(e){return zi(t[e],r)})).join(",");return"scopedSlots:_u(["+i+"]"+(n?",null,true":"")+(!n&&o?",null,false,"+function(e){for(var t=5381,r=e.length;r;)t=33*t^e.charCodeAt(--r);return t>>>0}(i):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(r+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var a=function(e,t){var r=e.children[0];if(r&&1===r.type){var n=Ti(r,t.options);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);a&&(r+=a+",")}return r=r.replace(/,$/,"")+"}",e.dynamicAttrs&&(r="_b("+r+',"'+e.tag+'",'+Vi(e.dynamicAttrs)+")"),e.wrapData&&(r=e.wrapData(r)),e.wrapListeners&&(r=e.wrapListeners(r)),r}function Ni(e){return 1===e.type&&("slot"===e.tag||e.children.some(Ni))}function zi(e,t){var r=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!r)return qi(e,t,zi,"null");if(e.for&&!e.forProcessed)return Mi(e,t,zi);var n=e.slotScope===oi?"":String(e.slotScope),o="function("+n+"){return "+("template"===e.tag?e.if&&r?"("+e.if+")?"+(Li(e,t)||"undefined")+":undefined":Li(e,t)||"undefined":$i(e,t))+"}",a=n?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+o+a+"}"}function Li(e,t,r,n,o){var a=e.children;if(a.length){var i=a[0];if(1===a.length&&i.for&&"template"!==i.tag&&"slot"!==i.tag){var u=r?t.maybeComponent(i)?",1":",0":"";return""+(n||$i)(i,t)+u}var l=r?function(e,t){for(var r=0,n=0;n<e.length;n++){var o=e[n];if(1===o.type){if(Fi(o)||o.ifConditions&&o.ifConditions.some((function(e){return Fi(e.block)}))){r=2;break}(t(o)||o.ifConditions&&o.ifConditions.some((function(e){return t(e.block)})))&&(r=1)}}return r}(a,t.maybeComponent):0,s=o||Ui;return"["+a.map((function(e){return s(e,t)})).join(",")+"]"+(l?","+l:"")}}function Fi(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Ui(e,t){return 1===e.type?$i(e,t):3===e.type&&e.isComment?(n=e,"_e("+JSON.stringify(n.text)+")"):"_v("+(2===(r=e).type?r.expression:Ji(JSON.stringify(r.text)))+")";var r,n}function Vi(e){for(var t="",r="",n=0;n<e.length;n++){var o=e[n],a=Ji(o.value);o.dynamic?r+=o.name+","+a+",":t+='"'+o.name+'":'+a+","}return t="{"+t.slice(0,-1)+"}",r?"_d("+t+",["+r.slice(0,-1)+"])":t}function Ji(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function Hi(e,t){try{return new Function(e)}catch(r){return t.push({err:r,code:e}),I}}function Wi(e){var t=Object.create(null);return function(r,n,o){(n=P({},n)).warn,delete n.warn;var a=n.delimiters?String(n.delimiters)+r:r;if(t[a])return t[a];var i=e(r,n),u={},l=[];return u.render=Hi(i.render,l),u.staticRenderFns=i.staticRenderFns.map((function(e){return Hi(e,l)})),t[a]=u}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b");var Ki,Gi,Yi=(Ki=function(e,t){var r=function(e,t){Ma=t.warn||En,Fa=t.isPreTag||T,Ua=t.mustUseProp||T,Va=t.getTagNamespace||T,t.isReservedTag,Na=On(t.modules,"transformNode"),za=On(t.modules,"preTransformNode"),La=On(t.modules,"postTransformNode"),Ba=t.delimiters;var r,n,o=[],a=!1!==t.preserveWhitespace,i=t.whitespace,u=!1,l=!1;function s(e){if(c(e),u||e.processed||(e=ii(e,t)),o.length||e===r||r.if&&(e.elseif||e.else)&&li(r,{exp:e.elseif,block:e}),n&&!e.forbidden)if(e.elseif||e.else)i=e,(s=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(n.children))&&s.if&&li(s,{exp:i.elseif,block:i});else{if(e.slotScope){var a=e.slotTarget||'"default"';(n.scopedSlots||(n.scopedSlots={}))[a]=e}n.children.push(e),e.parent=n}var i,s;e.children=e.children.filter((function(e){return!e.slotScope})),c(e),e.pre&&(u=!1),Fa(e.tag)&&(l=!1);for(var f=0;f<La.length;f++)La[f](e,t)}function c(e){if(!l)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var r,n,o=[],a=t.expectHTML,i=t.isUnaryTag||T,u=t.canBeLeftOpenTag||T,l=0;e;){if(r=e,n&&Pa(n)){var s=0,c=n.toLowerCase(),f=_a[c]||(_a[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),p=e.replace(f,(function(e,r,n){return s=n.length,Pa(c)||"noscript"===c||(r=r.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Da(c,r)&&(r=r.slice(1)),t.chars&&t.chars(r),""}));l+=e.length-p.length,e=p,E(c,l-s,l)}else{var h=e.indexOf("<");if(0===h){if(Oa.test(e)){var d=e.indexOf("--\x3e");if(d>=0){t.shouldKeepComment&&t.comment(e.substring(4,d),l,l+d+3),w(d+3);continue}}if(Aa.test(e)){var b=e.indexOf("]>");if(b>=0){w(b+2);continue}}var m=e.match(Ea);if(m){w(m[0].length);continue}var v=e.match(Sa);if(v){var y=l;w(v[0].length),E(v[1],y,l);continue}var g=R();if(g){S(g),Da(g.tagName,e)&&w(1);continue}}var x=void 0,C=void 0,k=void 0;if(h>=0){for(C=e.slice(h);!(Sa.test(C)||wa.test(C)||Oa.test(C)||Aa.test(C)||(k=C.indexOf("<",1))<0);)h+=k,C=e.slice(h);x=e.substring(0,h)}h<0&&(x=e),x&&w(x.length),t.chars&&x&&t.chars(x,l-x.length,l)}if(e===r){t.chars&&t.chars(e);break}}function w(t){l+=t,e=e.substring(t)}function R(){var t=e.match(wa);if(t){var r,n,o={tagName:t[1],attrs:[],start:l};for(w(t[0].length);!(r=e.match(Ra))&&(n=e.match(xa)||e.match(ga));)n.start=l,w(n[0].length),n.end=l,o.attrs.push(n);if(r)return o.unarySlash=r[1],w(r[0].length),o.end=l,o}}function S(e){var r=e.tagName,l=e.unarySlash;a&&("p"===n&&ya(r)&&E(n),u(r)&&n===r&&E(r));for(var s=i(r)||!!l,c=e.attrs.length,f=new Array(c),p=0;p<c;p++){var h=e.attrs[p],d=h[3]||h[4]||h[5]||"",b="a"===r&&"href"===h[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[p]={name:h[1],value:qa(d,b)}}s||(o.push({tag:r,lowerCasedTag:r.toLowerCase(),attrs:f,start:e.start,end:e.end}),n=r),t.start&&t.start(r,f,s,e.start,e.end)}function E(e,r,a){var i,u;if(null==r&&(r=l),null==a&&(a=l),e)for(u=e.toLowerCase(),i=o.length-1;i>=0&&o[i].lowerCasedTag!==u;i--);else i=0;if(i>=0){for(var s=o.length-1;s>=i;s--)t.end&&t.end(o[s].tag,r,a);o.length=i,n=i&&o[i-1].tag}else"br"===u?t.start&&t.start(e,[],!0,r,a):"p"===u&&(t.start&&t.start(e,[],!1,r,a),t.end&&t.end(e,r,a))}E()}(e,{warn:Ma,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,a,i,c,f){var p=n&&n.ns||Va(e);Y&&"svg"===p&&(a=function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];pi.test(n.name)||(n.name=n.name.replace(hi,""),t.push(n))}return t}(a));var h,d=ai(e,a,n);p&&(d.ns=p),"style"!==(h=d).tag&&("script"!==h.tag||h.attrsMap.type&&"text/javascript"!==h.attrsMap.type)||oe()||(d.forbidden=!0);for(var b=0;b<za.length;b++)d=za[b](d,t)||d;u||(function(e){null!=Dn(e,"v-pre")&&(e.pre=!0)}(d),d.pre&&(u=!0)),Fa(d.tag)&&(l=!0),u?function(e){var t=e.attrsList,r=t.length;if(r)for(var n=e.attrs=new Array(r),o=0;o<r;o++)n[o]={name:t[o].name,value:JSON.stringify(t[o].value)},null!=t[o].start&&(n[o].start=t[o].start,n[o].end=t[o].end);else e.pre||(e.plain=!0)}(d):d.processed||(ui(d),function(e){var t=Dn(e,"v-if");if(t)e.if=t,li(e,{exp:t,block:e});else{null!=Dn(e,"v-else")&&(e.else=!0);var r=Dn(e,"v-else-if");r&&(e.elseif=r)}}(d),function(e){null!=Dn(e,"v-once")&&(e.once=!0)}(d)),r||(r=d),i?s(d):(n=d,o.push(d))},end:function(e,t,r){var a=o[o.length-1];o.length-=1,n=o[o.length-1],s(a)},chars:function(e,t,r){if(n&&(!Y||"textarea"!==n.tag||n.attrsMap.placeholder!==e)){var o,s,c,f=n.children;(e=l||e.trim()?"script"===(o=n).tag||"style"===o.tag?e:ni(e):f.length?i?"condense"===i&&ti.test(e)?"":" ":a?" ":"":"")&&(l||"condense"!==i||(e=e.replace(ri," ")),!u&&" "!==e&&(s=function(e,t){var r=t?ha(t):fa;if(r.test(e)){for(var n,o,a,i=[],u=[],l=r.lastIndex=0;n=r.exec(e);){(o=n.index)>l&&(u.push(a=e.slice(l,o)),i.push(JSON.stringify(a)));var s=Rn(n[1].trim());i.push("_s("+s+")"),u.push({"@binding":s}),l=o+n[0].length}return l<e.length&&(u.push(a=e.slice(l)),i.push(JSON.stringify(a))),{expression:i.join("+"),tokens:u}}}(e,Ba))?c={type:2,expression:s.expression,tokens:s.tokens,text:e}:" "===e&&f.length&&" "===f[f.length-1].text||(c={type:3,text:e}),c&&f.push(c))}},comment:function(e,t,r){if(n){var o={type:3,text:e,isComment:!0};n.children.push(o)}}}),r}(e.trim(),t);!1!==t.optimize&&function(e,t){e&&(bi=gi(t.staticKeys||""),mi=t.isReservedTag||T,function e(t){if(t.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||m(e.tag)||!mi(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(bi))))}(t),1===t.type){if(!mi(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var r=0,n=t.children.length;r<n;r++){var o=t.children[r];e(o),o.static||(t.static=!1)}if(t.ifConditions)for(var a=1,i=t.ifConditions.length;a<i;a++){var u=t.ifConditions[a].block;e(u),u.static||(t.static=!1)}}}(e),function e(t,r){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=r),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var n=0,o=t.children.length;n<o;n++)e(t.children[n],r||!!t.for);if(t.ifConditions)for(var a=1,i=t.ifConditions.length;a<i;a++)e(t.ifConditions[a].block,r)}}(e,!1))}(r,t);var n=Ti(r,t);return{ast:r,render:n.render,staticRenderFns:n.staticRenderFns}},function(e){function t(t,r){var n=Object.create(e),o=[],a=[];if(r)for(var i in r.modules&&(n.modules=(e.modules||[]).concat(r.modules)),r.directives&&(n.directives=P(Object.create(e.directives||null),r.directives)),r)"modules"!==i&&"directives"!==i&&(n[i]=r[i]);n.warn=function(e,t,r){(r?a:o).push(e)};var u=Ki(t.trim(),n);return u.errors=o,u.tips=a,u}return{compile:t,compileToFunctions:Wi(t)}})(yi),Zi=(Yi.compile,Yi.compileToFunctions);function Xi(e){return(Gi=Gi||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Gi.innerHTML.indexOf("&#10;")>0}var Qi=!!H&&Xi(!1),eu=!!H&&Xi(!0),tu=C((function(e){var t=Gr(e);return t&&t.innerHTML})),ru=kr.prototype.$mount;kr.prototype.$mount=function(e,t){if((e=e&&Gr(e))===document.body||e===document.documentElement)return this;var r=this.$options;if(!r.render){var n=r.template;if(n)if("string"==typeof n)"#"===n.charAt(0)&&(n=tu(n));else{if(!n.nodeType)return this;n=n.innerHTML}else e&&(n=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(n){var o=Zi(n,{outputSourceRange:!1,shouldDecodeNewlines:Qi,shouldDecodeNewlinesForHref:eu,delimiters:r.delimiters,comments:r.comments},this),a=o.render,i=o.staticRenderFns;r.render=a,r.staticRenderFns=i}}return ru.call(this,e,t)},kr.compile=Zi,e.exports=kr},6589:(e,t,r)=>{var n={"./code-class.vue":15587,"./code-method-declare.vue":34006,"./code-type-declare.vue":4162,"./content-template.vue":37969,"./lang-link.vue":35755,"./mark-link.vue":79164,"./mark-to.vue":73192,"./see-link.vue":11025,"./shields.vue":17596};function o(e){var t=a(e);return r(t)}function a(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=a,e.exports=o,o.id=6589},22385:(e,t,r)=>{var n={"./about.vue":[14694,694],"./change.vue":[52319,319],"./class.vue":[11691,691],"./content.vue":[44980,980],"./directory.vue":[71033,33],"./guide.vue":[73580,580],"./index.vue":[20737,876,737],"./install.vue":[58036,36],"./introduction.vue":[43044,44],"./lang.vue":[55407,407],"./method.vue":[83678,678],"./nav.vue":[30625,625],"./property.vue":[30121,121]};function o(e){if(!r.o(n,e))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=n[e],o=t[0];return Promise.all(t.slice(1).map(r.e)).then((()=>r(o)))}o.keys=()=>Object.keys(n),o.id=22385,e.exports=o}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={id:e,exports:{}};return r[e].call(a.exports,a,a.exports,o),a.exports}o.m=r,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>(({148:"linq-js-2.1.23",228:"linq-js-2.1.22",261:"linq-js-pre",384:"linq-js-2.1.17",543:"linq-js-2.1.20",561:"linq-js-2.1.21",581:"linq-js-2.1.19",721:"linq-js-2.1.18",741:"linq-js-2.1.16",937:"linq-js-2.1.15"}[e]||e)+".js"),o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="linq-js-docs:",o.l=(r,n,a,i)=>{if(e[r])e[r].push(n);else{var u,l;if(void 0!==a)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==r||f.getAttribute("data-webpack")==t+a){u=f;break}}u||(l=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.setAttribute("data-webpack",t+a),u.src=r),e[r]=[n];var p=(t,n)=>{u.onerror=u.onload=null,clearTimeout(h);var o=e[r];if(delete e[r],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((e=>e(n))),t)return t(n)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=p.bind(null,u.onerror),u.onload=p.bind(null,u.onload),l&&document.head.appendChild(u)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.p="/linqjs/dist/",(()=>{var e={179:0,592:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var a=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=a);var i=o.p+o.u(t),u=new Error;o.l(i,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var a=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;u.message="Loading chunk "+t+" failed.\n("+a+": "+i+")",u.name="ChunkLoadError",u.type=a,u.request=i,n[1](u)}}),"chunk-"+t,t)}};var t=(t,r)=>{var n,a,[i,u,l]=r,s=0;for(n in u)o.o(u,n)&&(o.m[n]=u[n]);if(l)l(o);for(t&&t(r);s<i.length;s++)a=i[s],o.o(e,a)&&e[a]&&e[a][0](),e[i[s]]=0},r=self.webpackChunklinq_js_docs=self.webpackChunklinq_js_docs||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),(()=>{"use strict";o(79793),o(75293),o(75040),o(40063);var e=o(42849),t=o.n(e),r=o(6532);const n={updated(){$("pre code").each(((e,t)=>{$(t).hasClass("hljs")||hljs.highlightBlock(t)}))},data:()=>({defaultLang:t().defaultLang,lastest:t().lastest,versions:t().versions,promises:[]}),watch:{"$route.params"(){this.reload()}},computed:{lang(){return this.$route.params.lang||this.defaultLang},version(){return(this.$route.params.version||this.lastest)+(this.$route.params.pre||"")}},mounted(){this.$route&&this.$route.hash&&this.$nextTick((()=>{let e=$(this.$el);e.is(this.$route.hash)&&this.scrollTo(e)}))},methods:{hasHistorys(e){return r.any(e,(e=>e&&this.hasHistory(e.historys)))},hasHistory(e){return r.any(this.historys(e),(e=>this.isNewer(e.since)&&this.isOlder(e.deprecated)))},historys:e=>t().historys(e).toArray(),asVersion:e=>t().asVersion(e),isNewer(e){return t().isNewer(e,this.version)},isOlder(e){return t().isOlder(e,this.version)},capitalize:e=>t().capitalize(e),upper:e=>t().upper(e),scrollTo(e){setTimeout((()=>{$(".activatable").removeClass("active");let t="fixed"===$("#topbar").css("position")?50:0;$(document).scrollTop(e.closest(".activatable").addClass("active").offset().top-t-10)}))},isKeyword:e=>/^[a-z]/.test(e),highlight(){this.$nextTick((()=>{$("pre code").each(((e,t)=>{$(t).removeClass("hljs"),hljs.highlightBlock(t)}))}))},reload(){for(let e of this.promises){let t=new Promise(e.exec);for(let r of e.callbacks)r.success?t.then(r.success,r.failed):t.catch(r.failed)}},getJson(...e){let t=(t,r)=>{o.e(995).then((()=>{try{let r=e.map((e=>{let t=!1;if((e instanceof Array||Array.isArray(e))&&(e=e[0],t=!0),"function"==typeof e&&(e=e.call(this)),!e.startsWith("/")){let r=t?[]:{},n=t?[]:{};try{r=o(92226)(`./${this.defaultLang}/${e}.json`)}catch(e){console.warn(e)}try{n=o(92226)(`./${this.lang}/${e}.json`)}catch(e){console.warn(e)}return $.extend(!0,t?[]:{},r,n)}try{return o(61018)(`./resources${e}.json`)}catch(e){return console.warn(e),{}}}));1===r.length?t&&t(r[0]):t&&t(r)}catch(e){r&&r(e)}}).bind(null,o)).catch(o.oe)},r=new Promise(t),n=r.then,a=r.catch;return r.exec=t,r.callbacks=[],r.then=function(e,t){this.callbacks.push({success:e,failed:t}),n.call(this,e,t)},r.catch=function(e){this.callbacks.push({success:null,failed:e}),a.call(this,e)},this.promises.push(r),r},getLanguages:()=>new Promise(((e,t)=>{try{e&&e(o(55259))}catch(e){t&&t(e)}}))}},a=["code-class","code-method-declare","code-type-declare","content-template","lang-link","mark-link","mark-to","see-link","shields"];var i=o(72100),u=o(6195),l=o(6532);const s=e=>()=>o(22385)(`./${e}.vue`);i.use(u),i.mixin(n);for(let e of a)i.component(e,o(6589)(`./${e}.vue`).default);new i({router:new u({routes:[{path:"/",component:s("lang")},{path:"/:lang",component:s("index"),children:[{path:"/",components:{nav:s("nav"),directory:s("directory"),content:s("content")},children:l.selectMany(Object.entries({introduction:"introduction",install:"install",about:"about",change:"change","guides/:code":"guide","apis/:class":"class","apis/:class/method/:method":"method","apis/:class/method/:method/:index":"method","apis/:class/property/:property":"property"}).map((([e,t])=>({key:e,value:t}))),(e=>["",":version(\\d+\\.\\d+\\.\\d+):pre(\\.pre)?/"]),((e,t)=>({path:t+e.key,component:s(e.value)}))).concat([{path:"",component:s("introduction")},{path:":version(\\d+\\.\\d+\\.\\d+):pre(\\.pre)?",component:s("introduction")}]).toArray()}]}],base:"/linqjs"})}).$mount("#app")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL21haW4uc2FzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaGllbGRzLnZ1ZT81NDhhIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaHliaXJkLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL2xhbmcuanNvbiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3ZlcnNpb25zLmpzb24iLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpbnEtanMtMi4xLjI0L2Rpc3QvbGlucS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpbnEtanMtMi4xLjI0L2Rpc3R8c3luYyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9maWx0ZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2NvZGUtY2xhc3MudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvZGUtY2xhc3MudnVlP2E0ZjYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS1jbGFzcy52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS1jbGFzcy52dWU/OWYxYyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvY29kZS1tZXRob2QtZGVjbGFyZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS1tZXRob2QtZGVjbGFyZS52dWU/YzVkYSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb2RlLW1ldGhvZC1kZWNsYXJlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb2RlLW1ldGhvZC1kZWNsYXJlLnZ1ZT8zOTNjIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9jb2RlLXR5cGUtZGVjbGFyZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS10eXBlLWRlY2xhcmUudnVlP2ViOWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS10eXBlLWRlY2xhcmUudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvZGUtdHlwZS1kZWNsYXJlLnZ1ZT9mYTljIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9jb250ZW50LXRlbXBsYXRlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250ZW50LXRlbXBsYXRlLnZ1ZT9hZWI0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRlbnQtdGVtcGxhdGUudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRlbnQtdGVtcGxhdGUudnVlPzFjZjIiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2xhbmctbGluay52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbGFuZy1saW5rLnZ1ZT82Zjc5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xhbmctbGluay52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbGFuZy1saW5rLnZ1ZT9mYTFhIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9tYXJrLWxpbmsudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21hcmstbGluay52dWU/NDE0OSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYXJrLWxpbmsudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21hcmstbGluay52dWU/YzZhZSIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvbWFyay10by52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWFyay10by52dWU/ZGU0MSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYXJrLXRvLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYXJrLXRvLnZ1ZT80OThlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NlZS1saW5rLnZ1ZT8zM2QzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9zZWUtbGluay52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VlLWxpbmsudnVlPzkzZWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VlLWxpbmsudnVlIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9zaGllbGRzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaGllbGRzLnZ1ZT9mNjg1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NoaWVsZHMudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NoaWVsZHMudnVlP2ViMWQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXJvdXRlci9kaXN0L3Z1ZS1yb3V0ZXIuY29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvbWFpbi5zYXNzP2JmNGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2hpZWxkcy52dWU/MTZiNiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5jb21tb24ucHJvZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50c3xzeW5jfC9eLy4qLy52dWUkIiwid2VicGFjazovLy8uL3NyYy9wYWdlc3xsYXp5fC9eLy4qLy52dWUkL3xncm91cE9wdGlvbnM6IHt9fG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvcm91dGVzLmpzIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1bmRlZmluZWQiLCJwdXNoIiwiaWQiLCJpIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJoYXNPd24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInRvU3RyIiwiZGVmaW5lUHJvcGVydHkiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNBcnJheSIsImFyciIsIkFycmF5IiwiY2FsbCIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJrZXkiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInNldFByb3BlcnR5IiwidGFyZ2V0Iiwib3B0aW9ucyIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiLCJuZXdWYWx1ZSIsIndyaXRhYmxlIiwiZ2V0UHJvcGVydHkiLCJleHRlbmQiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImFyZ3VtZW50cyIsImRlZXAiLCJjb2RlIiwiciIsImEiLCJ1IiwibyIsInQiLCJlIiwibiIsImwiLCJFcnJvciIsIjEiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsIjIiLCIzIiwiNCIsIlJlZmVyZW5jZUVycm9yIiwiNSIsIlR5cGVFcnJvciIsIjYiLCJfY29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFwcGx5IiwiRnVuY3Rpb24iLCJiaW5kIiwiNyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiOCIsIjkiLCJfZ2V0IiwiZ2V0IiwiMTAiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiMTEiLCJjcmVhdGUiLCIxMiIsIjEzIiwiaW5kZXhPZiIsIjE0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCIxNSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZnJvbSIsIjE2IiwibmV4dCIsImRvbmUiLCJyZXR1cm4iLCIxNyIsIjE4IiwiMTkiLCIyMCIsIl9zZXRQcm90b3R5cGVPZiIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiX3R5cGVvZiIsIjI1Iiwic2xpY2UiLCJ0ZXN0IiwiMjYiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiTWFwIiwiaGFzIiwic2V0IiwiV3JhcHBlciIsIjI3IiwiMjgiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIjI5IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJJdGVtIiwiZnVuIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCIzMCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsInMiLCJmIiwicCIsImRvbmVSZXN1bHQiLCJtZXRob2QiLCJhcmciLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJoIiwidHJ5Q2F0Y2giLCJ0eXBlIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsImMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwidmFsdWVzIiwiYiIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiMzEiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9hcnJheUxpa2VUb0FycmF5IiwiZjMiLCJhc0VudW1lcmFibGUiLCJ6IiwiZCIsIm0iLCJ5IiwidiIsImciLCJ4IiwiRSIsImsiLCJTIiwiSSIsIlIiLCJDIiwiTyIsInciLCJQIiwiQSIsIl8iLCJUIiwicSIsIkIiLCJEIiwiaiIsIkwiLCJGIiwiTiIsIiQiLCJNIiwiSCIsIkciLCJVIiwiVyIsIkoiLCJWIiwiRW51bWVyYWJsZSIsImdldEVudW1lcmF0b3IiLCJZIiwiZ2V0SXRlcmF0b3IiLCJyZXBlYXQiLCJRIiwicmFuZ2UiLCJaIiwiYmV0d2VlbiIsIldlIiwiZ2VuZXJhdGUiLCJKZSIsImVtcHR5IiwiWCIsImVlIiwidG9BcnJheSIsInRvRGljdGlvbmFyeSIsIl9lIiwiYXNTZWxlY3RvciIsImFzU2FtZUNvbXBhcmVyIiwidG9Mb29rdXAiLCJUZSIsInRvUHJlT3JkZXIiLCJuciIsInRvSW5PcmRlciIsImFyIiwidG9Qb3N0T3JkZXIiLCJvciIsIndoZXJlIiwicmUiLCJzZWxlY3QiLCJ0ZSIsImRpc3RpbmN0IiwiYWUiLCJleGNlcHQiLCJvZSIsInVuaW9uIiwidWUiLCJpbnRlcnNlY3QiLCJpZSIsIm9mVHlwZSIsImxlIiwic2tpcCIsInNlIiwic2tpcFdoaWxlIiwiY2UiLCJza2lwU2FtZSIsImZlIiwic2tpcFByb3BvcnRpb24iLCJwZSIsInRha2UiLCJoZSIsInRha2VXaGlsZSIsImJlIiwidGFrZVNhbWUiLCJkZSIsInRha2VQcm9wb3J0aW9uIiwibWUiLCJvcmRlckJ5Iiwic29ydGVkIiwidmUiLCJvcmRlckJ5RGVzY2VuZGluZyIsImdlIiwidGhlbkJ5IiwieWUiLCJ4ZSIsInRoZW5CeURlc2NlbmRpbmciLCJFZSIsImdyb3VwQnkiLCJrZSIsInNlbGVjdE1hbnkiLCJmbGF0TWFwIiwiZmxhdHRlbiIsIlNlIiwiYXJyYXkkam9pbiIsIkllIiwiaW5uZXJKb2luIiwiam9pbmluZyIsImxlZnRKb2luIiwiUmUiLCJyaWdodEpvaW4iLCJDZSIsImdyb3VwSm9pbiIsIk9lIiwid2UiLCJ6aXAiLCJQZSIsImV2ZXJ5IiwiYXJyYXkkZXZlcnkiLCJhbGwiLCJmaW5kIiwiYXJyYXkkZmluZCIsImZpcnN0T3JEZWZhdWx0IiwiaW5jbHVkZXMiLCJhcnJheSRpbmNsdWRlcyIsImlzU3RyaW5nIiwic3RyaW5nJGluY2x1ZGVzIiwiY29udGFpbnMiLCJmaWx0ZXIiLCJuZSIsImFycmF5JGNvbmNhdCIsImFycmF5JHBvcCIsIl9jYWxsZWUiLCJhcnJheSRwdXNoIiwiX2NhbGxlZTIiLCJzaGlmdCIsImFycmF5JHNoaWZ0IiwiX2NhbGxlZTMiLCJ0MCIsInVuc2hpZnQiLCJhcnJheSR1bnNoaWZ0IiwiX2NhbGxlZTQiLCJyZWR1Y2UiLCJhcnJheSRyZWR1Y2UiLCJhZ2dyZWdhdGUiLCJyZWR1Y2VSaWdodCIsImFycmF5JHJlZHVjZVJpZ2h0Iiwic29tZSIsImFycmF5JHNvbWUiLCJhbnkiLCJxZSIsInNwbGljZSIsImFycmF5JHNwbGljZSIsIkJlIiwiZmlsbCIsIkRlIiwic29ydCIsImplIiwiY29weVdpdGhpbiIsIkxlIiwiZGVmYXVsdElmRW1wdHkiLCJpc0VtcHR5IiwiQWUiLCJhbGxNYXRjaCIsImFzUHJlZGljYXRlIiwiYW55TWF0Y2giLCJzZXF1ZW5jZUVxdWFsIiwiYXNFcXVhbGl0eUNvbXBhcmVyIiwiZmlyc3QiLCJpc1Byb3RvIiwibGFzdCIsImxhc3RPckRlZmF1bHQiLCJzaW5nbGUiLCJzaW5nbGVPckRlZmF1bHQiLCJjb3VudCIsInByb3BvcnRpb24iLCJzdW0iLCJwYXJzZUZsb2F0IiwicHJvZHVjdCIsIk5hTiIsIm1heCIsImFzQ29tcGFyZXIiLCJtYXhPckRlZmF1bHQiLCJtaW4iLCJtaW5PckRlZmF1bHQiLCJhdmVyYWdlIiwiZWxlbWVudEF0IiwiZWxlbWVudEF0T3JEZWZhdWx0IiwiYXJyYXkkaW5kZXhPZiIsInN0cmluZyRpbmRleE9mIiwiYXNTdHJpY3RFcXVhbGl0eUNvbXBhcmVyIiwiZmluZEluZGV4IiwiYXJyYXkkZmluZEluZGV4IiwiZmluZExhc3QiLCJsYXN0SW5kZXhPZiIsImFycmF5JGxhc3RJbmRleE9mIiwic3RyaW5nJGxhc3RJbmRleE9mIiwiTWF0aCIsImZpbmRMYXN0SW5kZXgiLCJhcnJheSRmb3JFYWNoIiwiSyIsImVhY2giLCJRZSIsImluZGljZXMiLCJaZSIsInBlcm11dGF0aW9uIiwiZXIiLCJYZSIsImNvbWJpbmF0aW9uIiwidHIiLCJyciIsImNodW5rIiwiRmUiLCJzcGxpdCIsIk5lIiwibmVhclNwbGl0IiwiJGUiLCJsZWZ0UGFkIiwiTWUiLCJyaWdodFBhZCIsInplIiwicmFuZCIsIkhlIiwicmFuZG9tIiwiZmxvb3IiLCJyYW5kb21PckRlZmF1bHQiLCJ3aXBlIiwiR2UiLCJuZWFyQnkiLCJVZSIsImNvbWJpbmUiLCJZZSIsInNlcGFyYXRlIiwiVmUiLCJpc1N1YiIsImlzU3VwZXIiLCJzeW1tZXRyaWMiLCJLZSIsImNvbmZsaWN0IiwicHJlZGljYXRlIiwiZ3JlYXRlciIsImxlc3MiLCJpZ25vcmVDYXNlIiwicHJvcGVydHkiLCJzZWxlY3RvciIsIm5vdCIsImVxdWFsaXR5Iiwic3RyaWN0Iiwic2FtZSIsInJlZ2V4cCIsIjMyIiwiX2NyZWF0ZVN1cGVyIiwibWF0Y2giLCJJRW51bWVyYWJsZSIsImdldFR5cGUiLCJ0eXBlcyIsIlN0cmluZyIsImVuZHNXaXRoIiwiSXRlcmF0b3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0UHJvdG9UeXBlIiwidG9Qcm90byIsInRvT2JqZWN0IiwiaXNJbnRlZ2VyIiwib3duS2V5cyIsImlzVW5kZWZpbmVkIiwiMzMiLCJJRW51bWVyYXRvciIsIm1vdmVOZXh0IiwiMzQiLCJJQ29tcGFyYWJsZSIsIjM1IiwiSUVxdWF0YWJsZSIsIjM2IiwiR28iLCJleGVjIiwiaXNEZXYiLCJOT0RFX0VOViIsIlVuZGVmaW5lZCIsIk51bWJlciIsInN1YnN0cmluZyIsInRvVXBwZXJDYXNlIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzU2V0IiwiU2V0IiwiaXNNYXAiLCJpc1N5bWJvbCIsImlzRnVuY3Rpb24iLCJpc0FyZ3VtZW50cyIsIkFyZ3VtZW50cyIsImlzSXRlcmF0b3IiLCJpc0VudW1lcmFibGUiLCJpc0xpc3QiLCJhc1Bhc2NhbCIsImNvbnNvbGUiLCJ3YXJuIiwicmVwbGFjZSIsInVuZGVmaW5lUHJvcGVydHkiLCJ1bmRlZmluZVByb3BlcnRpZXMiLCJsYXp5IiwiYXJyYXkkc2xpY2UiLCJhcnJheSRmaWxsIiwiYXJyYXkkbWFwIiwiYXJyYXkkZmlsdGVyIiwiYXJyYXkkc29ydCIsImFycmF5JGNvcHlXaXRoaW4iLCJzdHJpbmckY29uY2F0Iiwic3RyaW5nJHNsaWNlIiwiX3Byb2Nlc3MiLCIzNyIsIkV4Y2VwdGlvbiIsIjM4IiwiSW52YWxpZEZ1bmN0aW9uRXhjZXB0aW9uIiwiMzkiLCJLZXlzRm9yTXVsdGlFbGVtZW50c0V4Y2VwdGlvbiIsIjQwIiwiTmVlZEV4ZWN1dGVCZWZvcmVFeGNlcHRpb24iLCI0MSIsIk5vU3VjaEVsZW1lbnRzRXhjZXB0aW9uIiwiNDIiLCJOb3RBbmNlc3Rvck9mRXhjZXB0aW9uIiwiNDMiLCJOb0VudW1lcmFibGVFeGNlcHRpb24iLCI0NCIsIk91dE9mUmFuZ2VFeGNlcHRpb24iLCI0NSIsIlBsdWdpblJlcGVhdEV4Y2VwdGlvbiIsIjQ2IiwiUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbiIsIjQ3IiwiVG9vTWFueUVsZW1lbnRzRXhjZXB0aW9uIiwiNDgiLCJBcnJheUVudW1lcmFibGUiLCI0OSIsIkJldHdlZW5FbnVtZXJhYmxlIiwiQmV0d2Vlbkl0ZXJhdG9yIiwiNTAiLCJCaW5hcnlUcmVlIiwiY2hpbGRyZW4iLCJCaW5hcnlUcmVlSXRlcmF0b3IiLCJsZWZ0IiwicmlnaHQiLCI1MSIsIkJyZWFkdGhFbnVtZXJhYmxlIiwiQnJlYWR0aEl0ZXJhdG9yIiwiNTIiLCJCcmVhZHRoU3ViVHJlZUVudW1lcmFibGUiLCJCcmVhZHRoU3ViVHJlZUl0ZXJhdG9yIiwiNTMiLCJDaHVua0VudW1lcmFibGUiLCJDaHVua0l0ZXJhdG9yIiwiaGFzTmV4dCIsIjU0IiwiQ29tYmluYXRpb25FbnVtZXJhYmxlIiwiQ29tYmluYXRpb25JdGVyYXRvciIsIjU1IiwiNTYiLCJDb21iaW5lRW51bWVyYWJsZSIsIkNvbWJpbmVJdGVyYXRvciIsInBhcmVudCIsIjU3IiwiQ29uY2F0RW51bWVyYWJsZSIsIkNvbmNhdEl0ZXJhdG9yIiwidDMiLCI1OCIsIkNvcHlXaXRoaW5FbnVtZXJhYmxlIiwidDIiLCI1OSIsIkRlcHRoRW51bWVyYWJsZSIsIkRlcHRoSXRlcmF0b3IiLCI2MCIsIjYxIiwiRGljdGlvbmFyeSIsIjYyIiwiRGlzdGluY3RFbnVtZXJhYmxlIiwiRGlzdGluY3RJdGVyYXRvciIsIjYzIiwiRWFjaEVudW1lcmFibGUiLCJFYWNoSXRlcmF0b3IiLCI2NCIsIkVtcHR5RW51bWVyYWJsZSIsIkVtcHR5SXRlcmF0b3IiLCI2NSIsIkVudHJ5IiwiNjYiLCJFeGNlcHRFbnVtZXJhYmxlIiwiRXhjZXB0SXRlcmF0b3IiLCI2NyIsIkZpbGxFbnVtZXJhYmxlIiwiNjgiLCJHZW5lcmF0ZUVudW1lcmFibGUiLCJHZW5lcmF0ZUl0ZXJhdG9yIiwiNjkiLCJHZW5lcmF0b3JFbnVtZXJhYmxlIiwiNzAiLCJHcm91cEpvaW5FbnVtZXJhYmxlIiwiR3JvdXBKb2luSXRlcmF0b3IiLCI3MSIsIkdyb3VwZWRFbnVtZXJhYmxlIiwiR3JvdXBlZEl0ZXJhdG9yIiwiNzIiLCJJQ2h1bmsiLCI3MyIsIklDb21iaW5lIiwiNzQiLCJJR3JvdXBpbmciLCI3NSIsIklNYXBFbnVtZXJhYmxlIiwiNzYiLCJmb3IiLCJJT3JkZXJlZEVudW1lcmFibGUiLCJPcmRlcmVkSXRlcmF0b3IiLCJvcmRlckJ5Q29tcGFyZXIiLCI3NyIsIklUcmVlIiwiZ2V0Q2hpbGQiLCJhc1NldHRlciIsInRvVmFsdWUiLCJicmVhZHRoVHJhdmVyc2UiLCJkZXB0aFRyYXZlcnNlIiwic2VhcmNoIiwiaXNTYW1lTm9kZSIsImluZGV4IiwiaXNQYXJlbnRPZiIsImlzQW5jZXN0b3JPZiIsImdldFBhcmVudE5vZGUiLCJwcmV2QWxsTm9kZXMiLCJuZXh0QWxsTm9kZXMiLCJwcmV2QWxsIiwibmV4dEFsbCIsInBhdGhUbyIsInBhdGhOb2Rlc1RvIiwiZGVwdGgiLCJkZWdyZWUiLCJpc0JpbmFyeSIsImlzRnVsbEJpbmFyeSIsIjc4IiwiSW5PcmRlckVudW1lcmFibGUiLCJJbk9yZGVySXRlcmF0b3IiLCJoYXNMZWZ0IiwiaGFzUmlnaHQiLCI3OSIsIkluT3JkZXJUcmVlIiwiODAiLCJJbmRpY2VzRW51bWVyYWJsZSIsIkluZGljZXNJdGVyYXRvciIsIjgxIiwiSW50ZXJzZWN0RW51bWVyYWJsZSIsIkludGVyc2VjdEl0ZXJhdG9yIiwiODIiLCJJdGVyYWJsZUVudW1lcmFibGUiLCJJdGVyYWJsZUl0ZXJhdG9yIiwiODMiLCJJdGVyYXRvckVudW1lcmFibGUiLCJJdGVyYXRvckl0ZXJhdG9yIiwiODQiLCJKb2luRW51bWVyYWJsZSIsIkpvaW5JdGVyYXRvciIsImVsZW1lbnQiLCJ0MSIsIjg1IiwiTGVmdEpvaW5FbnVtZXJhYmxlIiwiTGVmdEpvaW5JdGVyYXRvciIsIjg2IiwiTGVmdFBhZEVudW1lcmFibGUiLCI4NyIsIkxvb2t1cCIsIjg4IiwiTWFwRW51bWVyYWJsZSIsIk1hcEl0ZXJhdG9yIiwiZGVsZXRlIiwiZW50cmllcyIsIjg5IiwiTmVhckdyb3VwZWRFbnVtZXJhYmxlIiwiTmVhckdyb3VwZWRJdGVyYXRvciIsIjkwIiwiTmVhclNwbGl0RW51bWVyYWJsZSIsIk5lYXJTcGxpdEl0ZXJhdG9yIiwiOTEiLCJOZXh0RW51bWVyYWJsZSIsIk5leHRJdGVyYXRvciIsIjkyIiwiTmV4dE5vZGVzSXRlcmF0b3IiLCI5MyIsIk9iamVjdEVudW1lcmFibGUiLCJPYmplY3RJdGVyYXRvciIsIjk0IiwiUmVnRXhwIiwiT2ZUeXBlRW51bWVyYWJsZSIsIk9mVHlwZUl0ZXJhdG9yIiwiOTUiLCJPcmRlckJ5RGVzY2VuZGluZ0VudW1lcmFibGUiLCI5NiIsIk9yZGVyQnlFbnVtZXJhYmxlIiwiOTciLCJQYXRoTm9kZXNUb0VudW1lcmFibGUiLCJQYXRoTm9kZXNUb0l0ZXJhdG9yIiwiOTgiLCJQYXRoVG9FbnVtZXJhYmxlIiwiUGF0aFRvSXRlcmF0b3IiLCI5OSIsIlBlcm11dGF0aW9uRW51bWVyYWJsZSIsIlBlcm11dGF0aW9uSXRlcmF0b3IiLCIxMDAiLCJQZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlIiwiUGVybXV0YXRpb25SZXBlYXRhYmxlSXRlcmF0b3IiLCIxMDEiLCJQb3N0T3JkZXJFbnVtZXJhYmxlIiwiUG9zdE9yZGVySXRlcmF0b3IiLCIxMDIiLCJQb3N0T3JkZXJUcmVlIiwiMTAzIiwiUHJlT3JkZXJFbnVtZXJhYmxlIiwiUHJlT3JkZXJJdGVyYXRvciIsIjEwNCIsIlByZU9yZGVyVHJlZSIsIjEwNSIsIlByZXZFbnVtZXJhYmxlIiwiUHJldkl0ZXJhdG9yIiwiMTA2IiwiUHJldk5vZGVzSXRlcmF0b3IiLCIxMDciLCJSYW5kRW51bWVyYWJsZSIsIlJhbmRJdGVyYXRvciIsIjEwOCIsIlJhbmdlRW51bWVyYWJsZSIsIlJhbmdlSXRlcmF0b3IiLCIxMDkiLCJSZXBlYXRFbnVtZXJhYmxlIiwiUmVwZWF0SXRlcmF0b3IiLCIxMTAiLCJSZXZlcnNlRW51bWVyYWJsZSIsIlJldmVyc2VJdGVyYXRvciIsIjExMSIsIjExMiIsIlJpZ2h0UGFkRW51bWVyYWJsZSIsIjExMyIsIlNlbGVjdEVudW1lcmFibGUiLCJTZWxlY3RJdGVyYXRvciIsIjExNCIsIlNlbGVjdE1hbnlFbnVtZXJhYmxlIiwiU2VsZWN0TWFueUl0ZXJhdG9yIiwiMTE1IiwiU2VwYXJhdGVFbnVtZXJhYmxlIiwiU2VwYXJhdGVJdGVyYXRvciIsIjExNiIsIlNpYmxpbmdzRW51bWVyYWJsZSIsIlNpYmxpbmdzSXRlcmF0b3IiLCIxMTciLCJTaWJsaW5nTm9kZXNJdGVyYXRvciIsIjExOCIsIlNpbmdsZUVudW1lcmFibGUiLCJTaW5nbGVJdGVyYXRvciIsIjExOSIsIlNraXBFbnVtZXJhYmxlIiwiU2tpcEl0ZXJhdG9yIiwiMTIwIiwiU2tpcFByb3BvcnRpb25FbnVtZXJhYmxlIiwiU2tpcFByb3BvcnRpb25JdGVyYXRvciIsIjEyMSIsIlNraXBTYW1lRW51bWVyYWJsZSIsIlNraXBTYW1lSXRlcmF0b3IiLCIxMjIiLCJTa2lwV2hpbGVFbnVtZXJhYmxlIiwiU2tpcFdoaWxlSXRlcmF0b3IiLCIxMjMiLCJTbGljZUVudW1lcmFibGUiLCJTbGljZUl0ZXJhdG9yIiwiMTI0IiwiU29ydEVudW1lcmFibGUiLCIxMjUiLCJTcGxpY2VFbnVtZXJhYmxlIiwiU3BsaWNlSXRlcmF0b3IiLCIxMjYiLCJTcGxpdEVudW1lcmFibGUiLCJTcGxpdEl0ZXJhdG9yIiwiMTI3IiwiU3RyaW5nRW51bWVyYWJsZSIsIjEyOCIsIlN5bW1ldHJpY0VudW1lcmFibGUiLCJTeW1tZXRyaWNJdGVyYXRvciIsIjEyOSIsIlRha2VFbnVtZXJhYmxlIiwiVGFrZUl0ZXJhdG9yIiwiMTMwIiwiVGFrZVByb3BvcnRpb25FbnVtZXJhYmxlIiwiVGFrZVByb3BvcnRpb25JdGVyYXRvciIsIjEzMSIsIlRha2VTYW1lRW51bWVyYWJsZSIsIlRha2VTYW1lSXRlcmF0b3IiLCIxMzIiLCJUYWtlV2hpbGVFbnVtZXJhYmxlIiwiVGFrZVdoaWxlSXRlcmF0b3IiLCIxMzMiLCJUaGVuQnlEZXNjZW5kaW5nRW51bWVyYWJsZSIsIjEzNCIsIlRoZW5CeUVudW1lcmFibGUiLCIxMzUiLCJUcmVlRW51bWVyYWJsZSIsIjEzNiIsIlVuaW9uRW51bWVyYWJsZSIsIlVuaW9uSXRlcmF0b3IiLCIxMzciLCJXaGVyZUVudW1lcmFibGUiLCJXaGVyZUl0ZXJhdG9yIiwiMTM4IiwiV2lwZUVudW1lcmFibGUiLCJXaXBlSXRlcmF0b3IiLCIxMzkiLCJaaXBFbnVtZXJhYmxlIiwiWmlwSXRlcmF0b3IiLCIxNDAiLCJ1bmV4dGVuZEFsbCIsImV4dGVuZHMiLCJ1bmV4dGVuZCIsImV4dGVuZEFsbCIsInBsdWdpbnMiLCIxNDEiLCJpbnN0YWxsIiwidW5pbnN0YWxsIiwiMTQyIiwiMTQzIiwiMTQ0IiwicE1hIiwicU1hIiwiY29uZmlnIiwiYXMiLCJzdHJpbmciLCJvYmplY3QiLCJyTWEiLCJ3aW5kb3ciLCJzZWxmIiwiSE1hIiwibm9Db25mbGljdCIsInR5cGVBcyIsImlzQ29uZmxpY3QiLCIxNDUiLCJqTmEiLCIxNDYiLCIxNDciLCIxNDgiLCIxNDkiLCJjb21wYXJlIiwiMTUwIiwiZXF1YWxzIiwiMTUxIiwiMTUyIiwiMTUzIiwiMTU0Iiwib3V0ZXIiLCJpbm5lciIsIjE1NSIsIjE1NiIsIjE1NyIsIjE1OCIsIjE1OSIsIjE2MCIsIjE2MSIsIjE2MiIsIjE2MyIsIjE2NCIsIjE2NSIsIjE2NiIsIjE2NyIsInRvTG93ZXJDYXNlIiwiMTY4IiwiMTY5IiwiMTcwIiwiMTcxIiwiR1FhIiwiMTcyIiwiU1FhIiwiMTczIiwibGFzdEluZGV4IiwiMTc0IiwiMTc1IiwiMTc2IiwiMTc3IiwiMTc4IiwiMTc5IiwieVNhIiwiQVNhIiwiYWRkUGx1Z2lucyIsImVycm9yIiwicmVtb3ZlUGx1Z2lucyIsIndlYnBhY2tFbXB0eUNvbnRleHQiLCJyZXEiLCJpc1ByZSIsImFzVmVyc2lvbiIsImRlZmF1bHRMYW5nIiwiaGlzdG9yeXMiLCJkZXByZWNhdGVkIiwic2luY2UiLCJwcmV2VmVyc2lvbiIsInJlZiIsIm90aGVyIiwidmVyIiwib3RoZXJWZXIiLCJwYXJzZUludCIsInZlcnNpb25Db21wYXJlciIsImJhc2VWZXJzaW9uIiwiZWFybGllc3QiLCJiYXNlVmVyIiwibmV3ZXN0IiwiY2FwaXRhbGl6ZSIsInVwcGVyIiwibG93ZXIiLCJkb2N1bWVudCIsImV2ZW50IiwiZGF0YSIsImNsb3Nlc3QiLCJpcyIsImF0dHIiLCJ0b2dnbGVDbGFzcyIsInByZXZlbnREZWZhdWx0IiwiaWdub3JlIiwiY2FsbGJhY2siLCJwcmUiLCJwb3N0IiwicmVxdWlyZSIsInByb3BzIiwiZ2VuZXJpY3MiLCJfdm0iLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiY2xhc3MiLCJpc0tleXdvcmQiLCJfdiIsIl9zIiwiX2wiLCJnZW5lcmljIiwiYXR0cnMiLCJvdmVybG9hZCIsImNsYXNzTmFtZSIsIm1ldGhvZE5hbWUiLCJzdGF0aWMiLCJwYXJhbWV0ZXIiLCJwYXJhbWV0ZXJJbmRleCIsInN0YXRpY1N0eWxlIiwidHlwZUluZGV4IiwiZGVmYXVsdFZhbHVlIiwicGFyYW1ldGVycyIsInJldHVybnMiLCJkZWNsYXJlIiwiY29tcHV0ZWQiLCJ0eXBlTmFtZSIsImRlY2xhcmVQYXJhbWV0ZXIiLCJkZWNsYXJlUGFyYW1ldGVySW5kZXgiLCJwYXJhbWV0ZXJUeXBlIiwicGFyYW1ldGVyVHlwZUluZGV4IiwidHlwZUdlbmVyaWNzIiwiX3QiLCIkcm91dGUiLCJwYXJhbXMiLCJsYW5nIiwidG9WZXJzaW9uIiwibGFzdGVzdCIsInRvIiwic2Nyb2xsQnlJZCIsInNlZSIsImRpcmVjdG9yeSIsImd1aWRlIiwibm9kZSIsImdldEpzb24iLCJtZXRob2RzIiwibGluayIsInN1YmplY3QiLCJhcGlzIiwiaHJlZiIsIm91dGVyTGluayIsInN0YXR1cyIsImNvbG9yIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImhvb2siLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwiJHZub2RlIiwic3NyQ29udGV4dCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiZW5jb2RlUmVzZXJ2ZVJFIiwiZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyIiwiY2hhckNvZGVBdCIsImNvbW1hUkUiLCJlbmNvZGUiLCJzdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlcnIiLCJjYXN0UXVlcnlQYXJhbVZhbHVlIiwicGFyc2VRdWVyeSIsInF1ZXJ5IiwicmVzIiwidHJpbSIsInBhcmFtIiwicGFydHMiLCJ2YWwiLCJzdHJpbmdpZnlRdWVyeSIsInJlc3VsdCIsInZhbDIiLCJ0cmFpbGluZ1NsYXNoUkUiLCJjcmVhdGVSb3V0ZSIsInJlY29yZCIsImxvY2F0aW9uIiwicmVkaXJlY3RlZEZyb20iLCJyb3V0ZXIiLCJyb3V0ZSIsIm1ldGEiLCJwYXRoIiwiaGFzaCIsImZ1bGxQYXRoIiwiZ2V0RnVsbFBhdGgiLCJtYXRjaGVkIiwiZm9ybWF0TWF0Y2giLCJmcmVlemUiLCJTVEFSVCIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwib25seVBhdGgiLCJpc09iamVjdEVxdWFsIiwiYUtleXMiLCJiS2V5cyIsImFWYWwiLCJiVmFsIiwiaGFuZGxlUm91dGVFbnRlcmVkIiwiaW5zdGFuY2VzIiwiaW5zdGFuY2UiLCJjYnMiLCJlbnRlcmVkQ2JzIiwiaSQxIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJWaWV3Iiwicm91dGVyVmlldyIsImNhY2hlIiwiX3JvdXRlclZpZXdDYWNoZSIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJ2bm9kZURhdGEiLCJrZWVwQWxpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaW5hY3RpdmUiLCIkcGFyZW50Iiwicm91dGVyVmlld0RlcHRoIiwiY2FjaGVkRGF0YSIsImNhY2hlZENvbXBvbmVudCIsImNvbXBvbmVudCIsImNvbmZpZ1Byb3BzIiwiZmlsbFByb3BzaW5EYXRhIiwiY29tcG9uZW50cyIsInJlZ2lzdGVyUm91dGVJbnN0YW5jZSIsInZtIiwiY3VycmVudCIsInByZXBhdGNoIiwidm5vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsImluaXQiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsInJlc29sdmVQYXRoIiwicmVsYXRpdmUiLCJiYXNlIiwiYXBwZW5kIiwiZmlyc3RDaGFyIiwic3RhY2siLCJzZWdtZW50cyIsInNlZ21lbnQiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwicGFyc2UiLCJjb21waWxlXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwicHJldHR5IiwidG9rZW4iLCJhdHRhY2hLZXlzIiwic2Vuc2l0aXZlIiwiZW5kIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJyZWdleHBDb21waWxlQ2FjaGUiLCJmaWxsUGFyYW1zIiwicm91dGVNc2ciLCJmaWxsZXIiLCJwYXRoTWF0Y2giLCJub3JtYWxpemVMb2NhdGlvbiIsInJhdyIsIl9ub3JtYWxpemVkIiwicGFyYW1zJDEiLCJyYXdQYXRoIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJwYXJzZVBhdGgiLCJiYXNlUGF0aCIsImV4dHJhUXVlcnkiLCJfcGFyc2VRdWVyeSIsInBhcnNlZFF1ZXJ5IiwicmVzb2x2ZVF1ZXJ5IiwiX1Z1ZSIsIkxpbmsiLCJyZXF1aXJlZCIsInRhZyIsImN1c3RvbSIsImV4YWN0IiwiZXhhY3RQYXRoIiwiYWN0aXZlQ2xhc3MiLCJleGFjdEFjdGl2ZUNsYXNzIiwiYXJpYUN1cnJlbnRWYWx1ZSIsInRoaXMkMSIsIiRyb3V0ZXIiLCJjbGFzc2VzIiwiZ2xvYmFsQWN0aXZlQ2xhc3MiLCJsaW5rQWN0aXZlQ2xhc3MiLCJnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzIiwibGlua0V4YWN0QWN0aXZlQ2xhc3MiLCJhY3RpdmVDbGFzc0ZhbGxiYWNrIiwiZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrIiwiY29tcGFyZVRhcmdldCIsInF1ZXJ5SW5jbHVkZXMiLCJpc0luY2x1ZGVkUm91dGUiLCJoYW5kbGVyIiwiZ3VhcmRFdmVudCIsImNsaWNrIiwic2NvcGVkU2xvdCIsIiRzY29wZWRTbG90cyIsIiRoYXNOb3JtYWwiLCJuYXZpZ2F0ZSIsImlzQWN0aXZlIiwiaXNFeGFjdEFjdGl2ZSIsImZpbmRBbmNob3IiLCIkc2xvdHMiLCJpc1N0YXRpYyIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsImNoaWxkIiwiaW5Ccm93c2VyIiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGFyZW50Um91dGUiLCJwYXRoTGlzdCIsInBhdGhNYXAiLCJuYW1lTWFwIiwiYWRkUm91dGVSZWNvcmQiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJyZWdleCIsImNvbXBpbGVSb3V0ZVJlZ2V4IiwiYWxpYXMiLCJyZWRpcmVjdCIsImJlZm9yZUVudGVyIiwiY2hpbGRNYXRjaEFzIiwiYWxpYXNlcyIsImFsaWFzUm91dGUiLCJjcmVhdGVNYXRjaGVyIiwiY3VycmVudFJvdXRlIiwiX2NyZWF0ZVJvdXRlIiwicGFyYW1OYW1lcyIsInJlY29yZCQxIiwibWF0Y2hSb3V0ZSIsIm9yaWdpbmFsUmVkaXJlY3QiLCJyZXNvbHZlUmVjb3JkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJhZGRSb3V0ZSIsInBhcmVudE9yUm91dGUiLCJnZXRSb3V0ZXMiLCJhZGRSb3V0ZXMiLCJsZW4iLCJUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwiZ2VuU3RhdGVLZXkiLCJ0b0ZpeGVkIiwiX2tleSIsImdldFN0YXRlS2V5Iiwic2V0U3RhdGVLZXkiLCJwb3NpdGlvblN0b3JlIiwic2V0dXBTY3JvbGwiLCJoaXN0b3J5Iiwic2Nyb2xsUmVzdG9yYXRpb24iLCJwcm90b2NvbEFuZFBhdGgiLCJwcm90b2NvbCIsImhvc3QiLCJhYnNvbHV0ZVBhdGgiLCJzdGF0ZUNvcHkiLCJzdGF0ZSIsInJlcGxhY2VTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVQb3BTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVTY3JvbGwiLCJpc1BvcCIsImFwcCIsImJlaGF2aW9yIiwic2Nyb2xsQmVoYXZpb3IiLCIkbmV4dFRpY2siLCJwb3NpdGlvbiIsImdldFNjcm9sbFBvc2l0aW9uIiwic2hvdWxkU2Nyb2xsIiwic2Nyb2xsVG9Qb3NpdGlvbiIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJpc1ZhbGlkUG9zaXRpb24iLCJub3JtYWxpemVQb3NpdGlvbiIsImhhc2hTdGFydHNXaXRoTnVtYmVyUkUiLCJlbCIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsImRvY1JlY3QiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbFJlY3QiLCJ0b3AiLCJnZXRFbGVtZW50UG9zaXRpb24iLCJzdHlsZSIsInNjcm9sbFRvIiwidWEiLCJzdXBwb3J0c1B1c2hTdGF0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInB1c2hTdGF0ZSIsInVybCIsInJ1blF1ZXVlIiwicXVldWUiLCJmbiIsImNiIiwic3RlcCIsIk5hdmlnYXRpb25GYWlsdXJlVHlwZSIsInJlZGlyZWN0ZWQiLCJhYm9ydGVkIiwiY2FuY2VsbGVkIiwiZHVwbGljYXRlZCIsImNyZWF0ZU5hdmlnYXRpb25SZWRpcmVjdGVkRXJyb3IiLCJjcmVhdGVSb3V0ZXJFcnJvciIsInByb3BlcnRpZXNUb0xvZyIsImNyZWF0ZU5hdmlnYXRpb25DYW5jZWxsZWRFcnJvciIsIm1lc3NhZ2UiLCJfaXNSb3V0ZXIiLCJpc0Vycm9yIiwiaXNOYXZpZ2F0aW9uRmFpbHVyZSIsImVycm9yVHlwZSIsInJlc29sdmVBc3luY0NvbXBvbmVudHMiLCJoYXNBc3luYyIsInBlbmRpbmciLCJmbGF0TWFwQ29tcG9uZW50cyIsImRlZiIsImNpZCIsInJlc29sdmVkRGVmIiwiaGFzU3ltYm9sIiwicmVzb2x2ZWQiLCJyZWplY3QiLCJyZWFzb24iLCJtc2ciLCJjb21wIiwiY2FsbGVkIiwiYXJncyIsIkhpc3RvcnkiLCJiYXNlRWwiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImV4dHJhY3RHdWFyZHMiLCJyZWNvcmRzIiwiZ3VhcmRzIiwiZ3VhcmQiLCJleHRyYWN0R3VhcmQiLCJiaW5kR3VhcmQiLCJsaXN0ZW4iLCJvblJlYWR5IiwiZXJyb3JDYiIsIm9uRXJyb3IiLCJ0cmFuc2l0aW9uVG8iLCJvbkNvbXBsZXRlIiwib25BYm9ydCIsImNvbmZpcm1UcmFuc2l0aW9uIiwidXBkYXRlUm91dGUiLCJlbnN1cmVVUkwiLCJhZnRlckhvb2tzIiwiYWJvcnQiLCJsYXN0Um91dGVJbmRleCIsImxhc3RDdXJyZW50SW5kZXgiLCJ1cGRhdGVkIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJyZXNvbHZlUXVldWUiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsImNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IiLCJiaW5kRW50ZXJHdWFyZCIsImV4dHJhY3RFbnRlckd1YXJkcyIsInJlc29sdmVIb29rcyIsInNldHVwTGlzdGVuZXJzIiwidGVhcmRvd24iLCJjbGVhbnVwTGlzdGVuZXIiLCJIVE1MNUhpc3RvcnkiLCJfc3RhcnRMb2NhdGlvbiIsImdldExvY2F0aW9uIiwiZXhwZWN0U2Nyb2xsIiwic3VwcG9ydHNTY3JvbGwiLCJoYW5kbGVSb3V0aW5nRXZlbnQiLCJnbyIsImZyb21Sb3V0ZSIsImdldEN1cnJlbnRMb2NhdGlvbiIsInBhdGhuYW1lIiwiSGFzaEhpc3RvcnkiLCJmYWxsYmFjayIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsImdldEhhc2giLCJyZXBsYWNlSGFzaCIsImV2ZW50VHlwZSIsInB1c2hIYXNoIiwiZ2V0VXJsIiwiQWJzdHJhY3RIaXN0b3J5IiwidGFyZ2V0SW5kZXgiLCJWdWVSb3V0ZXIiLCJhcHBzIiwibWF0Y2hlciIsIm1vZGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJyZWdpc3Rlckhvb2siLCIkb25jZSIsInJvdXRlT3JFcnJvciIsImhhbmRsZUluaXRpYWxTY3JvbGwiLCJfcm91dGUiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImJhY2siLCJmb3J3YXJkIiwiZ2V0TWF0Y2hlZENvbXBvbmVudHMiLCJjcmVhdGVIcmVmIiwibm9ybWFsaXplZFRvIiwiVnVlIiwiaW5zdGFsbGVkIiwiaXNEZWYiLCJyZWdpc3Rlckluc3RhbmNlIiwiY2FsbFZhbCIsIl9wYXJlbnRWbm9kZSIsIm1peGluIiwiX3JvdXRlciIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlc3Ryb3llZCIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImJlZm9yZVJvdXRlRW50ZXIiLCJiZWZvcmVSb3V0ZUxlYXZlIiwiYmVmb3JlUm91dGVVcGRhdGUiLCJjcmVhdGVkIiwiU1RBUlRfTE9DQVRJT04iLCJ1c2UiLCJsb2NhbHMiLCJsaXN0VG9TdHlsZXMiLCJwYXJlbnRJZCIsInN0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImhhc0RvY3VtZW50IiwiREVCVUciLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwic3NySWRLZXkiLCJpc09sZElFIiwiYWRkU3R5bGVzQ2xpZW50IiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiYWRkU3R5bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJ1cGRhdGUiLCJyZW1vdmUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImFwcGx5VG9UYWciLCJuZXdPYmoiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwic2V0QXR0cmlidXRlIiwic3NySWQiLCJidG9hIiwidW5lc2NhcGUiLCJmaXJzdENoaWxkIiwiaXNGaW5pdGUiLCJfbGVuZ3RoIiwiZ2V0VGltZSIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndhdGNoIiwicHJvY2VzcyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY2xlYXIiLCJzdWJzIiwiYWRkU3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidGV4dCIsImVsbSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50T3B0aW9ucyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNGYWN0b3J5IiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInZtQ291bnQiLCJ3YWxrIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiaW5qZWN0IiwicHJvdmlkZSIsImRpcmVjdGl2ZXMiLCJfYmFzZSIsIm1peGlucyIsInByb3BzRGF0YSIsIl9wcm9wcyIsImVycm9yQ2FwdHVyZWQiLCJfaGFuZGxlZCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImV0IiwidHQiLCJpc0Zyb3plbiIsIm50IiwicGFzc2l2ZSIsInJ0IiwiZm5zIiwiaXQiLCJvdCIsIm1lcmdlZCIsImF0Iiwic3QiLCJjdCIsIl9pc1ZMaXN0IiwidXQiLCJfcHJvdmlkZWQiLCJsdCIsInNsb3QiLCJmdCIsInB0IiwiZHQiLCIkc3RhYmxlIiwiJGtleSIsInZ0IiwiaHQiLCJwcm94eSIsIm10IiwieXQiLCJndCIsImJ0IiwiJHQiLCJkb21Qcm9wcyIsInd0IiwiX3N0YXRpY1RyZWVzIiwieHQiLCJfcmVuZGVyUHJveHkiLCJDdCIsImt0IiwiQXQiLCJPdCIsIlN0IiwiVHQiLCJOdCIsIl9vIiwiX24iLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkV0IiwiX29yaWdpbmFsIiwiaW5qZWN0aW9ucyIsInNsb3RzIiwic2NvcGVkU2xvdHMiLCJIdCIsImp0IiwiRHQiLCJMdCIsIl9pc0Rlc3Ryb3llZCIsIl9pc0NvbXBvbmVudCIsImlubGluZVRlbXBsYXRlIiwiQ3RvciIsIlp0IiwiJG1vdW50IiwiX3JlbmRlckNoaWxkcmVuIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsIl9wcm9wS2V5cyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJXdCIsIiRmb3JjZVVwZGF0ZSIsImluc2VydCIsIl9pc01vdW50ZWQiLCJRdCIsInRuIiwiWXQiLCJkZXN0cm95IiwiWHQiLCIkY2hpbGRyZW4iLCIkZGVzdHJveSIsIkl0IiwiTXQiLCJlcnJvckNvbXAiLCJVdCIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsIiRvbiIsIlZ0IiwiZGVsYXkiLCJ0aW1lb3V0Iiwid24iLCJtb2RlbCIsInByb3AiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiX21lcmdlZCIsIkZ0IiwiQnQiLCJ6dCIsIkt0IiwiSnQiLCIkb2ZmIiwicXQiLCJHdCIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsImVuIiwibm4iLCJybiIsImFuIiwic24iLCJjbiIsInVuIiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJsbiIsImJlZm9yZSIsIl93YXRjaGVyIiwicG4iLCJfd2F0Y2hlcnMiLCJ1c2VyIiwic3luYyIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwiZ2V0dGVyIiwiY2xlYW51cERlcHMiLCJldmFsdWF0ZSIsImRuIiwidm4iLCJtbiIsInluIiwiZ24iLCJfY29tcHV0ZWRXYXRjaGVycyIsImJuIiwiJHdhdGNoIiwiJG4iLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsInNlYWxlZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiQ24iLCJfaW5pdCIsImtuIiwiQW4iLCJPbiIsIlNuIiwiX3VpZCIsIl9jb21wb25lbnRUYWciLCIkcmVmcyIsIl9ldmVudHMiLCJfZGF0YSIsImhuIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJfdXBkYXRlIiwiJGVsIiwiX19wYXRjaF9fIiwiX192dWVfXyIsIl9yZW5kZXIiLCJUbiIsIk5uIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjYWNoZVZOb2RlIiwidm5vZGVUb0NhY2hlIiwia2V5VG9DYWNoZSIsIm1vdW50ZWQiLCJtZXJnZU9wdGlvbnMiLCJvYnNlcnZhYmxlIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJfQ3RvciIsInhuIiwiRW4iLCJqbiIsIkRuIiwiTG4iLCJJbiIsIkZuIiwiUG4iLCJSbiIsIkhuIiwiQm4iLCJWbiIsInpuIiwiS24iLCJKbiIsInN2ZyIsIm1hdGgiLCJxbiIsIlduIiwiWm4iLCJHbiIsIlhuIiwiWW4iLCJRbiIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsIm5leHRTaWJsaW5nIiwidGFnTmFtZSIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwicmVmSW5Gb3IiLCJpciIsInNyIiwiY3IiLCJsciIsIm9sZFZhbHVlIiwib2xkQXJnIiwicHIiLCJjb21wb25lbnRVcGRhdGVkIiwiaW5zZXJ0ZWQiLCJ1ciIsIm1vZGlmaWVycyIsImZyIiwicmF3TmFtZSIsImRyIiwidnIiLCJpbmhlcml0QXR0cnMiLCJociIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwibXIiLCJNbiIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwieXIiLCJnciIsIlVuIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsIl9yIiwiYnIiLCIkciIsIndyIiwiQ3IiLCJ4ciIsImtyIiwiQXIiLCJPciIsIlNyIiwiVHIiLCJOciIsIkVyIiwiSHIiLCJkeW5hbWljIiwicGxhaW4iLCJqciIsImR5bmFtaWNBdHRycyIsIkRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJMciIsImlzRHluYW1pY0FyZyIsIklyIiwiTXIiLCJtaWRkbGUiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJldmVudHMiLCJGciIsIlByIiwiUnIiLCJzdGFydCIsIkJyIiwibnVtYmVyIiwiVXIiLCJleHAiLCJ6ciIsIktyIiwiVnIiLCJxciIsIkpyIiwiV3IiLCJaciIsIlhyIiwiZWkiLCJZciIsIlFyIiwiX3dyYXBwZXIiLCJvd25lckRvY3VtZW50IiwidGkiLCJjaGFuZ2UiLCJuaSIsInJpIiwiaWkiLCJfdmFsdWUiLCJvaSIsImlubmVySFRNTCIsImNvbXBvc2luZyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsImFpIiwic2kiLCJjaSIsInVpIiwibGkiLCJmaSIsInBpIiwiZGkiLCJoaSIsInZpIiwibWkiLCJub3JtYWxpemVkU3R5bGUiLCJ5aSIsImdpIiwiY2xhc3NMaXN0IiwiYmkiLCIkaSIsIndpIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsIkNpIiwieGkiLCJraSIsIkFpIiwiT2kiLCJTaSIsIlRpIiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsIk5pIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRWkiLCJqaSIsIkRpIiwiTGkiLCJNaSIsInByb3BDb3VudCIsIklpIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIkZpIiwiaGFzVHJhbnNmb3JtIiwiUGkiLCJSaSIsIl9sZWF2ZUNiIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsIlVpIiwic2hvdyIsIl9wZW5kaW5nIiwiQmkiLCJIaSIsImJlZm9yZUxlYXZlIiwibGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiVmkiLCJ6aSIsIm5vZGVPcHMiLCJhY3RpdmF0ZSIsInBlbmRpbmdJbnNlcnQiLCJwb3N0cGF0Y2giLCJoYXNDaGlsZE5vZGVzIiwiaGFzQXR0cmlidXRlIiwidm1vZGVsIiwiWWkiLCJLaSIsIl92T3B0aW9ucyIsIkppIiwiWmkiLCJHaSIsIlhpIiwiV2kiLCJxaSIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJRaSIsImVvIiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsIm5vIiwicm8iLCJpbyIsIm9vIiwiYW8iLCJzbyIsIl9sZWF2aW5nIiwiY28iLCJtb3ZlQ2xhc3MiLCJ1byIsIl9tb3ZlQ2IiLCJsbyIsIm5ld1BvcyIsImZvIiwicG9zIiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbyIsIlRyYW5zaXRpb24iLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyZW1vdmVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInZvIiwiaG8iLCJtbyIsInlvIiwic3RhdGljS2V5cyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwic3R5bGVCaW5kaW5nIiwiJG8iLCJ3byIsIkNvIiwieG8iLCJrbyIsIkFvIiwiT28iLCJTbyIsIlRvIiwiTm8iLCJFbyIsImpvIiwiRG8iLCJMbyIsIklvIiwiTW8iLCJGbyIsIlBvIiwiUm8iLCJIbyIsIkJvIiwiVW8iLCJWbyIsInpvIiwiS28iLCJKbyIsInFvIiwiV28iLCJabyIsIlhvIiwiWW8iLCJRbyIsImVhIiwidGEiLCJuYSIsInJhIiwiaWEiLCJvYSIsImFhIiwic2EiLCJjYSIsImxhIiwieWEiLCJyYXdBdHRyc01hcCIsInBhIiwic2xvdFNjb3BlIiwic2xvdFRhcmdldCIsInNsb3RUYXJnZXREeW5hbWljIiwiaGEiLCJzbG90TmFtZSIsImhhc0JpbmRpbmdzIiwibWEiLCJjYW1lbCIsImRhIiwiaXRlcmF0b3IxIiwiaXRlcmF0b3IyIiwidmEiLCJpZkNvbmRpdGlvbnMiLCJnYSIsIl9hIiwiYmEiLCJ3YSIsIkNhIiwiJGEiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwicHJvY2Vzc2VkIiwiaWYiLCJibG9jayIsImVsc2UiLCJlbHNlaWYiLCJ4YSIsImV4cGVjdEhUTUwiLCJodG1sIiwiaXNQcmVUYWciLCJpc1VuYXJ5VGFnIiwiY2FuQmVMZWZ0T3BlblRhZyIsImthIiwiT2EiLCJTYSIsIlRhIiwiTmEiLCJlc2MiLCJ0YWIiLCJzcGFjZSIsInVwIiwiZG93biIsIkVhIiwiamEiLCJEYSIsInByZXZlbnQiLCJjdHJsIiwiYWx0IiwiTGEiLCJJYSIsIk1hIiwiRmEiLCJ3cmFwTGlzdGVuZXJzIiwid3JhcERhdGEiLCJjbG9hayIsIlBhIiwidHJhbnNmb3JtcyIsImRhdGFHZW5GbnMiLCJtYXliZUNvbXBvbmVudCIsIm9uY2VJZCIsIlJhIiwiSGEiLCJzdGF0aWNSb290Iiwic3RhdGljUHJvY2Vzc2VkIiwiQmEiLCJvbmNlUHJvY2Vzc2VkIiwiVWEiLCJmb3JQcm9jZXNzZWQiLCJ6YSIsImlmUHJvY2Vzc2VkIiwiVmEiLCJXYSIsIlhhIiwiS2EiLCJzdGF0aWNJbkZvciIsIkphIiwicWEiLCJaYSIsIkdhIiwiWWEiLCJRYSIsImVzIiwiZGVsaW1pdGVycyIsInRzIiwicnMiLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJ3aGl0ZXNwYWNlIiwiZm9yYmlkZGVuIiwiY2hhcnMiLCJzaG91bGRLZWVwQ29tbWVudCIsImNvbW1lbnQiLCJ1bmFyeVNsYXNoIiwic2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJsb3dlckNhc2VkVGFnIiwiY29tbWVudHMiLCJvdXRwdXRTb3VyY2VSYW5nZSIsInBsYWNlaG9sZGVyIiwiZmEiLCJvcHRpbWl6ZSIsIkFhIiwiYXN0IiwiZXJyb3JzIiwidGlwcyIsImNvbXBpbGVUb0Z1bmN0aW9ucyIsIm9zIiwic3MiLCJjcyIsInVzIiwidGVtcGxhdGUiLCJvdXRlckhUTUwiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJ3ZWJwYWNrQXN5bmNDb250ZXh0IiwiaWRzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImNodW5rSWQiLCJwcm9taXNlcyIsImdsb2JhbFRoaXMiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImNoYXJzZXQiLCJuYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsImluc3RhbGxlZENodW5rcyIsIjU5MiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZWFsU3JjIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsImhhc0NsYXNzIiwiaGxqcyIsImhpZ2hsaWdodEJsb2NrIiwicmVsb2FkIiwibWV0YXMiLCJoYXNIaXN0b3J5IiwiaXNOZXdlciIsImlzT2xkZXIiLCJyZW1vdmVDbGFzcyIsImZpeGVkIiwic2Nyb2xsVG9wIiwiYWRkQ2xhc3MiLCJjYWxsYmFja3MiLCJzdWNjZXNzIiwiZmFpbGVkIiwibmFtZXMiLCJsb2FkIiwicmV2b2xzZSIsInJlc3VsdHMiLCJzdGFydHNXaXRoIiwiX3RoZW4iLCJfY2F0Y2giLCJnZXRMYW5ndWFnZXMiLCJwYWdlIiwibmF2IiwiZW50cnkiXSwibWFwcGluZ3MiOiI7VUFBSUEsRUFDQUMsRSxvQkNETUMsRUFBT0MsUUFBVSxFQUFRLEtBQVIsTUFBNENDLElBSy9EQyxLQUFLLENBQUNILEVBQU9JLEdBQUksbTNSQUFvM1IsTSxnQkNMNzRSSCxFQUFVRCxFQUFPQyxRQUFVLEVBQVEsS0FBUixNQUF5REMsSUFFNUVHLEVBQUUsRUFBUSxPQUEyRSxJQUM3RkosRUFBUUksRUFBRSxFQUFRLE9BQTBELElBRzVFSixFQUFRRSxLQUFLLENBQUNILEVBQU9JLEdBQUkseXFJQUE0cUksTSxpQkNOM3JJSixFQUFPQyxRQUFVLEVBQVEsS0FBUixNQUF5REMsSUFLNUVDLEtBQUssQ0FBQ0gsRUFBT0ksR0FBSSw2Z0JBQThnQixNLGlCQ0w3aEJKLEVBQU9DLFFBQVUsRUFBUSxLQUFSLE1BQXlEQyxJQUs1RUMsS0FBSyxDQUFDSCxFQUFPSSxHQUFJLG11REFBb3VELE0sU0NBN3ZESixFQUFPQyxRQUFVLFNBQVNLLEdBQ3pCLElBQUlDLEVBQU8sR0F3Q1gsT0FyQ0FBLEVBQUtDLFNBQVcsV0FDZixPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3pCLElBQUlDLEVBc0NQLFNBQWdDRCxFQUFNTCxHQUNyQyxJQUFJTSxFQUFVRCxFQUFLLElBQU0sR0FDckJFLEVBQWFGLEVBQUssR0FDdEIsSUFBS0UsRUFDSixPQUFPRCxFQUdSLEdBQUlOLEVBQWMsQ0FDakIsSUFBSVEsR0FZYUMsRUFaYUYsRUFnQnZCLG1FQUhNLElBQUlHLE9BQU9DLEtBQUtDLFVBQVVILElBQVlQLFNBQVMsVUFHckMsT0FmbkJXLEVBQWFOLEVBQVdPLFFBQVFWLEtBQUksU0FBVVcsR0FDakQsTUFBTyxpQkFBbUJSLEVBQVdTLFdBQWFELEVBQVMsU0FHNUQsTUFBTyxDQUFDVCxHQUFTVyxP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RUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHOEwsSUFBSThHLFNBQVMsU0FBU3BTLEdBQUcsT0FBTzRILEVBQUV3SyxTQUFTbFcsS0FBSzhELEVBQUUsRUFBRVIsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHMUQsRUFBRSxFQUFFMEQsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHOEwsSUFBSWdILFVBQVUsU0FBU3RTLEdBQUcsT0FBTzRILEVBQUUwSyxVQUFVcFcsS0FBSzhELEVBQUUsRUFBRVIsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHMUQsRUFBRSxFQUFFMEQsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHOEwsSUFBSWtILFVBQVUsU0FBU3hTLEdBQUcsT0FBTzRILEVBQUU0SyxVQUFVdFcsS0FBSzhELEVBQUUsRUFBRVIsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHMUQsRUFBRSxFQUFFMEQsVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHaUosRUFBRSxFQUFFakosVUFBVWxDLGFBQVEsSUFBU2tDLFVBQVUsR0FBR0EsVUFBVSxHQUFHOEwsSUFBSWtLLGVBQWUsU0FBU3hWLEdBQUcsT0FBTzRILEVBQUU0TixlQUFldFos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aEMsU0E2QjFELElBQUk0MkMsRUFBSSxDQUNuQjVYLE9BM0JjLElBQUkwVyxFQUFVLENBQzVCN0wsT0FBUSxDQUNQLENBQ0MxSyxLQUFNLElBQ05xQyxVQUFXZ25DLEVBQUssU0FFakIsQ0FDQ3JwQyxLQUFNLFNBQ05xQyxVQUFXZ25DLEVBQUssU0FDaEJsb0QsU0FBVSxDQUNULENBQ0M2ZSxLQUFNLElBQ053QyxXQUFZLENBQ1hxbkMsSUFBS1IsRUFBSyxPQUNWenRDLFVBQVd5dEMsRUFBSyxhQUNoQnhzRSxRQUFTd3NFLEVBQUssWUFFZmxvRCxTQUFVLEVBQVcvTyxXQUFXcFUsT0FBT3dyQixRQ3BDNUMsQ0FDQyxhQUFnQixlQUNoQixRQUFXLFVBQ1gsTUFBUyxRQUNULE9BQVUsU0FDVixlQUFnQixRQUNoQixjQUFlLFFBQ2YsNkJBQThCLFNBQzlCLG9DQUFxQyxTQUNyQyxpQ0FBa0MsYUQyQnlCN3NCLEtBQUksRUFBRWtDLEVBQUtVLE1BQVcsQ0FBR1YsTUFBS1UsYUFBV3VxRSxHQUFTLENBQUUsR0FBSSxnREFBZ0QsQ0FBQ0EsRUFBT25sQyxLQUFXLENBQUczRSxLQUFNMkUsRUFBU21sQyxFQUFNanJFLElBQUt3akMsVUFBV2duQyxFQUFLUyxFQUFNdnFFLFdBQ25PL0IsT0FBTyxDQUFDLENBQUV3aUMsS0FBTSxHQUFJcUMsVUFBV2duQyxFQUFLLGlCQUFtQixDQUFFcnBDLEtBQU0sNENBQTZDcUMsVUFBV2duQyxFQUFLLG1CQUFvQng2RCxjQUt0SnUwQixLQUFLLGNBS0htaEIsT0FBTyxTIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJsaW5xLWpzLWRvY3M6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodW5kZWZpbmVkKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIEJBU0lDUyAqL1xcblxcbi5Db2RlTWlycm9yIHtcXG4gIC8qIFNldCBoZWlnaHQsIHdpZHRoLCBib3JkZXJzLCBhbmQgZ2xvYmFsIGZvbnQgcHJvcGVydGllcyBoZXJlICovXFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgaGVpZ2h0OiAzMDBweDtcXG4gIGNvbG9yOiBibGFjaztcXG4gIGRpcmVjdGlvbjogbHRyO1xcbn1cXG5cXG4vKiBQQURESU5HICovXFxuXFxuLkNvZGVNaXJyb3ItbGluZXMge1xcbiAgcGFkZGluZzogNHB4IDA7IC8qIFZlcnRpY2FsIHBhZGRpbmcgYXJvdW5kIGNvbnRlbnQgKi9cXG59XFxuLkNvZGVNaXJyb3IgcHJlLkNvZGVNaXJyb3ItbGluZSxcXG4uQ29kZU1pcnJvciBwcmUuQ29kZU1pcnJvci1saW5lLWxpa2Uge1xcbiAgcGFkZGluZzogMCA0cHg7IC8qIEhvcml6b250YWwgcGFkZGluZyBvZiBjb250ZW50ICovXFxufVxcblxcbi5Db2RlTWlycm9yLXNjcm9sbGJhci1maWxsZXIsIC5Db2RlTWlycm9yLWd1dHRlci1maWxsZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7IC8qIFRoZSBsaXR0bGUgc3F1YXJlIGJldHdlZW4gSCBhbmQgViBzY3JvbGxiYXJzICovXFxufVxcblxcbi8qIEdVVFRFUiAqL1xcblxcbi5Db2RlTWlycm9yLWd1dHRlcnMge1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RkZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4uQ29kZU1pcnJvci1saW5lbnVtYmVycyB7fVxcbi5Db2RlTWlycm9yLWxpbmVudW1iZXIge1xcbiAgcGFkZGluZzogMCAzcHggMCA1cHg7XFxuICBtaW4td2lkdGg6IDIwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLkNvZGVNaXJyb3ItZ3V0dGVybWFya2VyIHsgY29sb3I6IGJsYWNrOyB9XFxuLkNvZGVNaXJyb3ItZ3V0dGVybWFya2VyLXN1YnRsZSB7IGNvbG9yOiAjOTk5OyB9XFxuXFxuLyogQ1VSU09SICovXFxuXFxuLkNvZGVNaXJyb3ItY3Vyc29yIHtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmlnaHQ6IG5vbmU7XFxuICB3aWR0aDogMDtcXG59XFxuLyogU2hvd24gd2hlbiBtb3ZpbmcgaW4gYmktZGlyZWN0aW9uYWwgdGV4dCAqL1xcbi5Db2RlTWlycm9yIGRpdi5Db2RlTWlycm9yLXNlY29uZGFyeWN1cnNvciB7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHNpbHZlcjtcXG59XFxuLmNtLWZhdC1jdXJzb3IgLkNvZGVNaXJyb3ItY3Vyc29yIHtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgYm9yZGVyOiAwICFpbXBvcnRhbnQ7XFxuICBiYWNrZ3JvdW5kOiAjN2U3O1xcbn1cXG4uY20tZmF0LWN1cnNvciBkaXYuQ29kZU1pcnJvci1jdXJzb3JzIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5jbS1mYXQtY3Vyc29yLW1hcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjU1LCAyMCwgMC41KTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBibGluayAxLjA2cyBzdGVwcygxKSBpbmZpbml0ZTtcXG4gIC1tb3otYW5pbWF0aW9uOiBibGluayAxLjA2cyBzdGVwcygxKSBpbmZpbml0ZTtcXG4gIGFuaW1hdGlvbjogYmxpbmsgMS4wNnMgc3RlcHMoMSkgaW5maW5pdGU7XFxufVxcbi5jbS1hbmltYXRlLWZhdC1jdXJzb3Ige1xcbiAgd2lkdGg6IGF1dG87XFxuICBib3JkZXI6IDA7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogYmxpbmsgMS4wNnMgc3RlcHMoMSkgaW5maW5pdGU7XFxuICAtbW96LWFuaW1hdGlvbjogYmxpbmsgMS4wNnMgc3RlcHMoMSkgaW5maW5pdGU7XFxuICBhbmltYXRpb246IGJsaW5rIDEuMDZzIHN0ZXBzKDEpIGluZmluaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdlNztcXG59XFxuQC1tb3ota2V5ZnJhbWVzIGJsaW5rIHtcXG4gIDAlIHt9XFxuICA1MCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgMTAwJSB7fVxcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgYmxpbmsge1xcbiAgMCUge31cXG4gIDUwJSB7IGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICAxMDAlIHt9XFxufVxcbkBrZXlmcmFtZXMgYmxpbmsge1xcbiAgMCUge31cXG4gIDUwJSB7IGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICAxMDAlIHt9XFxufVxcblxcbi8qIENhbiBzdHlsZSBjdXJzb3IgZGlmZmVyZW50IGluIG92ZXJ3cml0ZSAobm9uLWluc2VydCkgbW9kZSAqL1xcbi5Db2RlTWlycm9yLW92ZXJ3cml0ZSAuQ29kZU1pcnJvci1jdXJzb3Ige31cXG5cXG4uY20tdGFiIHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7IH1cXG5cXG4uQ29kZU1pcnJvci1ydWxlcnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDsgcmlnaHQ6IDA7IHRvcDogLTUwcHg7IGJvdHRvbTogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5Db2RlTWlycm9yLXJ1bGVyIHtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NjYztcXG4gIHRvcDogMDsgYm90dG9tOiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4vKiBERUZBVUxUIFRIRU1FICovXFxuXFxuLmNtLXMtZGVmYXVsdCAuY20taGVhZGVyIHtjb2xvcjogYmx1ZTt9XFxuLmNtLXMtZGVmYXVsdCAuY20tcXVvdGUge2NvbG9yOiAjMDkwO31cXG4uY20tbmVnYXRpdmUge2NvbG9yOiAjZDQ0O31cXG4uY20tcG9zaXRpdmUge2NvbG9yOiAjMjkyO31cXG4uY20taGVhZGVyLCAuY20tc3Ryb25nIHtmb250LXdlaWdodDogYm9sZDt9XFxuLmNtLWVtIHtmb250LXN0eWxlOiBpdGFsaWM7fVxcbi5jbS1saW5rIHt0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTt9XFxuLmNtLXN0cmlrZXRocm91Z2gge3RleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO31cXG5cXG4uY20tcy1kZWZhdWx0IC5jbS1rZXl3b3JkIHtjb2xvcjogIzcwODt9XFxuLmNtLXMtZGVmYXVsdCAuY20tYXRvbSB7Y29sb3I6ICMyMTk7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLW51bWJlciB7Y29sb3I6ICMxNjQ7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLWRlZiB7Y29sb3I6ICMwMGY7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLXZhcmlhYmxlLFxcbi5jbS1zLWRlZmF1bHQgLmNtLXB1bmN0dWF0aW9uLFxcbi5jbS1zLWRlZmF1bHQgLmNtLXByb3BlcnR5LFxcbi5jbS1zLWRlZmF1bHQgLmNtLW9wZXJhdG9yIHt9XFxuLmNtLXMtZGVmYXVsdCAuY20tdmFyaWFibGUtMiB7Y29sb3I6ICMwNWE7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLXZhcmlhYmxlLTMsIC5jbS1zLWRlZmF1bHQgLmNtLXR5cGUge2NvbG9yOiAjMDg1O31cXG4uY20tcy1kZWZhdWx0IC5jbS1jb21tZW50IHtjb2xvcjogI2E1MDt9XFxuLmNtLXMtZGVmYXVsdCAuY20tc3RyaW5nIHtjb2xvcjogI2ExMTt9XFxuLmNtLXMtZGVmYXVsdCAuY20tc3RyaW5nLTIge2NvbG9yOiAjZjUwO31cXG4uY20tcy1kZWZhdWx0IC5jbS1tZXRhIHtjb2xvcjogIzU1NTt9XFxuLmNtLXMtZGVmYXVsdCAuY20tcXVhbGlmaWVyIHtjb2xvcjogIzU1NTt9XFxuLmNtLXMtZGVmYXVsdCAuY20tYnVpbHRpbiB7Y29sb3I6ICMzMGE7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLWJyYWNrZXQge2NvbG9yOiAjOTk3O31cXG4uY20tcy1kZWZhdWx0IC5jbS10YWcge2NvbG9yOiAjMTcwO31cXG4uY20tcy1kZWZhdWx0IC5jbS1hdHRyaWJ1dGUge2NvbG9yOiAjMDBjO31cXG4uY20tcy1kZWZhdWx0IC5jbS1ociB7Y29sb3I6ICM5OTk7fVxcbi5jbS1zLWRlZmF1bHQgLmNtLWxpbmsge2NvbG9yOiAjMDBjO31cXG5cXG4uY20tcy1kZWZhdWx0IC5jbS1lcnJvciB7Y29sb3I6ICNmMDA7fVxcbi5jbS1pbnZhbGlkY2hhciB7Y29sb3I6ICNmMDA7fVxcblxcbi5Db2RlTWlycm9yLWNvbXBvc2luZyB7IGJvcmRlci1ib3R0b206IDJweCBzb2xpZDsgfVxcblxcbi8qIERlZmF1bHQgc3R5bGVzIGZvciBjb21tb24gYWRkb25zICovXFxuXFxuZGl2LkNvZGVNaXJyb3Igc3Bhbi5Db2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCB7Y29sb3I6ICMwYjA7fVxcbmRpdi5Db2RlTWlycm9yIHNwYW4uQ29kZU1pcnJvci1ub25tYXRjaGluZ2JyYWNrZXQge2NvbG9yOiAjYTIyO31cXG4uQ29kZU1pcnJvci1tYXRjaGluZ3RhZyB7IGJhY2tncm91bmQ6IHJnYmEoMjU1LCAxNTAsIDAsIC4zKTsgfVxcbi5Db2RlTWlycm9yLWFjdGl2ZWxpbmUtYmFja2dyb3VuZCB7YmFja2dyb3VuZDogI2U4ZjJmZjt9XFxuXFxuLyogU1RPUCAqL1xcblxcbi8qIFRoZSByZXN0IG9mIHRoaXMgZmlsZSBjb250YWlucyBzdHlsZXMgcmVsYXRlZCB0byB0aGUgbWVjaGFuaWNzIG9mXFxuICAgdGhlIGVkaXRvci4gWW91IHByb2JhYmx5IHNob3VsZG4ndCB0b3VjaCB0aGVtLiAqL1xcblxcbi5Db2RlTWlycm9yIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG59XFxuXFxuLkNvZGVNaXJyb3Itc2Nyb2xsIHtcXG4gIG92ZXJmbG93OiBzY3JvbGwgIWltcG9ydGFudDsgLyogVGhpbmdzIHdpbGwgYnJlYWsgaWYgdGhpcyBpcyBvdmVycmlkZGVuICovXFxuICAvKiA1MHB4IGlzIHRoZSBtYWdpYyBtYXJnaW4gdXNlZCB0byBoaWRlIHRoZSBlbGVtZW50J3MgcmVhbCBzY3JvbGxiYXJzICovXFxuICAvKiBTZWUgb3ZlcmZsb3c6IGhpZGRlbiBpbiAuQ29kZU1pcnJvciAqL1xcbiAgbWFyZ2luLWJvdHRvbTogLTUwcHg7IG1hcmdpbi1yaWdodDogLTUwcHg7XFxuICBwYWRkaW5nLWJvdHRvbTogNTBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG91dGxpbmU6IG5vbmU7IC8qIFByZXZlbnQgZHJhZ2dpbmcgZnJvbSBoaWdobGlnaHRpbmcgdGhlIGVsZW1lbnQgKi9cXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLkNvZGVNaXJyb3Itc2l6ZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm9yZGVyLXJpZ2h0OiA1MHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4vKiBUaGUgZmFrZSwgdmlzaWJsZSBzY3JvbGxiYXJzLiBVc2VkIHRvIGZvcmNlIHJlZHJhdyBkdXJpbmcgc2Nyb2xsaW5nXFxuICAgYmVmb3JlIGFjdHVhbCBzY3JvbGxpbmcgaGFwcGVucywgdGh1cyBwcmV2ZW50aW5nIHNoYWtpbmcgYW5kXFxuICAgZmxpY2tlcmluZyBhcnRpZmFjdHMuICovXFxuLkNvZGVNaXJyb3ItdnNjcm9sbGJhciwgLkNvZGVNaXJyb3ItaHNjcm9sbGJhciwgLkNvZGVNaXJyb3Itc2Nyb2xsYmFyLWZpbGxlciwgLkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA2O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcbi5Db2RlTWlycm9yLXZzY3JvbGxiYXIge1xcbiAgcmlnaHQ6IDA7IHRvcDogMDtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuLkNvZGVNaXJyb3ItaHNjcm9sbGJhciB7XFxuICBib3R0b206IDA7IGxlZnQ6IDA7XFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxuICBvdmVyZmxvdy14OiBzY3JvbGw7XFxufVxcbi5Db2RlTWlycm9yLXNjcm9sbGJhci1maWxsZXIge1xcbiAgcmlnaHQ6IDA7IGJvdHRvbTogMDtcXG59XFxuLkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciB7XFxuICBsZWZ0OiAwOyBib3R0b206IDA7XFxufVxcblxcbi5Db2RlTWlycm9yLWd1dHRlcnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAwOyB0b3A6IDA7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgei1pbmRleDogMztcXG59XFxuLkNvZGVNaXJyb3ItZ3V0dGVyIHtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgbWFyZ2luLWJvdHRvbTogLTUwcHg7XFxufVxcbi5Db2RlTWlycm9yLWd1dHRlci13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDQ7XFxuICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7XFxuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuLkNvZGVNaXJyb3ItZ3V0dGVyLWJhY2tncm91bmQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwOyBib3R0b206IDA7XFxuICB6LWluZGV4OiA0O1xcbn1cXG4uQ29kZU1pcnJvci1ndXR0ZXItZWx0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIHotaW5kZXg6IDQ7XFxufVxcbi5Db2RlTWlycm9yLWd1dHRlci13cmFwcGVyIDo6c2VsZWN0aW9uIHsgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgfVxcbi5Db2RlTWlycm9yLWd1dHRlci13cmFwcGVyIDo6LW1vei1zZWxlY3Rpb24geyBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCB9XFxuXFxuLkNvZGVNaXJyb3ItbGluZXMge1xcbiAgY3Vyc29yOiB0ZXh0O1xcbiAgbWluLWhlaWdodDogMXB4OyAvKiBwcmV2ZW50cyBjb2xsYXBzaW5nIGJlZm9yZSBmaXJzdCBkcmF3ICovXFxufVxcbi5Db2RlTWlycm9yIHByZS5Db2RlTWlycm9yLWxpbmUsXFxuLkNvZGVNaXJyb3IgcHJlLkNvZGVNaXJyb3ItbGluZS1saWtlIHtcXG4gIC8qIFJlc2V0IHNvbWUgc3R5bGVzIHRoYXQgdGhlIHJlc3Qgb2YgdGhlIHBhZ2UgbWlnaHQgaGF2ZSBzZXQgKi9cXG4gIC1tb3otYm9yZGVyLXJhZGl1czogMDsgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwOyBib3JkZXItcmFkaXVzOiAwO1xcbiAgYm9yZGVyLXdpZHRoOiAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIG1hcmdpbjogMDtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB6LWluZGV4OiAyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLXdlYmtpdC1mb250LXZhcmlhbnQtbGlnYXR1cmVzOiBjb250ZXh0dWFsO1xcbiAgZm9udC12YXJpYW50LWxpZ2F0dXJlczogY29udGV4dHVhbDtcXG59XFxuLkNvZGVNaXJyb3Itd3JhcCBwcmUuQ29kZU1pcnJvci1saW5lLFxcbi5Db2RlTWlycm9yLXdyYXAgcHJlLkNvZGVNaXJyb3ItbGluZS1saWtlIHtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXG59XFxuXFxuLkNvZGVNaXJyb3ItbGluZWJhY2tncm91bmQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDsgcmlnaHQ6IDA7IHRvcDogMDsgYm90dG9tOiAwO1xcbiAgei1pbmRleDogMDtcXG59XFxuXFxuLkNvZGVNaXJyb3ItbGluZXdpZGdldCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAyO1xcbiAgcGFkZGluZzogMC4xcHg7IC8qIEZvcmNlIHdpZGdldCBtYXJnaW5zIHRvIHN0YXkgaW5zaWRlIG9mIHRoZSBjb250YWluZXIgKi9cXG59XFxuXFxuLkNvZGVNaXJyb3Itd2lkZ2V0IHt9XFxuXFxuLkNvZGVNaXJyb3ItcnRsIHByZSB7IGRpcmVjdGlvbjogcnRsOyB9XFxuXFxuLkNvZGVNaXJyb3ItY29kZSB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4vKiBGb3JjZSBjb250ZW50LWJveCBzaXppbmcgZm9yIHRoZSBlbGVtZW50cyB3aGVyZSB3ZSBleHBlY3QgaXQgKi9cXG4uQ29kZU1pcnJvci1zY3JvbGwsXFxuLkNvZGVNaXJyb3Itc2l6ZXIsXFxuLkNvZGVNaXJyb3ItZ3V0dGVyLFxcbi5Db2RlTWlycm9yLWd1dHRlcnMsXFxuLkNvZGVNaXJyb3ItbGluZW51bWJlciB7XFxuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxufVxcblxcbi5Db2RlTWlycm9yLW1lYXN1cmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG5cXG4uQ29kZU1pcnJvci1jdXJzb3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5Db2RlTWlycm9yLW1lYXN1cmUgcHJlIHsgcG9zaXRpb246IHN0YXRpYzsgfVxcblxcbmRpdi5Db2RlTWlycm9yLWN1cnNvcnMge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMztcXG59XFxuZGl2LkNvZGVNaXJyb3ItZHJhZ2N1cnNvcnMge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuXFxuLkNvZGVNaXJyb3ItZm9jdXNlZCBkaXYuQ29kZU1pcnJvci1jdXJzb3JzIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxufVxcblxcbi5Db2RlTWlycm9yLXNlbGVjdGVkIHsgYmFja2dyb3VuZDogI2Q5ZDlkOTsgfVxcbi5Db2RlTWlycm9yLWZvY3VzZWQgLkNvZGVNaXJyb3Itc2VsZWN0ZWQgeyBiYWNrZ3JvdW5kOiAjZDdkNGYwOyB9XFxuLkNvZGVNaXJyb3ItY3Jvc3NoYWlyIHsgY3Vyc29yOiBjcm9zc2hhaXI7IH1cXG4uQ29kZU1pcnJvci1saW5lOjpzZWxlY3Rpb24sIC5Db2RlTWlycm9yLWxpbmUgPiBzcGFuOjpzZWxlY3Rpb24sIC5Db2RlTWlycm9yLWxpbmUgPiBzcGFuID4gc3Bhbjo6c2VsZWN0aW9uIHsgYmFja2dyb3VuZDogI2Q3ZDRmMDsgfVxcbi5Db2RlTWlycm9yLWxpbmU6Oi1tb3otc2VsZWN0aW9uLCAuQ29kZU1pcnJvci1saW5lID4gc3Bhbjo6LW1vei1zZWxlY3Rpb24sIC5Db2RlTWlycm9yLWxpbmUgPiBzcGFuID4gc3Bhbjo6LW1vei1zZWxlY3Rpb24geyBiYWNrZ3JvdW5kOiAjZDdkNGYwOyB9XFxuXFxuLmNtLXNlYXJjaGluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMCwgLjQpO1xcbn1cXG5cXG4vKiBVc2VkIHRvIGZvcmNlIGEgYm9yZGVyIG1vZGVsIGZvciBhIG5vZGUgKi9cXG4uY20tZm9yY2UtYm9yZGVyIHsgcGFkZGluZy1yaWdodDogLjFweDsgfVxcblxcbkBtZWRpYSBwcmludCB7XFxuICAvKiBIaWRlIHRoZSBjdXJzb3Igd2hlbiBwcmludGluZyAqL1xcbiAgLkNvZGVNaXJyb3IgZGl2LkNvZGVNaXJyb3ItY3Vyc29ycyB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIH1cXG59XFxuXFxuLyogU2VlIGlzc3VlICMyOTAxICovXFxuLmNtLXRhYi13cmFwLWhhY2s6YWZ0ZXIgeyBjb250ZW50OiAnJzsgfVxcblxcbi8qIEhlbHAgdXNlcnMgdXNlIG1hcmtzZWxlY3Rpb24gdG8gc2FmZWx5IHN0eWxlIHRleHQgYmFja2dyb3VuZCAqL1xcbnNwYW4uQ29kZU1pcnJvci1zZWxlY3RlZHRleHQgeyBiYWNrZ3JvdW5kOiBub25lOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh1bmRlZmluZWQpO1xuLy8gaW1wb3J0c1xuZXhwb3J0cy5pKHJlcXVpcmUoXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIWNvZGVtaXJyb3IvbGliL2NvZGVtaXJyb3IuY3NzXCIpLCBcIlwiKTtcbmV4cG9ydHMuaShyZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2h5YmlyZC5jc3NcIiksIFwiXCIpO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImF7Y3Vyc29yOnBvaW50ZXJ9aW1ne2JvcmRlcjowfXByZXtwYWRkaW5nOjA7d29yZC1icmVhazpub3JtYWw7d29yZC13cmFwOm5vcm1hbH1wcmU+Y29kZXt3aGl0ZS1zcGFjZTpwcmU7cGFkZGluZzoxMy41cHh9cHJlPmNvZGUuaGxqc3twYWRkaW5nOjEzLjVweH1jb2Rle3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzphdXRvO3BhZGRpbmc6NXB4O2JhY2tncm91bmQtY29sb3I6IzI3MjgyMn0uaGxqcy5pbmxpbmV7d2hpdGUtc3BhY2U6bm9ybWFsO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tbGVmdDo1cHh9Ym9keXtwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlfSNhcHB7aGVpZ2h0OjEwMCV9LnRyeXtwb3NpdGlvbjpmaXhlZDtib3R0b206MC4yZW07cmlnaHQ6MC4yZW07aGVpZ2h0OjJlbTtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO3otaW5kZXg6OTk5OX0udHJ5LmFjdGl2ZXtsZWZ0OjAuMmVtO3dpZHRoOmF1dG87aGVpZ2h0OjMwZW07cGFkZGluZzowLjVlbTt0cmFuc2l0aW9uOmhlaWdodCAuNHM7Ym94LXNoYWRvdzowIC0ycHggNXB4IC0ycHggYmxhY2t9LnRyeS5hY3RpdmU+LmNvZGUsLnRyeS5hY3RpdmU+LkNvZGVNaXJyb3J7ZGlzcGxheTpibG9ja30udHJ5LmFjdGl2ZT4ucmVzdWx0e3dpZHRoOjQ5JX0udHJ5LmFjdGl2ZT4ucmVzdWx0Pi5idG5zPip7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnRyeS5hY3RpdmU+LnJlc3VsdD4uYnRucz4uZXhwYW5ke2Rpc3BsYXk6bm9uZX0udHJ5LmFjdGl2ZT4ucmVzdWx0Pi5saXN0e2Rpc3BsYXk6YmxvY2t9LnRyeT4uY29kZSwudHJ5Pi5Db2RlTWlycm9ye2Zsb2F0OmxlZnQ7d2lkdGg6NDklO2hlaWdodDoyOWVtO2Rpc3BsYXk6bm9uZTtib3JkZXI6MXB4IHNvbGlkIGxpZ2h0Z3JheTtmb250LWZhbWlseTpNZW5sbyxNb25hY28sQ29uc29sYXMsXFxcIkNvdXJpZXIgTmV3XFxcIixtb25vc3BhY2V9LnRyeT4ucmVzdWx0e2Zsb2F0OnJpZ2h0O3dpZHRoOjEwMCV9LnRyeT4ucmVzdWx0Pi5idG5zPip7d29yZC1icmVhazprZWVwLWFsbDt3aGl0ZS1zcGFjZTpub3dyYXA7ZGlzcGxheTpub25lfS50cnk+LnJlc3VsdD4uYnRucz4uYnRue3BhZGRpbmc6MC4yZW0gMC41ZW07Y3Vyc29yOnBvaW50ZXJ9LnRyeT4ucmVzdWx0Pi5idG5zPi5leHBhbmR7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnRyeT4ucmVzdWx0Pi5saXN0e2hlaWdodDoyN2VtO292ZXJmbG93OmF1dG87bGlzdC1zdHlsZTpub25lO2Rpc3BsYXk6bm9uZTtwYWRkaW5nOjAuNWVtIDB9LnRyeT4ucmVzdWx0Pi5saXN0Pmxpe2ZvbnQtc2l6ZToxMnB4O2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNmMGYwZjA7Y29sb3I6IzIyMjIyMn0udHJ5Pi5yZXN1bHQ+Lmxpc3Q+bGk+cHJle3BhZGRpbmc6MDttYXJnaW46MDtkaXNwbGF5OmlubGluZS1ibG9jaztib3JkZXI6MDtib3JkZXItcmFkaXVzOjA7Zm9udC1zaXplOjEycHg7YmFja2dyb3VuZDpub25lO2xpbmUtaGVpZ2h0OjE7b3ZlcmZsb3c6aW5oZXJpdDtjb2xvcjojMjIyMjIyfS50cnk+LnJlc3VsdD4ubGlzdD5saTpmaXJzdC1jaGlsZHtib3JkZXItdG9wOjFweCBzb2xpZCAjZjBmMGYwfS50cnk+LnJlc3VsdD4ubGlzdD5saS5yZXN1bHR7Y29sb3I6IzgwODA4MH0udHJ5Pi5yZXN1bHQ+Lmxpc3Q+bGkucmVzdWx0PnByZXtjb2xvcjojODA4MDgwfS50cnk+LnJlc3VsdD4ubGlzdD5saS5lcnJvcntjb2xvcjojZmYwMDAwfS50cnk+LnJlc3VsdD4ubGlzdD5saS5lcnJvcj5wcmV7Y29sb3I6I2ZmMDAwMH1AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpey50b3BiYXJ7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDo0O3dpZHRoOjEwMCV9LnNpZGViYXJ7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDozO2JvdHRvbTowO3RvcDo1MnB4fS5zaWRlYmFyKyp7cGFkZGluZy1sZWZ0OjY1cHg7cGFkZGluZy10b3A6NTJweH19QG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KXsubmF2YmFye21hcmdpbi1ib3R0b206MH19LnNpZGViYXJ7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6YXV0bztiYWNrZ3JvdW5kOndoaXRlfS5zaWRlYmFyIC5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW17cGFkZGluZzo1cHh9QG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KXsuc2lkZWJhciAubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVte3BhZGRpbmc6NXB4IDB9fS5zaWRlYmFyIC5wYW5lbHtib3JkZXItcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS13aWR0aDowfS5zaWRlYmFyIC5wYW5lbDpmaXJzdC1jaGlsZHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjJweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoycHh9LnNpZGViYXIgLnBhbmVsOmxhc3QtY2hpbGR7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czoycHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MnB4O2JvcmRlci1ib3R0b20td2lkdGg6MXB4fS5zaWRlYmFyIC5wYW5lbCsucGFuZWx7bWFyZ2luLXRvcDowfS5zaWRlYmFyIC5wYW5lbD4ucGFuZWwtaGVhZGluZyBhPmkuZmlyc3Qtd29yZHtib3JkZXI6MXB4IHNvbGlkICMzMzdhYjc7Ym9yZGVyLXJhZGl1czoycHh9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5nIGEgLmNhcmV0e3RyYW5zZm9ybTpyb3RhdGVaKDBkZWcpO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuM3N9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5nIGEuY29sbGFwc2VkIC5jYXJldHt0cmFuc2Zvcm06cm90YXRlWigtOTBkZWcpfS5zaWRlYmFyIC5wYW5lbD4ucGFuZWwtaGVhZGluZysubGlzdC1ncm91cD4ubGlzdC1ncm91cC1pdGVte3BhZGRpbmctbGVmdDozMHB4fS5zaWRlYmFyIC5wYW5lbD4ucGFuZWwtaGVhZGluZysubGlzdC1ncm91cD4ubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxke2JvcmRlci10b3Atd2lkdGg6MXB4fUBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCl7LnNpZGViYXJ7d2lkdGg6NTBweDtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNlN2U3ZTc7dHJhbnNpdGlvbjp3aWR0aCAwLjRzfS5zaWRlYmFyLm9wZW5lZHtib3JkZXItcmlnaHQ6MDt3aWR0aDoxMDAlfS5zaWRlYmFyLm9wZW5lZCAucGFuZWx7bWFyZ2luLWJvdHRvbTowO2JvcmRlci1ib3R0b20td2lkdGg6MXB4fS5zaWRlYmFyLm9wZW5lZCAucGFuZWw+LnBhbmVsLWhlYWRpbmc+YT5zcGFue2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5zaWRlYmFyLmNsb3NlZCAucGFuZWw+LnBhbmVsLWhlYWRpbmcrLmxpc3QtZ3JvdXB7cG9zaXRpb246Zml4ZWQ7bGVmdDo1MHB4O3JpZ2h0OjA7dG9wOjUycHg7aGVpZ2h0OmF1dG8gIWltcG9ydGFudDtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTt0cmFuc2l0aW9uOmJvdHRvbSAwLjRzO3otaW5kZXg6MX0uc2lkZWJhci5jbG9zZWQgLnBhbmVsPi5wYW5lbC1oZWFkaW5nKy5saXN0LWdyb3VwLmNvbGxhcHNle2JvdHRvbToxMDAlfS5zaWRlYmFyLmNsb3NlZCAucGFuZWw+LnBhbmVsLWhlYWRpbmcrLmxpc3QtZ3JvdXAuY29sbGFwc2luZ3tib3R0b206MTAwJTt6LWluZGV4OjJ9LnNpZGViYXIuY2xvc2VkIC5wYW5lbD4ucGFuZWwtaGVhZGluZysubGlzdC1ncm91cC5jb2xsYXBzZS5pbntib3R0b206MH0uc2lkZWJhci5jbG9zZWQgLnBhbmVsPi5wYW5lbC1oZWFkaW5nKy5saXN0LWdyb3VwPi5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC13aWR0aDowfS5zaWRlYmFyIC5wYW5lbHtib3JkZXItd2lkdGg6MDttYXJnaW4tYm90dG9tOjFweDtib3gtc2hhZG93OjAgMH0uc2lkZWJhciAucGFuZWw6bGFzdC1jaGlsZHtib3JkZXItYm90dG9tLXdpZHRoOjB9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5ne2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7cGFkZGluZzoxNXB4IDB9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5nPmF7d2hpdGUtc3BhY2U6bm93cmFwfS5zaWRlYmFyIC5wYW5lbD4ucGFuZWwtaGVhZGluZz5hPml7bWFyZ2luLXJpZ2h0OjEwcHh9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5nPmE+c3BhbntkaXNwbGF5Om5vbmV9LnNpZGViYXIgLnBhbmVsPi5wYW5lbC1oZWFkaW5nKy5saXN0LWdyb3VwPi5saXN0LWdyb3VwLWl0ZW17cGFkZGluZy1sZWZ0OjIwcHh9fS5pY29uLW1hcmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTZweDtoZWlnaHQ6MTZweDtsaW5lLWhlaWdodDoxNnB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6OHB4O2N1cnNvcjpkZWZhdWx0fS5pbmRlbnR7cGFkZGluZy1sZWZ0OjIwcHh9LmluZGVudCAuaW5kZW50e3BhZGRpbmctbGVmdDo0MHB4fVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodW5kZWZpbmVkKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zaGllbGRze2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDoxNnB4O2xpbmUtaGVpZ2h0OjE2cHg7Y29sb3I6d2hpdGU7Zm9udC1zaXplOjEycHg7Y3Vyc29yOmRlZmF1bHR9LnNoaWVsZHM+c3BhbjpmaXJzdC1jaGlsZHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjNweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjNweH0uc2hpZWxkcz5zcGFuOmxhc3QtY2hpbGR7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweH0uc2hpZWxkcz4uc2hpZWxkcy1zdWJqZWN0e3BhZGRpbmc6M3B4O3RleHQtc2hhZG93OjAgMXB4IDFweCBibGFjaztiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgjNWY1ZjVmLCAjNGQ0ZDRkKX0uc2hpZWxkcz4uc2hpZWxkcy1zdGF0dXN7cGFkZGluZzozcHg7dGV4dC1zaGFkb3c6MCAxcHggMXB4IGdyYXl9LnNoaWVsZHM+LnNoaWVsZHMtc3RhdHVzLnllbGxvd3tiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgjZGJiMzI3LCAjYzlhMTE1KX1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHVuZGVmaW5lZCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXHJcXG4uY20tcy1oeWJpcmQuQ29kZU1pcnJvciB7IGJhY2tncm91bmQ6ICMxZDFmMjE7IGNvbG9yOiAjYzVjOGM2OyB9XFxyXFxuLmNtLXMtaHliaXJkIGRpdi5Db2RlTWlycm9yLXNlbGVjdGVkIHsgYmFja2dyb3VuZDogIzJEMkQyRDsgfVxcclxcbi5jbS1zLWh5YmlyZCAuQ29kZU1pcnJvci1saW5lOjpzZWxlY3Rpb24sIC5jbS1zLWh5YmlyZCAuQ29kZU1pcnJvci1saW5lID4gc3Bhbjo6c2VsZWN0aW9uLCAuY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItbGluZSA+IHNwYW4gPiBzcGFuOjpzZWxlY3Rpb24geyBiYWNrZ3JvdW5kOiAjMzczYjQxOyB9XFxyXFxuLmNtLXMtaHliaXJkIC5Db2RlTWlycm9yLWxpbmU6Oi1tb3otc2VsZWN0aW9uLCAuY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItbGluZSA+IHNwYW46Oi1tb3otc2VsZWN0aW9uLCAuY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItbGluZSA+IHNwYW4gPiBzcGFuOjotbW96LXNlbGVjdGlvbiB7IGJhY2tncm91bmQ6ICMzNzNiNDE7IH1cXHJcXG4uY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItZ3V0dGVycyB7IGJhY2tncm91bmQ6ICMwMDAwMDA7IGJvcmRlci1yaWdodDogMDsgfVxcclxcbi5jbS1zLWh5YmlyZCAuQ29kZU1pcnJvci1ndXR0ZXJtYXJrZXIgeyBjb2xvcjogI2YyNzc3YTsgfVxcclxcbi5jbS1zLWh5YmlyZCAuQ29kZU1pcnJvci1ndXR0ZXJtYXJrZXItc3VidGxlIHsgY29sb3I6ICM3Nzc7IH1cXHJcXG4uY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItbGluZW51bWJlciB7IGNvbG9yOiAjNTE1MTUxOyB9XFxyXFxuLmNtLXMtaHliaXJkIC5Db2RlTWlycm9yLWN1cnNvciB7IGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzZBNkE2QTsgfVxcclxcblxcclxcbi5jbS1zLWh5YmlyZCBzcGFuLmNtLWNvbW1lbnQgeyBjb2xvcjogIzcwNzg4MDsgfVxcclxcbi5jbS1zLWh5YmlyZCBzcGFuLmNtLWF0b20geyBjb2xvcjogI2M2NjsgfVxcclxcbi5jbS1zLWh5YmlyZCBzcGFuLmNtLW51bWJlciB7IGNvbG9yOiAjYzY2OyB9XFxyXFxuXFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20tcHJvcGVydHksIC5jbS1zLWh5YmlyZCBzcGFuLmNtLWF0dHJpYnV0ZSB7IGNvbG9yOiAjYzVjOGM2OyB9XFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20ta2V5d29yZCB7IGNvbG9yOiAjODFhMmJlOyB9XFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20tc3RyaW5nLCAuY20tcy1oeWJpcmQgc3Bhbi5jbS1zdHJpbmctMiB7IGNvbG9yOiAjYjViZDY4OyB9XFxyXFxuXFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20tdmFyaWFibGUgeyBjb2xvcjogIzhhYmViNzsgfVxcclxcbi5jbS1zLWh5YmlyZCBzcGFuLmNtLXZhcmlhYmxlLTIgeyBjb2xvcjogIzhhYmViNzsgfVxcclxcbi5jbS1zLWh5YmlyZCBzcGFuLmNtLWRlZiB7IGNvbG9yOiAjYzVjOGM2OyB9XFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20tYnJhY2tldCB7IGNvbG9yOiAjQ0NDQ0NDOyB9XFxyXFxuLmNtLXMtaHliaXJkIHNwYW4uY20tdGFnIHsgY29sb3I6ICM4MWEyYmU7IH1cXHJcXG4uY20tcy1oeWJpcmQgc3Bhbi5jbS1saW5rIHsgY29sb3I6ICNjNjY7IH1cXHJcXG4uY20tcy1oeWJpcmQgc3Bhbi5jbS1lcnJvciB7IGJhY2tncm91bmQ6ICNmMjc3N2E7IGNvbG9yOiAjNkE2QTZBOyB9XFxyXFxuXFxyXFxuLmNtLXMtaHliaXJkIC5Db2RlTWlycm9yLWFjdGl2ZWxpbmUtYmFja2dyb3VuZCB7IGJhY2tncm91bmQ6ICMzNDM2MDA7IH1cXHJcXG4uY20tcy1oeWJpcmQgLkNvZGVNaXJyb3ItbWF0Y2hpbmdicmFja2V0IHsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50OyB9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXApIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIHZhciBiYXNlNjQgPSBuZXcgQnVmZmVyKEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFt7bmFtZTonRW5nbGlzaCcsY29kZTonZW4tdXMnfSx7bmFtZTon5Lit5paH54mIJyxjb2RlOid6aC1jbid9XSIsIm1vZHVsZS5leHBvcnRzID0gWycyLjEuMTUnLCcyLjEuMTYnLCcyLjEuMTcnLCcyLjEuMTgnLCcyLjEuMTknLCcyLjEuMjAnLCcyLjEuMjEnLCcyLjEuMjInLCcyLjEuMjMnLCcyLjEuMjQnLCcyLjIuMC5wcmUnXSIsIiFmdW5jdGlvbihlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzKS5FbnVtZXJhYmxlPWUoKX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gcihhLHUsaSl7ZnVuY3Rpb24gbyh0LGUpe2lmKCF1W3RdKXtpZighYVt0XSl7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZSYmbilyZXR1cm4gbih0LCEwKTtpZihsKXJldHVybiBsKHQsITApO3Rocm93KG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKSkuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixufW49dVt0XT17ZXhwb3J0czp7fX0sYVt0XVswXS5jYWxsKG4uZXhwb3J0cyxmdW5jdGlvbihlKXtyZXR1cm4gbyhhW3RdWzFdW2VdfHxlKX0sbixuLmV4cG9ydHMscixhLHUsaSl9cmV0dXJuIHVbdF0uZXhwb3J0c31mb3IodmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxlPTA7ZTxpLmxlbmd0aDtlKyspbyhpW2VdKTtyZXR1cm4gb30oezE6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sMjpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwzOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gbihlKX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7XCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjoxfV0sNDpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gZX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sNTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe2lmKCEoZSBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9LHIuZXhwb3J0cy5kZWZhdWx0PXIuZXhwb3J0cyxyLmV4cG9ydHMuX19lc01vZHVsZT0hMH0se31dLDY6W2Z1bmN0aW9uKGUsbixyKXt2YXIgYT1lKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKSxvPWUoXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiKTtmdW5jdGlvbiBfY29uc3RydWN0KGUscix0KXtyZXR1cm4gbygpP24uZXhwb3J0cz1fY29uc3RydWN0PVJlZmxlY3QuY29uc3RydWN0Om4uZXhwb3J0cz1fY29uc3RydWN0PWZ1bmN0aW9uKGUscix0KXt2YXIgbj1bbnVsbF07bi5wdXNoLmFwcGx5KG4scik7bj1uZXcoRnVuY3Rpb24uYmluZC5hcHBseShlLG4pKTtyZXR1cm4gdCYmYShuLHQucHJvdG90eXBlKSxufSxuLmV4cG9ydHMuZGVmYXVsdD1uLmV4cG9ydHMsbi5leHBvcnRzLl9fZXNNb2R1bGU9ITAsX2NvbnN0cnVjdC5hcHBseShudWxsLGFyZ3VtZW50cyl9bi5leHBvcnRzPV9jb25zdHJ1Y3Qsbi5leHBvcnRzLmRlZmF1bHQ9bi5leHBvcnRzLG4uZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7XCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiOjE0LFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiOjIwfV0sNzpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUscil7Zm9yKHZhciB0PTA7dDxyLmxlbmd0aDt0Kyspe3ZhciBuPXJbdF07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiByJiZfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSxyKSx0JiZfZGVmaW5lUHJvcGVydGllcyhlLHQpLGV9LHIuZXhwb3J0cy5kZWZhdWx0PXIuZXhwb3J0cyxyLmV4cG9ydHMuX19lc01vZHVsZT0hMH0se31dLDg6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiByIGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbcl09dCxlfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSw5OltmdW5jdGlvbihlLG4scil7dmFyIGE9ZShcIi4vc3VwZXJQcm9wQmFzZS5qc1wiKTtmdW5jdGlvbiBfZ2V0KGUscix0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5nZXQ/bi5leHBvcnRzPV9nZXQ9UmVmbGVjdC5nZXQ6bi5leHBvcnRzPV9nZXQ9ZnVuY3Rpb24oZSxyLHQpe2U9YShlLHIpO2lmKGUpe3I9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpO3JldHVybiByLmdldD9yLmdldC5jYWxsKHQpOnIudmFsdWV9fSxuLmV4cG9ydHMuZGVmYXVsdD1uLmV4cG9ydHMsbi5leHBvcnRzLl9fZXNNb2R1bGU9ITAsX2dldChlLHIsdHx8ZSl9bi5leHBvcnRzPV9nZXQsbi5leHBvcnRzLmRlZmF1bHQ9bi5leHBvcnRzLG4uZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7XCIuL3N1cGVyUHJvcEJhc2UuanNcIjoyMn1dLDEwOltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKGUpe3JldHVybiByLmV4cG9ydHM9X2dldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9LHIuZXhwb3J0cy5kZWZhdWx0PXIuZXhwb3J0cyxyLmV4cG9ydHMuX19lc01vZHVsZT0hMCxfZ2V0UHJvdG90eXBlT2YoZSl9ci5leHBvcnRzPV9nZXRQcm90b3R5cGVPZixyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwxMTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuL3NldFByb3RvdHlwZU9mLmpzXCIpO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHImJm51bGwhPT1yKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHImJnIucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksciYmbihlLHIpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHtcIi4vc2V0UHJvdG90eXBlT2YuanNcIjoyMH1dLDEyOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sMTM6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKGUpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwxNDpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sMTU6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmbnVsbCE9ZVtTeW1ib2wuaXRlcmF0b3JdfHxudWxsIT1lW1wiQEBpdGVyYXRvclwiXSlyZXR1cm4gQXJyYXkuZnJvbShlKX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sMTY6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdD1udWxsPT1lP251bGw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZihudWxsIT10KXt2YXIgbixhLG89W10sdT0hMCxpPSExO3RyeXtmb3IodD10LmNhbGwoZSk7ISh1PShuPXQubmV4dCgpKS5kb25lKSYmKG8ucHVzaChuLnZhbHVlKSwhcnx8by5sZW5ndGghPT1yKTt1PSEwKTt9Y2F0Y2goZSl7aT0hMCxhPWV9ZmluYWxseXt0cnl7dXx8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZihpKXRocm93IGF9fXJldHVybiBvfX0sci5leHBvcnRzLmRlZmF1bHQ9ci5leHBvcnRzLHIuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7fV0sMTc6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwxODpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwxOTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKS5kZWZhdWx0LGE9ZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCIpO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiFyfHxcIm9iamVjdFwiIT09bihyKSYmXCJmdW5jdGlvblwiIT10eXBlb2Ygcj9hKGUpOnJ9LHIuZXhwb3J0cy5kZWZhdWx0PXIuZXhwb3J0cyxyLmV4cG9ydHMuX19lc01vZHVsZT0hMH0se1wiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjoyNH1dLDIwOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKGUscil7cmV0dXJuIHQuZXhwb3J0cz1fc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLHIpe3JldHVybiBlLl9fcHJvdG9fXz1yLGV9LHQuZXhwb3J0cy5kZWZhdWx0PXQuZXhwb3J0cyx0LmV4cG9ydHMuX19lc01vZHVsZT0hMCxfc2V0UHJvdG90eXBlT2YoZSxyKX10LmV4cG9ydHM9X3NldFByb3RvdHlwZU9mLHQuZXhwb3J0cy5kZWZhdWx0PXQuZXhwb3J0cyx0LmV4cG9ydHMuX19lc01vZHVsZT0hMH0se31dLDIxOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIiksYT1lKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiKSxvPWUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpLHU9ZShcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCIpO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiBuKGUpfHxhKGUscil8fG8oZSxyKXx8dSgpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHtcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjoyLFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiOjE2LFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjoxNyxcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjoyNX1dLDIyOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vZ2V0UHJvdG90eXBlT2YuanNcIik7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7Zm9yKDshT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJm51bGwhPT0oZT1uKGUpKTspO3JldHVybiBlfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHtcIi4vZ2V0UHJvdG90eXBlT2YuanNcIjoxMH1dLDIzOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIiksYT1lKFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIiksbz1lKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKSx1PWUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCIpO3IuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbihlKXx8YShlKXx8byhlKXx8dSgpfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHtcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjozLFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjoxNSxcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjoxOCxcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjoyNX1dLDI0OltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gX3R5cGVvZihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ci5leHBvcnRzPV90eXBlb2Y9ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpyLmV4cG9ydHM9X3R5cGVvZj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITAsX3R5cGVvZihlKX1yLmV4cG9ydHM9X3R5cGVvZixyLmV4cG9ydHMuZGVmYXVsdD1yLmV4cG9ydHMsci5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LHt9XSwyNTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIG4oZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/bihlLHIpOnZvaWQgMH19LHIuZXhwb3J0cy5kZWZhdWx0PXIuZXhwb3J0cyxyLmV4cG9ydHMuX19lc01vZHVsZT0hMH0se1wiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI6MX1dLDI2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vZ2V0UHJvdG90eXBlT2YuanNcIiksYT1lKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKSxvPWUoXCIuL2lzTmF0aXZlRnVuY3Rpb24uanNcIiksdT1lKFwiLi9jb25zdHJ1Y3QuanNcIik7ZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihlKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXA/bmV3IE1hcDp2b2lkIDA7cmV0dXJuIHQuZXhwb3J0cz1fd3JhcE5hdGl2ZVN1cGVyPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHwhbyhlKSlyZXR1cm4gZTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtpZih2b2lkIDAhPT1yKXtpZihyLmhhcyhlKSlyZXR1cm4gci5nZXQoZSk7ci5zZXQoZSxXcmFwcGVyKX1mdW5jdGlvbiBXcmFwcGVyKCl7cmV0dXJuIHUoZSxhcmd1bWVudHMsbih0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIFdyYXBwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpXcmFwcGVyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGEoV3JhcHBlcixlKX0sdC5leHBvcnRzLmRlZmF1bHQ9dC5leHBvcnRzLHQuZXhwb3J0cy5fX2VzTW9kdWxlPSEwLF93cmFwTmF0aXZlU3VwZXIoZSl9dC5leHBvcnRzPV93cmFwTmF0aXZlU3VwZXIsdC5leHBvcnRzLmRlZmF1bHQ9dC5leHBvcnRzLHQuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSx7XCIuL2NvbnN0cnVjdC5qc1wiOjYsXCIuL2dldFByb3RvdHlwZU9mLmpzXCI6MTAsXCIuL2lzTmF0aXZlRnVuY3Rpb24uanNcIjoxMyxcIi4vc2V0UHJvdG90eXBlT2YuanNcIjoyMH1dLDI3OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpfSx7XCJyZWdlbmVyYXRvci1ydW50aW1lXCI6MzB9XSwyODpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIFNiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5LmlzQXJyYXk/QXJyYXkuaXNBcnJheShlKTpcIltvYmplY3QgQXJyYXldXCI9PT1vLmNhbGwoZSl9ZnVuY3Rpb24gVGIoZSl7aWYoZSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PW8uY2FsbChlKSl7dmFyIHIsdD1hLmNhbGwoZSxcImNvbnN0cnVjdG9yXCIpLG49ZS5jb25zdHJ1Y3RvciYmZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUmJmEuY2FsbChlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcImlzUHJvdG90eXBlT2ZcIik7aWYoIWUuY29uc3RydWN0b3J8fHR8fG4pe2ZvcihyIGluIGUpO3JldHVybiB2b2lkIDA9PT1yfHxhLmNhbGwoZSxyKX19fWZ1bmN0aW9uIFViKGUscil7biYmXCJfX3Byb3RvX19cIj09PXIubmFtZT9uKGUsci5uYW1lLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx2YWx1ZTpyLm5ld1ZhbHVlLHdyaXRhYmxlOiEwfSk6ZVtyLm5hbWVdPXIubmV3VmFsdWV9ZnVuY3Rpb24gVmIoZSxyKXtpZihcIl9fcHJvdG9fX1wiPT09cil7aWYoIWEuY2FsbChlLHIpKXJldHVybjtpZih1KXJldHVybiB1KGUscikudmFsdWV9cmV0dXJuIGVbcl19dmFyIGE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxvPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbj1PYmplY3QuZGVmaW5lUHJvcGVydHksdT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3IuZXhwb3J0cz1mdW5jdGlvbiBleHRlbmQoKXt2YXIgZSxyLHQsbixhLG89YXJndW1lbnRzWzBdLHU9MSxpPWFyZ3VtZW50cy5sZW5ndGgsbD0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBvJiYobD1vLG89YXJndW1lbnRzWzFdfHx7fSx1PTIpLChudWxsPT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbykmJihvPXt9KTt1PGk7Kyt1KWlmKG51bGwhPShlPWFyZ3VtZW50c1t1XSkpZm9yKHIgaW4gZSlhPVZiKG8sciksbyE9PSh0PVZiKGUscikpJiYobCYmdCYmKFRiKHQpfHwobj1TYih0KSkpPyhhPW4/KG49ITEsYSYmU2IoYSk/YTpbXSk6YSYmVGIoYSk/YTp7fSxVYihvLHtuYW1lOnIsbmV3VmFsdWU6ZXh0ZW5kKGwsYSx0KX0pKTp2b2lkIDAhPT10JiZVYihvLHtuYW1lOnIsbmV3VmFsdWU6dH0pKTtyZXR1cm4gb319LHt9XSwyOTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuLGEscj1yLmV4cG9ydHM9e307ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBydW5UaW1lb3V0KHIpe2lmKG49PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KHIsMCk7aWYoKG49PT1kZWZhdWx0U2V0VGltb3V0fHwhbikmJnNldFRpbWVvdXQpcmV0dXJuIG49c2V0VGltZW91dCxzZXRUaW1lb3V0KHIsMCk7dHJ5e3JldHVybiBuKHIsMCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxyLDApfWNhdGNoKGUpe3JldHVybiBuLmNhbGwodGhpcyxyLDApfX19IWZ1bmN0aW9uKCl7dHJ5e249XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OmRlZmF1bHRTZXRUaW1vdXR9Y2F0Y2goZSl7bj1kZWZhdWx0U2V0VGltb3V0fXRyeXthPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6ZGVmYXVsdENsZWFyVGltZW91dH1jYXRjaChlKXthPWRlZmF1bHRDbGVhclRpbWVvdXR9fSgpO3ZhciBvLHU9W10saT0hMSxsPS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2kmJm8mJihpPSExLG8ubGVuZ3RoP3U9by5jb25jYXQodSk6bD0tMSx1Lmxlbmd0aCYmZHJhaW5RdWV1ZSgpKX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYoIWkpe3ZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtpPSEwO2Zvcih2YXIgcj11Lmxlbmd0aDtyOyl7Zm9yKG89dSx1PVtdOysrbDxyOylvJiZvW2xdLnJ1bigpO2w9LTEscj11Lmxlbmd0aH1vPW51bGwsaT0hMSxmdW5jdGlvbihyKXtpZihhPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQocik7aWYoKGE9PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhYSkmJmNsZWFyVGltZW91dClyZXR1cm4gYT1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KHIpO3RyeXthKHIpfWNhdGNoKGUpe3RyeXtyZXR1cm4gYS5jYWxsKG51bGwscil9Y2F0Y2goZSl7cmV0dXJuIGEuY2FsbCh0aGlzLHIpfX19KGUpfX1mdW5jdGlvbiBJdGVtKGUscil7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXJ9ZnVuY3Rpb24gbm9vcCgpe31yLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciByPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKDE8YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXJbdC0xXT1hcmd1bWVudHNbdF07dS5wdXNoKG5ldyBJdGVtKGUscikpLDEhPT11Lmxlbmd0aHx8aXx8cnVuVGltZW91dChkcmFpblF1ZXVlKX0sSXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0sci50aXRsZT1cImJyb3dzZXJcIixyLmJyb3dzZXI9ITAsci5lbnY9e30sci5hcmd2PVtdLHIudmVyc2lvbj1cIlwiLHIudmVyc2lvbnM9e30sci5vbj1ub29wLHIuYWRkTGlzdGVuZXI9bm9vcCxyLm9uY2U9bm9vcCxyLm9mZj1ub29wLHIucmVtb3ZlTGlzdGVuZXI9bm9vcCxyLnJlbW92ZUFsbExpc3RlbmVycz1ub29wLHIuZW1pdD1ub29wLHIucHJlcGVuZExpc3RlbmVyPW5vb3Asci5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3Asci5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LHIuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0sci5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0sci5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHIudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LHt9XSwzMDpbZnVuY3Rpb24oZSxyLHQpe3I9ZnVuY3Rpb24odSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGwsZT1PYmplY3QucHJvdG90eXBlLGk9ZS5oYXNPd25Qcm9wZXJ0eSxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbD9TeW1ib2w6e30sbj1yLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIix0PXIuYXN5bmNJdGVyYXRvcnx8XCJAQGFzeW5jSXRlcmF0b3JcIixhPXIudG9TdHJpbmdUYWd8fFwiQEB0b1N0cmluZ1RhZ1wiO2Z1bmN0aW9uIGRlZmluZShlLHIsdCl7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse3ZhbHVlOnQsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KSxlW3JdfXRyeXtkZWZpbmUoe30sXCJcIil9Y2F0Y2goZSl7ZGVmaW5lPWZ1bmN0aW9uKGUscix0KXtyZXR1cm4gZVtyXT10fX1mdW5jdGlvbiB3cmFwKGUscix0LG4pe3ZhciBhLG8sdSxpLHI9ciYmci5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3I/cjpHZW5lcmF0b3Iscj1PYmplY3QuY3JlYXRlKHIucHJvdG90eXBlKSxuPW5ldyBDb250ZXh0KG58fFtdKTtyZXR1cm4gci5faW52b2tlPShhPWUsbz10LHU9bixpPXMsZnVuY3Rpb24oZSxyKXtpZihpPT09Zil0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKGk9PT1wKXtpZihcInRocm93XCI9PT1lKXRocm93IHI7cmV0dXJuIGRvbmVSZXN1bHQoKX1mb3IodS5tZXRob2Q9ZSx1LmFyZz1yOzspe3ZhciB0PXUuZGVsZWdhdGU7aWYodCl7dmFyIG49ZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShlLHIpe3ZhciB0PWUuaXRlcmF0b3Jbci5tZXRob2RdO2lmKHQ9PT1sKXtpZihyLmRlbGVnYXRlPW51bGwsXCJ0aHJvd1wiPT09ci5tZXRob2Qpe2lmKGUuaXRlcmF0b3IucmV0dXJuJiYoci5tZXRob2Q9XCJyZXR1cm5cIixyLmFyZz1sLG1heWJlSW52b2tlRGVsZWdhdGUoZSxyKSxcInRocm93XCI9PT1yLm1ldGhvZCkpcmV0dXJuIGg7ci5tZXRob2Q9XCJ0aHJvd1wiLHIuYXJnPW5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpfXJldHVybiBofXZhciB0PXRyeUNhdGNoKHQsZS5pdGVyYXRvcixyLmFyZyk7aWYoXCJ0aHJvd1wiPT09dC50eXBlKXJldHVybiByLm1ldGhvZD1cInRocm93XCIsci5hcmc9dC5hcmcsci5kZWxlZ2F0ZT1udWxsLGg7dD10LmFyZztpZighdClyZXR1cm4gci5tZXRob2Q9XCJ0aHJvd1wiLHIuYXJnPW5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSxyLmRlbGVnYXRlPW51bGwsaDt7aWYoIXQuZG9uZSlyZXR1cm4gdDtyW2UucmVzdWx0TmFtZV09dC52YWx1ZSxyLm5leHQ9ZS5uZXh0TG9jLFwicmV0dXJuXCIhPT1yLm1ldGhvZCYmKHIubWV0aG9kPVwibmV4dFwiLHIuYXJnPWwpfXIuZGVsZWdhdGU9bnVsbDtyZXR1cm4gaH0odCx1KTtpZihuKXtpZihuPT09aCljb250aW51ZTtyZXR1cm4gbn19aWYoXCJuZXh0XCI9PT11Lm1ldGhvZCl1LnNlbnQ9dS5fc2VudD11LmFyZztlbHNlIGlmKFwidGhyb3dcIj09PXUubWV0aG9kKXtpZihpPT09cyl0aHJvdyBpPXAsdS5hcmc7dS5kaXNwYXRjaEV4Y2VwdGlvbih1LmFyZyl9ZWxzZVwicmV0dXJuXCI9PT11Lm1ldGhvZCYmdS5hYnJ1cHQoXCJyZXR1cm5cIix1LmFyZyk7aT1mO249dHJ5Q2F0Y2goYSxvLHUpO2lmKFwibm9ybWFsXCI9PT1uLnR5cGUpe2lmKGk9dS5kb25lP3A6YyxuLmFyZyE9PWgpcmV0dXJue3ZhbHVlOm4uYXJnLGRvbmU6dS5kb25lfX1lbHNlXCJ0aHJvd1wiPT09bi50eXBlJiYoaT1wLHUubWV0aG9kPVwidGhyb3dcIix1LmFyZz1uLmFyZyl9fSkscn1mdW5jdGlvbiB0cnlDYXRjaChlLHIsdCl7dHJ5e3JldHVybnt0eXBlOlwibm9ybWFsXCIsYXJnOmUuY2FsbChyLHQpfX1jYXRjaChlKXtyZXR1cm57dHlwZTpcInRocm93XCIsYXJnOmV9fX11LndyYXA9d3JhcDt2YXIgcz1cInN1c3BlbmRlZFN0YXJ0XCIsYz1cInN1c3BlbmRlZFlpZWxkXCIsZj1cImV4ZWN1dGluZ1wiLHA9XCJjb21wbGV0ZWRcIixoPXt9O2Z1bmN0aW9uIEdlbmVyYXRvcigpe31mdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpe31mdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpe312YXIgbz17fTtvW25dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3I9T2JqZWN0LmdldFByb3RvdHlwZU9mLHI9ciYmcihyKHZhbHVlcyhbXSkpKTtyJiZyIT09ZSYmaS5jYWxsKHIsbikmJihvPXIpO3ZhciBiPUdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZT1HZW5lcmF0b3IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobyk7ZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKGUpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihyKXtkZWZpbmUoZSxyLGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UocixlKX0pfSl9ZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihvLHUpe3ZhciBlO3RoaXMuX2ludm9rZT1mdW5jdGlvbih0LG4pe2Z1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCl7cmV0dXJuIG5ldyB1KGZ1bmN0aW9uKGUscil7IWZ1bmN0aW9uIGludm9rZShlLHIsdCxuKXtlPXRyeUNhdGNoKG9bZV0sbyxyKTtpZihcInRocm93XCIhPT1lLnR5cGUpe3ZhciBhPWUuYXJnO3JldHVybihyPWEudmFsdWUpJiZcIm9iamVjdFwiPT10eXBlb2YgciYmaS5jYWxsKHIsXCJfX2F3YWl0XCIpP3UucmVzb2x2ZShyLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24oZSl7aW52b2tlKFwibmV4dFwiLGUsdCxuKX0sZnVuY3Rpb24oZSl7aW52b2tlKFwidGhyb3dcIixlLHQsbil9KTp1LnJlc29sdmUocikudGhlbihmdW5jdGlvbihlKXthLnZhbHVlPWUsdChhKX0sZnVuY3Rpb24oZSl7cmV0dXJuIGludm9rZShcInRocm93XCIsZSx0LG4pfSl9bihlLmFyZyl9KHQsbixlLHIpfSl9cmV0dXJuIGU9ZT9lLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpOmNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCl9fWZ1bmN0aW9uIHB1c2hUcnlFbnRyeShlKXt2YXIgcj17dHJ5TG9jOmVbMF19OzEgaW4gZSYmKHIuY2F0Y2hMb2M9ZVsxXSksMiBpbiBlJiYoci5maW5hbGx5TG9jPWVbMl0sci5hZnRlckxvYz1lWzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaChyKX1mdW5jdGlvbiByZXNldFRyeUVudHJ5KGUpe3ZhciByPWUuY29tcGxldGlvbnx8e307ci50eXBlPVwibm9ybWFsXCIsZGVsZXRlIHIuYXJnLGUuY29tcGxldGlvbj1yfWZ1bmN0aW9uIENvbnRleHQoZSl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sZS5mb3JFYWNoKHB1c2hUcnlFbnRyeSx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiB2YWx1ZXMoZSl7aWYoZSl7dmFyIHI9ZVtuXTtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciB0PS0xLHI9ZnVuY3Rpb24gbmV4dCgpe2Zvcig7Kyt0PGUubGVuZ3RoOylpZihpLmNhbGwoZSx0KSlyZXR1cm4gbmV4dC52YWx1ZT1lW3RdLG5leHQuZG9uZT0hMSxuZXh0O3JldHVybiBuZXh0LnZhbHVlPWwsbmV4dC5kb25lPSEwLG5leHR9O3JldHVybiByLm5leHQ9cn19cmV0dXJue25leHQ6ZG9uZVJlc3VsdH19ZnVuY3Rpb24gZG9uZVJlc3VsdCgpe3JldHVybnt2YWx1ZTpsLGRvbmU6ITB9fXJldHVybigoR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlPWIuY29uc3RydWN0b3I9R2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpLmNvbnN0cnVjdG9yPUdlbmVyYXRvckZ1bmN0aW9uKS5kaXNwbGF5TmFtZT1kZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsYSxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLHUuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXtlPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I7cmV0dXJuISFlJiYoZT09PUdlbmVyYXRvckZ1bmN0aW9ufHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0oZS5kaXNwbGF5TmFtZXx8ZS5uYW1lKSl9LHUubWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTooZS5fX3Byb3RvX189R2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsZGVmaW5lKGUsYSxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGIpLGV9LHUuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJue19fYXdhaXQ6ZX19LGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbdF09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdS5Bc3luY0l0ZXJhdG9yPUFzeW5jSXRlcmF0b3IsdS5hc3luYz1mdW5jdGlvbihlLHIsdCxuLGEpe3ZvaWQgMD09PWEmJihhPVByb21pc2UpO3ZhciBvPW5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoZSxyLHQsbiksYSk7cmV0dXJuIHUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKT9vOm8ubmV4dCgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZG9uZT9lLnZhbHVlOm8ubmV4dCgpfSl9LGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhiKSxkZWZpbmUoYixhLFwiR2VuZXJhdG9yXCIpLGJbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHZW5lcmF0b3JdXCJ9LHUua2V5cz1mdW5jdGlvbihyKXt2YXIgZSx0PVtdO2ZvcihlIGluIHIpdC5wdXNoKGUpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiBuZXh0KCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciBlPXQucG9wKCk7aWYoZSBpbiByKXJldHVybiBuZXh0LnZhbHVlPWUsbmV4dC5kb25lPSExLG5leHR9cmV0dXJuIG5leHQuZG9uZT0hMCxuZXh0fX0sdS52YWx1ZXM9dmFsdWVzLENvbnRleHQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpDb250ZXh0LHJlc2V0OmZ1bmN0aW9uKGUpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PWwsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLmFyZz1sLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCFlKWZvcih2YXIgciBpbiB0aGlzKVwidFwiPT09ci5jaGFyQXQoMCkmJmkuY2FsbCh0aGlzLHIpJiYhaXNOYU4oK3Iuc2xpY2UoMSkpJiYodGhpc1tyXT1sKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZihcInRocm93XCI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24odCl7aWYodGhpcy5kb25lKXRocm93IHQ7dmFyIG49dGhpcztmdW5jdGlvbiBoYW5kbGUoZSxyKXtyZXR1cm4gYS50eXBlPVwidGhyb3dcIixhLmFyZz10LG4ubmV4dD1lLHImJihuLm1ldGhvZD1cIm5leHRcIixuLmFyZz1sKSwhIXJ9Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTswPD1lOy0tZSl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW2VdLGE9ci5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09ci50cnlMb2MpcmV0dXJuIGhhbmRsZShcImVuZFwiKTtpZihyLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgbz1pLmNhbGwocixcImNhdGNoTG9jXCIpLHU9aS5jYWxsKHIsXCJmaW5hbGx5TG9jXCIpO2lmKG8mJnUpe2lmKHRoaXMucHJldjxyLmNhdGNoTG9jKXJldHVybiBoYW5kbGUoci5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PHIuZmluYWxseUxvYylyZXR1cm4gaGFuZGxlKHIuZmluYWxseUxvYyl9ZWxzZSBpZihvKXtpZih0aGlzLnByZXY8ci5jYXRjaExvYylyZXR1cm4gaGFuZGxlKHIuY2F0Y2hMb2MsITApfWVsc2V7aWYoIXUpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PHIuZmluYWxseUxvYylyZXR1cm4gaGFuZGxlKHIuZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbihlLHIpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7MDw9dDstLXQpe3ZhciBuPXRoaXMudHJ5RW50cmllc1t0XTtpZihuLnRyeUxvYzw9dGhpcy5wcmV2JiZpLmNhbGwobixcImZpbmFsbHlMb2NcIikmJnRoaXMucHJldjxuLmZpbmFsbHlMb2Mpe3ZhciBhPW47YnJlYWt9fXZhciBvPShhPWEmJihcImJyZWFrXCI9PT1lfHxcImNvbnRpbnVlXCI9PT1lKSYmYS50cnlMb2M8PXImJnI8PWEuZmluYWxseUxvYz9udWxsOmEpP2EuY29tcGxldGlvbjp7fTtyZXR1cm4gby50eXBlPWUsby5hcmc9cixhPyh0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLm5leHQ9YS5maW5hbGx5TG9jLGgpOnRoaXMuY29tcGxldGUobyl9LGNvbXBsZXRlOmZ1bmN0aW9uKGUscil7aWYoXCJ0aHJvd1wiPT09ZS50eXBlKXRocm93IGUuYXJnO3JldHVyblwiYnJlYWtcIj09PWUudHlwZXx8XCJjb250aW51ZVwiPT09ZS50eXBlP3RoaXMubmV4dD1lLmFyZzpcInJldHVyblwiPT09ZS50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9ZS5hcmcsdGhpcy5tZXRob2Q9XCJyZXR1cm5cIix0aGlzLm5leHQ9XCJlbmRcIik6XCJub3JtYWxcIj09PWUudHlwZSYmciYmKHRoaXMubmV4dD1yKSxofSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTswPD1yOy0tcil7dmFyIHQ9dGhpcy50cnlFbnRyaWVzW3JdO2lmKHQuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUodC5jb21wbGV0aW9uLHQuYWZ0ZXJMb2MpLHJlc2V0VHJ5RW50cnkodCksaH19LGNhdGNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgcj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7MDw9cjstLXIpe3ZhciB0PXRoaXMudHJ5RW50cmllc1tyXTtpZih0LnRyeUxvYz09PWUpe3ZhciBuLGE9dC5jb21wbGV0aW9uO3JldHVyblwidGhyb3dcIj09PWEudHlwZSYmKG49YS5hcmcscmVzZXRUcnlFbnRyeSh0KSksbn19dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKGUscix0KXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6dmFsdWVzKGUpLHJlc3VsdE5hbWU6cixuZXh0TG9jOnR9LFwibmV4dFwiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz1sKSxofX0sdX0oXCJvYmplY3RcIj09dHlwZW9mIHI/ci5leHBvcnRzOnt9KTt0cnl7cmVnZW5lcmF0b3JSdW50aW1lPXJ9Y2F0Y2goZSl7RnVuY3Rpb24oXCJyXCIsXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHIpfX0se31dLDMxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gZjMoZSl7aWYoZVtTeW1ib2wuaXRlcmF0b3JdKXJldHVybiBlO2lmKGUuYXNFbnVtZXJhYmxlKXJldHVybiBlLmFzRW51bWVyYWJsZSgpO3Rocm93IG5ldyB6KGUpfXZhciBiPWUoXCIuL2NvcmUvY29yZVwiKSxjPWUoXCIuL21ldGhvZHMvbWV0aG9kc1wiKSxzPWUoXCIuL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxhPWUoXCIuL21ldGhvZHMvZGVmYXVsdEZhbHNlUHJlZGljYXRlXCIpLGY9ZShcIi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIikscD1lKFwiLi9tZXRob2RzL2RlZmF1bHRTYW1lQ29tcGFyZXJcIiksaD1lKFwiLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCIpLGw9ZShcIi4vbWV0aG9kcy9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiKSxkPWUoXCIuL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCIpLGk9ZShcIi4vbWV0aG9kcy9kZWZhdWx0UmVzdWx0U2VsZWN0b3JcIiksbT1lKFwiLi9tZXRob2RzL2RlZmF1bHRKb2luU2VsZWN0b3JcIikseT1lKFwiLi9tZXRob2RzL2RlZmF1bHRLZXlTZWxlY3RvclwiKSx2PWUoXCIuL21ldGhvZHMvZGVmYXVsdFZhbHVlU2VsZWN0b3JcIiksZz1lKFwiLi9tZXRob2RzL2RlZmF1bHRQYXJlbnRTZWxlY3RvclwiKSx4PWUoXCIuL21ldGhvZHMvZGVmYXVsdEluZGV4U2VsZWN0b3JcIiksRT1lKFwiLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNlbGVjdG9yXCIpLGs9ZShcIi4vbWV0aG9kcy9kZWZhdWx0Q2hpbGRyZW5TZXR0ZXJcIiksUz1lKFwiLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNldHRlclwiKSxJPWUoXCIuL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiKSxSPWUoXCIuL21ldGhvZHMvYXJyYXlDb21wYXJlclwiKSxDPWUoXCIuL21ldGhvZHMvcHJlZGljYXRlQ29tcGFyZXJcIiksTz1lKFwiLi9tZXRob2RzL3Byb3BlcnR5U2V0dGVyXCIpLHc9ZShcIi4vbWV0aG9kcy9wcm9wZXJ0eVNlbGVjdG9yXCIpLFA9ZShcIi4vbWV0aG9kcy9yZWdleHBQcmVkaWNhdGVcIiksQT1lKFwiLi9tZXRob2RzL2RlZmF1bHRFeGlzdHNQcmVkaWNhdGVcIiksXz1lKFwiLi9tZXRob2RzL25vdFByZWRpY2F0ZVwiKSxUPWUoXCIuL21ldGhvZHMvZXF1YWxpdHlQcmVkaWNhdGVcIikscT1lKFwiLi9tZXRob2RzL3NlbGVjdG9yUHJlZGljYXRlXCIpLEI9ZShcIi4vbWV0aG9kcy9ncmVhdGVyQ29tcGFyZXJcIiksRD1lKFwiLi9tZXRob2RzL2xlc3NDb21wYXJlclwiKSxqPWUoXCIuL21ldGhvZHMvaWdub3JlQ2FzZUNvbXBhcmVyXCIpLEw9ZShcIi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCIpLEY9ZShcIi4vY29yZS9leGNlcHRpb25zL091dE9mUmFuZ2VFeGNlcHRpb25cIiksTj1lKFwiLi9jb3JlL2V4Y2VwdGlvbnMvVG9vTWFueUVsZW1lbnRzRXhjZXB0aW9uXCIpLCQ9ZShcIi4vY29yZS9leGNlcHRpb25zL0tleXNGb3JNdWx0aUVsZW1lbnRzRXhjZXB0aW9uXCIpLE09ZShcIi4vY29yZS9leGNlcHRpb25zL05lZWRFeGVjdXRlQmVmb3JlRXhjZXB0aW9uXCIpLHo9ZShcIi4vY29yZS9leGNlcHRpb25zL05vdEVudW1lcmFibGVFeGNlcHRpb25cIiksSD1lKFwiLi9jb3JlL2V4Y2VwdGlvbnMvUGx1Z2luUmVwZWF0RXhjZXB0aW9uXCIpLEc9ZShcIi4vY29yZS9leGNlcHRpb25zL1Byb3BlcnR5RXhwcmVzc2lvbkludmFsaWRFeGNlcHRpb25cIiksVT1lKFwiLi9jb3JlL2V4Y2VwdGlvbnMvSW52YWxpZEZ1bmN0aW9uRXhjZXB0aW9uXCIpLFc9ZShcIi4vY29yZS9leGNlcHRpb25zL05vdEFuY2VzdG9yT2ZFeGNlcHRpb25cIiksSj1lKFwiLi9jb3JlL0lDb21wYXJhYmxlXCIpLFY9ZShcIi4vY29yZS9JRXF1YXRhYmxlXCIpLG49ZnVuY3Rpb24gRW51bWVyYWJsZShlKXtyZXR1cm4gRW51bWVyYWJsZS5hc0VudW1lcmFibGUoZSl9O24uZ2V0RW51bWVyYXRvcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFkoZjMoZSkpfSxuLmdldEl0ZXJhdG9yPWZ1bmN0aW9uKGUpe3JldHVybiBmMyhlKVtTeW1ib2wuaXRlcmF0b3JdKCl9LG4ucmVwZWF0PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUShlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowKX0sbi5yYW5nZT1mdW5jdGlvbihlLHIpe3JldHVybiBuZXcgWihlLHIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjEpfSxuLmJldHdlZW49ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbmV3IFdlKGUsciwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MSl9LG4uZ2VuZXJhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBKZShlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowKX0sbi5lbXB0eT1mdW5jdGlvbigpe3JldHVybiBuZXcgWH0sbi5hc0VudW1lcmFibGU9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZS5hc0VudW1lcmFibGU/ZS5hc0VudW1lcmFibGUociwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dik6bmV3IGVlKGUpfSxuLmZyb209ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5hc0VudW1lcmFibGUoZSxyKX0sbi50b0FycmF5PWZ1bmN0aW9uKGUpe3JldHVybiBiLmlzQXJyYXkoZSk/ZTooZT1mMyhlKSxBcnJheS5mcm9tKGUpKX0sbi50b0RpY3Rpb25hcnk9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZixuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpwLGE9bmV3IF9lLG89MDtlPWYzKGUpO3ZhciB1LHI9Yy5hc1NlbGVjdG9yKHIpLHQ9Yy5hc1NlbGVjdG9yKHQpLG49Yy5hc1NhbWVDb21wYXJlcihuKSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoaS5zKCk7ISh1PWkubigpKS5kb25lOyl7dmFyIGw9dS52YWx1ZSxzPXIobCxvKTtpZihhLmhhcyhzLG4pKXRocm93IG5ldyAkKHMpO2Euc2V0KHMsdChsLG8pLG4pLG8rK319Y2F0Y2goZSl7aS5lKGUpfWZpbmFsbHl7aS5mKCl9cmV0dXJuIGF9LG4udG9Mb29rdXA9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZixuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpwLGE9bmV3IFRlLG89MDtlPWYzKGUpO3ZhciB1LHI9Yy5hc1NlbGVjdG9yKHIpLHQ9Yy5hc1NlbGVjdG9yKHQpLG49Yy5hc1NhbWVDb21wYXJlcihuKSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoaS5zKCk7ISh1PWkubigpKS5kb25lOyl7dmFyIGw9dS52YWx1ZSxzPXIobCxvKTthLmhhcyhzLG4pP2EuZ2V0KHMsbikucHVzaCh0KGwsbykpOmEuc2V0KHMsW3QobCxvKV0sbiksbysrfX1jYXRjaChlKXtpLmUoZSl9ZmluYWxseXtpLmYoKX1yZXR1cm4gYX0sbi50b1ByZU9yZGVyPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbnIoZjMoZSkpfSxuLnRvSW5PcmRlcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGFyKGYzKGUpKX0sbi50b1Bvc3RPcmRlcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG9yKGYzKGUpKX0sbi53aGVyZT1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cztyZXR1cm4gbmV3IHJlKGYzKGUpLHIpfSxuLnNlbGVjdD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZjtyZXR1cm4gbmV3IHRlKGYzKGUpLHIpfSxuLmRpc3RpbmN0PWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpoO3JldHVybiBuZXcgYWUoZjMoZSkscil9LG4uZXhjZXB0PWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmg7cmV0dXJuIG5ldyBvZShmMyhlKSxyLHQpfSxuLnVuaW9uPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmg7cmV0dXJuIG5ldyB1ZShmMyhlKSxyLHQpfSxuLmludGVyc2VjdD1mdW5jdGlvbihlLHIpe3ZhciB0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpoO3JldHVybiBuZXcgaWUoZjMoZSkscix0KX0sbi5vZlR5cGU9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbmV3IGxlKGYzKGUpLHIpfSxuLnNraXA9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbmV3IHNlKGYzKGUpLHIpfSxuLnNraXBXaGlsZT1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cztyZXR1cm4gbmV3IGNlKGYzKGUpLHIpfSxuLnNraXBTYW1lPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpwO3JldHVybiBuZXcgZmUoZjMoZSkscil9LG4uc2tpcFByb3BvcnRpb249ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuIG5ldyBwZShmMyhlKSxyKX0sbi50YWtlPWZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyBoZShmMyhlKSxyKX0sbi50YWtlV2hpbGU9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnM7cmV0dXJuIG5ldyBiZShmMyhlKSxyKX0sbi50YWtlU2FtZT1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cDtyZXR1cm4gbmV3IGRlKGYzKGUpLHIpfSxuLnRha2VQcm9wb3J0aW9uPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowO3JldHVybiBuZXcgbWUoZjMoZSkscil9LG4ub3JkZXJCeT1uLnNvcnRlZD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkO3JldHVybiBuZXcgdmUoZjMoZSkscix0KX0sbi5vcmRlckJ5RGVzY2VuZGluZz1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkO3JldHVybiBuZXcgZ2UoZjMoZSkscix0KX0sbi50aGVuQnk9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZDtyZXR1cm4gZSBpbnN0YW5jZW9mIHllP25ldyB4ZShlLHIsdCk6bmV3IHZlKGYzKGUpLHIsdCl9LG4udGhlbkJ5RGVzY2VuZGluZz1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkO3JldHVybiBlIGluc3RhbmNlb2YgeWU/bmV3IEVlKGUscix0KTpuZXcgZ2UoZjMoZSkscix0KX0sbi5ncm91cEJ5PWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpmLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmYsbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106aSxhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpoO3JldHVybiBuZXcga2UoZjMoZSkscix0LG4sYSl9LG4uc2VsZWN0TWFueT1uLmZsYXRNYXA9bi5mbGF0dGVuPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpmLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmk7cmV0dXJuIG5ldyBTZShmMyhlKSxyLHQpfSxuLmpvaW49ZnVuY3Rpb24oZSxyKXt2YXIgdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bSxuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpmLGE9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOmYsbz01PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06aDtyZXR1cm4gMj09PWFyZ3VtZW50cy5sZW5ndGgmJmIuYXJyYXkkam9pbj9iLmlzQXJyYXkoZSk/Yi5hcnJheSRqb2luLmNhbGwoZSxyKTpiLmFycmF5JGpvaW4uY2FsbCh0aGlzLnRvQXJyYXkoZjMoZSkpLHIpOm5ldyBJZShmMyhlKSxmMyhyKSx0LG4sYSxvKX0sbi5pbm5lckpvaW49bi5qb2luaW5nPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm0sbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZixhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpmLG89NTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOmg7cmV0dXJuIG5ldyBJZShmMyhlKSxmMyhyKSx0LG4sYSxvKX0sbi5sZWZ0Sm9pbj1mdW5jdGlvbihlLHIpe3ZhciB0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTptLG49Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmYsYT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06ZixvPTU8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTpoO3JldHVybiBuZXcgUmUoZjMoZSksZjMociksdCxuLGEsbyl9LG4ucmlnaHRKb2luPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm0sbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZixhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpmLG89NTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOmg7cmV0dXJuIG5ldyBDZShmMyhlKSxmMyhyKSx0LG4sYSxvKX0sbi5ncm91cEpvaW49ZnVuY3Rpb24oZSxyKXt2YXIgdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bSxuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpmLGE9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOmYsbz01PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06aDtyZXR1cm4gbmV3IE9lKGYzKGUpLGYzKHIpLHQsbixhLG8pfSxuLnJldmVyc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB3ZShmMyhlKSl9LG4uemlwPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmk7cmV0dXJuIG5ldyBQZShmMyhlKSxyLHQpfSxuLmV2ZXJ5PWZ1bmN0aW9uKHQsbixhKXtyZXR1cm4gYi5pc0FycmF5KHQpJiZiLmFycmF5JGV2ZXJ5P2IuYXJyYXkkZXZlcnkuY2FsbCh0LG4sYSk6dGhpcy5hbGwodCxmdW5jdGlvbihlLHIpe3JldHVybiBuLmNhbGwoYSxlLHIsdCl9KX0sbi5maW5kPWZ1bmN0aW9uKHQsbixhKXtyZXR1cm4gYi5pc0FycmF5KHQpJiZiLmFycmF5JGZpbmQ/Yi5hcnJheSRmaW5kLmNhbGwodCxuLGEpOnRoaXMuZmlyc3RPckRlZmF1bHQodCx2b2lkIDAsZnVuY3Rpb24oZSxyKXtyZXR1cm4gbi5jYWxsKGEsZSxyLHQpfSl9LG4uaW5jbHVkZXM9ZnVuY3Rpb24oZSxyKXt2YXIgdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MDtyZXR1cm4gYi5pc0FycmF5KGUpJiZiLmFycmF5JGluY2x1ZGVzP2IuYXJyYXkkaW5jbHVkZXMuY2FsbChlLHIsdCk6Yi5pc1N0cmluZyhlKSYmYi5zdHJpbmckaW5jbHVkZXM/Yi5zdHJpbmckaW5jbHVkZXMuY2FsbChlLHIsdCk6dGhpcy5za2lwKGUsdCkuY29udGFpbnMocil9LG4ubWFwPWZ1bmN0aW9uKHQsbixhKXtyZXR1cm4gdGhpcy5zZWxlY3QodCxmdW5jdGlvbihlLHIpe3JldHVybiBuLmNhbGwoYSxlLHIsdCl9KX0sbi5maWx0ZXI9ZnVuY3Rpb24odCxuLGEpe3JldHVybiB0aGlzLndoZXJlKHQsZnVuY3Rpb24oZSxyKXtyZXR1cm4gbi5jYWxsKGEsZSxyLHQpfSl9LG4uY29uY2F0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KDE8cj9yLTE6MCksbj0xO248cjtuKyspdFtuLTFdPWFyZ3VtZW50c1tuXTtyZXR1cm4gbmV3KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KG5lLGIuYXJyYXkkY29uY2F0LmNhbGwoW251bGxdLFtmMyhlKV0sdCkpKX0sbi5wb3A9ZnVuY3Rpb24oZSl7aWYoYi5pc0FycmF5KGUpJiZiLmFycmF5JHBvcClyZXR1cm4gYi5hcnJheSRwb3AuY2FsbChlKTtlPWYzKGUpO3ZhciBuPXRoaXMudG9BcnJheShlKTtyZXR1cm4gYi5zZXRQcm9wZXJ0eShlLFN5bWJvbC5pdGVyYXRvcix1LmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCl7dmFyIHIsdDtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1uLmxlbmd0aC0xLHQ9MDtjYXNlIDI6aWYodDxyKXJldHVybiBlLm5leHQ9NSxuW3RdO2UubmV4dD04O2JyZWFrO2Nhc2UgNTp0KyssZS5uZXh0PTI7YnJlYWs7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpLG5bbi5sZW5ndGgtMV19LG4ucHVzaD1mdW5jdGlvbihlKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheSgxPHI/ci0xOjApLG49MTtuPHI7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07aWYoYi5pc0FycmF5KGUpJiZiLmFycmF5JHB1c2gpcmV0dXJuIGIuYXJyYXkkcHVzaC5hcHBseShlLHQpO2U9ZjMoZSk7dmFyIGE9dGhpcy50b0FycmF5KGUpO3JldHVybiBiLnNldFByb3BlcnR5KGUsU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCl7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLmRlbGVnYXRlWWllbGQoYSxcInQwXCIsMSk7Y2FzZSAxOnJldHVybiBlLmRlbGVnYXRlWWllbGQodCxcInQxXCIsMik7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUyKX0pKSxhLmxlbmd0aCt0Lmxlbmd0aH0sbi5zaGlmdD1mdW5jdGlvbihlKXtpZihiLmlzQXJyYXkoZSkmJmIuYXJyYXkkc2hpZnQpcmV0dXJuIGIuYXJyYXkkc2hpZnQuY2FsbChlKTtlPWYzKGUpO3ZhciBhPSgwLG8uZGVmYXVsdCkoe30sU3ltYm9sLml0ZXJhdG9yLGVbU3ltYm9sLml0ZXJhdG9yXSk7cmV0dXJuIGIuc2V0UHJvcGVydHkoZSxTeW1ib2wuaXRlcmF0b3IsdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKXt2YXIgcix0LG47cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGEpLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTEyO2JyZWFrfWlmKG49bi52YWx1ZSwwPHIpcmV0dXJuIGUubmV4dD05LG47ZS5uZXh0PTk7YnJlYWs7Y2FzZSA5OnIrKztjYXNlIDEwOmUubmV4dD00O2JyZWFrO2Nhc2UgMTI6ZS5uZXh0PTE3O2JyZWFrO2Nhc2UgMTQ6ZS5wcmV2PTE0LGUudDA9ZS5jYXRjaCgyKSx0LmUoZS50MCk7Y2FzZSAxNzpyZXR1cm4gZS5wcmV2PTE3LHQuZigpLGUuZmluaXNoKDE3KTtjYXNlIDIwOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUzLG51bGwsW1syLDE0LDE3LDIwXV0pfSkpLHRoaXMuZmlyc3RPckRlZmF1bHQoYSl9LG4udW5zaGlmdD1mdW5jdGlvbihlKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheSgxPHI/ci0xOjApLG49MTtuPHI7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07aWYoYi5pc0FycmF5KGUpJiZiLmFycmF5JHVuc2hpZnQpcmV0dXJuIGIuYXJyYXkkdW5zaGlmdC5hcHBseShlLHQpO2U9ZjMoZSk7dmFyIGE9dGhpcy50b0FycmF5KGUpO3JldHVybiBiLnNldFByb3BlcnR5KGUsU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCl7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLmRlbGVnYXRlWWllbGQodCxcInQwXCIsMSk7Y2FzZSAxOnJldHVybiBlLmRlbGVnYXRlWWllbGQoYSxcInQxXCIsMik7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWU0KX0pKSx0Lmxlbmd0aCthLmxlbmd0aH0sbi5yZWR1Y2U9ZnVuY3Rpb24obixhLGUpe3JldHVybiBiLmlzQXJyYXkobikmJmIuYXJyYXkkcmVkdWNlP2IuYXJyYXkkcmVkdWNlLmNhbGwobixhLGUpOnRoaXMuYWdncmVnYXRlKG4sZSxmdW5jdGlvbihlLHIsdCl7cmV0dXJuIGEoZSxyLHQsbil9KX0sbi5yZWR1Y2VSaWdodD1mdW5jdGlvbihuLGEsZSl7cmV0dXJuIGIuaXNBcnJheShuKSYmYi5hcnJheSRyZWR1Y2VSaWdodD9iLmFycmF5JHJlZHVjZVJpZ2h0LmNhbGwobixhLGUpOnRoaXMucmV2ZXJzZShuKS5hZ2dyZWdhdGUoZSxmdW5jdGlvbihlLHIsdCl7cmV0dXJuIGEoZSxyLHQsbil9KX0sbi5zb21lPWZ1bmN0aW9uKHQsbixhKXtyZXR1cm4gYi5pc0FycmF5KHQpJiZiLmFycmF5JHNvbWU/Yi5hcnJheSRzb21lLmNhbGwodCxuLGEpOnRoaXMuYW55KHQsZnVuY3Rpb24oZSxyKXtyZXR1cm4gbi5jYWxsKGEsZSxyLHQpfSl9LG4uc2xpY2U9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MS8wO3JldHVybiBuZXcgcWUoZjMoZSkscix0KX0sbi5zcGxpY2U9ZnVuY3Rpb24oZSxyLHQpe2Zvcih2YXIgbixhPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkoMzxhP2EtMzowKSx1PTM7dTxhO3UrKylvW3UtM109YXJndW1lbnRzW3VdO3JldHVybiBiLmlzQXJyYXkoZSkmJmIuYXJyYXkkc3BsaWNlPyhuPWIuYXJyYXkkc3BsaWNlKS5jYWxsLmFwcGx5KG4sW2Uscix0XS5jb25jYXQobykpOm5ldyhGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShCZSxiLmFycmF5JGNvbmNhdC5jYWxsKFtudWxsXSxbZjMoZSkscix0XSxvKSkpfSxuLmZpbGw9ZnVuY3Rpb24oZSxyKXt2YXIgdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MCxuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXToxLzA7cmV0dXJuIG5ldyBEZShmMyhlKSxyLHQsbil9LG4uc29ydD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZDtyZXR1cm4gbmV3IGplKGYzKGUpLHIpfSxuLmNvcHlXaXRoaW49ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MCxuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXToxLzA7cmV0dXJuIG5ldyBMZShmMyhlKSxyLHQsbil9LG4uZGVmYXVsdElmRW1wdHk9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5pc0VtcHR5KGUpP25ldyBBZShyKTp0aGlzLmFzRW51bWVyYWJsZShlKX0sbi5hbGw9bi5hbGxNYXRjaD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cyx0PTA7ZT1mMyhlKTt2YXIgbixyPWMuYXNQcmVkaWNhdGUociksYT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKGEucygpOyEobj1hLm4oKSkuZG9uZTspaWYoIXIobi52YWx1ZSx0KyspKXJldHVybiExfWNhdGNoKGUpe2EuZShlKX1maW5hbGx5e2EuZigpfXJldHVybiEwfSxuLmFueT1uLmFueU1hdGNoPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpzLHQ9MDtlPWYzKGUpO3ZhciBuLHI9Yy5hc1ByZWRpY2F0ZShyKSxhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoYS5zKCk7IShuPWEubigpKS5kb25lOylpZihyKG4udmFsdWUsdCsrKSlyZXR1cm4hMH1jYXRjaChlKXthLmUoZSl9ZmluYWxseXthLmYoKX1yZXR1cm4hMX0sbi5pc0VtcHR5PWZ1bmN0aW9uKGUpe3JldHVybiF0aGlzLmFueShlKX0sbi5zZXF1ZW5jZUVxdWFsPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmg7ZT1mMyhlKSxyPWYzKHIpO2Zvcih2YXIgbixhLHQ9Yy5hc0VxdWFsaXR5Q29tcGFyZXIodCksbz1lW1N5bWJvbC5pdGVyYXRvcl0oKSx1PXJbU3ltYm9sLml0ZXJhdG9yXSgpOyEoKG49by5uZXh0KCkpLmRvbmUmKGE9dS5uZXh0KCkpLmRvbmUpOyl7aWYobi5kb25lIT09YS5kb25lKXJldHVybiExO2lmKCF0KG4udmFsdWUsYS52YWx1ZSkpcmV0dXJuITF9cmV0dXJuITB9LG4uZmlyc3Q9ZnVuY3Rpb24oZSl7aWYoKG49MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnMpPT09cyYmYi5pc1Byb3RvKGUpKXtpZigwPGUubGVuZ3RoKXJldHVybiBlWzBdO3Rocm93IG5ldyBMfXZhciByPTA7ZT1mMyhlKTt2YXIgdCxuPWMuYXNQcmVkaWNhdGUobiksYT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKGEucygpOyEodD1hLm4oKSkuZG9uZTspe3ZhciBvPXQudmFsdWU7aWYobihvLHIrKykpcmV0dXJuIG99fWNhdGNoKGUpe2EuZShlKX1maW5hbGx5e2EuZigpfXRocm93IG5ldyBMfSxuLmZpcnN0T3JEZWZhdWx0PWZ1bmN0aW9uKGUscil7aWYoKGE9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnMpPT09cyYmYi5pc1Byb3RvKGUpKXJldHVybiAwPGUubGVuZ3RoP2VbMF06cjt2YXIgdD0wO2U9ZjMoZSk7dmFyIG4sYT1jLmFzUHJlZGljYXRlKGEpLG89X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2ZvcihvLnMoKTshKG49by5uKCkpLmRvbmU7KXt2YXIgdT1uLnZhbHVlO2lmKGEodSx0KyspKXJldHVybiB1fX1jYXRjaChlKXtvLmUoZSl9ZmluYWxseXtvLmYoKX1yZXR1cm4gcn0sbi5sYXN0PWZ1bmN0aW9uKGUpe2lmKChvPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpzKT09PXMmJmIuaXNQcm90byhlKSl7aWYoMDxlLmxlbmd0aClyZXR1cm4gZVtlLmxlbmd0aC0xXTt0aHJvdyBuZXcgTH12YXIgcix0PSExLG49MDtlPWYzKGUpO3ZhciBhLG89Yy5hc1ByZWRpY2F0ZShvKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShhPXUubigpKS5kb25lOyl7dmFyIGk9YS52YWx1ZTtvKGksbisrKSYmKHI9aSx0PSEwKX19Y2F0Y2goZSl7dS5lKGUpfWZpbmFsbHl7dS5mKCl9aWYodClyZXR1cm4gcjt0aHJvdyBuZXcgTH0sbi5sYXN0T3JEZWZhdWx0PWZ1bmN0aW9uKGUscil7aWYoKHU9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnMpPT09cyYmYi5pc1Byb3RvKGUpKXJldHVybiAwPGUubGVuZ3RoP2VbZS5sZW5ndGgtMV06cjt2YXIgdCxuPSExLGE9MDtlPWYzKGUpO3ZhciBvLHU9Yy5hc1ByZWRpY2F0ZSh1KSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoaS5zKCk7IShvPWkubigpKS5kb25lOyl7dmFyIGw9by52YWx1ZTt1KGwsYSsrKSYmKHQ9bCxuPSEwKX19Y2F0Y2goZSl7aS5lKGUpfWZpbmFsbHl7aS5mKCl9cmV0dXJuIG4/dDpyfSxuLnNpbmdsZT1mdW5jdGlvbihlKXtpZigobz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cyk9PT1zJiZiLmlzUHJvdG8oZSkpe2lmKDE9PT1lLmxlbmd0aClyZXR1cm4gZVswXTt0aHJvdyBuZXcoMD09PWUubGVuZ3RoP0w6Til9dmFyIHIsdD0wLG49MDtlPWYzKGUpO3ZhciBhLG89Yy5hc1ByZWRpY2F0ZShvKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShhPXUubigpKS5kb25lOyl7dmFyIGk9YS52YWx1ZTtpZihvKGksbisrKSYmKHI9aSwyPD0rK3QpKWJyZWFrfX1jYXRjaChlKXt1LmUoZSl9ZmluYWxseXt1LmYoKX1pZigxPT09dClyZXR1cm4gcjt0aHJvdyBuZXcoMD09PXQ/TDpOKX0sbi5zaW5nbGVPckRlZmF1bHQ9ZnVuY3Rpb24oZSxyKXtpZigodT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06cyk9PT1zJiZiLmlzUHJvdG8oZSkpe2lmKDE9PT1lLmxlbmd0aClyZXR1cm4gZVswXTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIHI7dGhyb3cgbmV3IE59dmFyIHQsbj0wLGE9MDtlPWYzKGUpO3ZhciBvLHU9Yy5hc1ByZWRpY2F0ZSh1KSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoaS5zKCk7IShvPWkubigpKS5kb25lOyl7dmFyIGw9by52YWx1ZTtpZih1KGwsYSsrKSYmKHQ9bCwyPD0rK24pKWJyZWFrfX1jYXRjaChlKXtpLmUoZSl9ZmluYWxseXtpLmYoKX1pZigxPT09bilyZXR1cm4gdDtpZigwPT09bilyZXR1cm4gcjt0aHJvdyBuZXcgTn0sbi5jb3VudD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cyx0PTAsbj0wO2U9ZjMoZSk7dmFyIGEscj1jLmFzUHJlZGljYXRlKHIpLG89X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2ZvcihvLnMoKTshKGE9by5uKCkpLmRvbmU7KXIoYS52YWx1ZSxuKyspJiZ0Kyt9Y2F0Y2goZSl7by5lKGUpfWZpbmFsbHl7by5mKCl9cmV0dXJuIHR9LG4ucHJvcG9ydGlvbj1mdW5jdGlvbihlKXtpZigobz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cyk9PT1zKXJldHVybiAxO3ZhciByPTAsdD0wLG49MDtlPWYzKGUpO3ZhciBhLG89Yy5hc1ByZWRpY2F0ZShvKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShhPXUubigpKS5kb25lOylvKGEudmFsdWUsbisrKSYmdCsrLHIrK31jYXRjaChlKXt1LmUoZSl9ZmluYWxseXt1LmYoKX1yZXR1cm4gMD09PXI/MTp0L3J9LG4uYWdncmVnYXRlPWZ1bmN0aW9uKGUscix0KXt2YXIgbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZixhPTA7ZT1mMyhlKTt2YXIgbyxuPWMuYXNTZWxlY3RvcihuKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShvPXUubigpKS5kb25lOylyPXQocixvLnZhbHVlLGErKyl9Y2F0Y2goZSl7dS5lKGUpfWZpbmFsbHl7dS5mKCl9cmV0dXJuIG4ocil9LG4uc3VtPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpmLHQ9MCxuPTA7ZT1mMyhlKTt2YXIgYSxyPWMuYXNTZWxlY3RvcihyKSxvPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3Ioby5zKCk7IShhPW8ubigpKS5kb25lOyl7dmFyIHU9YS52YWx1ZTtpZih0Kz1wYXJzZUZsb2F0KHIodSxuKyspKSxpc05hTih0KSlyZXR1cm4gdH19Y2F0Y2goZSl7by5lKGUpfWZpbmFsbHl7by5mKCl9cmV0dXJuIHR9LG4ucHJvZHVjdD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTEsbj0wO2U9ZjMoZSk7dmFyIGEscj1jLmFzU2VsZWN0b3Iociksbz1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKG8ucygpOyEoYT1vLm4oKSkuZG9uZTspe3ZhciB1PWEudmFsdWU7aWYodCo9cGFyc2VGbG9hdChyKHUsbisrKSksaXNOYU4odCkpcmV0dXJuIHR9fWNhdGNoKGUpe28uZShlKX1maW5hbGx5e28uZigpfXJldHVybiAwPT09bj9OYU46dH0sbi5tYXg9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCxuPSExLGE9ITAsbz0wO2U9ZjMoZSk7dmFyIHUscj1jLmFzU2VsZWN0b3IociksdD1jLmFzQ29tcGFyZXIodCksaT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKGkucygpOyEodT1pLm4oKSkuZG9uZTspdmFyIGw9cihsPXUudmFsdWUsbysrKSxuPSFhJiYwPHQobixsKT9uOmwsYT0hMX1jYXRjaChlKXtpLmUoZSl9ZmluYWxseXtpLmYoKX1pZihhKXRocm93IG5ldyBMO3JldHVybiBufSxuLm1heE9yRGVmYXVsdD1mdW5jdGlvbihlLHIpe3ZhciB0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpmLG49Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmQsYT0hMSxvPSEwLHU9MDtlPWYzKGUpO3ZhciBpLHQ9Yy5hc1NlbGVjdG9yKHQpLG49Yy5hc0NvbXBhcmVyKG4pLGw9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2ZvcihsLnMoKTshKGk9bC5uKCkpLmRvbmU7KXZhciBzPXQocz1pLnZhbHVlLHUrKyksYT0hbyYmMDxuKGEscyk/YTpzLG89ITF9Y2F0Y2goZSl7bC5lKGUpfWZpbmFsbHl7bC5mKCl9cmV0dXJuIG8/cjphfSxuLm1pbj1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkLG49ITEsYT0hMCxvPTA7ZT1mMyhlKTt2YXIgdSxyPWMuYXNTZWxlY3RvcihyKSx0PWMuYXNDb21wYXJlcih0KSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoaS5zKCk7ISh1PWkubigpKS5kb25lOyl2YXIgbD1yKGw9dS52YWx1ZSxvKyspLG49IWEmJnQobixsKTwwP246bCxhPSExfWNhdGNoKGUpe2kuZShlKX1maW5hbGx5e2kuZigpfWlmKGEpdGhyb3cgbmV3IEw7cmV0dXJuIG59LG4ubWluT3JEZWZhdWx0PWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmYsbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZCxhPSExLG89ITAsdT0wO2U9ZjMoZSk7dmFyIGksdD1jLmFzU2VsZWN0b3IodCksbj1jLmFzQ29tcGFyZXIobiksbD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKGwucygpOyEoaT1sLm4oKSkuZG9uZTspdmFyIHM9dChzPWkudmFsdWUsdSsrKSxhPSFvJiZuKGEscyk8MD9hOnMsbz0hMX1jYXRjaChlKXtsLmUoZSl9ZmluYWxseXtsLmYoKX1pZihvKXRocm93IHI7cmV0dXJuIGF9LG4uYXZlcmFnZT1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zix0PTAsbj0wLGE9MDtlPWYzKGUpO3ZhciBvLHI9Yy5hc1NlbGVjdG9yKHIpLHU9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2Zvcih1LnMoKTshKG89dS5uKCkpLmRvbmU7KXt2YXIgaT1vLnZhbHVlO2lmKHQrPXBhcnNlRmxvYXQocihpLGErKykpLGlzTmFOKHQpKXJldHVybiB0O24rK319Y2F0Y2goZSl7dS5lKGUpfWZpbmFsbHl7dS5mKCl9aWYoMCE9PW4pcmV0dXJuIHQvbjt0aHJvdyBuZXcgTH0sbi5jb250YWlucz1mdW5jdGlvbihlLHIpe3ZhciB0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpoO2U9ZjMoZSk7dmFyIG4sdD1jLmFzRXF1YWxpdHlDb21wYXJlcih0KSxhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IoYS5zKCk7IShuPWEubigpKS5kb25lOylpZih0KG4udmFsdWUscikpcmV0dXJuITB9Y2F0Y2goZSl7YS5lKGUpfWZpbmFsbHl7YS5mKCl9cmV0dXJuITF9LG4uZWxlbWVudEF0PWZ1bmN0aW9uKGUscil7aWYoYi5pc1Byb3RvKGUpKXtpZigwPD1yJiZyPGUubGVuZ3RoKXJldHVybiBlW3JdO3Rocm93IG5ldyBGKHIpfWlmKDA8PXIpe3ZhciB0LG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZT1mMyhlKSk7dHJ5e2ZvcihuLnMoKTshKHQ9bi5uKCkpLmRvbmU7KXt2YXIgYT10LnZhbHVlO2lmKDA9PXItLSlyZXR1cm4gYX19Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9fXRocm93IG5ldyBGKHIpfSxuLmVsZW1lbnRBdE9yRGVmYXVsdD1mdW5jdGlvbihlLHIsdCl7aWYoYi5pc1Byb3RvKGUpKXJldHVybiAwPD1yJiZyPGUubGVuZ3RoP2Vbcl06dDtpZigwPD1yKXt2YXIgbixhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGU9ZjMoZSkpO3RyeXtmb3IoYS5zKCk7IShuPWEubigpKS5kb25lOyl7dmFyIG89bi52YWx1ZTtpZigwPT1yLS0pcmV0dXJuIG99fWNhdGNoKGUpe2EuZShlKX1maW5hbGx5e2EuZigpfX1yZXR1cm4gdH0sbi5pbmRleE9mPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjA7aWYoKG89Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmwpPT09bCYmYi5pc0FycmF5KGUpJiZiLmFycmF5JGluZGV4T2YpcmV0dXJuIGIuYXJyYXkkaW5kZXhPZi5jYWxsKGUscix0KTtpZihvPT09bCYmYi5pc1N0cmluZyhlKSYmYi5zdHJpbmckaW5kZXhPZilyZXR1cm4gYi5zdHJpbmckaW5kZXhPZi5jYWxsKGUscix0KTt2YXIgbj0wO2U9ZjMoZSk7dmFyIGEsbz1jLmFzU3RyaWN0RXF1YWxpdHlDb21wYXJlcihvKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShhPXUubigpKS5kb25lOyl7dmFyIGk9YS52YWx1ZTtpZih0PD1uJiZvKGkscikpcmV0dXJuIG47bisrfX1jYXRjaChlKXt1LmUoZSl9ZmluYWxseXt1LmYoKX1yZXR1cm4tMX0sbi5maW5kSW5kZXg9ZnVuY3Rpb24oZSxyLHQpe2lmKGIuaXNBcnJheShlKSYmYi5hcnJheSRmaW5kSW5kZXgpcmV0dXJuIGIuYXJyYXkkZmluZEluZGV4LmNhbGwoZSxyLHQpO3ZhciBuPTA7ZT1mMyhlKSxyPWMuYXNQcmVkaWNhdGUocik7dmFyIGEsbyx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodS5zKCk7IShhPXUubigpKS5kb25lOyl7dmFyIGk9YS52YWx1ZTtpZihvPW4sci5jYWxsKHQsaSxvLGUpKXJldHVybiBuO24rK319Y2F0Y2goZSl7dS5lKGUpfWZpbmFsbHl7dS5mKCl9cmV0dXJuLTF9LG4uZmluZExhc3Q9ZnVuY3Rpb24odCxuLGEpe3JldHVybiB0aGlzLmxhc3RPckRlZmF1bHQodCx2b2lkIDAsZnVuY3Rpb24oZSxyKXtyZXR1cm4gbi5jYWxsKGEsZSxyLHQpfSl9LG4ubGFzdEluZGV4T2Y9ZnVuY3Rpb24oZSxyKXt2YXIgdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MS8wLG49Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmw7aWYobj09PWwmJmIuaXNBcnJheShlKSYmYi5hcnJheSRsYXN0SW5kZXhPZilyZXR1cm4gYi5hcnJheSRsYXN0SW5kZXhPZi5jYWxsKGUscix0KTtpZihuPT09bCYmYi5pc1N0cmluZyhlKSYmYi5zdHJpbmckbGFzdEluZGV4T2YpcmV0dXJuIGIuc3RyaW5nJGxhc3RJbmRleE9mLmNhbGwoZSxyLHQpO2U9dGhpcy50b0FycmF5KGYzKGUpKSxuPWMuYXNTdHJpY3RFcXVhbGl0eUNvbXBhcmVyKG4pLHQ8MCYmKHQ9ZS5sZW5ndGgrdCk7Zm9yKHZhciBhPU1hdGgubWluKHQsZS5sZW5ndGgtMSk7MDw9YTthLS0paWYobihlW2FdLHIpKXJldHVybiBhO3JldHVybi0xfSxuLmZpbmRMYXN0SW5kZXg9ZnVuY3Rpb24oZSxyLHQpe2U9dGhpcy50b0FycmF5KGYzKGUpKSxyPWMuYXNQcmVkaWNhdGUocik7Zm9yKHZhciBuLGE9ZS5sZW5ndGgtMTswPD1hO2EtLSl7dmFyIG89ZVthXTtpZihuPWEsci5jYWxsKHQsbyxuLGUpKXJldHVybiBhfXJldHVybi0xfSxuLmZvckVhY2g9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGEsbz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06SSx1PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp2b2lkIDA7aWYoYi5pc0FycmF5KGUpJiZiLmFycmF5JGZvckVhY2gpYi5hcnJheSRmb3JFYWNoLmNhbGwoZSxvLHUpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIEspe3ZhciBpLGw9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2ZvcihsLnMoKTshKGk9bC5uKCkpLmRvbmU7KXt2YXIgcz1pLnZhbHVlO249cy52YWx1ZSxhPXMua2V5LG8uY2FsbCh1LG4sYSxlKX19Y2F0Y2goZSl7bC5lKGUpfWZpbmFsbHl7bC5mKCl9fWVsc2V7dmFyIGMsZj0wLHA9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZT1mMyhlKSk7dHJ5e2ZvcihwLnMoKTshKGM9cC5uKCkpLmRvbmU7KXt2YXIgaD1jLnZhbHVlO3I9aCx0PWYrKyxvLmNhbGwodSxyLHQsZSl9fWNhdGNoKGUpe3AuZShlKX1maW5hbGx5e3AuZigpfX19LG4uZWFjaD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06STtyZXR1cm4gbmV3IFFlKGYzKGUpLHIpfSxuLmluZGljZXM9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbmV3IFplKGYzKGUpLGYzKHIpKX0sbi5wZXJtdXRhdGlvbj1mdW5jdGlvbihlLHIpe3JldHVybiBuZXcoMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXT9lcjpYZSkoZjMoZSkscil9LG4uY29tYmluYXRpb249ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbmV3KDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0/dHI6cnIpKGYzKGUpLHIpfSxuLmNodW5rPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjA7cmV0dXJuIG5ldyBGZShmMyhlKSxyLHQpfSxuLnNwbGl0PWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTphO3JldHVybiBuZXcgTmUoZjMoZSkscil9LG4ubmVhclNwbGl0PWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTphO3JldHVybiBuZXcgJGUoZjMoZSkscil9LG4ubGVmdFBhZD1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIG5ldyBNZShmMyhlKSxyLHQpfSxuLnJpZ2h0UGFkPWZ1bmN0aW9uKGUscix0KXtyZXR1cm4gbmV3IHplKGYzKGUpLHIsdCl9LG4ucmFuZD1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4gbmV3IEhlKGYzKGUpLHIpfSxuLnJhbmRvbT1mdW5jdGlvbihlKXtlPXRoaXMudG9BcnJheShmMyhlKSk7aWYoZS5sZW5ndGgpcmV0dXJuIGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmUubGVuZ3RoKV07dGhyb3cgbmV3IEx9LG4ucmFuZG9tT3JEZWZhdWx0PWZ1bmN0aW9uKGUscil7ZT10aGlzLnRvQXJyYXkoZjMoZSkpO3JldHVybiBlLmxlbmd0aD9lW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSplLmxlbmd0aCldOnJ9LG4ud2lwZT1mdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cyx0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTowO3JldHVybiBuZXcgR2UoZjMoZSkscix0KX0sbi5uZWFyQnk9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZixuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTppLGE9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOmg7cmV0dXJuIG5ldyBVZShmMyhlKSxyLHQsbixhKX0sbi5jb21iaW5lPWZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpnLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnksbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZixhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpoO3JldHVybiBuZXcgWWUoZjMoZSkscix0LG4sYSl9LG4uc2VwYXJhdGU9ZnVuY3Rpb24oZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOkUsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06djtyZXR1cm4gbmV3IFZlKGYzKGUpLHIsdCl9LG4uaXNTdWI9ZnVuY3Rpb24oZSxyKXt2YXIgdCxuPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpoLGE9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZT1mMyhlKSk7dHJ5e2ZvcihhLnMoKTshKHQ9YS5uKCkpLmRvbmU7KXt2YXIgbz10LnZhbHVlO2lmKCF0aGlzLmNvbnRhaW5zKHIsbyxuKSlyZXR1cm4hMX19Y2F0Y2goZSl7YS5lKGUpfWZpbmFsbHl7YS5mKCl9cmV0dXJuITB9LG4uaXNTdXBlcj1mdW5jdGlvbihlLHIpe3JldHVybiB0aGlzLmlzU3ViKHIsZSwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06aCl9LG4uc3ltbWV0cmljPWZ1bmN0aW9uKGUscil7dmFyIHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmg7cmV0dXJuIG5ldyBLZShmMyhlKSxmMyhyKSx0KX0sbi5jb25mbGljdD1mdW5jdGlvbihlKXt2YXIgcix0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpmLG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmgsYT1bXSxvPTAsdD1jLmFzU2VsZWN0b3IodCksbj1jLmFzRXF1YWxpdHlDb21wYXJlcihuKSx1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGYzKGUpKTt0cnl7Zm9yKHUucygpOyEocj11Lm4oKSkuZG9uZTspe3ZhciBpLGw9dChyLnZhbHVlLG8pLHM9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYSk7dHJ5e2ZvcihzLnMoKTshKGk9cy5uKCkpLmRvbmU7KWlmKG4obCxpLnZhbHVlKSlyZXR1cm4hMH1jYXRjaChlKXtzLmUoZSl9ZmluYWxseXtzLmYoKX1hLnB1c2gobCksbysrfX1jYXRjaChlKXt1LmUoZSl9ZmluYWxseXt1LmYoKX1yZXR1cm4hMX0sYi5kZWZpbmVQcm9wZXJ0eShuLFwiY29tcGFyZXJzXCIsZnVuY3Rpb24oKXtyZXR1cm57Z2V0IGRlZmF1bHQoKXtyZXR1cm4gZH0sZ2V0IGVxdWFsaXR5KCl7cmV0dXJuIGh9LGdldCBzYW1lKCl7cmV0dXJuIHB9LGdldCBzdHJpY3QoKXtyZXR1cm4gbH0sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIFIoZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpoKX0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVybiBDKGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSl9LGdyZWF0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIEIoZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aCl9LGxlc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIEQoZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aCl9LGlnbm9yZUNhc2U6ZnVuY3Rpb24oKXtyZXR1cm4gaigwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Zil9fX0sITAsITApLGIuZGVmaW5lUHJvcGVydHkobixcInNldHRlcnNcIixmdW5jdGlvbigpe3JldHVybntnZXQgY2hpbGRyZW4oKXtyZXR1cm4ga30sZ2V0IHZhbHVlKCl7cmV0dXJuIFN9LHByb3BlcnR5OmZ1bmN0aW9uKGUpe3JldHVybiBPKGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSl9fX0sITAsITApLGIuZGVmaW5lUHJvcGVydHkobixcInNlbGVjdG9yc1wiLGZ1bmN0aW9uKCl7cmV0dXJue2dldCBkZWZhdWx0KCl7cmV0dXJuIGZ9LGdldCBrZXkoKXtyZXR1cm4geX0sZ2V0IHZhbHVlKCl7cmV0dXJuIHZ9LGdldCBjaGlsZHJlbigpe3JldHVybiBFfSxnZXQgcGFyZW50KCl7cmV0dXJuIGd9LGdldCByZXN1bHQoKXtyZXR1cm4gaX0sZ2V0IGpvaW4oKXtyZXR1cm4gbX0sZ2V0IGluZGV4KCl7cmV0dXJuIHh9LHByb3BlcnR5OmZ1bmN0aW9uKGUpe3JldHVybiB3KGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSl9fX0sITAsITApLGIuZGVmaW5lUHJvcGVydHkobixcImFjdGlvbnNcIixmdW5jdGlvbigpe3JldHVybntnZXQgZGVmYXVsdCgpe3JldHVybiBJfX19LCEwLCEwKSxiLmRlZmluZVByb3BlcnR5KG4sXCJwcmVkaWNhdGVzXCIsZnVuY3Rpb24oKXtyZXR1cm57Z2V0IGRlZmF1bHQoKXtyZXR1cm4gc30sZ2V0IGV4aXN0cygpe3JldHVybiBBfSxzZWxlY3RvcjpmdW5jdGlvbihlKXtyZXR1cm4gcShlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpBKX0sbm90OmZ1bmN0aW9uKCl7cmV0dXJuIF8oMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOkEpfSxlcXVhbGl0eTpmdW5jdGlvbihlKXtyZXR1cm4gVChlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpoKX0sc3RyaWN0OmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsbCl9LHNhbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZSxwKX0scmVnZXhwOmZ1bmN0aW9uKGUpe3JldHVybiBQKGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYpfX19LCEwLCEwKSxiLmRlZmluZVByb3BlcnR5KG4sXCJleGNlcHRpb25zXCIsZnVuY3Rpb24oKXtyZXR1cm57Z2V0IE5vU3VjaEVsZW1lbnRzRXhjZXB0aW9uKCl7cmV0dXJuIEx9LGdldCBPdXRPZlJhbmdlRXhjZXB0aW9uKCl7cmV0dXJuIEZ9LGdldCBUb29NYW55RWxlbWVudHNFeGNlcHRpb24oKXtyZXR1cm4gTn0sZ2V0IEtleXNGb3JNdWx0aUVsZW1lbnRzRXhjZXB0aW9uKCl7cmV0dXJuICR9LGdldCBOZWVkRXhlY3V0ZUJlZm9yZUV4Y2VwdGlvbigpe3JldHVybiBNfSxnZXQgUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbigpe3JldHVybiBHfSxnZXQgSW52YWxpZEZ1bmN0aW9uRXhjZXB0aW9uKCl7cmV0dXJuIFV9LGdldCBQbHVnaW5SZXBlYXRFeGNlcHRpb24oKXtyZXR1cm4gSH0sZ2V0IE5vdEFuY2VzdG9yT2ZFeGNlcHRpb24oKXtyZXR1cm4gV319fSwhMCwhMCksYi5kZWZpbmVQcm9wZXJ0eShuLFwiSUNvbXBhcmFibGVcIixmdW5jdGlvbigpe3JldHVybiBKfSwhMCwhMCksYi5kZWZpbmVQcm9wZXJ0eShuLFwiSUVxdWF0YWJsZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIFZ9LCEwLCEwKSxyLmV4cG9ydHM9bixlKFwiLi9wbHVnaW5cIiksZShcIi4vZXh0ZW5kXCIpO3ZhciBZPWUoXCIuL0lFbnVtZXJhdG9yXCIpLEs9KGUoXCIuL0lFbnVtZXJhYmxlXCIpLGUoXCIuL2VudW1lcmFibGVzL0lNYXBFbnVtZXJhYmxlXCIpKSxRPWUoXCIuL2VudW1lcmFibGVzL1JlcGVhdEVudW1lcmFibGVcIiksWj1lKFwiLi9lbnVtZXJhYmxlcy9SYW5nZUVudW1lcmFibGVcIiksWD1lKFwiLi9lbnVtZXJhYmxlcy9FbXB0eUVudW1lcmFibGVcIiksZWU9ZShcIi4vZW51bWVyYWJsZXMvSXRlcmF0b3JFbnVtZXJhYmxlXCIpLHJlPWUoXCIuL2VudW1lcmFibGVzL1doZXJlRW51bWVyYWJsZVwiKSx0ZT1lKFwiLi9lbnVtZXJhYmxlcy9TZWxlY3RFbnVtZXJhYmxlXCIpLG5lPWUoXCIuL2VudW1lcmFibGVzL0NvbmNhdEVudW1lcmFibGVcIiksYWU9ZShcIi4vZW51bWVyYWJsZXMvRGlzdGluY3RFbnVtZXJhYmxlXCIpLG9lPWUoXCIuL2VudW1lcmFibGVzL0V4Y2VwdEVudW1lcmFibGVcIiksdWU9ZShcIi4vZW51bWVyYWJsZXMvVW5pb25FbnVtZXJhYmxlXCIpLGllPWUoXCIuL2VudW1lcmFibGVzL0ludGVyc2VjdEVudW1lcmFibGVcIiksbGU9ZShcIi4vZW51bWVyYWJsZXMvT2ZUeXBlRW51bWVyYWJsZVwiKSxzZT1lKFwiLi9lbnVtZXJhYmxlcy9Ta2lwRW51bWVyYWJsZVwiKSxjZT1lKFwiLi9lbnVtZXJhYmxlcy9Ta2lwV2hpbGVFbnVtZXJhYmxlXCIpLGZlPWUoXCIuL2VudW1lcmFibGVzL1NraXBTYW1lRW51bWVyYWJsZVwiKSxwZT1lKFwiLi9lbnVtZXJhYmxlcy9Ta2lwUHJvcG9ydGlvbkVudW1lcmFibGVcIiksaGU9ZShcIi4vZW51bWVyYWJsZXMvVGFrZUVudW1lcmFibGVcIiksYmU9ZShcIi4vZW51bWVyYWJsZXMvVGFrZVdoaWxlRW51bWVyYWJsZVwiKSxkZT1lKFwiLi9lbnVtZXJhYmxlcy9UYWtlU2FtZUVudW1lcmFibGVcIiksbWU9ZShcIi4vZW51bWVyYWJsZXMvVGFrZVByb3BvcnRpb25FbnVtZXJhYmxlXCIpLHllPWUoXCIuL2VudW1lcmFibGVzL0lPcmRlcmVkRW51bWVyYWJsZVwiKSx2ZT1lKFwiLi9lbnVtZXJhYmxlcy9PcmRlckJ5RW51bWVyYWJsZVwiKSxnZT1lKFwiLi9lbnVtZXJhYmxlcy9PcmRlckJ5RGVzY2VuZGluZ0VudW1lcmFibGVcIikseGU9ZShcIi4vZW51bWVyYWJsZXMvVGhlbkJ5RW51bWVyYWJsZVwiKSxFZT1lKFwiLi9lbnVtZXJhYmxlcy9UaGVuQnlEZXNjZW5kaW5nRW51bWVyYWJsZVwiKSxrZT1lKFwiLi9lbnVtZXJhYmxlcy9Hcm91cGVkRW51bWVyYWJsZVwiKSxTZT1lKFwiLi9lbnVtZXJhYmxlcy9TZWxlY3RNYW55RW51bWVyYWJsZVwiKSxJZT1lKFwiLi9lbnVtZXJhYmxlcy9Kb2luRW51bWVyYWJsZVwiKSxSZT1lKFwiLi9lbnVtZXJhYmxlcy9MZWZ0Sm9pbkVudW1lcmFibGVcIiksQ2U9ZShcIi4vZW51bWVyYWJsZXMvUmlnaHRKb2luRW51bWVyYWJsZVwiKSxPZT1lKFwiLi9lbnVtZXJhYmxlcy9Hcm91cEpvaW5FbnVtZXJhYmxlXCIpLHdlPWUoXCIuL2VudW1lcmFibGVzL1JldmVyc2VFbnVtZXJhYmxlXCIpLFBlPWUoXCIuL2VudW1lcmFibGVzL1ppcEVudW1lcmFibGVcIiksQWU9ZShcIi4vZW51bWVyYWJsZXMvU2luZ2xlRW51bWVyYWJsZVwiKSxfZT1lKFwiLi9lbnVtZXJhYmxlcy9EaWN0aW9uYXJ5XCIpLFRlPWUoXCIuL2VudW1lcmFibGVzL0xvb2t1cFwiKSxxZT1lKFwiLi9lbnVtZXJhYmxlcy9TbGljZUVudW1lcmFibGVcIiksQmU9ZShcIi4vZW51bWVyYWJsZXMvU3BsaWNlRW51bWVyYWJsZVwiKSxEZT1lKFwiLi9lbnVtZXJhYmxlcy9GaWxsRW51bWVyYWJsZVwiKSxqZT1lKFwiLi9lbnVtZXJhYmxlcy9Tb3J0RW51bWVyYWJsZVwiKSxMZT1lKFwiLi9lbnVtZXJhYmxlcy9Db3B5V2l0aGluRW51bWVyYWJsZVwiKSxGZT1lKFwiLi9lbnVtZXJhYmxlcy9DaHVua0VudW1lcmFibGVcIiksTmU9ZShcIi4vZW51bWVyYWJsZXMvU3BsaXRFbnVtZXJhYmxlXCIpLCRlPWUoXCIuL2VudW1lcmFibGVzL05lYXJTcGxpdEVudW1lcmFibGVcIiksTWU9ZShcIi4vZW51bWVyYWJsZXMvTGVmdFBhZEVudW1lcmFibGVcIiksemU9ZShcIi4vZW51bWVyYWJsZXMvUmlnaHRQYWRFbnVtZXJhYmxlXCIpLEhlPWUoXCIuL2VudW1lcmFibGVzL1JhbmRFbnVtZXJhYmxlXCIpLEdlPWUoXCIuL2VudW1lcmFibGVzL1dpcGVFbnVtZXJhYmxlXCIpLFVlPWUoXCIuL2VudW1lcmFibGVzL05lYXJHcm91cGVkRW51bWVyYWJsZVwiKSxXZT1lKFwiLi9lbnVtZXJhYmxlcy9CZXR3ZWVuRW51bWVyYWJsZVwiKSxKZT1lKFwiLi9lbnVtZXJhYmxlcy9HZW5lcmF0ZUVudW1lcmFibGVcIiksVmU9ZShcIi4vZW51bWVyYWJsZXMvU2VwYXJhdGVFbnVtZXJhYmxlXCIpLFllPWUoXCIuL2VudW1lcmFibGVzL0NvbWJpbmVFbnVtZXJhYmxlXCIpLEtlPWUoXCIuL2VudW1lcmFibGVzL1N5bW1ldHJpY0VudW1lcmFibGVcIiksUWU9ZShcIi4vZW51bWVyYWJsZXMvRWFjaEVudW1lcmFibGVcIiksWmU9ZShcIi4vZW51bWVyYWJsZXMvSW5kaWNlc0VudW1lcmFibGVcIiksWGU9ZShcIi4vZW51bWVyYWJsZXMvUGVybXV0YXRpb25FbnVtZXJhYmxlXCIpLGVyPWUoXCIuL2VudW1lcmFibGVzL1Blcm11dGF0aW9uUmVwZWF0YWJsZUVudW1lcmFibGVcIikscnI9ZShcIi4vZW51bWVyYWJsZXMvQ29tYmluYXRpb25FbnVtZXJhYmxlXCIpLHRyPWUoXCIuL2VudW1lcmFibGVzL0NvbWJpbmF0aW9uUmVwZWF0YWJsZUVudW1lcmFibGVcIiksbnI9ZShcIi4vZW51bWVyYWJsZXMvUHJlT3JkZXJUcmVlXCIpLGFyPWUoXCIuL2VudW1lcmFibGVzL0luT3JkZXJUcmVlXCIpLG9yPWUoXCIuL2VudW1lcmFibGVzL1Bvc3RPcmRlclRyZWVcIil9LHtcIi4vSUVudW1lcmFibGVcIjozMixcIi4vSUVudW1lcmF0b3JcIjozMyxcIi4vY29yZS9JQ29tcGFyYWJsZVwiOjM0LFwiLi9jb3JlL0lFcXVhdGFibGVcIjozNSxcIi4vY29yZS9jb3JlXCI6MzYsXCIuL2NvcmUvZXhjZXB0aW9ucy9JbnZhbGlkRnVuY3Rpb25FeGNlcHRpb25cIjozOCxcIi4vY29yZS9leGNlcHRpb25zL0tleXNGb3JNdWx0aUVsZW1lbnRzRXhjZXB0aW9uXCI6MzksXCIuL2NvcmUvZXhjZXB0aW9ucy9OZWVkRXhlY3V0ZUJlZm9yZUV4Y2VwdGlvblwiOjQwLFwiLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIjo0MSxcIi4vY29yZS9leGNlcHRpb25zL05vdEFuY2VzdG9yT2ZFeGNlcHRpb25cIjo0MixcIi4vY29yZS9leGNlcHRpb25zL05vdEVudW1lcmFibGVFeGNlcHRpb25cIjo0MyxcIi4vY29yZS9leGNlcHRpb25zL091dE9mUmFuZ2VFeGNlcHRpb25cIjo0NCxcIi4vY29yZS9leGNlcHRpb25zL1BsdWdpblJlcGVhdEV4Y2VwdGlvblwiOjQ1LFwiLi9jb3JlL2V4Y2VwdGlvbnMvUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvblwiOjQ2LFwiLi9jb3JlL2V4Y2VwdGlvbnMvVG9vTWFueUVsZW1lbnRzRXhjZXB0aW9uXCI6NDcsXCIuL2VudW1lcmFibGVzL0JldHdlZW5FbnVtZXJhYmxlXCI6NDksXCIuL2VudW1lcmFibGVzL0NodW5rRW51bWVyYWJsZVwiOjUzLFwiLi9lbnVtZXJhYmxlcy9Db21iaW5hdGlvbkVudW1lcmFibGVcIjo1NCxcIi4vZW51bWVyYWJsZXMvQ29tYmluYXRpb25SZXBlYXRhYmxlRW51bWVyYWJsZVwiOjU1LFwiLi9lbnVtZXJhYmxlcy9Db21iaW5lRW51bWVyYWJsZVwiOjU2LFwiLi9lbnVtZXJhYmxlcy9Db25jYXRFbnVtZXJhYmxlXCI6NTcsXCIuL2VudW1lcmFibGVzL0NvcHlXaXRoaW5FbnVtZXJhYmxlXCI6NTgsXCIuL2VudW1lcmFibGVzL0RpY3Rpb25hcnlcIjo2MSxcIi4vZW51bWVyYWJsZXMvRGlzdGluY3RFbnVtZXJhYmxlXCI6NjIsXCIuL2VudW1lcmFibGVzL0VhY2hFbnVtZXJhYmxlXCI6NjMsXCIuL2VudW1lcmFibGVzL0VtcHR5RW51bWVyYWJsZVwiOjY0LFwiLi9lbnVtZXJhYmxlcy9FeGNlcHRFbnVtZXJhYmxlXCI6NjYsXCIuL2VudW1lcmFibGVzL0ZpbGxFbnVtZXJhYmxlXCI6NjcsXCIuL2VudW1lcmFibGVzL0dlbmVyYXRlRW51bWVyYWJsZVwiOjY4LFwiLi9lbnVtZXJhYmxlcy9Hcm91cEpvaW5FbnVtZXJhYmxlXCI6NzAsXCIuL2VudW1lcmFibGVzL0dyb3VwZWRFbnVtZXJhYmxlXCI6NzEsXCIuL2VudW1lcmFibGVzL0lNYXBFbnVtZXJhYmxlXCI6NzUsXCIuL2VudW1lcmFibGVzL0lPcmRlcmVkRW51bWVyYWJsZVwiOjc2LFwiLi9lbnVtZXJhYmxlcy9Jbk9yZGVyVHJlZVwiOjc5LFwiLi9lbnVtZXJhYmxlcy9JbmRpY2VzRW51bWVyYWJsZVwiOjgwLFwiLi9lbnVtZXJhYmxlcy9JbnRlcnNlY3RFbnVtZXJhYmxlXCI6ODEsXCIuL2VudW1lcmFibGVzL0l0ZXJhdG9yRW51bWVyYWJsZVwiOjgzLFwiLi9lbnVtZXJhYmxlcy9Kb2luRW51bWVyYWJsZVwiOjg0LFwiLi9lbnVtZXJhYmxlcy9MZWZ0Sm9pbkVudW1lcmFibGVcIjo4NSxcIi4vZW51bWVyYWJsZXMvTGVmdFBhZEVudW1lcmFibGVcIjo4NixcIi4vZW51bWVyYWJsZXMvTG9va3VwXCI6ODcsXCIuL2VudW1lcmFibGVzL05lYXJHcm91cGVkRW51bWVyYWJsZVwiOjg5LFwiLi9lbnVtZXJhYmxlcy9OZWFyU3BsaXRFbnVtZXJhYmxlXCI6OTAsXCIuL2VudW1lcmFibGVzL09mVHlwZUVudW1lcmFibGVcIjo5NCxcIi4vZW51bWVyYWJsZXMvT3JkZXJCeURlc2NlbmRpbmdFbnVtZXJhYmxlXCI6OTUsXCIuL2VudW1lcmFibGVzL09yZGVyQnlFbnVtZXJhYmxlXCI6OTYsXCIuL2VudW1lcmFibGVzL1Blcm11dGF0aW9uRW51bWVyYWJsZVwiOjk5LFwiLi9lbnVtZXJhYmxlcy9QZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlXCI6MTAwLFwiLi9lbnVtZXJhYmxlcy9Qb3N0T3JkZXJUcmVlXCI6MTAyLFwiLi9lbnVtZXJhYmxlcy9QcmVPcmRlclRyZWVcIjoxMDQsXCIuL2VudW1lcmFibGVzL1JhbmRFbnVtZXJhYmxlXCI6MTA3LFwiLi9lbnVtZXJhYmxlcy9SYW5nZUVudW1lcmFibGVcIjoxMDgsXCIuL2VudW1lcmFibGVzL1JlcGVhdEVudW1lcmFibGVcIjoxMDksXCIuL2VudW1lcmFibGVzL1JldmVyc2VFbnVtZXJhYmxlXCI6MTEwLFwiLi9lbnVtZXJhYmxlcy9SaWdodEpvaW5FbnVtZXJhYmxlXCI6MTExLFwiLi9lbnVtZXJhYmxlcy9SaWdodFBhZEVudW1lcmFibGVcIjoxMTIsXCIuL2VudW1lcmFibGVzL1NlbGVjdEVudW1lcmFibGVcIjoxMTMsXCIuL2VudW1lcmFibGVzL1NlbGVjdE1hbnlFbnVtZXJhYmxlXCI6MTE0LFwiLi9lbnVtZXJhYmxlcy9TZXBhcmF0ZUVudW1lcmFibGVcIjoxMTUsXCIuL2VudW1lcmFibGVzL1NpbmdsZUVudW1lcmFibGVcIjoxMTgsXCIuL2VudW1lcmFibGVzL1NraXBFbnVtZXJhYmxlXCI6MTE5LFwiLi9lbnVtZXJhYmxlcy9Ta2lwUHJvcG9ydGlvbkVudW1lcmFibGVcIjoxMjAsXCIuL2VudW1lcmFibGVzL1NraXBTYW1lRW51bWVyYWJsZVwiOjEyMSxcIi4vZW51bWVyYWJsZXMvU2tpcFdoaWxlRW51bWVyYWJsZVwiOjEyMixcIi4vZW51bWVyYWJsZXMvU2xpY2VFbnVtZXJhYmxlXCI6MTIzLFwiLi9lbnVtZXJhYmxlcy9Tb3J0RW51bWVyYWJsZVwiOjEyNCxcIi4vZW51bWVyYWJsZXMvU3BsaWNlRW51bWVyYWJsZVwiOjEyNSxcIi4vZW51bWVyYWJsZXMvU3BsaXRFbnVtZXJhYmxlXCI6MTI2LFwiLi9lbnVtZXJhYmxlcy9TeW1tZXRyaWNFbnVtZXJhYmxlXCI6MTI4LFwiLi9lbnVtZXJhYmxlcy9UYWtlRW51bWVyYWJsZVwiOjEyOSxcIi4vZW51bWVyYWJsZXMvVGFrZVByb3BvcnRpb25FbnVtZXJhYmxlXCI6MTMwLFwiLi9lbnVtZXJhYmxlcy9UYWtlU2FtZUVudW1lcmFibGVcIjoxMzEsXCIuL2VudW1lcmFibGVzL1Rha2VXaGlsZUVudW1lcmFibGVcIjoxMzIsXCIuL2VudW1lcmFibGVzL1RoZW5CeURlc2NlbmRpbmdFbnVtZXJhYmxlXCI6MTMzLFwiLi9lbnVtZXJhYmxlcy9UaGVuQnlFbnVtZXJhYmxlXCI6MTM0LFwiLi9lbnVtZXJhYmxlcy9VbmlvbkVudW1lcmFibGVcIjoxMzYsXCIuL2VudW1lcmFibGVzL1doZXJlRW51bWVyYWJsZVwiOjEzNyxcIi4vZW51bWVyYWJsZXMvV2lwZUVudW1lcmFibGVcIjoxMzgsXCIuL2VudW1lcmFibGVzL1ppcEVudW1lcmFibGVcIjoxMzksXCIuL2V4dGVuZFwiOjE0MCxcIi4vbWV0aG9kcy9hcnJheUNvbXBhcmVyXCI6MTQ1LFwiLi9tZXRob2RzL2RlZmF1bHRBY3Rpb25cIjoxNDYsXCIuL21ldGhvZHMvZGVmYXVsdENoaWxkcmVuU2VsZWN0b3JcIjoxNDcsXCIuL21ldGhvZHMvZGVmYXVsdENoaWxkcmVuU2V0dGVyXCI6MTQ4LFwiLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiOjE0OSxcIi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vbWV0aG9kcy9kZWZhdWx0RXhpc3RzUHJlZGljYXRlXCI6MTUxLFwiLi9tZXRob2RzL2RlZmF1bHRGYWxzZVByZWRpY2F0ZVwiOjE1MixcIi4vbWV0aG9kcy9kZWZhdWx0SW5kZXhTZWxlY3RvclwiOjE1MyxcIi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCI6MTU0LFwiLi9tZXRob2RzL2RlZmF1bHRLZXlTZWxlY3RvclwiOjE1NSxcIi4vbWV0aG9kcy9kZWZhdWx0UGFyZW50U2VsZWN0b3JcIjoxNTYsXCIuL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiOjE1NyxcIi4vbWV0aG9kcy9kZWZhdWx0UmVzdWx0U2VsZWN0b3JcIjoxNTgsXCIuL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuL21ldGhvZHMvZGVmYXVsdFN0cmljdEVxdWFsaXR5Q29tcGFyZXJcIjoxNjEsXCIuL21ldGhvZHMvZGVmYXVsdFZhbHVlU2VsZWN0b3JcIjoxNjIsXCIuL21ldGhvZHMvZGVmYXVsdFZhbHVlU2V0dGVyXCI6MTYzLFwiLi9tZXRob2RzL2VxdWFsaXR5UHJlZGljYXRlXCI6MTY1LFwiLi9tZXRob2RzL2dyZWF0ZXJDb21wYXJlclwiOjE2NixcIi4vbWV0aG9kcy9pZ25vcmVDYXNlQ29tcGFyZXJcIjoxNjcsXCIuL21ldGhvZHMvbGVzc0NvbXBhcmVyXCI6MTY4LFwiLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL21ldGhvZHMvbm90UHJlZGljYXRlXCI6MTcwLFwiLi9tZXRob2RzL3ByZWRpY2F0ZUNvbXBhcmVyXCI6MTcxLFwiLi9tZXRob2RzL3Byb3BlcnR5U2VsZWN0b3JcIjoxNzMsXCIuL21ldGhvZHMvcHJvcGVydHlTZXR0ZXJcIjoxNzQsXCIuL21ldGhvZHMvcmVnZXhwUHJlZGljYXRlXCI6MTc1LFwiLi9tZXRob2RzL3NlbGVjdG9yUHJlZGljYXRlXCI6MTc3LFwiLi9wbHVnaW5cIjoxNzksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI6OCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMzI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSksbj1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3dyYXBOYXRpdmVTdXBlclwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsYS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGEuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGMuZGVmYXVsdCkodGhpcyxyKX19dmFyIGY9ZShcIi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCIpLGg9ZShcIi4vbWV0aG9kcy9kZWZhdWx0RmFsc2VQcmVkaWNhdGVcIiksYj1lKFwiLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiKSxkPWUoXCIuL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiKSxtPWUoXCIuL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIikseT1lKFwiLi9tZXRob2RzL2RlZmF1bHRTdHJpY3RFcXVhbGl0eUNvbXBhcmVyXCIpLHY9ZShcIi4vbWV0aG9kcy9kZWZhdWx0Q29tcGFyZXJcIiksZz1lKFwiLi9tZXRob2RzL2RlZmF1bHRSZXN1bHRTZWxlY3RvclwiKSx4PWUoXCIuL21ldGhvZHMvZGVmYXVsdEpvaW5TZWxlY3RvclwiKSxFPWUoXCIuL21ldGhvZHMvZGVmYXVsdEtleVNlbGVjdG9yXCIpLGs9ZShcIi4vbWV0aG9kcy9kZWZhdWx0VmFsdWVTZWxlY3RvclwiKSxTPWUoXCIuL21ldGhvZHMvZGVmYXVsdFBhcmVudFNlbGVjdG9yXCIpLEk9ZShcIi4vbWV0aG9kcy9kZWZhdWx0Q2hpbGRyZW5TZWxlY3RvclwiKSxSPWUoXCIuL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiKSxDPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmUHJveHkudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKSxPPVwic3RyaW5nXCIsdz1cImFycmF5XCIsUD1cImVudW1lcmFibGVcIixBPVwib2JqZWN0XCIsbj1mdW5jdGlvbihlKXsoMCxzLmRlZmF1bHQpKElFbnVtZXJhYmxlLGUpO3ZhciBhPV9jcmVhdGVTdXBlcihJRW51bWVyYWJsZSk7ZnVuY3Rpb24gSUVudW1lcmFibGUoZSl7KDAsdS5kZWZhdWx0KSh0aGlzLElFbnVtZXJhYmxlKTt2YXIgcj1hLmNhbGwodGhpcyksdD1mLmdldFR5cGUoZSksbj1lIGluc3RhbmNlb2YgSUVudW1lcmFibGU/UDp0PT09Zi50eXBlcy5TdHJpbmc/Tzp0PT09Zi50eXBlcy5BcnJheXx8dC5lbmRzV2l0aChmLnR5cGVzLkl0ZXJhdG9yKT93OkE7cmV0dXJuIGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShyKSxTeW1ib2wudG9TdHJpbmdUYWcsXCJJRW51bWVyYWJsZVwiKSxmLmRlZmluZVByb3BlcnRpZXMoKDAsbC5kZWZhdWx0KShyKSx7Z2V0UHJvdG9UeXBlOmZ1bmN0aW9uKCl7cmV0dXJuIG49PT1QP2UuZ2V0UHJvdG9UeXBlKCk6bn0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gbj09PU8/dGhpcy5qb2luKFwiXCIpOm4hPT13JiZuPT09UD9lLnRvU3RyaW5nLmNhbGwodGhpcyk6XCJbXCIrdGhpcy5qb2luKFwiLFwiKStcIl1cIn0sdG9Qcm90bzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFByb3RvVHlwZSgpPT09Tz90aGlzLmpvaW4oXCJcIik6dGhpcy5nZXRQcm90b1R5cGUoKT09PXc/dGhpcy50b0FycmF5KCk6dGhpcy50b09iamVjdCgpfX0pLEM/KDAsYy5kZWZhdWx0KShyLG5ldyBQcm94eSgoMCxsLmRlZmF1bHQpKHIpLHtnZXQ6ZnVuY3Rpb24oZSxyKXtyZXR1cm5cInN5bWJvbFwiIT09KDAsby5kZWZhdWx0KShyKSYmIWlzTmFOKHIpJiZmLmlzSW50ZWdlcihyKSYmMDw9ciYmIShyIGluIGUpP2UuZWxlbWVudEF0T3JEZWZhdWx0KHIpOlwibGVuZ3RoXCI9PT1yfHxcInNpemVcIj09PXI/ZS5jb3VudCgpOmVbcl19LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihlLHIpe2lmKFwic3ltYm9sXCIhPT0oMCxvLmRlZmF1bHQpKHIpJiYhaXNOYU4ocikmJmYuaXNJbnRlZ2VyKHIpJiYwPD1yJiYhKHIgaW4gZSkpcmV0dXJue2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmVsZW1lbnRBdE9yRGVmYXVsdChyKX19O2lmKFwibGVuZ3RoXCIhPT1yJiZcInNpemVcIiE9PXIpcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKTt2YXIgdD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsXCJsZW5ndGhcIik7cmV0dXJuIHQudmFsdWU9ZS5jb3VudCgpLHR9LG93bktleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIF8udG9BcnJheShfLnJhbmdlKDAsZS5jb3VudCgpKS5zZWxlY3QoZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZyhlKX0pLmNvbmNhdChSZWZsZWN0Lm93bktleXMoZSkpKX19KSk6cn1yZXR1cm4oMCxpLmRlZmF1bHQpKElFbnVtZXJhYmxlLFt7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY291bnQoKX19LHtrZXk6XCJzaXplXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY291bnQoKX19LHtrZXk6XCJnZXRFbnVtZXJhdG9yXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5nZXRFbnVtZXJhdG9yKHRoaXMpfX0se2tleTpcImdldEl0ZXJhdG9yXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5nZXRJdGVyYXRvcih0aGlzKX19LHtrZXk6XCJ3aGVyZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ud2hlcmUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06cCl9fSx7a2V5Olwic2VsZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5zZWxlY3QodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Yil9fSx7a2V5OlwiZWxlbWVudEF0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uZWxlbWVudEF0KHRoaXMsZSl9fSx7a2V5OlwiZWxlbWVudEF0T3JEZWZhdWx0XCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5lbGVtZW50QXRPckRlZmF1bHQodGhpcyxlLHIpfX0se2tleTpcImFzRW51bWVyYWJsZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTprO3JldHVybiBmLmlzVW5kZWZpbmVkKGUpP3RoaXM6Xy5hc0VudW1lcmFibGUoZSxyKX19LHtrZXk6XCJjb25jYXRcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKXJbdF09YXJndW1lbnRzW3RdO3JldHVybiBfLmNvbmNhdC5hcHBseShfLFt0aGlzXS5jb25jYXQocikpfX0se2tleTpcImRpc3RpbmN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5kaXN0aW5jdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTptKX19LHtrZXk6XCJleGNlcHRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gXy5leGNlcHQodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX19LHtrZXk6XCJ1bmlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLnVuaW9uKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSl9fSx7a2V5OlwiaW50ZXJzZWN0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uaW50ZXJzZWN0KHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSl9fSx7a2V5Olwib2ZUeXBlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8ub2ZUeXBlKHRoaXMsZSl9fSx7a2V5Olwic2tpcFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLnNraXAodGhpcyxlKX19LHtrZXk6XCJza2lwV2hpbGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNraXBXaGlsZSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJza2lwU2FtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uc2tpcFNhbWUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZCl9fSx7a2V5Olwic2tpcFByb3BvcnRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNraXBQcm9wb3J0aW9uKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjApfX0se2tleTpcInRha2VcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gXy50YWtlKHRoaXMsZSl9fSx7a2V5OlwidGFrZVdoaWxlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy50YWtlV2hpbGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06cCl9fSx7a2V5OlwidGFrZVNhbWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnRha2VTYW1lKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmQpfX0se2tleTpcInRha2VQcm9wb3J0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy50YWtlUHJvcG9ydGlvbih0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowKX19LHtrZXk6XCJzb3J0ZWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNvcnRlZCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2KX19LHtrZXk6XCJvcmRlckJ5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5vcmRlckJ5KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnYpfX0se2tleTpcIm9yZGVyQnlEZXNjZW5kaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5vcmRlckJ5RGVzY2VuZGluZyh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2KX19LHtrZXk6XCJncm91cEJ5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5ncm91cEJ5KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmcsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm0pfX0se2tleTpcInNlbGVjdE1hbnlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNlbGVjdE1hbnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zyl9fSx7a2V5OlwiZmxhdE1hcFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uZmxhdE1hcCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpnKX19LHtrZXk6XCJmbGF0dGVuXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5mbGF0dGVuKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmcpfX0se2tleTpcImpvaW5cIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06eCx0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiLG49Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmIsYT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bTtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/Xy5qb2luKHRoaXMsZSk6Xy5qb2luKHRoaXMsZSxyLHQsbixhKX19LHtrZXk6XCJqb2luaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uam9pbmluZyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOngsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmIsNDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOm0pfX0se2tleTpcImlubmVySm9pblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmpvaW4odGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp4LDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiLDM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpiLDQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTptKX19LHtrZXk6XCJsZWZ0Sm9pblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmxlZnRKb2luKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06eCwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YiwzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Yiw0PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bSl9fSx7a2V5OlwicmlnaHRKb2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8ucmlnaHRKb2luKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06eCwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YiwzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Yiw0PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bSl9fSx7a2V5OlwiZ3JvdXBKb2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uZ3JvdXBKb2luKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06eCwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YiwzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Yiw0PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bSl9fSx7a2V5OlwiZGVmYXVsdElmRW1wdHlcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gXy5kZWZhdWx0SWZFbXB0eSh0aGlzLGUpfX0se2tleTpcImFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uYWxsKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnApfX0se2tleTpcImFsbE1hdGNoXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5hbGxNYXRjaCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJhbnlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLmFueSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJhbnlNYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uYW55TWF0Y2godGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06cCl9fSx7a2V5OlwiaXNFbXB0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uaXNFbXB0eSh0aGlzKX19LHtrZXk6XCJzZXF1ZW5jZUVxdWFsXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uc2VxdWVuY2VFcXVhbCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcImZpcnN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5maXJzdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJmaXJzdE9yRGVmYXVsdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmZpcnN0T3JEZWZhdWx0KHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06cCl9fSx7a2V5OlwibGFzdFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ubGFzdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJsYXN0T3JEZWZhdWx0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8ubGFzdE9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnApfX0se2tleTpcInNpbmdsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uc2luZ2xlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnApfX0se2tleTpcInNpbmdsZU9yRGVmYXVsdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLnNpbmdsZU9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnApfX0se2tleTpcImNvdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5jb3VudCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwKX19LHtrZXk6XCJzdW1cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnN1bSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiKX19LHtrZXk6XCJwcm9kdWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5wcm9kdWN0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIpfX0se2tleTpcIm1heFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ubWF4KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnYpfX0se2tleTpcIm1heE9yRGVmYXVsdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLm1heE9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnYpfX0se2tleTpcIm1pblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ubWluKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnYpfX0se2tleTpcIm1pbk9yRGVmYXVsdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLm1pbk9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnYpfX0se2tleTpcImF2ZXJhZ2VcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLmF2ZXJhZ2UodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Yil9fSx7a2V5OlwiYWdncmVnYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5hZ2dyZWdhdGUodGhpcyxlLHIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIpfX0se2tleTpcImNvbnRhaW5zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uY29udGFpbnModGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX19LHtrZXk6XCJpbmRleE9mXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uaW5kZXhPZih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnkpfX0se2tleTpcImZpbmRJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKGUscil7cmV0dXJuIF8uZmluZEluZGV4KHRoaXMsZSxyKX19LHtrZXk6XCJsYXN0SW5kZXhPZlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmxhc3RJbmRleE9mKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp5KX19LHtrZXk6XCJmaW5kTGFzdFwiLHZhbHVlOmZ1bmN0aW9uKGUscil7cmV0dXJuIF8uZmluZExhc3QodGhpcyxlLHIpfX0se2tleTpcImZpbmRMYXN0SW5kZXhcIix2YWx1ZTpmdW5jdGlvbihlLHIpe3JldHVybiBfLmZpbmRMYXN0SW5kZXgodGhpcyxlLHIpfX0se2tleTpcInJldmVyc2VcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnJldmVyc2UodGhpcyl9fSx7a2V5OlwiemlwXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uemlwKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zyl9fSx7a2V5Olwic2xpY2VcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNsaWNlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjAsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEvMCl9fSx7a2V5OlwiZXZlcnlcIix2YWx1ZTpmdW5jdGlvbihlLHIpe3JldHVybiBfLmV2ZXJ5KHRoaXMsZSxyKX19LHtrZXk6XCJmaW5kXCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5maW5kKHRoaXMsZSxyKX19LHtrZXk6XCJpbmNsdWRlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmluY2x1ZGVzKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCl9fSx7a2V5OlwibWFwXCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5tYXAodGhpcyxlLHIpfX0se2tleTpcImZpbHRlclwiLHZhbHVlOmZ1bmN0aW9uKGUscil7cmV0dXJuIF8uZmlsdGVyKHRoaXMsZSxyKX19LHtrZXk6XCJwb3BcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnBvcCh0aGlzKX19LHtrZXk6XCJwdXNoXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtyZXR1cm4gXy5wdXNoLmFwcGx5KF8sW3RoaXNdLmNvbmNhdChyKSl9fSx7a2V5Olwic2hpZnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNoaWZ0KHRoaXMpfX0se2tleTpcInVuc2hpZnRcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKXJbdF09YXJndW1lbnRzW3RdO3JldHVybiBfLnVuc2hpZnQuYXBwbHkoXyxbdGhpc10uY29uY2F0KHIpKX19LHtrZXk6XCJyZWR1Y2VcIix2YWx1ZTpmdW5jdGlvbihlLHIpe3JldHVybiBfLnJlZHVjZSh0aGlzLGUscil9fSx7a2V5OlwicmVkdWNlUmlnaHRcIix2YWx1ZTpmdW5jdGlvbihlLHIpe3JldHVybiBfLnJlZHVjZVJpZ2h0KHRoaXMsZSxyKX19LHtrZXk6XCJzb21lXCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5zb21lKHRoaXMsZSxyKX19LHtrZXk6XCJzcGxpY2VcIix2YWx1ZTpmdW5jdGlvbihlLHIpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KDI8dD90LTI6MCksYT0yO2E8dDthKyspblthLTJdPWFyZ3VtZW50c1thXTtyZXR1cm4gXy5zcGxpY2UuYXBwbHkoXyxbdGhpcyxlLHJdLmNvbmNhdChuKSl9fSx7a2V5OlwiZmlsbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmZpbGwodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxLzApfX0se2tleTpcInNvcnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNvcnQodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06dil9fSx7a2V5OlwiY29weVdpdGhpblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uY29weVdpdGhpbih0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxLzApfX0se2tleTpcInRvQXJyYXlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnRvQXJyYXkodGhpcyl9fSx7a2V5OlwidG9PYmplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRvRGljdGlvbmFyeSgwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06RSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aywyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCkudG9PYmplY3QoKX19LHtrZXk6XCJ0b0RpY3Rpb25hcnlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnRvRGljdGlvbmFyeSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkKX19LHtrZXk6XCJ0b0xvb2t1cFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8udG9Mb29rdXAodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCl9fSx7a2V5OlwidG9QcmVPcmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8udG9QcmVPcmRlcih0aGlzKX19LHtrZXk6XCJ0b0luT3JkZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnRvSW5PcmRlcih0aGlzKX19LHtrZXk6XCJ0b1Bvc3RPcmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8udG9Qb3N0T3JkZXIodGhpcyl9fSx7a2V5OlwiZm9yRWFjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8uZm9yRWFjaCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpSLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0se2tleTpcImVhY2hcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLmVhY2godGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Uil9fSx7a2V5OlwiaW5kaWNlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmluZGljZXModGhpcyxlKX19LHtrZXk6XCJwZXJtdXRhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLnBlcm11dGF0aW9uKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdKX19LHtrZXk6XCJjb21iaW5hdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmNvbWJpbmF0aW9uKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdKX19LHtrZXk6XCJjaHVua1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLmNodW5rKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCl9fSx7a2V5Olwic3BsaXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNwbGl0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmgpfX0se2tleTpcIm5lYXJTcGxpdFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ubmVhclNwbGl0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmgpfX0se2tleTpcImxlZnRQYWRcIix2YWx1ZTpmdW5jdGlvbihlLHIpe3JldHVybiBfLmxlZnRQYWQodGhpcyxlLHIpfX0se2tleTpcInJpZ2h0UGFkXCIsdmFsdWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gXy5yaWdodFBhZCh0aGlzLGUscil9fSx7a2V5OlwicmFuZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ucmFuZCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowKX19LHtrZXk6XCJyYW5kb21cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnJhbmRvbSh0aGlzKX19LHtrZXk6XCJyYW5kb21PckRlZmF1bHRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gXy5yYW5kb21PckRlZmF1bHQodGhpcyxlKX19LHtrZXk6XCJ3aXBlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy53aXBlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnAsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjApfX0se2tleTpcIm5lYXJCeVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8ubmVhckJ5KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmcsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm0pfX0se2tleTpcImNvbWJpbmVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLmNvbWJpbmUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06UywxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06RSwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YiwzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bSl9fSx7a2V5Olwic2VwYXJhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBfLnNlcGFyYXRlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOkksMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmspfX0se2tleTpcImlzU3ViXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uaXNTdWIodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX19LHtrZXk6XCJpc1N1cGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIF8uaXNTdXBlcih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcInN5bW1ldHJpY1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLnN5bW1ldHJpYyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcImNvbmZsaWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5jb25mbGljdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX19LHtrZXk6XCJwcm9wb3J0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5wcm9wb3J0aW9uKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnApfX1dKSxJRW51bWVyYWJsZX0oKDAsbi5kZWZhdWx0KShBcnJheSkpO3IuZXhwb3J0cz1uO3ZhciBfPWUoXCIuL0VudW1lcmFibGVcIil9LHtcIi4vRW51bWVyYWJsZVwiOjMxLFwiLi9jb3JlL2NvcmVcIjozNixcIi4vbWV0aG9kcy9kZWZhdWx0QWN0aW9uXCI6MTQ2LFwiLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNlbGVjdG9yXCI6MTQ3LFwiLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiOjE0OSxcIi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vbWV0aG9kcy9kZWZhdWx0RmFsc2VQcmVkaWNhdGVcIjoxNTIsXCIuL21ldGhvZHMvZGVmYXVsdEpvaW5TZWxlY3RvclwiOjE1NCxcIi4vbWV0aG9kcy9kZWZhdWx0S2V5U2VsZWN0b3JcIjoxNTUsXCIuL21ldGhvZHMvZGVmYXVsdFBhcmVudFNlbGVjdG9yXCI6MTU2LFwiLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIjoxNTcsXCIuL21ldGhvZHMvZGVmYXVsdFJlc3VsdFNlbGVjdG9yXCI6MTU4LFwiLi9tZXRob2RzL2RlZmF1bHRTYW1lQ29tcGFyZXJcIjoxNTksXCIuL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCI6MTYwLFwiLi9tZXRob2RzL2RlZmF1bHRTdHJpY3RFcXVhbGl0eUNvbXBhcmVyXCI6MTYxLFwiLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCI6MTYyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6NyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCI6MjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3dyYXBOYXRpdmVTdXBlclwiOjI2fV0sMzM6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikoZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGE9ZShcIi4vY29yZS9jb3JlXCIpLG89ZShcIi4vY29yZS9leGNlcHRpb25zL05lZWRFeGVjdXRlQmVmb3JlRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24gSUVudW1lcmF0b3IoZSl7dmFyIHI7KDAsbi5kZWZhdWx0KSh0aGlzLElFbnVtZXJhdG9yKTt2YXIgdD0hMTthLmRlZmluZVByb3BlcnRpZXModGhpcyx7bW92ZU5leHQ6ZnVuY3Rpb24oKXtyZXR1cm4hKHQ9ci5uZXh0KCkpLmRvbmV9LHJlc2V0OmZ1bmN0aW9uKCl7cj0oZVtTeW1ib2wuaXRlcmF0b3JdfHxlLmFzRW51bWVyYWJsZSgpW1N5bWJvbC5pdGVyYXRvcl0pKCksdD0hMX0sZ2V0IGN1cnJlbnQoKXtpZih0KXJldHVybiB0LnZhbHVlO3Rocm93IG5ldyBvKFwibW92ZU5leHRcIil9fSksdGhpcy5yZXNldCgpfTtyLmV4cG9ydHM9ZX0se1wiLi9jb3JlL2NvcmVcIjozNixcIi4vY29yZS9leGNlcHRpb25zL05lZWRFeGVjdXRlQmVmb3JlRXhjZXB0aW9uXCI6NDAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTJ9XSwzNDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7ci5leHBvcnRzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gSUNvbXBhcmFibGUoKXsoMCxhLmRlZmF1bHQpKHRoaXMsSUNvbXBhcmFibGUpfXJldHVybigwLG8uZGVmYXVsdCkoSUNvbXBhcmFibGUsW3trZXk6XCJjb21wYXJlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIDB9fV0pLElDb21wYXJhYmxlfSgpfSx7XCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjo3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMn1dLDM1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBJRXF1YXRhYmxlKCl7KDAsYS5kZWZhdWx0KSh0aGlzLElFcXVhdGFibGUpfXJldHVybigwLG8uZGVmYXVsdCkoSUVxdWF0YWJsZSxbe2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiExfX1dKSxJRXF1YXRhYmxlfSgpfSx7XCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjo3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMn1dLDM2OltmdW5jdGlvbih0LGEsZSl7IWZ1bmN0aW9uKGUpeyFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBuPXQoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSh0KFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIEdvKGUpe3JldHVybiBlLm5hbWV8fChyLmV4ZWMoZSl8fFtdKVsyXXx8XCJcIn12YXIgcj0vXihmdW5jdGlvblxcKj98Y2xhc3MpXFxzKyhbXih7XFxzXSopXFxzKlsoe10uKi9naSx1PXtpc0RldjpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1lJiZlJiZlLmVudiYmXCJkZXZlbG9wbWVudFwiPT09ZS5lbnYuTk9ERV9FTlZ9LGdldFR5cGU6ZnVuY3Rpb24oZSl7dmFyIHI9KDAsbi5kZWZhdWx0KShlKTtpZihcInVuZGVmaW5lZFwiPT09cilyZXR1cm4gdGhpcy50eXBlcy5VbmRlZmluZWQ7aWYoXCJzdHJpbmdcIj09PXJ8fGUgaW5zdGFuY2VvZiBTdHJpbmcpcmV0dXJuIHRoaXMudHlwZXMuU3RyaW5nO2lmKFwibnVtYmVyXCI9PT1yfHxlIGluc3RhbmNlb2YgTnVtYmVyKXJldHVybiB0aGlzLnR5cGVzLk51bWJlcjtpZihcImZ1bmN0aW9uXCI9PT1yfHxlIGluc3RhbmNlb2YgRnVuY3Rpb24pcmV0dXJuIHRoaXMudHlwZXMuRnVuY3Rpb247dmFyIHQ9ZVtTeW1ib2wudG9TdHJpbmdUYWddO3JldHVyblwiT2JqZWN0XCI9PT0odD10fHwodD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpLnN1YnN0cmluZyhcIltvYmplY3QgXCIubGVuZ3RoLHQubGVuZ3RoLTEpKXx8XCJFcnJvclwiPT09dD9HbyhlLmNvbnN0cnVjdG9yKTpcIm9iamVjdFwiIT09cj9yLnN1YnN0cmluZygwLDEpLnRvVXBwZXJDYXNlKCkrci5zdWJzdHJpbmcoMSk6dH0sdHlwZXM6e2dldCBVbmRlZmluZWQoKXtyZXR1cm5cIlVuZGVmaW5lZFwifSxnZXQgU3RyaW5nKCl7cmV0dXJuXCJTdHJpbmdcIn0sZ2V0IEFycmF5KCl7cmV0dXJuXCJBcnJheVwifSxnZXQgT2JqZWN0KCl7cmV0dXJuXCJPYmplY3RcIn0sZ2V0IE1hcCgpe3JldHVyblwiTWFwXCJ9LGdldCBTZXQoKXtyZXR1cm5cIlNldFwifSxnZXQgRnVuY3Rpb24oKXtyZXR1cm5cIkZ1bmN0aW9uXCJ9LGdldCBSZWdFeHAoKXtyZXR1cm5cIlJlZ0V4cFwifSxnZXQgQm9vbGVhbigpe3JldHVyblwiQm9vbGVhblwifSxnZXQgTnVtYmVyKCl7cmV0dXJuXCJOdW1iZXJcIn0sZ2V0IFN5bWJvbCgpe3JldHVyblwiU3ltYm9sXCJ9LGdldCBBcmd1bWVudHMoKXtyZXR1cm5cIkFyZ3VtZW50c1wifSxnZXQgSXRlcmF0b3IoKXtyZXR1cm5cIkl0ZXJhdG9yXCJ9LGdldCBFbnVtZXJhYmxlKCl7cmV0dXJuXCJFbnVtZXJhYmxlXCJ9fSxpc1VuZGVmaW5lZDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRUeXBlKGUpPT09dGhpcy50eXBlcy5VbmRlZmluZWR9LGlzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdldFR5cGUoZSk9PT10aGlzLnR5cGVzLlN0cmluZ30saXNBcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRUeXBlKGUpPT09dGhpcy50eXBlcy5BcnJheX0saXNOdW1iZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0VHlwZShlKT09PXRoaXMudHlwZXMuTnVtYmVyfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRUeXBlKGUpPT09dGhpcy50eXBlcy5PYmplY3R9LGlzU2V0OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdldFR5cGUoZSk9PT10aGlzLnR5cGVzLlNldH0saXNNYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0VHlwZShlKT09PXRoaXMudHlwZXMuTWFwfSxpc1N5bWJvbDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRUeXBlKGUpPT09dGhpcy50eXBlcy5TeW1ib2x9LGlzRnVuY3Rpb246ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0VHlwZShlKT09PXRoaXMudHlwZXMuRnVuY3Rpb259LGlzQXJndW1lbnRzOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdldFR5cGUoZSk9PT10aGlzLnR5cGVzLkFyZ3VtZW50c30saXNJdGVyYXRvcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRUeXBlKGUpLmVuZHNXaXRoKHRoaXMudHlwZXMuSXRlcmF0b3IpfSxpc0VudW1lcmFibGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0VHlwZShlKS5lbmRzV2l0aCh0aGlzLnR5cGVzLkVudW1lcmFibGUpfSxpc1Byb3RvOmZ1bmN0aW9uKGUpe2U9dGhpcy5nZXRUeXBlKGUpO3JldHVybiBlPT09dGhpcy50eXBlcy5BcnJheXx8ZT09PXRoaXMudHlwZXMuU3RyaW5nfSxpc0xpc3Q6ZnVuY3Rpb24oZSl7ZT10aGlzLmdldFR5cGUoZSk7cmV0dXJuIGU9PT10aGlzLnR5cGVzLkFycmF5fHxlPT09dGhpcy50eXBlcy5FbnVtZXJhYmxlfHxlPT09dGhpcy50eXBlcy5TZXR9LGlzSW50ZWdlcjpmdW5jdGlvbihlKXtyZXR1cm4vXlstK10/XFxkKyQvLnRlc3QoZSl8fE51bWJlci5pc0ludGVnZXIoZSl9LGFzUGFzY2FsOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2Uuc3Vic3RyaW5nKDAsMSkudG9VcHBlckNhc2UoKStlLnN1YnN0cmluZygxKTplfSxjb25mbGljdDpmdW5jdGlvbihlLHIpe3ZhciB0O1wic3ltYm9sXCIhPT0oMCxuLmRlZmF1bHQpKHIpJiZlLmhhc093blByb3BlcnR5KHIpJiYoZS5oYXNPd25Qcm9wZXJ0eSh0PVwibyRcIityKXx8KHRoaXMuaXNEZXYoKSYmY29uc29sZS53YXJuKHIrXCIgYWxyZWFkeSBpbiBcIit0aGlzLmdldFR5cGUoZSkrXCIsIHNldCBvcmlnaW5hbCBmdW5jdGlvbiB0byBcIit0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx2YWx1ZTplW3JdfSkpKX0sc2V0UHJvcGVydHk6ZnVuY3Rpb24oZSxyLHQpe3ZhciBuPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM10sYT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdO24mJnQgaW5zdGFuY2VvZiBGdW5jdGlvbj9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOmEsY29uZmlndXJhYmxlOiEwLGdldDp0fSk6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTphLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx2YWx1ZTp0fSl9LGRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUscix0KXt2YXIgbixhPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM10sbz00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdO3RoaXMuY29uZmxpY3QoZSxyKSxyIT09U3ltYm9sLml0ZXJhdG9yfHwobj0oR28odCl8fEdvKGVbU3ltYm9sLml0ZXJhdG9yXSkpLnJlcGxhY2UoL1xccypJdGVyYXRvciQvZ2ksXCIgSXRlcmF0b3JcIikpJiZ0aGlzLmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLG4pLHRoaXMuc2V0UHJvcGVydHkoZSxyLHQsYSxvKX0sZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHIpe3ZhciB0LG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtmb3IodCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJnRoaXMuZGVmaW5lUHJvcGVydHkoZSwhMD09PW4/dGhpcy5hc1Bhc2NhbCh0KTpuP24rdDp0LGZ1bmN0aW9uKGUscil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbcl19fShyLHQpLCEwLCExKX0sdW5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHIpe3ZhciB0O1wic3ltYm9sXCIhPT0oMCxuLmRlZmF1bHQpKHIpJiZlLmhhc093blByb3BlcnR5KHIpJiYoZS5oYXNPd25Qcm9wZXJ0eSh0PVwibyRcIityKT8oT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITAsdmFsdWU6ZVt0XX0pLGRlbGV0ZSBlW3RdKTpkZWxldGUgZVtyXSl9LHVuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHIpe3ZhciB0LG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIpO3RyeXtmb3IoYS5zKCk7ISh0PWEubigpKS5kb25lOyl7dmFyIG89dC52YWx1ZTt0aGlzLnVuZGVmaW5lUHJvcGVydHkoZSwhMD09PW4/dS5hc1Bhc2NhbChvKTpuP24rbzpvKX19Y2F0Y2goZSl7YS5lKGUpfWZpbmFsbHl7YS5mKCl9fSxsYXp5OiExLGFycmF5JGV2ZXJ5OkFycmF5LnByb3RvdHlwZS5ldmVyeSxhcnJheSRjb25jYXQ6QXJyYXkucHJvdG90eXBlLmNvbmNhdCxhcnJheSRzcGxpY2U6QXJyYXkucHJvdG90eXBlLnNwbGljZSxhcnJheSRzbGljZTpBcnJheS5wcm90b3R5cGUuc2xpY2UsYXJyYXkkZmlsbDpBcnJheS5wcm90b3R5cGUuZmlsbCxhcnJheSRmaW5kOkFycmF5LnByb3RvdHlwZS5maW5kLGFycmF5JGluY2x1ZGVzOkFycmF5LnByb3RvdHlwZS5pbmNsdWRlcyxhcnJheSRtYXA6QXJyYXkucHJvdG90eXBlLm1hcCxhcnJheSRmaWx0ZXI6QXJyYXkucHJvdG90eXBlLmZpbHRlcixhcnJheSRzaGlmdDpBcnJheS5wcm90b3R5cGUuc2hpZnQsYXJyYXkkdW5zaGlmdDpBcnJheS5wcm90b3R5cGUudW5zaGlmdCxhcnJheSRwb3A6QXJyYXkucHJvdG90eXBlLnBvcCxhcnJheSRwdXNoOkFycmF5LnByb3RvdHlwZS5wdXNoLGFycmF5JHJlZHVjZTpBcnJheS5wcm90b3R5cGUucmVkdWNlLGFycmF5JHJlZHVjZVJpZ2h0OkFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCxhcnJheSRzb21lOkFycmF5LnByb3RvdHlwZS5zb21lLGFycmF5JHNvcnQ6QXJyYXkucHJvdG90eXBlLnNvcnQsYXJyYXkkY29weVdpdGhpbjpBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbixhcnJheSRqb2luOkFycmF5LnByb3RvdHlwZS5qb2luLGFycmF5JGluZGV4T2Y6QXJyYXkucHJvdG90eXBlLmluZGV4T2YsYXJyYXkkbGFzdEluZGV4T2Y6QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLGFycmF5JGZpbmRJbmRleDpBcnJheS5wcm90b3R5cGUuZmluZEluZGV4LGFycmF5JGZvckVhY2g6QXJyYXkucHJvdG90eXBlLmZvckVhY2gsc3RyaW5nJGNvbmNhdDpTdHJpbmcucHJvdG90eXBlLmNvbmNhdCxzdHJpbmckc2xpY2U6U3RyaW5nLnByb3RvdHlwZS5zbGljZSxzdHJpbmckaW5jbHVkZXM6U3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyxzdHJpbmckaW5kZXhPZjpTdHJpbmcucHJvdG90eXBlLmluZGV4T2Ysc3RyaW5nJGxhc3RJbmRleE9mOlN0cmluZy5wcm90b3R5cGUubGFzdEluZGV4T2Z9O2EuZXhwb3J0cz11fS5jYWxsKHRoaXMpfS5jYWxsKHRoaXMsdChcIl9wcm9jZXNzXCIpKX0se1wiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCI6MjQsX3Byb2Nlc3M6Mjl9XSwzNzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSksbj1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3dyYXBOYXRpdmVTdXBlclwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vY29yZVwiKSxuPWZ1bmN0aW9uKGUpeygwLHUuZGVmYXVsdCkoRXhjZXB0aW9uLGUpO3ZhciB0PV9jcmVhdGVTdXBlcihFeGNlcHRpb24pO2Z1bmN0aW9uIEV4Y2VwdGlvbihlKXt2YXIgcjtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsRXhjZXB0aW9uKSxyPXQuY2FsbCh0aGlzLGUpLHMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShyKSxcImdldFR5cGVcIixmdW5jdGlvbigpe3JldHVybiBzLmdldFR5cGUoKDAsby5kZWZhdWx0KShyKSl9LCEwLCEwKSxzLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkociksXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuXCJcIi5jb25jYXQocy5nZXRUeXBlKCgwLG8uZGVmYXVsdCkocikpLFwiOiBcIikuY29uY2F0KGUpfSwhMSwhMCkscn1yZXR1cm4gRXhjZXB0aW9ufSgoMCxuLmRlZmF1bHQpKEVycm9yKSk7ci5leHBvcnRzPW59LHtcIi4vLi4vY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3dyYXBOYXRpdmVTdXBlclwiOjI2fV0sMzg6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBsPWUoXCIuL0V4Y2VwdGlvblwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKEludmFsaWRGdW5jdGlvbkV4Y2VwdGlvbixsKTt2YXIgcj1fY3JlYXRlU3VwZXIoSW52YWxpZEZ1bmN0aW9uRXhjZXB0aW9uKTtmdW5jdGlvbiBJbnZhbGlkRnVuY3Rpb25FeGNlcHRpb24oZSl7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEludmFsaWRGdW5jdGlvbkV4Y2VwdGlvbiksci5jYWxsKHRoaXMsXCJJbnZhbGlkIGZ1bmN0aW9uIHZhbHVlIG9mIGNhbiBub3QgY29udmVydCB0byBhIGZ1bmN0aW9uIHZhbHVlLCB0aGUgb3JpZ2luYWwgdmFsdWUgaXMgOiBcIitlKX1yZXR1cm4gSW52YWxpZEZ1bmN0aW9uRXhjZXB0aW9ufSgpfSx7XCIuL0V4Y2VwdGlvblwiOjM3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSwzOTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vLi4vY29yZVwiKSxzPWUoXCIuL0V4Y2VwdGlvblwiKSxjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh7fSksZj1mdW5jdGlvbihlKXt2YXIgcj1lLnRvU3RyaW5nKCk7cmV0dXJuIHI9PT1jP1wiW29iamVjdCBcIitsLmdldFR5cGUoZSkrXCJdXCI6cn07ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShLZXlzRm9yTXVsdGlFbGVtZW50c0V4Y2VwdGlvbixzKTt2YXIgcj1fY3JlYXRlU3VwZXIoS2V5c0Zvck11bHRpRWxlbWVudHNFeGNlcHRpb24pO2Z1bmN0aW9uIEtleXNGb3JNdWx0aUVsZW1lbnRzRXhjZXB0aW9uKGUpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxLZXlzRm9yTXVsdGlFbGVtZW50c0V4Y2VwdGlvbiksci5jYWxsKHRoaXMsXCJLZXlzIGZvciBtdWx0aSBlbGVtZW50cywga2V5OlwiK2YoZSkpfXJldHVybiBLZXlzRm9yTXVsdGlFbGVtZW50c0V4Y2VwdGlvbn0oKX0se1wiLi8uLi9jb3JlXCI6MzYsXCIuL0V4Y2VwdGlvblwiOjM3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw0MDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vRXhjZXB0aW9uXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoTmVlZEV4ZWN1dGVCZWZvcmVFeGNlcHRpb24sbCk7dmFyIHI9X2NyZWF0ZVN1cGVyKE5lZWRFeGVjdXRlQmVmb3JlRXhjZXB0aW9uKTtmdW5jdGlvbiBOZWVkRXhlY3V0ZUJlZm9yZUV4Y2VwdGlvbihlKXtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsTmVlZEV4ZWN1dGVCZWZvcmVFeGNlcHRpb24pLHIuY2FsbCh0aGlzLFwiTmVlZCBleGVjdXRlIG1ldGhvZCBbXCIrZStcIigpXSBiZWZvcmVcIil9cmV0dXJuIE5lZWRFeGVjdXRlQmVmb3JlRXhjZXB0aW9ufSgpfSx7XCIuL0V4Y2VwdGlvblwiOjM3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw0MTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vRXhjZXB0aW9uXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoTm9TdWNoRWxlbWVudHNFeGNlcHRpb24sbCk7dmFyIGU9X2NyZWF0ZVN1cGVyKE5vU3VjaEVsZW1lbnRzRXhjZXB0aW9uKTtmdW5jdGlvbiBOb1N1Y2hFbGVtZW50c0V4Y2VwdGlvbigpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxOb1N1Y2hFbGVtZW50c0V4Y2VwdGlvbiksZS5jYWxsKHRoaXMsXCJObyBzdWNoIGVsZW1lbnRzXCIpfXJldHVybiBOb1N1Y2hFbGVtZW50c0V4Y2VwdGlvbn0oKX0se1wiLi9FeGNlcHRpb25cIjozNyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sNDI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBsPWUoXCIuLy4uL2NvcmVcIikscz1lKFwiLi9FeGNlcHRpb25cIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShOb3RBbmNlc3Rvck9mRXhjZXB0aW9uLHMpO3ZhciB0PV9jcmVhdGVTdXBlcihOb3RBbmNlc3Rvck9mRXhjZXB0aW9uKTtmdW5jdGlvbiBOb3RBbmNlc3Rvck9mRXhjZXB0aW9uKGUscil7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLE5vdEFuY2VzdG9yT2ZFeGNlcHRpb24pLHQuY2FsbCh0aGlzLFwiJ1wiLmNvbmNhdChsLmlzVW5kZWZpbmVkKGUua2V5KT9lLnZhbHVlOmUua2V5LFwiJyBpcyBub3QgYW5jZXN0b3Igbm9kZSBvZiAnXCIpLmNvbmNhdChsLmlzVW5kZWZpbmVkKHIua2V5KT9yLnZhbHVlOnIua2V5LFwiJ1wiKSl9cmV0dXJuIE5vdEFuY2VzdG9yT2ZFeGNlcHRpb259KCl9LHtcIi4vLi4vY29yZVwiOjM2LFwiLi9FeGNlcHRpb25cIjozNyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sNDM6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBsPWUoXCIuL0V4Y2VwdGlvblwiKSxzPWUoXCIuLy4uL2NvcmVcIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShOb0VudW1lcmFibGVFeGNlcHRpb24sbCk7dmFyIHI9X2NyZWF0ZVN1cGVyKE5vRW51bWVyYWJsZUV4Y2VwdGlvbik7ZnVuY3Rpb24gTm9FbnVtZXJhYmxlRXhjZXB0aW9uKGUpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxOb0VudW1lcmFibGVFeGNlcHRpb24pLHIuY2FsbCh0aGlzLFwiVmFsdWUgb2YgdHlwZSBbXCIuY29uY2F0KHMuZ2V0VHlwZShlKSxcIl0gaXMgbm90IGFuIGVudW1lcmFibGUgdmFsdWUgYW5kIGNhbiBub3QgY29udmVydCB0byBhbiBlbnVtZXJhYmxlIHZhbHVlXCIpKX1yZXR1cm4gTm9FbnVtZXJhYmxlRXhjZXB0aW9ufSgpfSx7XCIuLy4uL2NvcmVcIjozNixcIi4vRXhjZXB0aW9uXCI6MzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDQ0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgbD1lKFwiLi9FeGNlcHRpb25cIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShPdXRPZlJhbmdlRXhjZXB0aW9uLGwpO3ZhciByPV9jcmVhdGVTdXBlcihPdXRPZlJhbmdlRXhjZXB0aW9uKTtmdW5jdGlvbiBPdXRPZlJhbmdlRXhjZXB0aW9uKGUpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxPdXRPZlJhbmdlRXhjZXB0aW9uKSxyLmNhbGwodGhpcyxcIk91dCBvZiByYW5nZSwgaW5kZXg6XCIrZSl9cmV0dXJuIE91dE9mUmFuZ2VFeGNlcHRpb259KCl9LHtcIi4vRXhjZXB0aW9uXCI6MzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDQ1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgbD1lKFwiLi9FeGNlcHRpb25cIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShQbHVnaW5SZXBlYXRFeGNlcHRpb24sbCk7dmFyIHQ9X2NyZWF0ZVN1cGVyKFBsdWdpblJlcGVhdEV4Y2VwdGlvbik7ZnVuY3Rpb24gUGx1Z2luUmVwZWF0RXhjZXB0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFBsdWdpblJlcGVhdEV4Y2VwdGlvbiksdC5jYWxsKHRoaXMscj8nQ2FuIG5vdCBhZGQgcGx1Z2luIHdpdGggbmFtZSBcIicuY29uY2F0KGUubmFtZSwnXCIgYmVjYXVzZSBvZiB0aGlzIGlzIGEgYnVpbHRpbiBwcm9wZXJ0eScpOidQbHVnaW4gd2l0aCBuYW1lIFwiJy5jb25jYXQoZS5uYW1lLCdcIiBoYXMgYWxyZWFkeSBhZGRlZCcpKX1yZXR1cm4gUGx1Z2luUmVwZWF0RXhjZXB0aW9ufSgpfSx7XCIuL0V4Y2VwdGlvblwiOjM3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw0NjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vRXhjZXB0aW9uXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbixsKTt2YXIgcj1fY3JlYXRlU3VwZXIoUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbik7ZnVuY3Rpb24gUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbihlKXtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvbiksci5jYWxsKHRoaXMsXCJUaGUgcHJvcGVydHkgZXhwcmVzc2lvbiBpcyBpbnZhbGlkLiBwcm9wZXJ0eSBpcyA6XCIrZSl9cmV0dXJuIFByb3BlcnR5RXhwcmVzc2lvbkludmFsaWRFeGNlcHRpb259KCl9LHtcIi4vRXhjZXB0aW9uXCI6MzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDQ3OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgbD1lKFwiLi9FeGNlcHRpb25cIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShUb29NYW55RWxlbWVudHNFeGNlcHRpb24sbCk7dmFyIGU9X2NyZWF0ZVN1cGVyKFRvb01hbnlFbGVtZW50c0V4Y2VwdGlvbik7ZnVuY3Rpb24gVG9vTWFueUVsZW1lbnRzRXhjZXB0aW9uKCl7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFRvb01hbnlFbGVtZW50c0V4Y2VwdGlvbiksZS5jYWxsKHRoaXMsXCJUb28gbWFueSBlbGVtZW50c1wiKX1yZXR1cm4gVG9vTWFueUVsZW1lbnRzRXhjZXB0aW9ufSgpfSx7XCIuL0V4Y2VwdGlvblwiOjM3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw0ODpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vSXRlcmFibGVFbnVtZXJhYmxlXCIpLGM9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGY9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIiksaD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRKb2luU2VsZWN0b3JcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCIpLGQ9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiKSxtPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiKSx5PWUoXCIuLy4uL0VudW1lcmFibGVcIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShBcnJheUVudW1lcmFibGUscyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEFycmF5RW51bWVyYWJsZSk7ZnVuY3Rpb24gQXJyYXlFbnVtZXJhYmxlKG8pe3ZhciBlO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxBcnJheUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbyksYy5kZWZpbmVQcm9wZXJ0aWVzKCgwLHUuZGVmYXVsdCkoZSkse2luZGV4T2Y6ZnVuY3Rpb24oZSl7dmFyIHIsdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4ocj1mLmFzU3RyaWN0RXF1YWxpdHlDb21wYXJlcihyPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpkKSk9PT1kJiZjLmFycmF5JGluZGV4T2Y/Yy5hcnJheSRpbmRleE9mLmNhbGwobyxlLHQpOnkuaW5kZXhPZih0aGlzLGUsdCxyKX0sbGFzdEluZGV4T2Y6ZnVuY3Rpb24oZSl7dmFyIHIsdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wO3JldHVybihyPWYuYXNTdHJpY3RFcXVhbGl0eUNvbXBhcmVyKHI9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmQpKT09PWQmJmMuYXJyYXkkbGFzdEluZGV4T2Y/Yy5hcnJheSRsYXN0SW5kZXhPZi5jYWxsKG8sZSx0KTp5Lmxhc3RJbmRleE9mKHRoaXMsZSx0LHIpfSxmaW5kSW5kZXg6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gYy5hcnJheSRmaW5kSW5kZXg/Yy5hcnJheSRmaW5kSW5kZXguY2FsbChvLGUscik6eS5maW5kSW5kZXgodGhpcyxlLHIpfSxqb2luOmZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpoLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnAsbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106cCxhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpiLHQ9Zi5hc1NlbGVjdG9yKHQpLG49Zi5hc1NlbGVjdG9yKG4pLGE9Zi5hc0VxdWFsaXR5Q29tcGFyZXIoYSk7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoJiZjLmFycmF5JGpvaW4/Yy5hcnJheSRqb2luLmNhbGwobyxlKTp5LmpvaW4odGhpcyxlLHIsdCxuLGEpfSxldmVyeTpmdW5jdGlvbihlLHIpe3JldHVybiBjLmFycmF5JGV2ZXJ5P2MuYXJyYXkkZXZlcnkuY2FsbChvLGUscik6eS5ldmVyeSh0aGlzLGUscil9LGZpbmQ6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gYy5hcnJheSRmaW5kP2MuYXJyYXkkZmluZC5jYWxsKG8sZSxyKTp5LmZpbmQodGhpcyxlLHIpfSxpbmNsdWRlczpmdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4gYy5hcnJheSRpbmNsdWRlcz9jLmFycmF5JGluY2x1ZGVzLmNhbGwobyxlLHIpOnkuaW5jbHVkZXModGhpcyxlLHIpfSxwb3A6ZnVuY3Rpb24oKXtyZXR1cm4gYy5hcnJheSRwb3A/Yy5hcnJheSRwb3AuY2FsbChvKTp5LnBvcCh0aGlzKX0scHVzaDpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKXJbdF09YXJndW1lbnRzW3RdO3JldHVybiBjLmFycmF5JHB1c2g/Yy5hcnJheSRwdXNoLmFwcGx5KG8scik6eS5wdXNoLmFwcGx5KHksW3RoaXNdLmNvbmNhdChyKSl9LHNoaWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuYXJyYXkkc2hpZnQ/Yy5hcnJheSRzaGlmdC5jYWxsKG8pOnkuc2hpZnQodGhpcyl9LHVuc2hpZnQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtyZXR1cm4gYy5hcnJheSR1bnNoaWZ0P2MuYXJyYXkkdW5zaGlmdC5hcHBseShvLHIpOnkudW5zaGlmdC5hcHBseSh5LFt0aGlzXS5jb25jYXQocikpfSxyZWR1Y2U6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gYy5hcnJheSRyZWR1Y2U/Yy5hcnJheSRyZWR1Y2UuY2FsbChvLGUscik6eS5yZWR1Y2UodGhpcyxlLHIpfSxyZWR1Y2VSaWdodDpmdW5jdGlvbihlLHIpe3JldHVybiBjLmFycmF5JHJlZHVjZVJpZ2h0P2MuYXJyYXkkcmVkdWNlUmlnaHQuY2FsbChvLGUscik6eS5yZWR1Y2VSaWdodCh0aGlzLGUscil9LHNvbWU6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gYy5hcnJheSRzb21lP2MuYXJyYXkkc29tZS5jYWxsKG8sZSxyKTp5LnNvbWUodGhpcyxlLHIpfSxmb3JFYWNoOmZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnZvaWQgMDtjLmFycmF5JGZvckVhY2g/Yy5hcnJheSRmb3JFYWNoLmNhbGwobyxyLHQpOnkuZm9yRWFjaCh0aGlzLHIsdCl9fSksZX1yZXR1cm4gQXJyYXlFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiOjE0NixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCI6MTU0LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiOjE2MSxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi9JdGVyYWJsZUVudW1lcmFibGVcIjo4MixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sNDk6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxsLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKEJldHdlZW5FbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihCZXR3ZWVuRW51bWVyYWJsZSk7ZnVuY3Rpb24gQmV0d2VlbkVudW1lcmFibGUodCxuKXt2YXIgZSxhPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxO3JldHVybigwLHUuZGVmYXVsdCkodGhpcyxCZXR3ZWVuRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSksZi5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixvLmRlZmF1bHQubWFyayhmdW5jdGlvbiBCZXR3ZWVuSXRlcmF0b3IoKXt2YXIgcjtyZXR1cm4gby5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj10O2Nhc2UgMTppZihyPD1uKXJldHVybiBlLm5leHQ9NCxyO2UubmV4dD03O2JyZWFrO2Nhc2UgNDpyKz1hLGUubmV4dD0xO2JyZWFrO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxCZXR3ZWVuSXRlcmF0b3IpfSkpLGV9cmV0dXJuIEJldHdlZW5FbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sNTA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsYy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHMuZGVmYXVsdCkodGhpcyxyKX19dmFyIGY9ZShcIi4vSVRyZWVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksaD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGI9ZShcIi4vR2VuZXJhdG9yRW51bWVyYWJsZVwiKSxkPWUoXCIuL1ByZU9yZGVyRW51bWVyYWJsZVwiKSxtPWUoXCIuL0luT3JkZXJFbnVtZXJhYmxlXCIpLHk9ZShcIi4vUG9zdE9yZGVyRW51bWVyYWJsZVwiKSx2PVN5bWJvbChcImxlZnRcIiksZz1TeW1ib2woXCJyaWdodFwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShCaW5hcnlUcmVlLGYpO3ZhciB0PV9jcmVhdGVTdXBlcihCaW5hcnlUcmVlKTtmdW5jdGlvbiBCaW5hcnlUcmVlKHIpeygwLGkuZGVmYXVsdCkodGhpcyxCaW5hcnlUcmVlKTt2YXIgZT10LmNhbGwodGhpcyxyLnZhbHVlLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUuZGVsZWdhdGVZaWVsZChyLmNoaWxkcmVufHxbXSxcInQwXCIsMSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpLG49dixhPWcsbz1lW1N5bWJvbC5pdGVyYXRvcl07cmV0dXJuIHAuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQmluYXJ5VHJlZUl0ZXJhdG9yKCl7dmFyIHIsdDtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYocj1vKCksKHQ9ci5uZXh0KCkpLmRvbmUpe2UubmV4dD0xNjticmVha31yZXR1cm4gbj10LnZhbHVlJiZuZXcgQmluYXJ5VHJlZSh0LnZhbHVlKSxlLm5leHQ9NixuO2Nhc2UgNjppZigodD1yLm5leHQoKSkuZG9uZSl7ZS5uZXh0PTEzO2JyZWFrfXJldHVybiBhPXQudmFsdWUmJm5ldyBCaW5hcnlUcmVlKHQudmFsdWUpLGUubmV4dD0xMSxhO2Nhc2UgMTE6ZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTM6YT12b2lkIDA7Y2FzZSAxNDplLm5leHQ9MTc7YnJlYWs7Y2FzZSAxNjpuPXZvaWQgMDtjYXNlIDE3OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEJpbmFyeVRyZWVJdGVyYXRvcil9KSkscC5kZWZpbmVQcm9wZXJ0eSgoMCxsLmRlZmF1bHQpKGUpLFwiY2hpbGRyZW5cIixmdW5jdGlvbigpe3JldHVybiBuZXcgYih1LmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpe3ZhciByLHQ7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKHI9bygpLCh0PXIubmV4dCgpKS5kb25lKXtlLm5leHQ9MTY7YnJlYWt9cmV0dXJuIG49dC52YWx1ZSYmbmV3IEJpbmFyeVRyZWUodC52YWx1ZSksZS5uZXh0PTYsbjtjYXNlIDY6aWYoKHQ9ci5uZXh0KCkpLmRvbmUpe2UubmV4dD0xMzticmVha31yZXR1cm4gYT10LnZhbHVlJiZuZXcgQmluYXJ5VHJlZSh0LnZhbHVlKSxlLm5leHQ9MTEsYTtjYXNlIDExOmUubmV4dD0xNDticmVhaztjYXNlIDEzOmE9dm9pZCAwO2Nhc2UgMTQ6ZS5uZXh0PTE3O2JyZWFrO2Nhc2UgMTY6bj12b2lkIDA7Y2FzZSAxNzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlMil9KSl9LCEwLCEwKSxwLmRlZmluZVByb3BlcnR5KCgwLGwuZGVmYXVsdCkoZSksXCJsZWZ0XCIsZnVuY3Rpb24oKXtyZXR1cm4gbj09PXY/bj1oLmVsZW1lbnRBdE9yRGVmYXVsdCgoMCxsLmRlZmF1bHQpKGUpLDApOm59LCEwLCEwKSxwLmRlZmluZVByb3BlcnR5KCgwLGwuZGVmYXVsdCkoZSksXCJyaWdodFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGE9PT1nP2E9aC5lbGVtZW50QXRPckRlZmF1bHQoKDAsbC5kZWZhdWx0KShlKSwxKTphfSwhMCwhMCksZX1yZXR1cm4oMCxhLmRlZmF1bHQpKEJpbmFyeVRyZWUsW3trZXk6XCJoYXNMZWZ0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hcC5pc1VuZGVmaW5lZCh0aGlzLmxlZnQpfX0se2tleTpcImhhc1JpZ2h0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hcC5pc1VuZGVmaW5lZCh0aGlzLnJpZ2h0KX19LHtrZXk6XCJwcmVPcmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBkKHRoaXMpfX0se2tleTpcImluT3JkZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgbSh0aGlzKX19LHtrZXk6XCJwb3N0T3JkZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgeSh0aGlzKX19LHtrZXk6XCJpc0JpbmFyeVwiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcImFzQmluYXJ5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319XSksQmluYXJ5VHJlZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi9HZW5lcmF0b3JFbnVtZXJhYmxlXCI6NjksXCIuL0lUcmVlXCI6NzcsXCIuL0luT3JkZXJFbnVtZXJhYmxlXCI6NzgsXCIuL1Bvc3RPcmRlckVudW1lcmFibGVcIjoxMDEsXCIuL1ByZU9yZGVyRW51bWVyYWJsZVwiOjEwMyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sNTE6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxsLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKEJyZWFkdGhFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihCcmVhZHRoRW51bWVyYWJsZSk7ZnVuY3Rpb24gQnJlYWR0aEVudW1lcmFibGUobyl7dmFyIGU7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEJyZWFkdGhFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxmLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEJyZWFkdGhJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiB1LmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPVtbb11dO2Nhc2UgMTppZighci5sZW5ndGgpe2UubmV4dD0yMjticmVha310PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIuc2hpZnQoKSksZS5wcmV2PTMsdC5zKCk7Y2FzZSA1OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTI7YnJlYWt9cmV0dXJuIGE9bi52YWx1ZSxlLm5leHQ9OSxhLnZhbHVlO2Nhc2UgOTpyLnB1c2goYSk7Y2FzZSAxMDplLm5leHQ9NTticmVhaztjYXNlIDEyOmUubmV4dD0xNzticmVhaztjYXNlIDE0OmUucHJldj0xNCxlLnQwPWUuY2F0Y2goMyksdC5lKGUudDApO2Nhc2UgMTc6cmV0dXJuIGUucHJldj0xNyx0LmYoKSxlLmZpbmlzaCgxNyk7Y2FzZSAyMDplLm5leHQ9MTticmVhaztjYXNlIDIyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEJyZWFkdGhJdGVyYXRvcixudWxsLFtbMywxNCwxNywyMF1dKX0pKSxlfXJldHVybiBCcmVhZHRoRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDUyOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShCcmVhZHRoU3ViVHJlZUVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEJyZWFkdGhTdWJUcmVlRW51bWVyYWJsZSk7ZnVuY3Rpb24gQnJlYWR0aFN1YlRyZWVFbnVtZXJhYmxlKG8sdSl7dmFyIGU7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEJyZWFkdGhTdWJUcmVlRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSksdT1wLmFzUHJlZGljYXRlKHUpLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsaS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQnJlYWR0aFN1YlRyZWVJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiBpLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPVtbb11dO2Nhc2UgMTppZighci5sZW5ndGgpe2UubmV4dD0yMzticmVha310PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIuc2hpZnQoKSksZS5wcmV2PTMsdC5zKCk7Y2FzZSA1OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTM7YnJlYWt9aWYoYT1uLnZhbHVlLHUoYS52YWx1ZSkpcmV0dXJuIGUubmV4dD0xMCxhO2UubmV4dD0xMDticmVhaztjYXNlIDEwOnIucHVzaChhKTtjYXNlIDExOmUubmV4dD01O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgzKSx0LmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHQuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmUubmV4dD0xO2JyZWFrO2Nhc2UgMjM6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sQnJlYWR0aFN1YlRyZWVJdGVyYXRvcixudWxsLFtbMywxNSwxOCwyMV1dKX0pKSxlfXJldHVybiBCcmVhZHRoU3ViVHJlZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDUzOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPShlKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGUoXCIuLy4uL2NvcmUvY29yZVwiKSkscD1lKFwiLi9JQ2h1bmtcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoQ2h1bmtFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihDaHVua0VudW1lcmFibGUpO2Z1bmN0aW9uIENodW5rRW51bWVyYWJsZShpLGwpe3ZhciBlLHM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjA7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLENodW5rRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxpKSxzPXM8MD8ocyVsK2wpJWw6cyxmLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGMuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIENodW5rSXRlcmF0b3IoKXt2YXIgcixuLGEsbyx0LHU7cmV0dXJuIGMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MCxuPVtdLG89aVtTeW1ib2wuaXRlcmF0b3JdKCksdD1mdW5jdGlvbiBoYXNOZXh0KCl7dmFyIHQsZT1vLm5leHQoKTtyZXR1cm4gZS5kb25lfHwoYSYmYS5jb3VudCE9PWwmJigwPT09c3x8MCE9PXJ8fGEuY291bnQhPT1zKXx8KGEmJnIrKyxuLnB1c2goYT17Y291bnQ6MCxhcnJheTpbXX0pLGEuY2h1bms9KHQ9YSxuZXcgcChyLGMuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXt2YXIgcjtyZXR1cm4gYy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wO2Nhc2UgMTppZih0LmFycmF5Lmxlbmd0aD5yfHxoYXNOZXh0KCkmJnQuYXJyYXkubGVuZ3RoPnIpcmV0dXJuIGUubmV4dD00LHQuYXJyYXlbcisrXTtlLm5leHQ9NjticmVhaztjYXNlIDQ6ZS5uZXh0PTE7YnJlYWs7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpKSksYS5hcnJheS5wdXNoKGUudmFsdWUpLGEuY291bnQrKyksIWUuZG9uZX0sdT0wO2Nhc2UgNTppZighKG4ubGVuZ3RoPnV8fHQoKSkpe2UubmV4dD0xMTticmVha31pZihuLmxlbmd0aD51KXJldHVybiBlLm5leHQ9OSxuW3UrK10uY2h1bms7ZS5uZXh0PTk7YnJlYWs7Y2FzZSA5OmUubmV4dD01O2JyZWFrO2Nhc2UgMTE6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sQ2h1bmtJdGVyYXRvcil9KSksZX1yZXR1cm4gQ2h1bmtFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuL0lDaHVua1wiOjcyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sNTQ6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksZj1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIikscD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGg9ZShcIi4vSW5kaWNlc0VudW1lcmFibGVcIiksYj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZD1lKFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoQ29tYmluYXRpb25FbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihDb21iaW5hdGlvbkVudW1lcmFibGUpO2Z1bmN0aW9uIENvbWJpbmF0aW9uRW51bWVyYWJsZShsLHMpe3ZhciBlO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxDb21iaW5hdGlvbkVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbCksYi5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixjLmRlZmF1bHQubWFyayhmdW5jdGlvbiBDb21iaW5hdGlvbkl0ZXJhdG9yKCl7dmFyIHIsYSxvLHUsaSx0LG47cmV0dXJuIGMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9bFtTeW1ib2wuaXRlcmF0b3JdKCksYT1wLnJhbmdlKDAscykudG9BcnJheSgpLHU9IShvPVtdKSxpPWZ1bmN0aW9uKCl7dmFyIGU9ci5uZXh0KCk7cmV0dXJuIGUuZG9uZT8hKHU9ITApOihvLnB1c2goZS52YWx1ZSksITApfSx0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXMtMTswPD1lO2UtLSl7dmFyIHI9ITE7aWYoYVtlXSsrLGFbZV0rKHMtZSktMT49by5sZW5ndGgmJighdSYmaSgpfHwocj0hMCkpLCFyKXtmb3IodmFyIHQ9ZSsxLG49MTt0PHM7dCsrLG4rKylhW3RdPWFbZV0rbjtyZXR1cm4hMH19cmV0dXJuITF9LG49YVtzLTFdO2Nhc2UgNzppZighKG8ubGVuZ3RoPD1uKSl7ZS5uZXh0PTEyO2JyZWFrfWlmKGkoKSl7ZS5uZXh0PTEwO2JyZWFrfXRocm93IG5ldyBkO2Nhc2UgMTA6ZS5uZXh0PTc7YnJlYWs7Y2FzZSAxMjpyZXR1cm4gZS5uZXh0PTE0LG5ldyBoKG8sKDAsZi5kZWZhdWx0KShhKSk7Y2FzZSAxNDppZih0KCkpe2UubmV4dD0xMjticmVha31jYXNlIDE1OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LENvbWJpbmF0aW9uSXRlcmF0b3IpfSkpLGV9cmV0dXJuIENvbWJpbmF0aW9uRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIjo0MSxcIi4vSW5kaWNlc0VudW1lcmFibGVcIjo4MCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiOjIzLFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDU1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBmPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLHA9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxoPWUoXCIuL0luZGljZXNFbnVtZXJhYmxlXCIpLGI9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGQ9ZShcIi4vLi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKENvbWJpbmF0aW9uRW51bWVyYWJsZSxmKTt2YXIgcj1fY3JlYXRlU3VwZXIoQ29tYmluYXRpb25FbnVtZXJhYmxlKTtmdW5jdGlvbiBDb21iaW5hdGlvbkVudW1lcmFibGUoaSxsKXt2YXIgZTtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsQ29tYmluYXRpb25FbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGkpLGIuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3Iscy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQ29tYmluYXRpb25JdGVyYXRvcigpe3ZhciByLG4sYSxvLHUsdDtyZXR1cm4gcy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYocj1pW1N5bWJvbC5pdGVyYXRvcl0oKSxuPXAucmVwZWF0KDAsbCkudG9BcnJheSgpLG89IShhPVtdKSx0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWwtMTswPD1lO2UtLSl7dmFyIHI9ITE7aWYobltlXSsrLG5bZV0+PWEubGVuZ3RoJiYoIW8mJnUoKXx8KHI9ITApKSwhcil7Zm9yKHZhciB0PWUrMTt0PGw7dCsrKW5bdF09bltlXTtyZXR1cm4hMH19cmV0dXJuITF9LCEodT1mdW5jdGlvbigpe3ZhciBlPXIubmV4dCgpO3JldHVybiBlLmRvbmU/IShvPSEwKTooYS5wdXNoKGUudmFsdWUpLCEwKX0pKCkpe2UubmV4dD0xMjticmVha31jYXNlIDc6cmV0dXJuIGUubmV4dD05LG5ldyBoKGEsKDAsYy5kZWZhdWx0KShuKSk7Y2FzZSA5OmlmKHQoKSl7ZS5uZXh0PTc7YnJlYWt9Y2FzZSAxMDplLm5leHQ9MTM7YnJlYWs7Y2FzZSAxMjp0aHJvdyBuZXcgZDtjYXNlIDEzOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LENvbWJpbmF0aW9uSXRlcmF0b3IpfSkpLGV9cmV0dXJuIENvbWJpbmF0aW9uRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIjo0MSxcIi4vSW5kaWNlc0VudW1lcmFibGVcIjo4MCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiOjIzLFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDU2OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHk9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSx2PWUoXCIuLy4uL0VudW1lcmFibGVcIiksYz1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZj1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksZz1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRLZXlTZWxlY3RvclwiKSx4PWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLEU9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UGFyZW50U2VsZWN0b3JcIiksaz1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCIpLFM9ZShcIi4vSUNvbWJpbmVcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoQ29tYmluZUVudW1lcmFibGUscyk7dmFyIHI9X2NyZWF0ZVN1cGVyKENvbWJpbmVFbnVtZXJhYmxlKTtmdW5jdGlvbiBDb21iaW5lRW51bWVyYWJsZShwKXt2YXIgZSxoPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpFLGI9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmcsZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106eCxtPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTprO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxDb21iaW5lRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxwKSxoPWYuYXNTZWxlY3RvcihoKSxiPWYuYXNTZWxlY3RvcihiKSxkPWYuYXNTZWxlY3RvcihkKSxtPWYuYXNFcXVhbGl0eUNvbXBhcmVyKG0pLGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IseS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQ29tYmluZUl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbyx1LGksbCxzLGMsZjtyZXR1cm4geS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj12LnNlbGVjdChwLGZ1bmN0aW9uKGUpe3JldHVybntrZXk6YihlKSxwYXJlbnQ6aChlKSx2YWx1ZTpkKGUpLGNoaWxkcmVuOltdfX0pLnRvQXJyYXkoKSx0PVtdLG49ci5sZW5ndGgsYT0wO2Nhc2UgNDppZighKGE8bikpe2UubmV4dD0yMjticmVha31vPXJbYV0sdT0hMSxpPTA7Y2FzZSA4OmlmKCEoaTxuKSl7ZS5uZXh0PTE4O2JyZWFrfWlmKGE9PT1pKXtlLm5leHQ9MTU7YnJlYWt9aWYoZj1yW2ldLG0oZi5rZXksby5wYXJlbnQpKXJldHVybiBmLmNoaWxkcmVuLnB1c2gobyksdT0hMCxlLmFicnVwdChcImJyZWFrXCIsMTgpO2UubmV4dD0xNTticmVhaztjYXNlIDE1OmkrKyxlLm5leHQ9ODticmVhaztjYXNlIDE4OnV8fHQucHVzaChvKTtjYXNlIDE5OmErKyxlLm5leHQ9NDticmVhaztjYXNlIDIyOmw9ZnVuY3Rpb24gY29tYmluZShuKXtyZXR1cm4gbmV3IFMobi5rZXksbi5wYXJlbnQsbi52YWx1ZSx5LmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCl7dmFyIHIsdDtyZXR1cm4geS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihuLmNoaWxkcmVuKSxlLnByZXY9MSxyLnMoKTtjYXNlIDM6aWYoKHQ9ci5uKCkpLmRvbmUpe2UubmV4dD05O2JyZWFrfXJldHVybiB0PXQudmFsdWUsZS5uZXh0PTcsY29tYmluZSh0KTtjYXNlIDc6ZS5uZXh0PTM7YnJlYWs7Y2FzZSA5OmUubmV4dD0xNDticmVhaztjYXNlIDExOmUucHJldj0xMSxlLnQwPWUuY2F0Y2goMSksci5lKGUudDApO2Nhc2UgMTQ6cmV0dXJuIGUucHJldj0xNCxyLmYoKSxlLmZpbmlzaCgxNCk7Y2FzZSAxNzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlLG51bGwsW1sxLDExLDE0LDE3XV0pfSkpfSxzPTAsYz10O2Nhc2UgMjQ6aWYoczxjLmxlbmd0aClyZXR1cm4gZj1jW3NdLGUubmV4dD0yOCxsKGYpO2UubmV4dD0zMTticmVhaztjYXNlIDI4OnMrKyxlLm5leHQ9MjQ7YnJlYWs7Y2FzZSAzMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxDb21iaW5lSXRlcmF0b3IpfSkpLGV9cmV0dXJuIENvbWJpbmVFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIjoxNTAsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEtleVNlbGVjdG9yXCI6MTU1LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQYXJlbnRTZWxlY3RvclwiOjE1NixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vSUNvbWJpbmVcIjo3MyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDU3OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCx1LmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsdS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShDb25jYXRFbnVtZXJhYmxlLGMpO3ZhciBuPV9jcmVhdGVTdXBlcihDb25jYXRFbnVtZXJhYmxlKTtmdW5jdGlvbiBDb25jYXRFbnVtZXJhYmxlKGEpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG89bmV3IEFycmF5KDE8ZT9lLTE6MCkscj0xO3I8ZTtyKyspb1tyLTFdPWFyZ3VtZW50c1tyXTsoMCxsLmRlZmF1bHQpKHRoaXMsQ29uY2F0RW51bWVyYWJsZSk7dmFyIHQsdT0odD1uLmNhbGwodGhpcyxhKSkuZ2V0UHJvdG9UeXBlKCk7cmV0dXJuIGYuZGVmaW5lUHJvcGVydHkoKDAscy5kZWZhdWx0KSh0KSxTeW1ib2wuaXRlcmF0b3IsaS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQ29uY2F0SXRlcmF0b3IoKXt2YXIgcix0LG47cmV0dXJuIGkuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLmRlbGVnYXRlWWllbGQoYSxcInQwXCIsMSk7Y2FzZSAxOnI9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobyksZS5wcmV2PTIsci5zKCk7Y2FzZSA0OmlmKCh0PXIubigpKS5kb25lKXtlLm5leHQ9MjM7YnJlYWt9aWYobj10LnZhbHVlLGYuaXNVbmRlZmluZWQobil8fGYuaXNTdHJpbmcobikmJlwic3RyaW5nXCIhPT11fHxmLmlzQXJndW1lbnRzKG4pKXtlLm5leHQ9MTk7YnJlYWt9aWYobltTeW1ib2wuaXRlcmF0b3JdKXJldHVybiBlLmRlbGVnYXRlWWllbGQobixcInQxXCIsOSk7ZS5uZXh0PTExO2JyZWFrO2Nhc2UgOTplLm5leHQ9MTc7YnJlYWs7Y2FzZSAxMTppZihmLmlzSXRlcmF0b3IobikpcmV0dXJuIGUuZGVsZWdhdGVZaWVsZChuLmFzRW51bWVyYWJsZSgpLFwidDJcIiwxMyk7ZS5uZXh0PTE1O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE3O2JyZWFrO2Nhc2UgMTU6cmV0dXJuIGUubmV4dD0xNyxuO2Nhc2UgMTc6ZS5uZXh0PTIxO2JyZWFrO2Nhc2UgMTk6cmV0dXJuIGUubmV4dD0yMSxuO2Nhc2UgMjE6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAyMzplLm5leHQ9Mjg7YnJlYWs7Y2FzZSAyNTplLnByZXY9MjUsZS50Mz1lLmNhdGNoKDIpLHIuZShlLnQzKTtjYXNlIDI4OnJldHVybiBlLnByZXY9Mjgsci5mKCksZS5maW5pc2goMjgpO2Nhc2UgMzE6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sQ29uY2F0SXRlcmF0b3IsbnVsbCxbWzIsMjUsMjgsMzFdXSl9KSksdH1yZXR1cm4gQ29uY2F0RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDU4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGI9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGQ9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksbT1lKFwiLi8uLi9jb3JlL2NvcmVcIiksbj1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoQ29weVdpdGhpbkVudW1lcmFibGUscyk7dmFyIHQ9X2NyZWF0ZVN1cGVyKENvcHlXaXRoaW5FbnVtZXJhYmxlKTtmdW5jdGlvbiBDb3B5V2l0aGluRW51bWVyYWJsZShlKXt2YXIgcixjPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowLGY9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjAscD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106MS8wO2lmKCgwLG8uZGVmYXVsdCkodGhpcyxDb3B5V2l0aGluRW51bWVyYWJsZSkscj10LmNhbGwodGhpcyxlKSxtLmlzQXJyYXkoZSkmJm0uYXJyYXkkY29weVdpdGhpbilyZXR1cm4oMCxpLmRlZmF1bHQpKHIseS5leHRlbmQobS5hcnJheSRjb3B5V2l0aGluLmNhbGwoZSxjLGYscCkpKTt2YXIgaD0oMCxhLmRlZmF1bHQpKHt9LFN5bWJvbC5pdGVyYXRvcixlW1N5bWJvbC5pdGVyYXRvcl0pO3JldHVybiBtLnNldFByb3BlcnR5KGUsU3ltYm9sLml0ZXJhdG9yLGIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXt2YXIgcix0LG4sYSxvLHUsaSxsLHM7cmV0dXJuIGIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKChjPDB8fGY8MHx8cDwwKSYmKGg9KDAsZC5kZWZhdWx0KShoKSxjPDAmJihjPWgubGVuZ3RoK2MpLGY8MCYmKGY9aC5sZW5ndGgrZikscDwwJiYocD1oLmxlbmd0aCtwKSksIShmPD1jKSl7ZS5uZXh0PTM0O2JyZWFrfXI9MCx0PVtdLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoaCksZS5wcmV2PTQsbi5zKCk7Y2FzZSA2OmlmKChsPW4ubigpKS5kb25lKXtlLm5leHQ9MjQ7YnJlYWt9aWYoYT1sLnZhbHVlLGY8PXImJnI8cCYmdC5wdXNoKGEpLHI8YylyZXR1cm4gZS5uZXh0PTEyLGE7ZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTI6ZS5uZXh0PTIxO2JyZWFrO2Nhc2UgMTQ6aWYodC5sZW5ndGgpcmV0dXJuIGUubmV4dD0xNyx0LnNoaWZ0KCk7ZS5uZXh0PTE5O2JyZWFrO2Nhc2UgMTc6ZS5uZXh0PTIxO2JyZWFrO2Nhc2UgMTk6cmV0dXJuIGUubmV4dD0yMSxhO2Nhc2UgMjE6cisrO2Nhc2UgMjI6ZS5uZXh0PTY7YnJlYWs7Y2FzZSAyNDplLm5leHQ9Mjk7YnJlYWs7Y2FzZSAyNjplLnByZXY9MjYsZS50MD1lLmNhdGNoKDQpLG4uZShlLnQwKTtjYXNlIDI5OnJldHVybiBlLnByZXY9Mjksbi5mKCksZS5maW5pc2goMjkpO2Nhc2UgMzI6ZS5uZXh0PTcyO2JyZWFrO2Nhc2UgMzQ6bz0wLHU9W10saT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihoKSxlLnByZXY9MzYsaS5zKCk7Y2FzZSAzODppZigobD1pLm4oKSkuZG9uZSl7ZS5uZXh0PTYzO2JyZWFrfWlmKHM9bC52YWx1ZSxvPGMpcmV0dXJuIGUubmV4dD00MyxzO2UubmV4dD00NTticmVhaztjYXNlIDQzOmUubmV4dD02MDticmVhaztjYXNlIDQ1OmlmKG88PXAmJnUucHVzaChzKSxmPD1vJiZvPHApcmV0dXJuIHUuc2hpZnQoKSxlLm5leHQ9NTAscztlLm5leHQ9NTI7YnJlYWs7Y2FzZSA1MDplLm5leHQ9NjA7YnJlYWs7Y2FzZSA1MjppZihvPT1wKXJldHVybiBlLmRlbGVnYXRlWWllbGQodSxcInQxXCIsNTQpO2UubmV4dD01NzticmVhaztjYXNlIDU0OnU9W10sZS5uZXh0PTYwO2JyZWFrO2Nhc2UgNTc6aWYocDxvKXJldHVybiBlLm5leHQ9NjAscztlLm5leHQ9NjA7YnJlYWs7Y2FzZSA2MDpvKys7Y2FzZSA2MTplLm5leHQ9Mzg7YnJlYWs7Y2FzZSA2MzplLm5leHQ9Njg7YnJlYWs7Y2FzZSA2NTplLnByZXY9NjUsZS50Mj1lLmNhdGNoKDM2KSxpLmUoZS50Mik7Y2FzZSA2ODpyZXR1cm4gZS5wcmV2PTY4LGkuZigpLGUuZmluaXNoKDY4KTtjYXNlIDcxOnJldHVybiBlLmRlbGVnYXRlWWllbGQodSxcInQzXCIsNzIpO2Nhc2UgNzI6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sX2NhbGxlZSxudWxsLFtbNCwyNiwyOSwzMl0sWzM2LDY1LDY4LDcxXV0pfSkpLCgwLGkuZGVmYXVsdCkocixlKX1yZXR1cm4gQ29weVdpdGhpbkVudW1lcmFibGV9KCk7ci5leHBvcnRzPW47dmFyIHk9ZShcIi4vLi4vRW51bWVyYWJsZVwiKX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI6OCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjoyMyxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw1OTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoRGVwdGhFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihEZXB0aEVudW1lcmFibGUpO2Z1bmN0aW9uIERlcHRoRW51bWVyYWJsZShvKXt2YXIgZTtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsRGVwdGhFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxmLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIERlcHRoSXRlcmF0b3IoKXt2YXIgcix0LG4sYTtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1bb10sdD1bb1tTeW1ib2wuaXRlcmF0b3JdKCldLG49ITE7Y2FzZSAzOmlmKCFyLmxlbmd0aHx8IXQubGVuZ3RoKXtlLm5leHQ9MTE7YnJlYWt9aWYobil7ZS5uZXh0PTc7YnJlYWt9cmV0dXJuIGUubmV4dD03LHJbci5sZW5ndGgtMV0udmFsdWU7Y2FzZSA3OmE9dFt0Lmxlbmd0aC0xXS5uZXh0KCksbj1hLmRvbmU/KHQucG9wKCksci5wb3AoKSwhMCk6KHIucHVzaChhLnZhbHVlKSx0LnB1c2goYS52YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKCkpLCExKSxlLm5leHQ9MzticmVhaztjYXNlIDExOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LERlcHRoSXRlcmF0b3IpfSkpLGV9cmV0dXJuIERlcHRoRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDYwOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShCcmVhZHRoU3ViVHJlZUVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEJyZWFkdGhTdWJUcmVlRW51bWVyYWJsZSk7ZnVuY3Rpb24gQnJlYWR0aFN1YlRyZWVFbnVtZXJhYmxlKG8sdSl7dmFyIGU7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEJyZWFkdGhTdWJUcmVlRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSksdT1wLmFzUHJlZGljYXRlKHUpLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsaS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gQnJlYWR0aFN1YlRyZWVJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiBpLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPVtvXSx0PVtvW1N5bWJvbC5pdGVyYXRvcl0oKV0sbj0hMTtjYXNlIDM6aWYoIXIubGVuZ3RofHwhdC5sZW5ndGgpe2UubmV4dD0xMTticmVha31pZighbiYmdShyW3IubGVuZ3RoLTFdLnZhbHVlKSlyZXR1cm4gZS5uZXh0PTcscltyLmxlbmd0aC0xXTtlLm5leHQ9NzticmVhaztjYXNlIDc6YT10W3QubGVuZ3RoLTFdLm5leHQoKSxuPWEuZG9uZT8odC5wb3AoKSxyLnBvcCgpLCEwKTooci5wdXNoKGEudmFsdWUpLHQucHVzaChhLnZhbHVlW1N5bWJvbC5pdGVyYXRvcl0oKSksITEpLGUubmV4dD0zO2JyZWFrO2Nhc2UgMTE6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sQnJlYWR0aFN1YlRyZWVJdGVyYXRvcil9KSksZX1yZXR1cm4gQnJlYWR0aFN1YlRyZWVFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw2MTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi9NYXBFbnVtZXJhYmxlXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoRGljdGlvbmFyeSxzKTt2YXIgZT1fY3JlYXRlU3VwZXIoRGljdGlvbmFyeSk7ZnVuY3Rpb24gRGljdGlvbmFyeSgpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxEaWN0aW9uYXJ5KSxlLmNhbGwodGhpcyxuZXcgTWFwKX1yZXR1cm4oMCxvLmRlZmF1bHQpKERpY3Rpb25hcnksW3trZXk6XCJ0b09iamVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGUscj17fSx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMpO3RyeXtmb3IodC5zKCk7IShlPXQubigpKS5kb25lOyl7dmFyIG49ZS52YWx1ZTtyW24ua2V5XT1uLnZhbHVlfX1jYXRjaChlKXt0LmUoZSl9ZmluYWxseXt0LmYoKX1yZXR1cm4gcn19XSksRGljdGlvbmFyeX0oKX0se1wiLi9NYXBFbnVtZXJhYmxlXCI6ODgsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjo3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sNjI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGg9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIiksZT1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoRGlzdGluY3RFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihEaXN0aW5jdEVudW1lcmFibGUpO2Z1bmN0aW9uIERpc3RpbmN0RW51bWVyYWJsZShvKXt2YXIgZSx1PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpiO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxEaXN0aW5jdEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbyksdT1wLmFzRXF1YWxpdHlDb21wYXJlcih1KSxmLmRlZmluZVByb3BlcnR5KCgwLGwuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGkuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIERpc3RpbmN0SXRlcmF0b3IoKXt2YXIgcix0LG4sYTtyZXR1cm4gaS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1bXSx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8pLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTEyO2JyZWFrfWlmKGE9bi52YWx1ZSxoLmNvbnRhaW5zKHIsYSx1KSl7ZS5uZXh0PTEwO2JyZWFrfXJldHVybiByLnB1c2goYSksZS5uZXh0PTEwLGE7Y2FzZSAxMDplLm5leHQ9NDticmVhaztjYXNlIDEyOmUubmV4dD0xNzticmVhaztjYXNlIDE0OmUucHJldj0xNCxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMTc6cmV0dXJuIGUucHJldj0xNyx0LmYoKSxlLmZpbmlzaCgxNyk7Y2FzZSAyMDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxEaXN0aW5jdEl0ZXJhdG9yLG51bGwsW1syLDE0LDE3LDIwXV0pfSkpLGV9cmV0dXJuIERpc3RpbmN0RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw2MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRBY3Rpb25cIiksZT1mdW5jdGlvbigpeygwLGEuZGVmYXVsdCkoRWFjaEVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEVhY2hFbnVtZXJhYmxlKTtmdW5jdGlvbiBFYWNoRW51bWVyYWJsZShhKXt2YXIgZSxvPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpwO3JldHVybigwLGkuZGVmYXVsdCkodGhpcyxFYWNoRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxhKSxmLmRlZmluZVByb3BlcnR5KCgwLGwuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEVhY2hJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYSksZS5wcmV2PTIsdC5zKCk7Y2FzZSA0OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTE7YnJlYWt9cmV0dXJuIG49bi52YWx1ZSxvKG4scisrKSxlLm5leHQ9OSxuO2Nhc2UgOTplLm5leHQ9NDticmVhaztjYXNlIDExOmUubmV4dD0xNjticmVhaztjYXNlIDEzOmUucHJldj0xMyxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMTY6cmV0dXJuIGUucHJldj0xNix0LmYoKSxlLmZpbmlzaCgxNik7Y2FzZSAxOTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxFYWNoSXRlcmF0b3IsbnVsbCxbWzIsMTMsMTYsMTldXSl9KSksZX1yZXR1cm4gRWFjaEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiOjE0NixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDY0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxpLmRlZmF1bHQpKEVtcHR5RW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoRW1wdHlFbnVtZXJhYmxlKTtmdW5jdGlvbiBFbXB0eUVudW1lcmFibGUoKXt2YXIgZTtyZXR1cm4oMCxvLmRlZmF1bHQpKHRoaXMsRW1wdHlFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxmLmRlZmluZVByb3BlcnR5KCgwLHUuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGEuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEVtcHR5SXRlcmF0b3IoKXtyZXR1cm4gYS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUuZGVsZWdhdGVZaWVsZChbXSxcInQwXCIsMSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEVtcHR5SXRlcmF0b3IpfSkpLGV9cmV0dXJuIEVtcHR5RW51bWVyYWJsZX0oKX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDY1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBFbnRyeShlLHIpeygwLGEuZGVmYXVsdCkodGhpcyxFbnRyeSksdGhpcy5rZXk9ZSx0aGlzLnZhbHVlPXJ9cmV0dXJuKDAsby5kZWZhdWx0KShFbnRyeSxbe2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIntcIit0aGlzLmtleStcIjpcIit0aGlzLnZhbHVlK1wifVwifX0se2tleTpcInRvT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57a2V5OnRoaXMua2V5LHZhbHVlOnRoaXMudmFsdWV9fX1dKSxFbnRyeX0oKX0se1wiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6NyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTJ9XSw2NjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksaD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShFeGNlcHRFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihFeGNlcHRFbnVtZXJhYmxlKTtmdW5jdGlvbiBFeGNlcHRFbnVtZXJhYmxlKG8sdSl7dmFyIGUsaT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YjtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsRXhjZXB0RW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxvKSxpPXAuYXNFcXVhbGl0eUNvbXBhcmVyKGkpLGYuZGVmaW5lUHJvcGVydHkoKDAscy5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gRXhjZXB0SXRlcmF0b3IoKXt2YXIgcix0LG4sYTtyZXR1cm4gbC5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1bXSx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8pLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTEzO2JyZWFrfWlmKGE9bi52YWx1ZSxoLmNvbnRhaW5zKHUsYSxpKSl7ZS5uZXh0PTExO2JyZWFrfWlmKGguY29udGFpbnMocixhLGkpKXtlLm5leHQ9MTE7YnJlYWt9cmV0dXJuIHIucHVzaChhKSxlLm5leHQ9MTEsYTtjYXNlIDExOmUubmV4dD00O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgyKSx0LmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHQuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEV4Y2VwdEl0ZXJhdG9yLG51bGwsW1syLDE1LDE4LDIxXV0pfSkpLGV9cmV0dXJuIEV4Y2VwdEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sNjc6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKSxjPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpLGY9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxwPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxvLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsby5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAscC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgdT1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxoPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxuPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShGaWxsRW51bWVyYWJsZSx1KTt2YXIgdD1fY3JlYXRlU3VwZXIoRmlsbEVudW1lcmFibGUpO2Z1bmN0aW9uIEZpbGxFbnVtZXJhYmxlKGUsYSl7dmFyIHIsbz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MCx1PTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXToxLzA7aWYoKDAsZi5kZWZhdWx0KSh0aGlzLEZpbGxFbnVtZXJhYmxlKSxyPXQuY2FsbCh0aGlzLGUpLGguaXNBcnJheShlKSYmaC5hcnJheSRmaWxsKXJldHVybigwLHAuZGVmYXVsdCkocixiLmV4dGVuZChoLmFycmF5JGZpbGwuY2FsbChlLGEsbyx1KSkpO3ZhciBpPSgwLGMuZGVmYXVsdCkoe30sU3ltYm9sLml0ZXJhdG9yLGVbU3ltYm9sLml0ZXJhdG9yXSk7cmV0dXJuIGguc2V0UHJvcGVydHkoZSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpe3ZhciByLHQsbjtyZXR1cm4gbC5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6KG88MHx8dTwwKSYmKGk9KDAscy5kZWZhdWx0KShpKSxvPDAmJihvPWkubGVuZ3RoK28pLHU8MCYmKHU9aS5sZW5ndGgrdSkpLHI9MCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGkpLGUucHJldj0zLHQucygpO2Nhc2UgNTppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTE3O2JyZWFrfWlmKG49bi52YWx1ZSxyPG98fHU8PXIpcmV0dXJuIGUubmV4dD0xMCxuO2UubmV4dD0xMjticmVhaztjYXNlIDEwOmUubmV4dD0xNDticmVhaztjYXNlIDEyOnJldHVybiBlLm5leHQ9MTQsYTtjYXNlIDE0OnIrKztjYXNlIDE1OmUubmV4dD01O2JyZWFrO2Nhc2UgMTc6ZS5uZXh0PTIyO2JyZWFrO2Nhc2UgMTk6ZS5wcmV2PTE5LGUudDA9ZS5jYXRjaCgzKSx0LmUoZS50MCk7Y2FzZSAyMjpyZXR1cm4gZS5wcmV2PTIyLHQuZigpLGUuZmluaXNoKDIyKTtjYXNlIDI1OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUsbnVsbCxbWzMsMTksMjIsMjVdXSl9KSksKDAscC5kZWZhdWx0KShyLGUpfXJldHVybiBGaWxsRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9bjt2YXIgYj1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjo4LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiOjIzLFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDY4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsaS5kZWZhdWx0KShHZW5lcmF0ZUVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEdlbmVyYXRlRW51bWVyYWJsZSk7ZnVuY3Rpb24gR2VuZXJhdGVFbnVtZXJhYmxlKHQpe3ZhciBlLG49MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuKDAsby5kZWZhdWx0KSh0aGlzLEdlbmVyYXRlRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSksZi5kZWZpbmVQcm9wZXJ0eSgoMCx1LmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixhLmRlZmF1bHQubWFyayhmdW5jdGlvbiBHZW5lcmF0ZUl0ZXJhdG9yKCl7dmFyIHI7cmV0dXJuIGEuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MDtjYXNlIDE6aWYocjxuKXJldHVybiBlLm5leHQ9NCx0KHIpO2UubmV4dD03O2JyZWFrO2Nhc2UgNDpyKyssZS5uZXh0PTE7YnJlYWs7Y2FzZSA3OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEdlbmVyYXRlSXRlcmF0b3IpfSkpLGV9cmV0dXJuIEdlbmVyYXRlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDY5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxjPWUoXCIuLy4uL2NvcmUvY29yZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKEdlbmVyYXRvckVudW1lcmFibGUscyk7dmFyIHQ9X2NyZWF0ZVN1cGVyKEdlbmVyYXRvckVudW1lcmFibGUpO2Z1bmN0aW9uIEdlbmVyYXRvckVudW1lcmFibGUoZSl7dmFyIHI7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEdlbmVyYXRvckVudW1lcmFibGUpLHI9dC5jYWxsKHRoaXMsW10pLGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShyKSxTeW1ib2wuaXRlcmF0b3IsZnVuY3Rpb24oKXtyZXR1cm4gZSgpfSkscn1yZXR1cm4gR2VuZXJhdG9yRW51bWVyYWJsZX0oKX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sNzA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpLGQ9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLG09ZShcIi4vLi4vY29yZS9jb3JlXCIpLHk9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLHY9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCIpLGc9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSx4PWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGM9ZShcIi4vSUdyb3VwaW5nXCIpLEU9ZShcIi4vRW50cnlcIiksaz1mdW5jdGlvbih0LG4sYSxvKXtyZXR1cm4gbmV3IGMobixkLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCl7dmFyIHI7cmV0dXJuIGQuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MDtjYXNlIDE6aWYoISh0Lmxlbmd0aD5yfHxvKCkpKXtlLm5leHQ9OTticmVha31pZighKHQubGVuZ3RoPnIpKXtlLm5leHQ9NzticmVha31pZihhKG4sdFtyXS5rZXkpKXJldHVybiBlLm5leHQ9Nix0W3JdLnZhbHVlO2UubmV4dD02O2JyZWFrO2Nhc2UgNjpyKys7Y2FzZSA3OmUubmV4dD0xO2JyZWFrO2Nhc2UgOTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlKX0pKX0sZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoR3JvdXBKb2luRW51bWVyYWJsZSxzKTt2YXIgcj1fY3JlYXRlU3VwZXIoR3JvdXBKb2luRW51bWVyYWJsZSk7ZnVuY3Rpb24gR3JvdXBKb2luRW51bWVyYWJsZShzLGMpe3ZhciBlLGY9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnYscD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106eCxoPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTp4LGI9NTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOmc7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLEdyb3VwSm9pbkVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMscykscD15LmFzU2VsZWN0b3IocCksaD15LmFzU2VsZWN0b3IoaCksYj15LmFzRXF1YWxpdHlDb21wYXJlcihiKSxtLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGQuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEdyb3VwSm9pbkl0ZXJhdG9yKCl7dmFyIHQscixuLGEsbyx1LGksbDtyZXR1cm4gZC5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6dD1bXSxuPXI9MCxhPWNbU3ltYm9sLml0ZXJhdG9yXSgpLG89ZnVuY3Rpb24oKXt2YXIgZSxyPWEubmV4dCgpO3JldHVybiByLmRvbmV8fChlPXIudmFsdWUsdC5wdXNoKG5ldyBFKGgoZSxuKyspLGUpKSksIXIuZG9uZX0sdT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzKSxlLnByZXY9Myx1LnMoKTtjYXNlIDU6aWYoKGw9dS5uKCkpLmRvbmUpe2UubmV4dD0xMzticmVha31yZXR1cm4gaT1sLnZhbHVlLGw9cChpLHIrKyksZS5uZXh0PTEwLGYoaSxrKHQsbCxiLG8pKTtjYXNlIDEwOnIrKztjYXNlIDExOmUubmV4dD01O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgzKSx1LmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHUuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEdyb3VwSm9pbkl0ZXJhdG9yLG51bGwsW1szLDE1LDE4LDIxXV0pfSkpLGV9cmV0dXJuIEdyb3VwSm9pbkVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIjoxNTAsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEpvaW5TZWxlY3RvclwiOjE1NCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vRW50cnlcIjo2NSxcIi4vSUdyb3VwaW5nXCI6NzQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw3MTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxoPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksYj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksbT1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLHk9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIiksdj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRSZXN1bHRTZWxlY3RvclwiKSxnPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIikseD1lKFwiLi8uLi9tZXRob2RzL2VxdWFsaXR5UHJlZGljYXRlXCIpLEU9ZShcIi4vSUdyb3VwaW5nXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKEdyb3VwZWRFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihHcm91cGVkRW51bWVyYWJsZSk7ZnVuY3Rpb24gR3JvdXBlZEVudW1lcmFibGUoYSl7dmFyIGUscz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06eSxjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp5LGY9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOnYscD00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06ZztyZXR1cm4oMCxvLmRlZmF1bHQpKHRoaXMsR3JvdXBlZEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsYSkscz1kLmFzU2VsZWN0b3IocyksYz1kLmFzU2VsZWN0b3IoYyksZj1kLmFzU2VsZWN0b3IoZikscD1kLmFzRXF1YWxpdHlDb21wYXJlcihwKSxiLmRlZmluZVByb3BlcnR5KCgwLHUuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGguZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEdyb3VwZWRJdGVyYXRvcigpe3ZhciBvLHUsaSxsLHIsdCxuO3JldHVybiBoLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpvPVtdLHU9bmV3IE1hcCxpPVN5bWJvbChcIm5vbmVLZXlcIiksbD1hW1N5bWJvbC5pdGVyYXRvcl0oKSxyPWZ1bmN0aW9uIGhhc05leHQoKXt2YXIgZSxyLHQsbixhPWwubmV4dCgpO3JldHVybiBhLmRvbmV8fChlPXMoYS52YWx1ZSkscj1jKGEudmFsdWUpLCh0PW0ud2hlcmUodS5rZXlzKCkseChlLHApKS5maXJzdE9yRGVmYXVsdChpKSk9PT1pPyh1LnNldChlLFtdKSxvLnB1c2gobmV3IEUoZSwobj1lLGguZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXt2YXIgcix0O3JldHVybiBoLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPXUuZ2V0KG4pLHQ9MDtjYXNlIDI6aWYoIShyLmxlbmd0aD50fHxoYXNOZXh0KCkpKXtlLm5leHQ9ODticmVha31pZihyLmxlbmd0aD50KXJldHVybiBlLm5leHQ9NixyW3QrK107ZS5uZXh0PTY7YnJlYWs7Y2FzZSA2OmUubmV4dD0yO2JyZWFrO2Nhc2UgODpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlKX0pKSkpKTplPXQsdS5nZXQoZSkucHVzaChyKSksIWEuZG9uZX0sdD0wO2Nhc2UgNjppZighKG8ubGVuZ3RoPnR8fHIoKSkpe2UubmV4dD0xMzticmVha31pZihvLmxlbmd0aD50KXJldHVybiBuPW9bdCsrXSxlLm5leHQ9MTEsZihuLmtleSxuKTtlLm5leHQ9MTE7YnJlYWs7Y2FzZSAxMTplLm5leHQ9NjticmVhaztjYXNlIDEzOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEdyb3VwZWRJdGVyYXRvcil9KSksZX1yZXR1cm4gR3JvdXBlZEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UmVzdWx0U2VsZWN0b3JcIjoxNTgsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCI6MTYwLFwiLi8uLi9tZXRob2RzL2VxdWFsaXR5UHJlZGljYXRlXCI6MTY1LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lHcm91cGluZ1wiOjc0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sNzI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuL0dlbmVyYXRvckVudW1lcmFibGVcIiksYz1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoSUNodW5rLHMpO3ZhciBuPV9jcmVhdGVTdXBlcihJQ2h1bmspO2Z1bmN0aW9uIElDaHVuayhlLHIpeygwLGEuZGVmYXVsdCkodGhpcyxJQ2h1bmspLHI9bi5jYWxsKHRoaXMsciksYy5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKHIpLFwiaW5kZXhcIixmdW5jdGlvbigpe3JldHVybiBlfSwhMCwhMCk7dmFyIHQ9cltTeW1ib2wuaXRlcmF0b3JdO3JldHVybiBjLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkociksU3ltYm9sLml0ZXJhdG9yLGZ1bmN0aW9uKCl7cmV0dXJuIHQoKX0pLHJ9cmV0dXJuIElDaHVua30oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vR2VuZXJhdG9yRW51bWVyYWJsZVwiOjY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw3MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxjLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgZj1lKFwiLi9JVHJlZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxoPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFZhbHVlU2V0dGVyXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q2hpbGRyZW5TZXR0ZXJcIiksZT1mdW5jdGlvbigpeygwLHMuZGVmYXVsdCkoSUNvbWJpbmUsZik7dmFyIG89X2NyZWF0ZVN1cGVyKElDb21iaW5lKTtmdW5jdGlvbiBJQ29tYmluZShlLHIsdCxuKXsoMCx1LmRlZmF1bHQpKHRoaXMsSUNvbWJpbmUpLG49by5jYWxsKHRoaXMsdCxuKSxwLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkobiksXCJwYXJlbnRcIixmdW5jdGlvbigpe3JldHVybiByfSwhMCwhMCkscC5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKG4pLFwia2V5XCIsZnVuY3Rpb24oKXtyZXR1cm4gZX0sITAsITApO3ZhciBhPW5bU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gcC5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKG4pLFN5bWJvbC5pdGVyYXRvcixmdW5jdGlvbigpe3JldHVybiBhKCl9KSxufXJldHVybigwLGEuZGVmYXVsdCkoSUNvbWJpbmUsW3trZXk6XCJ0b09iamVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9KDAsbC5kZWZhdWx0KSgoMCxjLmRlZmF1bHQpKElDb21iaW5lLnByb3RvdHlwZSksXCJ0b09iamVjdFwiLHRoaXMpLmNhbGwodGhpcyk7cmV0dXJuIHZvaWQgMCE9PXRoaXMua2V5JiZudWxsIT09dGhpcy5rZXkmJihlLmtleT10aGlzLmtleSksdm9pZCAwIT09dGhpcy5wYXJlbnQmJm51bGwhPT10aGlzLnBhcmVudCYmKGUucGFyZW50PXRoaXMucGFyZW50KSxlfX0se2tleTpcInRvVmFsdWVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmgscj0oMCxsLmRlZmF1bHQpKCgwLGMuZGVmYXVsdCkoSUNvbWJpbmUucHJvdG90eXBlKSxcInRvT2JqZWN0XCIsdGhpcykuY2FsbCh0aGlzLGUscik7cmV0dXJuIHZvaWQgMCE9PXRoaXMua2V5JiZudWxsIT09dGhpcy5rZXkmJihyLmtleT10aGlzLmtleSksdm9pZCAwIT09dGhpcy5wYXJlbnQmJm51bGwhPT10aGlzLnBhcmVudCYmKHIucGFyZW50PXRoaXMucGFyZW50KSxyfX1dKSxJQ29tYmluZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q2hpbGRyZW5TZXR0ZXJcIjoxNDgsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFZhbHVlU2V0dGVyXCI6MTYzLFwiLi9JVHJlZVwiOjc3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6NyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0XCI6OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDc0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi9HZW5lcmF0b3JFbnVtZXJhYmxlXCIpLGM9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKElHcm91cGluZyxzKTt2YXIgbj1fY3JlYXRlU3VwZXIoSUdyb3VwaW5nKTtmdW5jdGlvbiBJR3JvdXBpbmcoZSxyKXsoMCxhLmRlZmF1bHQpKHRoaXMsSUdyb3VwaW5nKSxyPW4uY2FsbCh0aGlzLHIpLGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShyKSxcImtleVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGV9LCEwLCEwKTt2YXIgdD1yW1N5bWJvbC5pdGVyYXRvcl07cmV0dXJuIGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShyKSxTeW1ib2wuaXRlcmF0b3IsZnVuY3Rpb24oKXtyZXR1cm4gdCgpfSkscn1yZXR1cm4gSUdyb3VwaW5nfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi9HZW5lcmF0b3JFbnVtZXJhYmxlXCI6NjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDc1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGM9KGUoXCIuLy4uL2NvcmUvY29yZVwiKSxlKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIikpLGY9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEtleVNlbGVjdG9yXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0VmFsdWVTZWxlY3RvclwiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiKSxkPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKElNYXBFbnVtZXJhYmxlLHMpO3ZhciBlPV9jcmVhdGVTdXBlcihJTWFwRW51bWVyYWJsZSk7ZnVuY3Rpb24gSU1hcEVudW1lcmFibGUoKXtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsSU1hcEVudW1lcmFibGUpLGUuY2FsbCh0aGlzLHt9KX1yZXR1cm4oMCxvLmRlZmF1bHQpKElNYXBFbnVtZXJhYmxlLFt7a2V5OlwidG9PYmplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwLHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmgsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YixlPWMuYXNTZWxlY3RvcihlKSxyPWMuYXNTZWxlY3RvcihyKSx0PWMuYXNTYW1lQ29tcGFyZXIodCk7cmV0dXJuIHRoaXMudG9EaWN0aW9uYXJ5KGUscix0KS50b09iamVjdCgpfX0se2tleTpcInRvRGljdGlvbmFyeVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnAscj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aCx0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiLGU9Yy5hc1NlbGVjdG9yKGUpLHI9Yy5hc1NlbGVjdG9yKHIpLHQ9Yy5hc1NhbWVDb21wYXJlcih0KTtyZXR1cm4gZi50b0RpY3Rpb25hcnkodGhpcyxlLHIsdCl9fSx7a2V5OlwidG9Mb29rdXBcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpwLHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmgsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YixlPWMuYXNTZWxlY3RvcihlKSxyPWMuYXNTZWxlY3RvcihyKSx0PWMuYXNTYW1lQ29tcGFyZXIodCk7cmV0dXJuIGYudG9Mb29rdXAodGhpcyxlLHIsdCl9fSx7a2V5OlwiZm9yRWFjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGUscj0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMpO3RyeXtmb3IodC5zKCk7IShlPXQubigpKS5kb25lOyl7dmFyIG49ZS52YWx1ZTtyKG4udmFsdWUsbi5rZXkpfX1jYXRjaChlKXt0LmUoZSl9ZmluYWxseXt0LmYoKX19fV0pLElNYXBFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEFjdGlvblwiOjE0NixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0S2V5U2VsZWN0b3JcIjoxNTUsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0VmFsdWVTZWxlY3RvclwiOjE2MixcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6NyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDc2OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxoPWUoXCIuLy4uL0VudW1lcmFibGVcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiKSxkPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCIpLG09U3ltYm9sLmZvcihcIkZJUlNUXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKElPcmRlcmVkRW51bWVyYWJsZSxzKTt2YXIgcj1fY3JlYXRlU3VwZXIoSU9yZGVyZWRFbnVtZXJhYmxlKTtmdW5jdGlvbiBJT3JkZXJlZEVudW1lcmFibGUobCl7dmFyIGUscz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsSU9yZGVyZWRFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGwpLHM9cC5hc0NvbXBhcmVyKHMpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gT3JkZXJlZEl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbyx1LGk7cmV0dXJuIGMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9W10sdD1tLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobCk7dHJ5e2ZvcihuLnMoKTshKGE9bi5uKCkpLmRvbmU7KW89YS52YWx1ZSx0PT09bT90PW86cyh0LG8pPD0wP3IucHVzaChvKTooci51bnNoaWZ0KHQpLHQ9byl9Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9aWYodCE9PW0pcmV0dXJuIGUubmV4dD03LHQ7ZS5uZXh0PTI0O2JyZWFrO2Nhc2UgNzp1PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIuc29ydChzKSksZS5wcmV2PTgsdS5zKCk7Y2FzZSAxMDppZigoaT11Lm4oKSkuZG9uZSl7ZS5uZXh0PTE2O2JyZWFrfXJldHVybiBpPWkudmFsdWUsZS5uZXh0PTE0LGk7Y2FzZSAxNDplLm5leHQ9MTA7YnJlYWs7Y2FzZSAxNjplLm5leHQ9MjE7YnJlYWs7Y2FzZSAxODplLnByZXY9MTgsZS50MD1lLmNhdGNoKDgpLHUuZShlLnQwKTtjYXNlIDIxOnJldHVybiBlLnByZXY9MjEsdS5mKCksZS5maW5pc2goMjEpO2Nhc2UgMjQ6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sT3JkZXJlZEl0ZXJhdG9yLG51bGwsW1s4LDE4LDIxLDI0XV0pfSkpLGYuZGVmaW5lUHJvcGVydGllcygoMCxvLmRlZmF1bHQpKGUpLHt0aGVuQnk6ZnVuY3Rpb24oKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YixyPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpkLGU9cC5hc1NlbGVjdG9yKGUpLHI9cC5hc0NvbXBhcmVyKHIpO3JldHVybiBoLnRoZW5CeSh0aGlzLGUscil9LHRoZW5CeURlc2NlbmRpbmc6ZnVuY3Rpb24oKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YixyPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpkLGU9cC5hc1NlbGVjdG9yKGUpLHI9cC5hc0NvbXBhcmVyKHIpO3JldHVybiBoLnRoZW5CeURlc2NlbmRpbmcodGhpcyxlLHIpfX0pLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxJT3JkZXJlZEVudW1lcmFibGUuc291cmNlLGwpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxJT3JkZXJlZEVudW1lcmFibGUub3JkZXJCeUNvbXBhcmVyLHMpLGV9cmV0dXJuIElPcmRlcmVkRW51bWVyYWJsZX0oKTtlLnNvdXJjZT1TeW1ib2woXCJJT3JkZXJlZEVudW1lcmFibGUuc291cmNlXCIpLGUub3JkZXJCeUNvbXBhcmVyPVN5bWJvbChcIklPcmRlcmVkRW51bWVyYWJsZS5vcmRlckJ5Q29tcGFyZXJcIiksci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q29tcGFyZXJcIjoxNDksXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCI6MTYwLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw3NzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxjPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxzLmRlZmF1bHQpKHRoaXMscil9fWUoXCJleHRlbmRcIik7dmFyIGY9ZShcIi4vR2VuZXJhdG9yRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL0VudW1lcmFibGVcIiksaD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksYj1lKFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm90QW5jZXN0b3JPZkV4Y2VwdGlvblwiKSxkPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxtPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSx5PWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIiksdj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNldHRlclwiKSxnPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdENoaWxkcmVuU2V0dGVyXCIpLHg9ZnVuY3Rpb24oKXsoMCxsLmRlZmF1bHQpKElUcmVlLGYpO3ZhciBuPV9jcmVhdGVTdXBlcihJVHJlZSk7ZnVuY3Rpb24gSVRyZWUoZSxyKXsoMCxvLmRlZmF1bHQpKHRoaXMsSVRyZWUpLHI9bi5jYWxsKHRoaXMsciksaC5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKHIpLFwidmFsdWVcIixmdW5jdGlvbigpe3JldHVybiBlfSwhMCwhMCk7dmFyIHQ9cltTeW1ib2wuaXRlcmF0b3JdO3JldHVybiBoLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkociksU3ltYm9sLml0ZXJhdG9yLGZ1bmN0aW9uKCl7cmV0dXJuIHQoKX0pLGguZGVmaW5lUHJvcGVydHkoKDAsaS5kZWZhdWx0KShyKSxcImNoaWxkcmVuXCIsZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGYodCl9LCEwLCEwKSxyfXJldHVybigwLHUuZGVmYXVsdCkoSVRyZWUsW3trZXk6XCJ2YWx1ZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcC5zZWxlY3QodGhpcy5jaGlsZHJlbixmdW5jdGlvbihlKXtyZXR1cm4gZS52YWx1ZX0pfX0se2tleTpcImdldENoaWxkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHAuZWxlbWVudEF0KHRoaXMuY2hpbGRyZW4sZSl9fSx7a2V5OlwiZ2V0VmFsdWVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRDaGlsZChlKS52YWx1ZX19LHtrZXk6XCJ0b1ZhbHVlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgcj0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Zyx0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2LHQ9ZC5hc1NldHRlcih0KSxyPWQuYXNTZXR0ZXIociksZT17fTt2b2lkIDAhPT10aGlzLnZhbHVlJiZ0KGUsdGhpcy52YWx1ZSk7dmFyIG49cC5zZWxlY3QodGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZS50b1ZhbHVlKHIsdCl9KS50b0FycmF5KCk7cmV0dXJuIG4ubGVuZ3RoJiZyKGUsbiksZX19LHtrZXk6XCJ0b09iamVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9e3ZhbHVlOnRoaXMudmFsdWV9LHI9cC5zZWxlY3QodGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZS50b09iamVjdCgpfSkudG9BcnJheSgpO3JldHVybiByLmxlbmd0aCYmKGUuY2hpbGRyZW49ciksaC5pc1VuZGVmaW5lZCh0aGlzLnBhcmVudCl8fChlLnBhcmVudD10aGlzLnBhcmVudCksZX19LHtrZXk6XCJicmVhZHRoVHJhdmVyc2VcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgSSh0aGlzKX19LHtrZXk6XCJicmVhZHRoU2VhcmNoXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bTtyZXR1cm4gcC5maXJzdCh0aGlzLmJyZWFkdGhUcmF2ZXJzZSgpLGUpfX0se2tleTpcImJyZWFkdGhTdWJUcmVlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBDKHRoaXMsZSl9fSx7a2V5OlwiZGVwdGhUcmF2ZXJzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBSKHRoaXMpfX0se2tleTpcImRlcHRoU2VhcmNoXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bTtyZXR1cm4gcC5maXJzdCh0aGlzLmRlcHRoVHJhdmVyc2UoKSxlKX19LHtrZXk6XCJkZXB0aFN1YlRyZWVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IE8odGhpcyxlKX19LHtrZXk6XCJsb3dlc3RBbmNlc3RvclwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspbFtyXT1hcmd1bWVudHNbcl07dmFyIHM9bC5sZW5ndGgsYz1uZXcgQXJyYXkocykuZmlsbCghMSksdD1mdW5jdGlvbiBzZWFyY2goZSl7dmFyIHIsdD0wLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobCk7dHJ5e2ZvcihuLnMoKTshKHI9bi5uKCkpLmRvbmU7KXt2YXIgYT1yLnZhbHVlO2lmKCFjW3RdJiZJVHJlZS5pc1NhbWVOb2RlKGUsYSkpe2NbdF09ITAscy0tO2JyZWFrfXQrK319Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9dmFyIG8sdT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKHUucygpOyEobz11Lm4oKSkuZG9uZTspe3ZhciBpPXNlYXJjaChvLnZhbHVlKTtpZihpKXJldHVybiBpO2lmKDA9PT1zKXJldHVybiBlfX1jYXRjaChlKXt1LmUoZSl9ZmluYWxseXt1LmYoKX1yZXR1cm4hMX0odGhpcyk7aWYodClyZXR1cm4gdC52YWx1ZTt0aHJvdyBuZXcgYih0aGlzLGxbYy5tYXAoZnVuY3Rpb24oZSxyKXtyZXR1cm57bWF0Y2g6ZSxpbmRleDpyfX0pLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIWUubWF0Y2h9KS5pbmRleF0pfX0se2tleTpcImlzQ2hpbGRPZlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLmlzUGFyZW50T2YodGhpcyl9fSx7a2V5OlwiaXNQYXJlbnRPZlwiLHZhbHVlOmZ1bmN0aW9uKHIpe3JldHVybiBwLmFueSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBJVHJlZS5pc1NhbWVOb2RlKGUscil9KX19LHtrZXk6XCJpc0Rlc2NlbmRhbnRPZlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLmlzQW5jZXN0b3JPZih0aGlzKX19LHtrZXk6XCJpc0FuY2VzdG9yT2ZcIix2YWx1ZTpmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24gc2VhcmNoKGUpe2lmKElUcmVlLmlzU2FtZU5vZGUoZSxuKSlyZXR1cm4hMDt2YXIgcix0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodC5zKCk7IShyPXQubigpKS5kb25lOylpZihzZWFyY2goci52YWx1ZSkpcmV0dXJuITB9Y2F0Y2goZSl7dC5lKGUpfWZpbmFsbHl7dC5mKCl9cmV0dXJuITF9KHRoaXMpfX0se2tleTpcImdldFBhcmVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdldFBhcmVudE5vZGUoZSkudmFsdWV9fSx7a2V5OlwiZ2V0UGFyZW50Tm9kZVwiLHZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBlPWZ1bmN0aW9uIHNlYXJjaChlKXtpZihJVHJlZS5pc1NhbWVOb2RlKGUsYSkpcmV0dXJuITA7dmFyIHIsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlKTt0cnl7Zm9yKHQucygpOyEocj10Lm4oKSkuZG9uZTspe3ZhciBuPXNlYXJjaChyLnZhbHVlKTtpZighMD09PW4pcmV0dXJuIGU7aWYobilyZXR1cm4gbn19Y2F0Y2goZSl7dC5lKGUpfWZpbmFsbHl7dC5mKCl9cmV0dXJuITF9KHRoaXMpO2lmKGUmJiEwIT09ZSlyZXR1cm4gZTt0aHJvdyBuZXcgYih0aGlzLGEpfX0se2tleTpcInByZXZBbGxOb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgXyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcInByZXZOb2RlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHAubGFzdCh0aGlzLnByZXZBbGxOb2RlcyhlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKSl9fSx7a2V5OlwibmV4dEFsbE5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBUKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSl9fSx7a2V5OlwibmV4dE5vZGVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gcC5maXJzdCh0aGlzLm5leHRBbGxOb2RlcyhlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKSl9fSx7a2V5Olwic2libGluZ05vZGVzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBxKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSl9fSx7a2V5OlwicHJldkFsbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcInByZXZcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gcC5sYXN0KHRoaXMucHJldkFsbChlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKSl9fSx7a2V5OlwibmV4dEFsbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfX0se2tleTpcIm5leHRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gcC5maXJzdCh0aGlzLm5leHRBbGwoZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSkpfX0se2tleTpcInNpYmxpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBBKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bSl9fSx7a2V5OlwicGF0aFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnBhdGhUbyh0aGlzKX19LHtrZXk6XCJwYXRoVG9cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGsodGhpcyxlKX19LHtrZXk6XCJwYXRoTm9kZXNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXRoTm9kZXNUbyh0aGlzKX19LHtrZXk6XCJwYXRoTm9kZXNUb1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUyh0aGlzLGUpfX0se2tleTpcImRlZ3JlZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm0sdD1kLmFzUHJlZGljYXRlKHQpO3JldHVybiBwLmNvdW50KHRoaXMuY2hpbGRyZW4sZnVuY3Rpb24oZSxyKXtyZXR1cm4gdChlLnZhbHVlLHIpfSl9fSx7a2V5OlwiZGVwdGhcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTptLHQ9ZC5hc1ByZWRpY2F0ZSh0KTtyZXR1cm4gcC53aGVyZSh0aGlzLmNoaWxkcmVuLGZ1bmN0aW9uKGUscil7cmV0dXJuIHQoZS52YWx1ZSxyKX0pLm1heE9yRGVmYXVsdCgwLGZ1bmN0aW9uKGUpe3JldHVybiBlLmRlcHRoKHQpfSkrMX19LHtrZXk6XCJpc0JpbmFyeVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVncmVlKCk8PTImJnAuYWxsKHRoaXMuY2hpbGRyZW4sZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXNCaW5hcnkoKX0pfX0se2tleTpcImlzRnVsbEJpbmFyeVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5kZWdyZWUoKTtyZXR1cm4gMD09PWV8fDI9PT1lJiZwLmFsbCh0aGlzLmNoaWxkcmVuLGZ1bmN0aW9uKGUpe3JldHVybiBlLmlzRnVsbEJpbmFyeSgpfSl9fSx7a2V5OlwiaXNDb21wbGV0ZUJpbmFyeVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHI9W3RoaXNdLHQ9ITE7ci5sZW5ndGg7KWlmKGU9ci5zaGlmdCgpLHQpe2lmKDAhPT1lLmRlZ3JlZSgpKXJldHVybiExfWVsc2V7dmFyIG49ZS5kZWdyZWUoKTtpZigyPG4pcmV0dXJuITE7MiE9PW4mJih0PSEwKSxyLnB1c2guYXBwbHkociwoMCxhLmRlZmF1bHQpKGUuY2hpbGRyZW4pKX1yZXR1cm4hMH19LHtrZXk6XCJpc1BlcmZlY3RCaW5hcnlcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1bdGhpc10scj1bXTtlLmxlbmd0aDspe3ZhciB0LG49KHQ9ZS5zaGlmdCgpKS5kZWdyZWUoKTtpZigwPT09bil7aWYoci5sZW5ndGgpcmV0dXJuITF9ZWxzZXtpZigyIT09bilyZXR1cm4hMTtyLnB1c2guYXBwbHkociwoMCxhLmRlZmF1bHQpKHQuY2hpbGRyZW4pKX0hZS5sZW5ndGgmJnIubGVuZ3RoJiYoZT1yLHI9W10pfXJldHVybiEwfX0se2tleTpcImFzQmluYXJ5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEUodGhpcyl9fV0pLElUcmVlfSgpO3guaXNTYW1lTm9kZT1mdW5jdGlvbihlLHIpe3ZhciB0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp5LHQ9ZC5hc0NvbXBhcmVyKHQpO3JldHVybiBlPT09cnx8dChlLnZhbHVlLHIgaW5zdGFuY2VvZiB4P3IudmFsdWU6cil9LHIuZXhwb3J0cz14O3ZhciBFPWUoXCIuL0JpbmFyeVRyZWVcIiksaz1lKFwiLi9QYXRoVG9FbnVtZXJhYmxlXCIpLFM9ZShcIi4vUGF0aE5vZGVzVG9FbnVtZXJhYmxlXCIpLEk9ZShcIi4vQnJlYWR0aEVudW1lcmFibGVcIiksUj1lKFwiLi9EZXB0aEVudW1lcmFibGVcIiksQz1lKFwiLi9CcmVhZHRoU3ViVHJlZUVudW1lcmFibGVcIiksTz1lKFwiLi9EZXB0aFN1YlRyZWVFbnVtZXJhYmxlXCIpLHc9ZShcIi4vUHJldkVudW1lcmFibGVcIiksUD1lKFwiLi9OZXh0RW51bWVyYWJsZVwiKSxBPWUoXCIuL1NpYmxpbmdzRW51bWVyYWJsZVwiKSxfPWUoXCIuL1ByZXZOb2Rlc0VudW1lcmFibGVcIiksVD1lKFwiLi9OZXh0Tm9kZXNFbnVtZXJhYmxlXCIpLHE9ZShcIi4vU2libGluZ05vZGVzRW51bWVyYWJsZVwiKX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm90QW5jZXN0b3JPZkV4Y2VwdGlvblwiOjQyLFwiLi8uLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNldHRlclwiOjE0OCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCI6MTU3LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNldHRlclwiOjE2MyxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi9CaW5hcnlUcmVlXCI6NTAsXCIuL0JyZWFkdGhFbnVtZXJhYmxlXCI6NTEsXCIuL0JyZWFkdGhTdWJUcmVlRW51bWVyYWJsZVwiOjUyLFwiLi9EZXB0aEVudW1lcmFibGVcIjo1OSxcIi4vRGVwdGhTdWJUcmVlRW51bWVyYWJsZVwiOjYwLFwiLi9HZW5lcmF0b3JFbnVtZXJhYmxlXCI6NjksXCIuL05leHRFbnVtZXJhYmxlXCI6OTEsXCIuL05leHROb2Rlc0VudW1lcmFibGVcIjo5MixcIi4vUGF0aE5vZGVzVG9FbnVtZXJhYmxlXCI6OTcsXCIuL1BhdGhUb0VudW1lcmFibGVcIjo5OCxcIi4vUHJldkVudW1lcmFibGVcIjoxMDUsXCIuL1ByZXZOb2Rlc0VudW1lcmFibGVcIjoxMDYsXCIuL1NpYmxpbmdOb2Rlc0VudW1lcmFibGVcIjoxMTYsXCIuL1NpYmxpbmdzRW51bWVyYWJsZVwiOjExNyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI6MjMsZXh0ZW5kOjI4fV0sNzg6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxsLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLGkuZGVmYXVsdCkoSW5PcmRlckVudW1lcmFibGUsYyk7dmFyIHQ9X2NyZWF0ZVN1cGVyKEluT3JkZXJFbnVtZXJhYmxlKTtmdW5jdGlvbiBJbk9yZGVyRW51bWVyYWJsZShyKXt2YXIgZTtyZXR1cm4oMCxvLmRlZmF1bHQpKHRoaXMsSW5PcmRlckVudW1lcmFibGUpLGU9dC5jYWxsKHRoaXMsW10pLGYuZGVmaW5lUHJvcGVydHkoKDAsdS5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gSW5PcmRlckl0ZXJhdG9yKCl7cmV0dXJuIGEuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKHIuaGFzTGVmdCgpKXJldHVybiBlLmRlbGVnYXRlWWllbGQobmV3IEluT3JkZXJFbnVtZXJhYmxlKHIubGVmdCksXCJ0MFwiLDIpO2UubmV4dD0yO2JyZWFrO2Nhc2UgMjpyZXR1cm4gZS5uZXh0PTQsci52YWx1ZTtjYXNlIDQ6aWYoci5oYXNSaWdodCgpKXJldHVybiBlLmRlbGVnYXRlWWllbGQobmV3IEluT3JkZXJFbnVtZXJhYmxlKHIucmlnaHQpLFwidDFcIiw2KTtlLm5leHQ9NjticmVhaztjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sSW5PcmRlckl0ZXJhdG9yKX0pKSxlfXJldHVybiBJbk9yZGVyRW51bWVyYWJsZX0oKX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDc5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCx1LmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsdS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgaT1lKFwiLi9CaW5hcnlUcmVlXCIpLGY9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob1N1Y2hFbGVtZW50c0V4Y2VwdGlvblwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShJbk9yZGVyVHJlZSxpKTt2YXIgcz1fY3JlYXRlU3VwZXIoSW5PcmRlclRyZWUpO2Z1bmN0aW9uIEluT3JkZXJUcmVlKGUpeygwLGMuZGVmYXVsdCkodGhpcyxJbk9yZGVyVHJlZSk7dmFyIHI9e30sdD1mLnRvQXJyYXkoZSk7aWYoIXQubGVuZ3RoKXRocm93IG5ldyBwO2Zvcih2YXIgbj1bcl0sYT0xO2E8dC5sZW5ndGg7YSs9Mil7dmFyIG8sdSxpPW4uc2hpZnQoKTsyPD10Lmxlbmd0aC1hPyhpLmNoaWxkcmVuPVtvPXt9LHU9e31dLG4ucHVzaChvLHUpKTooaS5jaGlsZHJlbj1baT17fV0sbi5wdXNoKGkpKX12YXIgbD0wO3JldHVybiBmdW5jdGlvbiBmaWxsKGUpe2UuY2hpbGRyZW4mJjE8PWUuY2hpbGRyZW4ubGVuZ3RoJiZmaWxsKGUuY2hpbGRyZW5bMF0pLGUudmFsdWU9dFtsKytdLGUuY2hpbGRyZW4mJjI9PT1lLmNoaWxkcmVuLmxlbmd0aCYmZmlsbChlLmNoaWxkcmVuWzFdKX0ocikscy5jYWxsKHRoaXMscil9cmV0dXJuIEluT3JkZXJUcmVlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCI6NDEsXCIuL0JpbmFyeVRyZWVcIjo1MCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sODA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikscz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKEluZGljZXNFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihJbmRpY2VzRW51bWVyYWJsZSk7ZnVuY3Rpb24gSW5kaWNlc0VudW1lcmFibGUoaSxsKXt2YXIgZTtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsSW5kaWNlc0VudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsaSksZi5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixzLmRlZmF1bHQubWFyayhmdW5jdGlvbiBJbmRpY2VzSXRlcmF0b3IoKXt2YXIgcix0LG4sYSxvLHU7cmV0dXJuIHMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKHI9bFtTeW1ib2wuaXRlcmF0b3JdKCksKHQ9ci5uZXh0KCkpLmRvbmUpe2UubmV4dD0zMjticmVha31uPTAsYT1bXSxvPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGkpLGUucHJldj02LG8ucygpO2Nhc2UgODppZigodT1vLm4oKSkuZG9uZSl7ZS5uZXh0PTI0O2JyZWFrfWlmKHU9dS52YWx1ZSxhLnB1c2godSksbj09PXQudmFsdWUpcmV0dXJuIGUubmV4dD0xNCx1O2UubmV4dD0yMTticmVhaztjYXNlIDE0OmlmKCEodD1yLm5leHQoKSkuZG9uZSYmdC52YWx1ZTw9bilyZXR1cm4gZS5uZXh0PTE3LGFbdC52YWx1ZV07ZS5uZXh0PTE5O2JyZWFrO2Nhc2UgMTc6ZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTk6aWYodC5kb25lKXJldHVybiBlLmFicnVwdChcImJyZWFrXCIsMjQpO2UubmV4dD0yMTticmVhaztjYXNlIDIxOm4rKztjYXNlIDIyOmUubmV4dD04O2JyZWFrO2Nhc2UgMjQ6ZS5uZXh0PTI5O2JyZWFrO2Nhc2UgMjY6ZS5wcmV2PTI2LGUudDA9ZS5jYXRjaCg2KSxvLmUoZS50MCk7Y2FzZSAyOTpyZXR1cm4gZS5wcmV2PTI5LG8uZigpLGUuZmluaXNoKDI5KTtjYXNlIDMyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEluZGljZXNJdGVyYXRvcixudWxsLFtbNiwyNiwyOSwzMl1dKX0pKSxlfXJldHVybiBJbmRpY2VzRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDgxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxoPWUoXCIuLy4uL0VudW1lcmFibGVcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCIpLGU9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKEludGVyc2VjdEVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKEludGVyc2VjdEVudW1lcmFibGUpO2Z1bmN0aW9uIEludGVyc2VjdEVudW1lcmFibGUobyx1KXt2YXIgZSxpPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxJbnRlcnNlY3RFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLG8pLGk9cC5hc0VxdWFsaXR5Q29tcGFyZXIoaSksZi5kZWZpbmVQcm9wZXJ0eSgoMCxzLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixsLmRlZmF1bHQubWFyayhmdW5jdGlvbiBJbnRlcnNlY3RJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiBsLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPVtdLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobyksZS5wcmV2PTIsdC5zKCk7Y2FzZSA0OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTM7YnJlYWt9aWYoYT1uLnZhbHVlLCFoLmNvbnRhaW5zKHUsYSxpKSl7ZS5uZXh0PTExO2JyZWFrfWlmKGguY29udGFpbnMocixhLGkpKXtlLm5leHQ9MTE7YnJlYWt9cmV0dXJuIHIucHVzaChhKSxlLm5leHQ9MTEsYTtjYXNlIDExOmUubmV4dD00O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgyKSx0LmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHQuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LEludGVyc2VjdEl0ZXJhdG9yLG51bGwsW1syLDE1LDE4LDIxXV0pfSkpLGV9cmV0dXJuIEludGVyc2VjdEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sODI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxsLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLGkuZGVmYXVsdCkoSXRlcmFibGVFbnVtZXJhYmxlLGMpO3ZhciB0PV9jcmVhdGVTdXBlcihJdGVyYWJsZUVudW1lcmFibGUpO2Z1bmN0aW9uIEl0ZXJhYmxlRW51bWVyYWJsZShyKXt2YXIgZTtyZXR1cm4oMCxvLmRlZmF1bHQpKHRoaXMsSXRlcmFibGVFbnVtZXJhYmxlKSxlPXQuY2FsbCh0aGlzLHIpLGYuZGVmaW5lUHJvcGVydHkoKDAsdS5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gSXRlcmFibGVJdGVyYXRvcigpe3JldHVybiBhLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKHIsXCJ0MFwiLDEpO2Nhc2UgMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxJdGVyYWJsZUl0ZXJhdG9yKX0pKSxlfXJldHVybiBJdGVyYWJsZUVudW1lcmFibGV9KCl9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw4MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vSXRlcmFibGVFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKEl0ZXJhdG9yRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoSXRlcmF0b3JFbnVtZXJhYmxlKTtmdW5jdGlvbiBJdGVyYXRvckVudW1lcmFibGUodCl7KDAsdS5kZWZhdWx0KSh0aGlzLEl0ZXJhdG9yRW51bWVyYWJsZSk7dmFyIGU9ci5jYWxsKHRoaXMsdCksbj1bXSxhPSEwO3JldHVybiBmLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLG8uZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIEl0ZXJhdG9ySXRlcmF0b3IoKXt2YXIgcjtyZXR1cm4gby5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYoIWEpe2UubmV4dD0xMDticmVha31jYXNlIDE6aWYoKHI9dC5uZXh0KCkpLmRvbmUpe2UubmV4dD03O2JyZWFrfXJldHVybiBlLm5leHQ9NCxyLnZhbHVlO2Nhc2UgNDpuLnB1c2goci52YWx1ZSksZS5uZXh0PTE7YnJlYWs7Y2FzZSA3OmE9ITEsZS5uZXh0PTExO2JyZWFrO2Nhc2UgMTA6cmV0dXJuIGUuZGVsZWdhdGVZaWVsZChuLFwidDBcIiwxMSk7Y2FzZSAxMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxJdGVyYXRvckl0ZXJhdG9yKX0pKSxlfXJldHVybiBJdGVyYXRvckVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuL0l0ZXJhYmxlRW51bWVyYWJsZVwiOjgyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sODQ6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikseT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGM9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHY9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGc9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCIpLHg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSxFPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKEpvaW5FbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihKb2luRW51bWVyYWJsZSk7ZnVuY3Rpb24gSm9pbkVudW1lcmFibGUoZixwKXt2YXIgZSxoPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpnLGI9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOkUsZD00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06RSxtPTU8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTp4O3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxKb2luRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxmKSxiPXYuYXNTZWxlY3RvcihiKSxkPXYuYXNTZWxlY3RvcihkKSxtPXYuYXNFcXVhbGl0eUNvbXBhcmVyKG0pLGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IseS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gSm9pbkl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbyx1LGksbCxzLGM7cmV0dXJuIHkuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9W10sdD0wLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZiksZS5wcmV2PTIsbi5zKCk7Y2FzZSA0OmlmKChsPW4ubigpKS5kb25lKXtlLm5leHQ9NTI7YnJlYWt9aWYoYT1sLnZhbHVlLG89YihhLHQpLDAhPT10KXtlLm5leHQ9MzE7YnJlYWt9dT0wLGk9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocCksZS5wcmV2PTEwLGkucygpO2Nhc2UgMTI6aWYoKGw9aS5uKCkpLmRvbmUpe2UubmV4dD0yMTticmVha31pZihjPWwudmFsdWUsbD1kKGMsdSsrKSxyLnB1c2goe2tleTpsLGVsZW1lbnQ6Y30pLG0obyxsKSlyZXR1cm4gZS5uZXh0PTE5LGgoYSxjKTtlLm5leHQ9MTk7YnJlYWs7Y2FzZSAxOTplLm5leHQ9MTI7YnJlYWs7Y2FzZSAyMTplLm5leHQ9MjY7YnJlYWs7Y2FzZSAyMzplLnByZXY9MjMsZS50MD1lLmNhdGNoKDEwKSxpLmUoZS50MCk7Y2FzZSAyNjpyZXR1cm4gZS5wcmV2PTI2LGkuZigpLGUuZmluaXNoKDI2KTtjYXNlIDI5OmUubmV4dD00OTticmVhaztjYXNlIDMxOnM9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIociksZS5wcmV2PTMyLHMucygpO2Nhc2UgMzQ6aWYoKGM9cy5uKCkpLmRvbmUpe2UubmV4dD00MTticmVha31pZihjPWMudmFsdWUsbShvLGMua2V5KSlyZXR1cm4gZS5uZXh0PTM5LGgoYSxjLmVsZW1lbnQpO2UubmV4dD0zOTticmVhaztjYXNlIDM5OmUubmV4dD0zNDticmVhaztjYXNlIDQxOmUubmV4dD00NjticmVhaztjYXNlIDQzOmUucHJldj00MyxlLnQxPWUuY2F0Y2goMzIpLHMuZShlLnQxKTtjYXNlIDQ2OnJldHVybiBlLnByZXY9NDYscy5mKCksZS5maW5pc2goNDYpO2Nhc2UgNDk6dCsrO2Nhc2UgNTA6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSA1MjplLm5leHQ9NTc7YnJlYWs7Y2FzZSA1NDplLnByZXY9NTQsZS50Mj1lLmNhdGNoKDIpLG4uZShlLnQyKTtjYXNlIDU3OnJldHVybiBlLnByZXY9NTcsbi5mKCksZS5maW5pc2goNTcpO2Nhc2UgNjA6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sSm9pbkl0ZXJhdG9yLG51bGwsW1syLDU0LDU3LDYwXSxbMTAsMjMsMjYsMjldLFszMiw0Myw0Niw0OV1dKX0pKSxlfXJldHVybiBKb2luRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCI6MTU0LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sODU6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksZz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGM9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGY9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCIpLHg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSxFPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKExlZnRKb2luRW51bWVyYWJsZSxzKTt2YXIgcj1fY3JlYXRlU3VwZXIoTGVmdEpvaW5FbnVtZXJhYmxlKTtmdW5jdGlvbiBMZWZ0Sm9pbkVudW1lcmFibGUoaCxiKXt2YXIgZSxkPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpwLG09Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOkUseT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06RSx2PTU8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTp4O3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxMZWZ0Sm9pbkVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsaCksbT1mLmFzU2VsZWN0b3IobSkseT1mLmFzU2VsZWN0b3IoeSksdj1mLmFzRXF1YWxpdHlDb21wYXJlcih2KSxjLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGcuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIExlZnRKb2luSXRlcmF0b3IoKXt2YXIgcix0LG4sYSxvLHUsaSxsLHMsYyxmLHA7cmV0dXJuIGcuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9W10sdD0wLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoaCksZS5wcmV2PTIsbi5zKCk7Y2FzZSA0OmlmKChzPW4ubigpKS5kb25lKXtlLm5leHQ9NjI7YnJlYWt9aWYoYT1zLnZhbHVlLG89bShhLHQpLDAhPT10KXtlLm5leHQ9MzY7YnJlYWt9dT0wLGk9ITEsbD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihiKSxlLnByZXY9MTEsbC5zKCk7Y2FzZSAxMzppZigocz1sLm4oKSkuZG9uZSl7ZS5uZXh0PTIzO2JyZWFrfWlmKHA9cy52YWx1ZSxzPXkocCx1KyspLHIucHVzaCh7a2V5OnMsZWxlbWVudDpwfSksdihvLHMpKXJldHVybiBpPSEwLGUubmV4dD0yMSxkKGEscCk7ZS5uZXh0PTIxO2JyZWFrO2Nhc2UgMjE6ZS5uZXh0PTEzO2JyZWFrO2Nhc2UgMjM6ZS5uZXh0PTI4O2JyZWFrO2Nhc2UgMjU6ZS5wcmV2PTI1LGUudDA9ZS5jYXRjaCgxMSksbC5lKGUudDApO2Nhc2UgMjg6cmV0dXJuIGUucHJldj0yOCxsLmYoKSxlLmZpbmlzaCgyOCk7Y2FzZSAzMTppZihpKXtlLm5leHQ9MzQ7YnJlYWt9cmV0dXJuIGUubmV4dD0zNCxkKGEpO2Nhc2UgMzQ6ZS5uZXh0PTU5O2JyZWFrO2Nhc2UgMzY6Yz0hMSxmPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIpLGUucHJldj0zOCxmLnMoKTtjYXNlIDQwOmlmKChwPWYubigpKS5kb25lKXtlLm5leHQ9NDg7YnJlYWt9aWYocD1wLnZhbHVlLHYobyxwLmtleSkpcmV0dXJuIGM9ITAsZS5uZXh0PTQ2LGQoYSxwLmVsZW1lbnQpO2UubmV4dD00NjticmVhaztjYXNlIDQ2OmUubmV4dD00MDticmVhaztjYXNlIDQ4OmUubmV4dD01MzticmVhaztjYXNlIDUwOmUucHJldj01MCxlLnQxPWUuY2F0Y2goMzgpLGYuZShlLnQxKTtjYXNlIDUzOnJldHVybiBlLnByZXY9NTMsZi5mKCksZS5maW5pc2goNTMpO2Nhc2UgNTY6aWYoYyl7ZS5uZXh0PTU5O2JyZWFrfXJldHVybiBlLm5leHQ9NTksZChhKTtjYXNlIDU5OnQrKztjYXNlIDYwOmUubmV4dD00O2JyZWFrO2Nhc2UgNjI6ZS5uZXh0PTY3O2JyZWFrO2Nhc2UgNjQ6ZS5wcmV2PTY0LGUudDI9ZS5jYXRjaCgyKSxuLmUoZS50Mik7Y2FzZSA2NzpyZXR1cm4gZS5wcmV2PTY3LG4uZigpLGUuZmluaXNoKDY3KTtjYXNlIDcwOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LExlZnRKb2luSXRlcmF0b3IsbnVsbCxbWzIsNjQsNjcsNzBdLFsxMSwyNSwyOCwzMV0sWzM4LDUwLDUzLDU2XV0pfSkpLGV9cmV0dXJuIExlZnRKb2luRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCI6MTU0LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sODY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShMZWZ0UGFkRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoTGVmdFBhZEVudW1lcmFibGUpO2Z1bmN0aW9uIExlZnRQYWRFbnVtZXJhYmxlKG4sYSxvKXt2YXIgZTtyZXR1cm4oMCxpLmRlZmF1bHQpKHRoaXMsTGVmdFBhZEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbikscC5kZWZpbmVQcm9wZXJ0eSgoMCxsLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcix1LmRlZmF1bHQubWFyayhmdW5jdGlvbiBDb25jYXRJdGVyYXRvcigpe3ZhciByLHQ7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9Zi50b0FycmF5KG4pLHQ9ci5sZW5ndGg7Y2FzZSAyOmlmKHQ8YSlyZXR1cm4gZS5uZXh0PTUsbztlLm5leHQ9ODticmVhaztjYXNlIDU6dCsrLGUubmV4dD0yO2JyZWFrO2Nhc2UgODpyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKHIsXCJ0MFwiLDkpO2Nhc2UgOTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxDb25jYXRJdGVyYXRvcil9KSksZX1yZXR1cm4gTGVmdFBhZEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDg3OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgbD1lKFwiLi9EaWN0aW9uYXJ5XCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoTG9va3VwLGwpO3ZhciBlPV9jcmVhdGVTdXBlcihMb29rdXApO2Z1bmN0aW9uIExvb2t1cCgpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxMb29rdXApLGUuY2FsbCh0aGlzKX1yZXR1cm4gTG9va3VwfSgpfSx7XCIuL0RpY3Rpb25hcnlcIjo2MSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sODg6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxsLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuL0lNYXBFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2FtZUNvbXBhcmVyXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9lcXVhbGl0eVByZWRpY2F0ZVwiKSxkPWUoXCIuL0VudHJ5XCIpLGU9ZnVuY3Rpb24oKXsoMCxpLmRlZmF1bHQpKE1hcEVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKE1hcEVudW1lcmFibGUpO2Z1bmN0aW9uIE1hcEVudW1lcmFibGUobil7dmFyIGU7cmV0dXJuKDAsby5kZWZhdWx0KSh0aGlzLE1hcEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMpLGYuZGVmaW5lUHJvcGVydHkoKDAsdS5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gTWFwSXRlcmF0b3IoKXt2YXIgcix0O3JldHVybiBhLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG4ua2V5cygpKSxlLnByZXY9MSxyLnMoKTtjYXNlIDM6aWYoKHQ9ci5uKCkpLmRvbmUpe2UubmV4dD05O2JyZWFrfXJldHVybiB0PXQudmFsdWUsZS5uZXh0PTcsbmV3IGQodCxuLmdldCh0KSk7Y2FzZSA3OmUubmV4dD0zO2JyZWFrO2Nhc2UgOTplLm5leHQ9MTQ7YnJlYWs7Y2FzZSAxMTplLnByZXY9MTEsZS50MD1lLmNhdGNoKDEpLHIuZShlLnQwKTtjYXNlIDE0OnJldHVybiBlLnByZXY9MTQsci5mKCksZS5maW5pc2goMTQpO2Nhc2UgMTc6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sTWFwSXRlcmF0b3IsbnVsbCxbWzEsMTEsMTQsMTddXSl9KSksZi5kZWZpbmVQcm9wZXJ0aWVzKCgwLHUuZGVmYXVsdCkoZSkse2dldDpmdW5jdGlvbihlKXt2YXIgcjtyZXR1cm4ocj1wLmFzU2FtZUNvbXBhcmVyKHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmgpKT09PWg/bi5nZXQoZSk6bi5nZXQodGhpcy5rZXlzKCkuc2luZ2xlT3JEZWZhdWx0KGUsYihlLHIpKSl9LHNldDpmdW5jdGlvbihlLHIpe3ZhciB0O3JldHVybih0PXAuYXNTYW1lQ29tcGFyZXIodD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06aCkpPT09aD9uLnNldChlLHIpOm4uc2V0KHRoaXMua2V5cygpLnNpbmdsZU9yRGVmYXVsdChlLGIoZSx0KSksciksdGhpc30saGFzOmZ1bmN0aW9uKGUpe3ZhciByO3JldHVybihyPXAuYXNTYW1lQ29tcGFyZXIocj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aCkpPT09aD9uLmhhcyhlKTp0aGlzLmtleXMoKS5jb250YWlucyhlLHIpfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHI7cmV0dXJuKHI9cC5hc1NhbWVDb21wYXJlcihyPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpoKSk9PT1oP24uZGVsZXRlKGUpOm4uZGVsZXRlKHRoaXMua2V5cygpLnNpbmdsZU9yRGVmYXVsdChlLGIoZSxyKSkpfSxrZXlzOmZ1bmN0aW9uKCl7cmV0dXJuIG4ua2V5cygpLmFzRW51bWVyYWJsZSgpfSx2YWx1ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi52YWx1ZXMoKS5hc0VudW1lcmFibGUoKX0sZW50cmllczpmdW5jdGlvbigpe3JldHVybiBuLmVudHJpZXMoKS5hc0VudW1lcmFibGUoKX19KSxlfXJldHVybiBNYXBFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTYW1lQ29tcGFyZXJcIjoxNTksXCIuLy4uL21ldGhvZHMvZXF1YWxpdHlQcmVkaWNhdGVcIjoxNjUsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vRW50cnlcIjo2NSxcIi4vSU1hcEVudW1lcmFibGVcIjo3NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDg5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGI9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxkPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxtPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSx5PShlKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpKSx2PWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFJlc3VsdFNlbGVjdG9yXCIpLGc9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSx4PShlKFwiLi8uLi9tZXRob2RzL2VxdWFsaXR5UHJlZGljYXRlXCIpLGUoXCIuL0lHcm91cGluZ1wiKSksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoTmVhckdyb3VwZWRFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihOZWFyR3JvdXBlZEVudW1lcmFibGUpO2Z1bmN0aW9uIE5lYXJHcm91cGVkRW51bWVyYWJsZShzKXt2YXIgZSxjPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp5LGY9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnkscD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106dixoPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpnO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxOZWFyR3JvdXBlZEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMscyksYz1tLmFzU2VsZWN0b3IoYyksZj1tLmFzU2VsZWN0b3IoZikscD1tLmFzU2VsZWN0b3IocCksaD1tLmFzRXF1YWxpdHlDb21wYXJlcihoKSxkLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIE5lYXJHcm91cGVkSXRlcmF0b3IoKXt2YXIgYSxvLHUsaSxsLHIsdCxuO3JldHVybiBiLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDphPVtdLG89W10sdT1TeW1ib2woXCJub25lS2V5XCIpLGk9dSxsPXNbU3ltYm9sLml0ZXJhdG9yXSgpLHI9ZnVuY3Rpb24gaGFzTmV4dCgpe3ZhciBlLHIsdCxuPWwubmV4dCgpO3JldHVybiBuLmRvbmV8fChlPWMobi52YWx1ZSkscj1mKG4udmFsdWUpLGkhPT11JiZoKGUsaSl8fChvPVtdLGk9ZSxhLnB1c2gobmV3IHgoZSwodD1vLGIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXt2YXIgcjtyZXR1cm4gYi5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wO2Nhc2UgMTppZighKHQubGVuZ3RoPnJ8fGhhc05leHQoKSkpe2UubmV4dD03O2JyZWFrfWlmKHQubGVuZ3RoPnIpcmV0dXJuIGUubmV4dD01LHRbcisrXTtlLm5leHQ9NTticmVhaztjYXNlIDU6ZS5uZXh0PTE7YnJlYWs7Y2FzZSA3OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpKSkpLG8ucHVzaChyKSksIW4uZG9uZX0sdD0wO2Nhc2UgNzppZighKGEubGVuZ3RoPnR8fHIoKSkpe2UubmV4dD0xNDticmVha31pZihhLmxlbmd0aD50KXJldHVybiBuPWFbdCsrXSxlLm5leHQ9MTIscChuLmtleSxuKTtlLm5leHQ9MTI7YnJlYWs7Y2FzZSAxMjplLm5leHQ9NzticmVhaztjYXNlIDE0OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LE5lYXJHcm91cGVkSXRlcmF0b3IpfSkpLGV9cmV0dXJuIE5lYXJHcm91cGVkRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi8uLi9tZXRob2RzL2RlZmF1bHRSZXN1bHRTZWxlY3RvclwiOjE1OCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvZXF1YWxpdHlQcmVkaWNhdGVcIjoxNjUsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vSUdyb3VwaW5nXCI6NzQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5MDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxwPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIGg9ZShcIi4vSUNodW5rXCIpLHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksYj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksbT1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRGYWxzZVByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShOZWFyU3BsaXRFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihOZWFyU3BsaXRFbnVtZXJhYmxlKTtmdW5jdGlvbiBOZWFyU3BsaXRFbnVtZXJhYmxlKGMpe3ZhciBlLGY9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm07cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLE5lYXJTcGxpdEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsYyksZj1kLmFzUHJlZGljYXRlKGYpLGIuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IscC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gTmVhclNwbGl0SXRlcmF0b3IoKXt2YXIgcixuLGEsbyx0LHUsaSxsLHM7cmV0dXJuIHAuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9Y1tTeW1ib2wuaXRlcmF0b3JdKCksYT1bXSxvPVtdLHQ9bj0wLGk9ZnVuY3Rpb24oKXt2YXIgdDtvLnB1c2godT1uZXcgaChuKyssKHQ9YSxwLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCl7dmFyIHI7cmV0dXJuIHAuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MDtjYXNlIDE6aWYodC5sZW5ndGg+cnx8bCgpJiZ0Lmxlbmd0aD5yKXJldHVybiBlLm5leHQ9NCx0W3IrK107ZS5uZXh0PTY7YnJlYWs7Y2FzZSA0OmUubmV4dD0xO2JyZWFrO2Nhc2UgNjpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlKX0pKSkpfSxsPWZ1bmN0aW9uIGhhc05leHQoKXt2YXIgZT1yLm5leHQoKTtpZihlLmRvbmUpcmV0dXJuITE7aWYoZihlLnZhbHVlLHQrKykpe2lmKCEoYS5sZW5ndGh8fHUmJjA9PT11LmluZGV4KSlyZXR1cm4gaGFzTmV4dCgpO2E9W10saSgpfWVsc2UgYS5wdXNoKGUudmFsdWUpO3JldHVybiEwfSxpKCkscz0wO2Nhc2UgOTppZighKG8ubGVuZ3RoPnN8fGwoKSkpe2UubmV4dD0xNTticmVha31pZihvLmxlbmd0aD5zKXJldHVybiBlLm5leHQ9MTMsb1tzKytdO2UubmV4dD0xMzticmVhaztjYXNlIDEzOmUubmV4dD05O2JyZWFrO2Nhc2UgMTU6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sTmVhclNwbGl0SXRlcmF0b3IpfSkpLGV9cmV0dXJuIE5lYXJTcGxpdEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEZhbHNlUHJlZGljYXRlXCI6MTUyLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lDaHVua1wiOjcyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sOTE6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuL0lUcmVlXCIpLGY9ZShcIi4vLi4vSUVudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksaD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIiksZT1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoTmV4dEVudW1lcmFibGUsZik7dmFyIHI9X2NyZWF0ZVN1cGVyKE5leHRFbnVtZXJhYmxlKTtmdW5jdGlvbiBOZXh0RW51bWVyYWJsZShvLHUpe3ZhciBlLGk9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmI7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLE5leHRFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxpPWguYXNQcmVkaWNhdGUoaSkscC5kZWZpbmVQcm9wZXJ0eSgoMCxzLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixsLmRlZmF1bHQubWFyayhmdW5jdGlvbiBOZXh0SXRlcmF0b3IoKXt2YXIgcix0LG4sYTtyZXR1cm4gbC5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6bj1vLmdldFBhcmVudE5vZGUodSkscj0hMSx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG4uY2hpbGRyZW4pLGUucHJldj0zLHQucygpO2Nhc2UgNTppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTEzO2JyZWFrfWlmKGE9bi52YWx1ZSxyJiZpKGEudmFsdWUpKXJldHVybiBlLm5leHQ9MTAsYS52YWx1ZTtlLm5leHQ9MTA7YnJlYWs7Y2FzZSAxMDohciYmYy5pc1NhbWVOb2RlKGEsdSkmJihyPSEwKTtjYXNlIDExOmUubmV4dD01O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgzKSx0LmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHQuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LE5leHRJdGVyYXRvcixudWxsLFtbMywxNSwxOCwyMV1dKX0pKSxlfXJldHVybiBOZXh0RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCI6MTU3LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lUcmVlXCI6NzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5MjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vSVRyZWVcIiksZj1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxoPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShOZXh0RW51bWVyYWJsZSxmKTt2YXIgcj1fY3JlYXRlU3VwZXIoTmV4dEVudW1lcmFibGUpO2Z1bmN0aW9uIE5leHRFbnVtZXJhYmxlKG8sdSl7dmFyIGUsaT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YjtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsTmV4dEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsW10pLGk9aC5hc1ByZWRpY2F0ZShpKSxwLmRlZmluZVByb3BlcnR5KCgwLHMuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGwuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIE5leHROb2Rlc0l0ZXJhdG9yKCl7dmFyIHIsdCxuLGE7cmV0dXJuIGwuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOm49by5nZXRQYXJlbnROb2RlKHUpLHI9ITEsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihuLmNoaWxkcmVuKSxlLnByZXY9Myx0LnMoKTtjYXNlIDU6aWYoKG49dC5uKCkpLmRvbmUpe2UubmV4dD0xMzticmVha31pZihhPW4udmFsdWUsciYmaShhLnZhbHVlKSlyZXR1cm4gZS5uZXh0PTEwLGE7ZS5uZXh0PTEwO2JyZWFrO2Nhc2UgMTA6IXImJmMuaXNTYW1lTm9kZShhLHUpJiYocj0hMCk7Y2FzZSAxMTplLm5leHQ9NTticmVhaztjYXNlIDEzOmUubmV4dD0xODticmVhaztjYXNlIDE1OmUucHJldj0xNSxlLnQwPWUuY2F0Y2goMyksdC5lKGUudDApO2Nhc2UgMTg6cmV0dXJuIGUucHJldj0xOCx0LmYoKSxlLmZpbmlzaCgxOCk7Y2FzZSAyMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxOZXh0Tm9kZXNJdGVyYXRvcixudWxsLFtbMywxNSwxOCwyMV1dKX0pKSxlfXJldHVybiBOZXh0RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCI6MTU3LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lUcmVlXCI6NzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vSU1hcEVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi9FbnRyeVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShPYmplY3RFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihPYmplY3RFbnVtZXJhYmxlKTtmdW5jdGlvbiBPYmplY3RFbnVtZXJhYmxlKGEpe3ZhciBlO3JldHVybigwLHUuZGVmYXVsdCkodGhpcyxPYmplY3RFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzKSxmLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLG8uZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIE9iamVjdEl0ZXJhdG9yKCl7dmFyIHIsdCxuO3JldHVybiBvLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPTAsdD1PYmplY3Qua2V5cyhhKTtjYXNlIDE6aWYocjx0Lmxlbmd0aClyZXR1cm4gbj10W3JdLGUubmV4dD01LG5ldyBwKG4sYVtuXSk7ZS5uZXh0PTg7YnJlYWs7Y2FzZSA1OnIrKyxlLm5leHQ9MTticmVhaztjYXNlIDg6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sT2JqZWN0SXRlcmF0b3IpfSkpLGV9cmV0dXJuIE9iamVjdEVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuL0VudHJ5XCI6NjUsXCIuL0lNYXBFbnVtZXJhYmxlXCI6NzUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5NDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEJvb2xlYW58fCEwPT09ZXx8ITE9PT1lfSxoPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgU3RyaW5nfHxmLmdldFR5cGUoZSk9PT1mLnR5cGVzLlN0cmluZ30sYj1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5fHxmLmdldFR5cGUoZSk9PT1mLnR5cGVzLkFycmF5fHxBcnJheS5pc0FycmF5JiZBcnJheS5pc0FycmF5KGUpfSxkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgT2JqZWN0JiYhKGUgaW5zdGFuY2VvZiBSZWdFeHB8fGIoZSl8fHkoZSkpfSxtPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgTnVtYmVyfHxmLmdldFR5cGUoZSk9PT1mLnR5cGVzLk51bWJlcn0seT1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEZ1bmN0aW9ufHxmLmdldFR5cGUoZSk9PT1mLnR5cGVzLkZ1bmN0aW9ufSx2PWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHJ9fSxnPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZi5nZXRUeXBlKGUpLnRvVXBwZXJDYXNlKCk9PT1yLnRvVXBwZXJDYXNlKCl9fSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShPZlR5cGVFbnVtZXJhYmxlLGMpO3ZhciB0PV9jcmVhdGVTdXBlcihPZlR5cGVFbnVtZXJhYmxlKTtmdW5jdGlvbiBPZlR5cGVFbnVtZXJhYmxlKG4sZSl7KDAsdS5kZWZhdWx0KSh0aGlzLE9mVHlwZUVudW1lcmFibGUpO3ZhciByPXQuY2FsbCh0aGlzLG4pLGE9ZT09PUJvb2xlYW4/cDplPT09U3RyaW5nP2g6ZT09PUFycmF5P2I6ZT09PU51bWJlcj9tOmU9PT1GdW5jdGlvbj95OmU9PT1PYmplY3Q/ZDooZi5nZXRUeXBlKGUpPT09Zi50eXBlcy5TdHJpbmc/Zzp2KShlKTtyZXR1cm4gZi5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKHIpLFN5bWJvbC5pdGVyYXRvcixvLmRlZmF1bHQubWFyayhmdW5jdGlvbiBPZlR5cGVJdGVyYXRvcigpe3ZhciByLHQ7cmV0dXJuIG8uZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobiksZS5wcmV2PTEsci5zKCk7Y2FzZSAzOmlmKCh0PXIubigpKS5kb25lKXtlLm5leHQ9MTA7YnJlYWt9aWYodD10LnZhbHVlLGEodCkpcmV0dXJuIGUubmV4dD04LHQ7ZS5uZXh0PTg7YnJlYWs7Y2FzZSA4OmUubmV4dD0zO2JyZWFrO2Nhc2UgMTA6ZS5uZXh0PTE1O2JyZWFrO2Nhc2UgMTI6ZS5wcmV2PTEyLGUudDA9ZS5jYXRjaCgxKSxyLmUoZS50MCk7Y2FzZSAxNTpyZXR1cm4gZS5wcmV2PTE1LHIuZigpLGUuZmluaXNoKDE1KTtjYXNlIDE4OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LE9mVHlwZUl0ZXJhdG9yLG51bGwsW1sxLDEyLDE1LDE4XV0pfSkpLHJ9cmV0dXJuIE9mVHlwZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5NTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vSU9yZGVyZWRFbnVtZXJhYmxlXCIpLHM9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGM9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIiksZj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiKSxwPWUoXCIuLy4uL21ldGhvZHMvc2VsZWN0b3JDb21wYXJlclwiKSxoPWUoXCIuLy4uL21ldGhvZHMvZGVzY2VuZGluZ0NvbXBhcmVyXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoT3JkZXJCeURlc2NlbmRpbmdFbnVtZXJhYmxlLGwpO3ZhciBuPV9jcmVhdGVTdXBlcihPcmRlckJ5RGVzY2VuZGluZ0VudW1lcmFibGUpO2Z1bmN0aW9uIE9yZGVyQnlEZXNjZW5kaW5nRW51bWVyYWJsZShlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Yyx0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpmO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxPcmRlckJ5RGVzY2VuZGluZ0VudW1lcmFibGUpLHI9cy5hc1NlbGVjdG9yKHIpLHQ9cy5hc0NvbXBhcmVyKHQpLG4uY2FsbCh0aGlzLGUsaChwKHIsdCkpKX1yZXR1cm4gT3JkZXJCeURlc2NlbmRpbmdFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCI6MTQ5LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9kZXNjZW5kaW5nQ29tcGFyZXJcIjoxNjQsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vLi4vbWV0aG9kcy9zZWxlY3RvckNvbXBhcmVyXCI6MTc2LFwiLi9JT3JkZXJlZEVudW1lcmFibGVcIjo3NixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sOTY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBsPWUoXCIuL0lPcmRlcmVkRW51bWVyYWJsZVwiKSxzPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxjPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGY9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q29tcGFyZXJcIikscD1lKFwiLi8uLi9tZXRob2RzL3NlbGVjdG9yQ29tcGFyZXJcIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShPcmRlckJ5RW51bWVyYWJsZSxsKTt2YXIgbj1fY3JlYXRlU3VwZXIoT3JkZXJCeUVudW1lcmFibGUpO2Z1bmN0aW9uIE9yZGVyQnlFbnVtZXJhYmxlKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpjLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmY7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLE9yZGVyQnlFbnVtZXJhYmxlKSxyPXMuYXNTZWxlY3RvcihyKSx0PXMuYXNDb21wYXJlcih0KSxuLmNhbGwodGhpcyxlLHAocix0KSl9cmV0dXJuIE9yZGVyQnlFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCI6MTQ5LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi8uLi9tZXRob2RzL3NlbGVjdG9yQ29tcGFyZXJcIjoxNzYsXCIuL0lPcmRlcmVkRW51bWVyYWJsZVwiOjc2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTl9XSw5NzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi9JVHJlZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxoPWUoXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob3RBbmNlc3Rvck9mRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFBhdGhOb2Rlc1RvRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoUGF0aE5vZGVzVG9FbnVtZXJhYmxlKTtmdW5jdGlvbiBQYXRoTm9kZXNUb0VudW1lcmFibGUobixhKXt2YXIgZTtyZXR1cm4oMCx1LmRlZmF1bHQpKHRoaXMsUGF0aE5vZGVzVG9FbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxwLmRlZmluZVByb3BlcnR5KCgwLGkuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLG8uZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFBhdGhOb2Rlc1RvSXRlcmF0b3IoKXt2YXIgcix0O3JldHVybiBvLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDppZighKHQ9ZnVuY3Rpb24gc2VhcmNoKGUscil7aWYoZS5wdXNoKHIpLGYuaXNTYW1lTm9kZShyLGEpKXJldHVybiBlO3ZhciB0LG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocik7dHJ5e2ZvcihuLnMoKTshKHQ9bi5uKCkpLmRvbmU7KWlmKHNlYXJjaChlLHQudmFsdWUpKXJldHVybiBlfWNhdGNoKGUpe24uZShlKX1maW5hbGx5e24uZigpfXJldHVybiBlLnBvcCgpLCExfShbXSxuKSkpe2UubmV4dD0yMjticmVha31yPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHQpLGUucHJldj00LHIucygpO2Nhc2UgNjppZigodD1yLm4oKSkuZG9uZSl7ZS5uZXh0PTEyO2JyZWFrfXJldHVybiB0PXQudmFsdWUsZS5uZXh0PTEwLHQ7Y2FzZSAxMDplLm5leHQ9NjticmVhaztjYXNlIDEyOmUubmV4dD0xNzticmVhaztjYXNlIDE0OmUucHJldj0xNCxlLnQwPWUuY2F0Y2goNCksci5lKGUudDApO2Nhc2UgMTc6cmV0dXJuIGUucHJldj0xNyxyLmYoKSxlLmZpbmlzaCgxNyk7Y2FzZSAyMDplLm5leHQ9MjM7YnJlYWs7Y2FzZSAyMjp0aHJvdyBuZXcgaChuLGEpO2Nhc2UgMjM6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sUGF0aE5vZGVzVG9JdGVyYXRvcixudWxsLFtbNCwxNCwxNywyMF1dKX0pKSxlfXJldHVybiBQYXRoTm9kZXNUb0VudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob3RBbmNlc3Rvck9mRXhjZXB0aW9uXCI6NDIsXCIuL0lUcmVlXCI6NzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSw5ODpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi9JVHJlZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxoPWUoXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob3RBbmNlc3Rvck9mRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFBhdGhUb0VudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKFBhdGhUb0VudW1lcmFibGUpO2Z1bmN0aW9uIFBhdGhUb0VudW1lcmFibGUobixhKXt2YXIgZTtyZXR1cm4oMCx1LmRlZmF1bHQpKHRoaXMsUGF0aFRvRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSkscC5kZWZpbmVQcm9wZXJ0eSgoMCxpLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixvLmRlZmF1bHQubWFyayhmdW5jdGlvbiBQYXRoVG9JdGVyYXRvcigpe3ZhciByLHQ7cmV0dXJuIG8uZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKCEodD1mdW5jdGlvbiBzZWFyY2goZSxyKXtpZihlLnB1c2gociksZi5pc1NhbWVOb2RlKHIsYSkpcmV0dXJuIGU7dmFyIHQsbj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyKTt0cnl7Zm9yKG4ucygpOyEodD1uLm4oKSkuZG9uZTspaWYoc2VhcmNoKGUsdC52YWx1ZSkpcmV0dXJuIGV9Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9cmV0dXJuIGUucG9wKCksITF9KFtdLG4pKSl7ZS5uZXh0PTIyO2JyZWFrfXI9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodCksZS5wcmV2PTQsci5zKCk7Y2FzZSA2OmlmKCh0PXIubigpKS5kb25lKXtlLm5leHQ9MTI7YnJlYWt9cmV0dXJuIHQ9dC52YWx1ZSxlLm5leHQ9MTAsdC52YWx1ZTtjYXNlIDEwOmUubmV4dD02O2JyZWFrO2Nhc2UgMTI6ZS5uZXh0PTE3O2JyZWFrO2Nhc2UgMTQ6ZS5wcmV2PTE0LGUudDA9ZS5jYXRjaCg0KSxyLmUoZS50MCk7Y2FzZSAxNzpyZXR1cm4gZS5wcmV2PTE3LHIuZigpLGUuZmluaXNoKDE3KTtjYXNlIDIwOmUubmV4dD0yMzticmVhaztjYXNlIDIyOnRocm93IG5ldyBoKG4sYSk7Y2FzZSAyMzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxQYXRoVG9JdGVyYXRvcixudWxsLFtbNCwxNCwxNywyMF1dKX0pKSxlfXJldHVybiBQYXRoVG9FbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm90QW5jZXN0b3JPZkV4Y2VwdGlvblwiOjQyLFwiLi9JVHJlZVwiOjc3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sOTk6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksZj1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSkscD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksaD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGI9ZShcIi4vSW5kaWNlc0VudW1lcmFibGVcIiksZD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksbT1lKFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoUGVybXV0YXRpb25FbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihQZXJtdXRhdGlvbkVudW1lcmFibGUpO2Z1bmN0aW9uIFBlcm11dGF0aW9uRW51bWVyYWJsZShzLGMpe3ZhciBlO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxQZXJtdXRhdGlvbkVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMscyksZC5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixmLmRlZmF1bHQubWFyayhmdW5jdGlvbiBQZXJtdXRhdGlvbkl0ZXJhdG9yKCl7dmFyIHIsYSxvLHUsaSxsLHQsbjtyZXR1cm4gZi5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1zW1N5bWJvbC5pdGVyYXRvcl0oKSxhPWgucmFuZ2UoMCxjKS50b0FycmF5KCksbz1oLnJlcGVhdCghMCxjKS50b0FycmF5KCksaT0hKHU9W10pLGw9ZnVuY3Rpb24oKXt2YXIgZT1yLm5leHQoKTtpZihlLmRvbmUpcmV0dXJuIShpPSEwKTtmb3IodS5wdXNoKGUudmFsdWUpO28ubGVuZ3RoPHUubGVuZ3RoOylvLnB1c2goITEpO3JldHVybiEwfSx0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWMtMTswPD1lO2UtLSl7dmFyIHI9b1thW2VdXT0hMTtkb3tpZihhW2VdKyssdS5sZW5ndGg8PWFbZV0mJighaSYmbCgpfHwocj0hMCksaSkpYnJlYWt9d2hpbGUob1thW2VdXSk7aWYoIXIpe29bYVtlXV09ITA7Zm9yKHZhciB0PWUrMTt0PGM7dCsrKWZvcih2YXIgbj0wO248by5sZW5ndGg7bisrKWlmKCFvW25dKXthW3RdPW4sb1tuXT0hMDticmVha31yZXR1cm4hMH19cmV0dXJuITF9LG49YVtjLTFdO2Nhc2UgODppZighKHUubGVuZ3RoPD1uKSl7ZS5uZXh0PTEzO2JyZWFrfWlmKGwoKSl7ZS5uZXh0PTExO2JyZWFrfXRocm93IG5ldyBtO2Nhc2UgMTE6ZS5uZXh0PTg7YnJlYWs7Y2FzZSAxMzpyZXR1cm4gZS5uZXh0PTE1LG5ldyBiKHUsKDAscC5kZWZhdWx0KShhKSk7Y2FzZSAxNTppZih0KCkpe2UubmV4dD0xMzticmVha31jYXNlIDE2OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFBlcm11dGF0aW9uSXRlcmF0b3IpfSkpLGV9cmV0dXJuIFBlcm11dGF0aW9uRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvTm9TdWNoRWxlbWVudHNFeGNlcHRpb25cIjo0MSxcIi4vSW5kaWNlc0VudW1lcmFibGVcIjo4MCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiOjIzLFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEwMDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxjPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgZj1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL0VudW1lcmFibGVcIiksaD1lKFwiLi9JbmRpY2VzRW51bWVyYWJsZVwiKSxiPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxkPWUoXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob1N1Y2hFbGVtZW50c0V4Y2VwdGlvblwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShQZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlLGYpO3ZhciByPV9jcmVhdGVTdXBlcihQZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlKTtmdW5jdGlvbiBQZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlKGksbCl7dmFyIGU7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFBlcm11dGF0aW9uUmVwZWF0YWJsZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsaSksYi5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixzLmRlZmF1bHQubWFyayhmdW5jdGlvbiBQZXJtdXRhdGlvblJlcGVhdGFibGVJdGVyYXRvcigpe3ZhciByLHQsbixhLG8sdTtyZXR1cm4gcy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYocj1pW1N5bWJvbC5pdGVyYXRvcl0oKSx0PXAucmVwZWF0KDAsbCkudG9BcnJheSgpLGE9IShuPVtdKSx1PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWwtMTswPD1lO2UtLSl7dFtlXSsrO3ZhciByPSExO2lmKG4ubGVuZ3RoPD10W2VdJiYoIWEmJm8oKXx8KHI9ISh0W2VdPTApKSksIXIpcmV0dXJuITB9cmV0dXJuITF9LCEobz1mdW5jdGlvbigpe3ZhciBlPXIubmV4dCgpO3JldHVybiBlLmRvbmU/IShhPSEwKToobi5wdXNoKGUudmFsdWUpLCEwKX0pKCkpe2UubmV4dD0xMjticmVha31jYXNlIDc6cmV0dXJuIGUubmV4dD05LG5ldyBoKG4sKDAsYy5kZWZhdWx0KSh0KSk7Y2FzZSA5OmlmKHUoKSl7ZS5uZXh0PTc7YnJlYWt9Y2FzZSAxMDplLm5leHQ9MTM7YnJlYWs7Y2FzZSAxMjp0aHJvdyBuZXcgZDtjYXNlIDEzOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFBlcm11dGF0aW9uUmVwZWF0YWJsZUl0ZXJhdG9yKX0pKSxlfXJldHVybiBQZXJtdXRhdGlvblJlcGVhdGFibGVFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob1N1Y2hFbGVtZW50c0V4Y2VwdGlvblwiOjQxLFwiLi9JbmRpY2VzRW51bWVyYWJsZVwiOjgwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI6MjMsXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTAxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxpLmRlZmF1bHQpKFBvc3RPcmRlckVudW1lcmFibGUsYyk7dmFyIHQ9X2NyZWF0ZVN1cGVyKFBvc3RPcmRlckVudW1lcmFibGUpO2Z1bmN0aW9uIFBvc3RPcmRlckVudW1lcmFibGUocil7dmFyIGU7cmV0dXJuKDAsby5kZWZhdWx0KSh0aGlzLFBvc3RPcmRlckVudW1lcmFibGUpLGU9dC5jYWxsKHRoaXMsW10pLGYuZGVmaW5lUHJvcGVydHkoKDAsdS5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gUG9zdE9yZGVySXRlcmF0b3IoKXtyZXR1cm4gYS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYoci5oYXNMZWZ0KCkpcmV0dXJuIGUuZGVsZWdhdGVZaWVsZChuZXcgUG9zdE9yZGVyRW51bWVyYWJsZShyLmxlZnQpLFwidDBcIiwyKTtlLm5leHQ9MjticmVhaztjYXNlIDI6aWYoci5oYXNSaWdodCgpKXJldHVybiBlLmRlbGVnYXRlWWllbGQobmV3IFBvc3RPcmRlckVudW1lcmFibGUoci5yaWdodCksXCJ0MVwiLDQpO2UubmV4dD00O2JyZWFrO2Nhc2UgNDpyZXR1cm4gZS5uZXh0PTYsci52YWx1ZTtjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sUG9zdE9yZGVySXRlcmF0b3IpfSkpLGV9cmV0dXJuIFBvc3RPcmRlckVudW1lcmFibGV9KCl9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMDI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHUuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBpPWUoXCIuL0JpbmFyeVRyZWVcIiksZj1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLHA9ZShcIi4vLi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFBvc3RPcmRlclRyZWUsaSk7dmFyIHM9X2NyZWF0ZVN1cGVyKFBvc3RPcmRlclRyZWUpO2Z1bmN0aW9uIFBvc3RPcmRlclRyZWUoZSl7KDAsYy5kZWZhdWx0KSh0aGlzLFBvc3RPcmRlclRyZWUpO3ZhciByPXt9LHQ9Zi50b0FycmF5KGUpO2lmKCF0Lmxlbmd0aCl0aHJvdyBuZXcgcDtmb3IodmFyIG49W3JdLGE9MTthPHQubGVuZ3RoO2ErPTIpe3ZhciBvLHUsaT1uLnNoaWZ0KCk7Mjw9dC5sZW5ndGgtYT8oaS5jaGlsZHJlbj1bbz17fSx1PXt9XSxuLnB1c2gobyx1KSk6KGkuY2hpbGRyZW49W2k9e31dLG4ucHVzaChpKSl9dmFyIGw9MDtyZXR1cm4gZnVuY3Rpb24gZmlsbChlKXtlLmNoaWxkcmVuJiYxPD1lLmNoaWxkcmVuLmxlbmd0aCYmZmlsbChlLmNoaWxkcmVuWzBdKSxlLmNoaWxkcmVuJiYyPT09ZS5jaGlsZHJlbi5sZW5ndGgmJmZpbGwoZS5jaGlsZHJlblsxXSksZS52YWx1ZT10W2wrK119KHIpLHMuY2FsbCh0aGlzLHIpfXJldHVybiBQb3N0T3JkZXJUcmVlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCI6NDEsXCIuL0JpbmFyeVRyZWVcIjo1MCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sMTAzOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxpLmRlZmF1bHQpKFByZU9yZGVyRW51bWVyYWJsZSxjKTt2YXIgdD1fY3JlYXRlU3VwZXIoUHJlT3JkZXJFbnVtZXJhYmxlKTtmdW5jdGlvbiBQcmVPcmRlckVudW1lcmFibGUocil7dmFyIGU7cmV0dXJuKDAsby5kZWZhdWx0KSh0aGlzLFByZU9yZGVyRW51bWVyYWJsZSksZT10LmNhbGwodGhpcyxbXSksZi5kZWZpbmVQcm9wZXJ0eSgoMCx1LmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixhLmRlZmF1bHQubWFyayhmdW5jdGlvbiBQcmVPcmRlckl0ZXJhdG9yKCl7cmV0dXJuIGEuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLm5leHQ9MixyLnZhbHVlO2Nhc2UgMjppZihyLmhhc0xlZnQoKSlyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKG5ldyBQcmVPcmRlckVudW1lcmFibGUoci5sZWZ0KSxcInQwXCIsNCk7ZS5uZXh0PTQ7YnJlYWs7Y2FzZSA0OmlmKHIuaGFzUmlnaHQoKSlyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKG5ldyBQcmVPcmRlckVudW1lcmFibGUoci5yaWdodCksXCJ0MVwiLDYpO2UubmV4dD02O2JyZWFrO2Nhc2UgNjpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxQcmVPcmRlckl0ZXJhdG9yKX0pKSxlfXJldHVybiBQcmVPcmRlckVudW1lcmFibGV9KCl9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMDQ6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHUuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBpPWUoXCIuL0JpbmFyeVRyZWVcIiksZj1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLHA9ZShcIi4vLi4vY29yZS9leGNlcHRpb25zL05vU3VjaEVsZW1lbnRzRXhjZXB0aW9uXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFByZU9yZGVyVHJlZSxpKTt2YXIgcz1fY3JlYXRlU3VwZXIoUHJlT3JkZXJUcmVlKTtmdW5jdGlvbiBQcmVPcmRlclRyZWUoZSl7KDAsYy5kZWZhdWx0KSh0aGlzLFByZU9yZGVyVHJlZSk7dmFyIHI9e30sdD1mLnRvQXJyYXkoZSk7aWYoIXQubGVuZ3RoKXRocm93IG5ldyBwO2Zvcih2YXIgbj1bcl0sYT0xO2E8dC5sZW5ndGg7YSs9Mil7dmFyIG8sdSxpPW4uc2hpZnQoKTsyPD10Lmxlbmd0aC1hPyhpLmNoaWxkcmVuPVtvPXt9LHU9e31dLG4ucHVzaChvLHUpKTooaS5jaGlsZHJlbj1baT17fV0sbi5wdXNoKGkpKX12YXIgbD0wO3JldHVybiBmdW5jdGlvbiBmaWxsKGUpe2UudmFsdWU9dFtsKytdLGUuY2hpbGRyZW4mJjE8PWUuY2hpbGRyZW4ubGVuZ3RoJiZmaWxsKGUuY2hpbGRyZW5bMF0pLGUuY2hpbGRyZW4mJjI9PT1lLmNoaWxkcmVuLmxlbmd0aCYmZmlsbChlLmNoaWxkcmVuWzFdKX0ocikscy5jYWxsKHRoaXMscil9cmV0dXJuIFByZU9yZGVyVHJlZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Ob1N1Y2hFbGVtZW50c0V4Y2VwdGlvblwiOjQxLFwiLi9CaW5hcnlUcmVlXCI6NTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDEwNTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsdS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vSVRyZWVcIiksZj1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxoPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShQcmV2RW51bWVyYWJsZSxmKTt2YXIgcj1fY3JlYXRlU3VwZXIoUHJldkVudW1lcmFibGUpO2Z1bmN0aW9uIFByZXZFbnVtZXJhYmxlKGEsbyl7dmFyIGUsdT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YjtyZXR1cm4oMCxsLmRlZmF1bHQpKHRoaXMsUHJldkVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsW10pLHU9aC5hc1ByZWRpY2F0ZSh1KSxwLmRlZmluZVByb3BlcnR5KCgwLHMuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGkuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFByZXZJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gaS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6dD1hLmdldFBhcmVudE5vZGUobykscj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0LmNoaWxkcmVuKSxlLnByZXY9MixyLnMoKTtjYXNlIDQ6aWYoKHQ9ci5uKCkpLmRvbmUpe2UubmV4dD0xMzticmVha31pZihuPXQudmFsdWUsYy5pc1NhbWVOb2RlKG4sbykpcmV0dXJuIGUuYWJydXB0KFwiYnJlYWtcIiwxMyk7ZS5uZXh0PTg7YnJlYWs7Y2FzZSA4OmlmKHUobi52YWx1ZSkpcmV0dXJuIGUubmV4dD0xMSxuLnZhbHVlO2UubmV4dD0xMTticmVhaztjYXNlIDExOmUubmV4dD00O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgyKSxyLmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHIuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFByZXZJdGVyYXRvcixudWxsLFtbMiwxNSwxOCwyMV1dKX0pKSxlfXJldHVybiBQcmV2RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCI6MTU3LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lUcmVlXCI6NzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMDY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHUuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuL0lUcmVlXCIpLGY9ZShcIi4vLi4vSUVudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksaD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIiksZT1mdW5jdGlvbigpeygwLGEuZGVmYXVsdCkoUHJldkVudW1lcmFibGUsZik7dmFyIHI9X2NyZWF0ZVN1cGVyKFByZXZFbnVtZXJhYmxlKTtmdW5jdGlvbiBQcmV2RW51bWVyYWJsZShhLG8pe3ZhciBlLHU9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmI7cmV0dXJuKDAsbC5kZWZhdWx0KSh0aGlzLFByZXZFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSx1PWguYXNQcmVkaWNhdGUodSkscC5kZWZpbmVQcm9wZXJ0eSgoMCxzLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixpLmRlZmF1bHQubWFyayhmdW5jdGlvbiBQcmV2Tm9kZXNJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gaS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6dD1hLmdldFBhcmVudE5vZGUobykscj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0LmNoaWxkcmVuKSxlLnByZXY9MixyLnMoKTtjYXNlIDQ6aWYoKHQ9ci5uKCkpLmRvbmUpe2UubmV4dD0xMzticmVha31pZihuPXQudmFsdWUsYy5pc1NhbWVOb2RlKG4sbykpcmV0dXJuIGUuYWJydXB0KFwiYnJlYWtcIiwxMyk7ZS5uZXh0PTg7YnJlYWs7Y2FzZSA4OmlmKHUobi52YWx1ZSkpcmV0dXJuIGUubmV4dD0xMSxuO2UubmV4dD0xMTticmVhaztjYXNlIDExOmUubmV4dD00O2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTE4O2JyZWFrO2Nhc2UgMTU6ZS5wcmV2PTE1LGUudDA9ZS5jYXRjaCgyKSxyLmUoZS50MCk7Y2FzZSAxODpyZXR1cm4gZS5wcmV2PTE4LHIuZigpLGUuZmluaXNoKDE4KTtjYXNlIDIxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFByZXZOb2Rlc0l0ZXJhdG9yLG51bGwsW1syLDE1LDE4LDIxXV0pfSkpLGV9cmV0dXJuIFByZXZFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIjoxNTcsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vSVRyZWVcIjo3NyxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEwNzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLHA9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKFJhbmRFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihSYW5kRW51bWVyYWJsZSk7ZnVuY3Rpb24gUmFuZEVudW1lcmFibGUodSl7dmFyIGUsaT0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxsPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl07cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFJhbmRFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLHUpLHAuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3Iscy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gUmFuZEl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbztyZXR1cm4gcy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYocj1mLnRvQXJyYXkodSksIWwpe2UubmV4dD0xMTticmVha310PTA7Y2FzZSAzOmlmKHQ8aSlyZXR1cm4gZS5uZXh0PTYscltNYXRoLmZsb29yKHIubGVuZ3RoKk1hdGgucmFuZG9tKCkpXTtlLm5leHQ9OTticmVhaztjYXNlIDY6dCsrLGUubmV4dD0zO2JyZWFrO2Nhc2UgOTplLm5leHQ9MjE7YnJlYWs7Y2FzZSAxMTpvPTA7Y2FzZSAxMjppZihvPGkpcmV0dXJuIG49TWF0aC5mbG9vcigoci5sZW5ndGgtbykqTWF0aC5yYW5kb20oKSkrbyxhPXJbbl0scltuXT1yW29dLGUubmV4dD0xOCxhO2UubmV4dD0yMTticmVhaztjYXNlIDE4Om8rKyxlLm5leHQ9MTI7YnJlYWs7Y2FzZSAyMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxSYW5kSXRlcmF0b3IpfSkpLGV9cmV0dXJuIFJhbmRFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMDg6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFJhbmdlRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoUmFuZ2VFbnVtZXJhYmxlKTtmdW5jdGlvbiBSYW5nZUVudW1lcmFibGUobixhKXt2YXIgZSxvPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxO3JldHVybigwLGkuZGVmYXVsdCkodGhpcyxSYW5nZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsW10pLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gUmFuZ2VJdGVyYXRvcigpe3ZhciByLHQ7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MCx0PW47Y2FzZSAxOmlmKHI8YSlyZXR1cm4gZS5uZXh0PTQsdDtlLm5leHQ9NzticmVhaztjYXNlIDQ6cisrLHQrPW8sZS5uZXh0PTE7YnJlYWs7Y2FzZSA3OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFJhbmdlSXRlcmF0b3IpfSkpLGV9cmV0dXJuIFJhbmdlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEwOTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGwuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLGkuZGVmYXVsdCkoUmVwZWF0RW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoUmVwZWF0RW51bWVyYWJsZSk7ZnVuY3Rpb24gUmVwZWF0RW51bWVyYWJsZSh0KXt2YXIgZSxuPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowO3JldHVybigwLG8uZGVmYXVsdCkodGhpcyxSZXBlYXRFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLFtdKSxmLmRlZmluZVByb3BlcnR5KCgwLHUuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGEuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFJlcGVhdEl0ZXJhdG9yKCl7dmFyIHI7cmV0dXJuIGEuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MDtjYXNlIDE6aWYocjxuKXJldHVybiBlLm5leHQ9NCx0O2UubmV4dD03O2JyZWFrO2Nhc2UgNDpyKyssZS5uZXh0PTE7YnJlYWs7Y2FzZSA3OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFJlcGVhdEl0ZXJhdG9yKX0pKSxlfXJldHVybiBSZXBlYXRFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTEwOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL0VudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLGkuZGVmYXVsdCkoUmV2ZXJzZUVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKFJldmVyc2VFbnVtZXJhYmxlKTtmdW5jdGlvbiBSZXZlcnNlRW51bWVyYWJsZShuKXt2YXIgZTtyZXR1cm4oMCxvLmRlZmF1bHQpKHRoaXMsUmV2ZXJzZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbikscC5kZWZpbmVQcm9wZXJ0eSgoMCx1LmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixhLmRlZmF1bHQubWFyayhmdW5jdGlvbiBSZXZlcnNlSXRlcmF0b3IoKXt2YXIgcix0O3JldHVybiBhLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPWYudG9BcnJheShuKSx0PXIubGVuZ3RoLHQ9dC0xO2Nhc2UgMjppZigwPD10KXJldHVybiBlLm5leHQ9NSxyW3RdO2UubmV4dD04O2JyZWFrO2Nhc2UgNTp0LS0sZS5uZXh0PTI7YnJlYWs7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFJldmVyc2VJdGVyYXRvcil9KSksZX1yZXR1cm4gUmV2ZXJzZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDExMTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxnPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksYz1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZj1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIikscD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRKb2luU2VsZWN0b3JcIikseD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCIpLEU9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoTGVmdEpvaW5FbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihMZWZ0Sm9pbkVudW1lcmFibGUpO2Z1bmN0aW9uIExlZnRKb2luRW51bWVyYWJsZShoLGIpe3ZhciBlLGQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnAsbT0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106RSx5PTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpFLHY9NTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOng7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLExlZnRKb2luRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxoKSxtPWYuYXNTZWxlY3RvcihtKSx5PWYuYXNTZWxlY3Rvcih5KSx2PWYuYXNFcXVhbGl0eUNvbXBhcmVyKHYpLGMuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsZy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gTGVmdEpvaW5JdGVyYXRvcigpe3ZhciByLHQsbixhLG8sdSxpLGwscyxjLGYscDtyZXR1cm4gZy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1bXSx0PTAsbj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihiKSxlLnByZXY9MixuLnMoKTtjYXNlIDQ6aWYoKHM9bi5uKCkpLmRvbmUpe2UubmV4dD02MjticmVha31pZihhPXMudmFsdWUsbz15KGEsdCksMCE9PXQpe2UubmV4dD0zNjticmVha311PTAsaT0hMSxsPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGgpLGUucHJldj0xMSxsLnMoKTtjYXNlIDEzOmlmKChzPWwubigpKS5kb25lKXtlLm5leHQ9MjM7YnJlYWt9aWYocD1zLnZhbHVlLHM9bShwLHUrKyksci5wdXNoKHtrZXk6cyxlbGVtZW50OnB9KSx2KHMsbykpcmV0dXJuIGk9ITAsZS5uZXh0PTIxLGQocCxhKTtlLm5leHQ9MjE7YnJlYWs7Y2FzZSAyMTplLm5leHQ9MTM7YnJlYWs7Y2FzZSAyMzplLm5leHQ9Mjg7YnJlYWs7Y2FzZSAyNTplLnByZXY9MjUsZS50MD1lLmNhdGNoKDExKSxsLmUoZS50MCk7Y2FzZSAyODpyZXR1cm4gZS5wcmV2PTI4LGwuZigpLGUuZmluaXNoKDI4KTtjYXNlIDMxOmlmKGkpe2UubmV4dD0zNDticmVha31yZXR1cm4gZS5uZXh0PTM0LGQodm9pZCAwLGEpO2Nhc2UgMzQ6ZS5uZXh0PTU5O2JyZWFrO2Nhc2UgMzY6Yz0hMSxmPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHIpLGUucHJldj0zOCxmLnMoKTtjYXNlIDQwOmlmKChwPWYubigpKS5kb25lKXtlLm5leHQ9NDg7YnJlYWt9aWYocD1wLnZhbHVlLHYocC5rZXksbykpcmV0dXJuIGM9ITAsZS5uZXh0PTQ2LGQocC5lbGVtZW50LGEpO2UubmV4dD00NjticmVhaztjYXNlIDQ2OmUubmV4dD00MDticmVhaztjYXNlIDQ4OmUubmV4dD01MzticmVhaztjYXNlIDUwOmUucHJldj01MCxlLnQxPWUuY2F0Y2goMzgpLGYuZShlLnQxKTtjYXNlIDUzOnJldHVybiBlLnByZXY9NTMsZi5mKCksZS5maW5pc2goNTMpO2Nhc2UgNTY6aWYoYyl7ZS5uZXh0PTU5O2JyZWFrfXJldHVybiBlLm5leHQ9NTksZCh2b2lkIDAsYSk7Y2FzZSA1OTp0Kys7Y2FzZSA2MDplLm5leHQ9NDticmVhaztjYXNlIDYyOmUubmV4dD02NzticmVhaztjYXNlIDY0OmUucHJldj02NCxlLnQyPWUuY2F0Y2goMiksbi5lKGUudDIpO2Nhc2UgNjc6cmV0dXJuIGUucHJldj02NyxuLmYoKSxlLmZpbmlzaCg2Nyk7Y2FzZSA3MDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxMZWZ0Sm9pbkl0ZXJhdG9yLG51bGwsW1syLDY0LDY3LDcwXSxbMTEsMjUsMjgsMzFdLFszOCw1MCw1Myw1Nl1dKX0pKSxlfXJldHVybiBMZWZ0Sm9pbkVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIjoxNTAsXCIuLy4uL21ldGhvZHMvZGVmYXVsdEpvaW5TZWxlY3RvclwiOjE1NCxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDExMjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsdS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLGEuZGVmYXVsdCkoUmlnaHRQYWRFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihSaWdodFBhZEVudW1lcmFibGUpO2Z1bmN0aW9uIFJpZ2h0UGFkRW51bWVyYWJsZShhLG8sdSl7dmFyIGU7cmV0dXJuKDAsbC5kZWZhdWx0KSh0aGlzLFJpZ2h0UGFkRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxhKSxmLmRlZmluZVByb3BlcnR5KCgwLHMuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGkuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIENvbmNhdEl0ZXJhdG9yKCl7dmFyIHIsdCxuO3JldHVybiBpLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGEpLGUucHJldj0xLHIucygpO2Nhc2UgMzppZigodD1yLm4oKSkuZG9uZSl7ZS5uZXh0PTEwO2JyZWFrfXJldHVybiB0PXQudmFsdWUsby0tLGUubmV4dD04LHQ7Y2FzZSA4OmUubmV4dD0zO2JyZWFrO2Nhc2UgMTA6ZS5uZXh0PTE1O2JyZWFrO2Nhc2UgMTI6ZS5wcmV2PTEyLGUudDA9ZS5jYXRjaCgxKSxyLmUoZS50MCk7Y2FzZSAxNTpyZXR1cm4gZS5wcmV2PTE1LHIuZigpLGUuZmluaXNoKDE1KTtjYXNlIDE4Om49MDtjYXNlIDE5OmlmKG48bylyZXR1cm4gZS5uZXh0PTIyLHU7ZS5uZXh0PTI1O2JyZWFrO2Nhc2UgMjI6bisrLGUubmV4dD0xOTticmVhaztjYXNlIDI1OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LENvbmNhdEl0ZXJhdG9yLG51bGwsW1sxLDEyLDE1LDE4XV0pfSkpLGV9cmV0dXJuIFJpZ2h0UGFkRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDExMzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAscy5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksaD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShTZWxlY3RFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihTZWxlY3RFbnVtZXJhYmxlKTtmdW5jdGlvbiBTZWxlY3RFbnVtZXJhYmxlKGEpe3ZhciBlLG89MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmg7cmV0dXJuKDAsaS5kZWZhdWx0KSh0aGlzLFNlbGVjdEVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsYSksbz1wLmFzU2VsZWN0b3IobyksZi5kZWZpbmVQcm9wZXJ0eSgoMCxsLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcix1LmRlZmF1bHQubWFyayhmdW5jdGlvbiBTZWxlY3RJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gdS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYSksZS5wcmV2PTIsdC5zKCk7Y2FzZSA0OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTA7YnJlYWt9cmV0dXJuIG49bi52YWx1ZSxlLm5leHQ9OCxvKG4scisrKTtjYXNlIDg6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAxMDplLm5leHQ9MTU7YnJlYWs7Y2FzZSAxMjplLnByZXY9MTIsZS50MD1lLmNhdGNoKDIpLHQuZShlLnQwKTtjYXNlIDE1OnJldHVybiBlLnByZXY9MTUsdC5mKCksZS5maW5pc2goMTUpO2Nhc2UgMTg6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2VsZWN0SXRlcmF0b3IsbnVsbCxbWzIsMTIsMTUsMThdXSl9KSksZX1yZXR1cm4gU2VsZWN0RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDExNDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksaD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFJlc3VsdFNlbGVjdG9yXCIpLG49ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKFNlbGVjdE1hbnlFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihTZWxlY3RNYW55RW51bWVyYWJsZSk7ZnVuY3Rpb24gU2VsZWN0TWFueUVudW1lcmFibGUodSl7dmFyIGUsaT0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aCxsPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxTZWxlY3RNYW55RW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyx1KSxpPXAuYXNTZWxlY3RvcihpKSxmLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHMuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFNlbGVjdE1hbnlJdGVyYXRvcigpe3ZhciByLHQsbixhLG87cmV0dXJuIHMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHUpLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobz10Lm4oKSkuZG9uZSl7ZS5uZXh0PTI1O2JyZWFrfW49by52YWx1ZSxhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGQuYXNFbnVtZXJhYmxlKGkobixyKyspKSksZS5wcmV2PTcsYS5zKCk7Y2FzZSA5OmlmKChvPWEubigpKS5kb25lKXtlLm5leHQ9MTU7YnJlYWt9cmV0dXJuIG89by52YWx1ZSxlLm5leHQ9MTMsbChuLG8pO2Nhc2UgMTM6ZS5uZXh0PTk7YnJlYWs7Y2FzZSAxNTplLm5leHQ9MjA7YnJlYWs7Y2FzZSAxNzplLnByZXY9MTcsZS50MD1lLmNhdGNoKDcpLGEuZShlLnQwKTtjYXNlIDIwOnJldHVybiBlLnByZXY9MjAsYS5mKCksZS5maW5pc2goMjApO2Nhc2UgMjM6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAyNTplLm5leHQ9MzA7YnJlYWs7Y2FzZSAyNzplLnByZXY9MjcsZS50MT1lLmNhdGNoKDIpLHQuZShlLnQxKTtjYXNlIDMwOnJldHVybiBlLnByZXY9MzAsdC5mKCksZS5maW5pc2goMzApO2Nhc2UgMzM6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2VsZWN0TWFueUl0ZXJhdG9yLG51bGwsW1syLDI3LDMwLDMzXSxbNywxNywyMCwyM11dKX0pKSxlfXJldHVybiBTZWxlY3RNYW55RW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9bjt2YXIgZD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFJlc3VsdFNlbGVjdG9yXCI6MTU4LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTE1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL0VudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksaD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCIpLGQ9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q2hpbGRyZW5TZWxlY3RvclwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShTZXBhcmF0ZUVudW1lcmFibGUsYyk7dmFyIHI9X2NyZWF0ZVN1cGVyKFNlcGFyYXRlRW51bWVyYWJsZSk7ZnVuY3Rpb24gU2VwYXJhdGVFbnVtZXJhYmxlKG8pe3ZhciBlLHU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmQsaT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YjtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsU2VwYXJhdGVFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLG8pLHU9aC5hc1NlbGVjdG9yKHUpLGk9aC5hc1NlbGVjdG9yKGkpLHAuZGVmaW5lUHJvcGVydHkoKDAscy5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2VwYXJhdGVJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiBsLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8pLGUucHJldj0xLHIucygpO2Nhc2UgMzppZigodD1yLm4oKSkuZG9uZSl7ZS5uZXh0PTIyO2JyZWFrfWlmKG49dC52YWx1ZSxwLmlzVW5kZWZpbmVkKG4pKXJldHVybiBlLm5leHQ9OCxuO2UubmV4dD0xMDticmVhaztjYXNlIDg6ZS5uZXh0PTIwO2JyZWFrO2Nhc2UgMTA6aWYoYT11KG4pLCFwLmlzTGlzdChhKSl7ZS5uZXh0PTE4O2JyZWFrfWlmKG4hPT1hKXJldHVybiBlLm5leHQ9MTUsaShuKTtlLm5leHQ9MTU7YnJlYWs7Y2FzZSAxNTpyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKGYuc2VwYXJhdGUoYSx1LGkpLFwidDBcIiwxNik7Y2FzZSAxNjplLm5leHQ9MjA7YnJlYWs7Y2FzZSAxODpyZXR1cm4gZS5uZXh0PTIwLGkobik7Y2FzZSAyMDplLm5leHQ9MzticmVhaztjYXNlIDIyOmUubmV4dD0yNzticmVhaztjYXNlIDI0OmUucHJldj0yNCxlLnQxPWUuY2F0Y2goMSksci5lKGUudDEpO2Nhc2UgMjc6cmV0dXJuIGUucHJldj0yNyxyLmYoKSxlLmZpbmlzaCgyNyk7Y2FzZSAzMDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxTZXBhcmF0ZUl0ZXJhdG9yLG51bGwsW1sxLDI0LDI3LDMwXV0pfSkpLGV9cmV0dXJuIFNlcGFyYXRlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNlbGVjdG9yXCI6MTQ3LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCI6MTYyLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMTY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGkuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCx1LmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuL0lUcmVlXCIpLGY9ZShcIi4vLi4vSUVudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksaD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksYj1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIiksZT1mdW5jdGlvbigpeygwLG8uZGVmYXVsdCkoU2libGluZ3NFbnVtZXJhYmxlLGYpO3ZhciByPV9jcmVhdGVTdXBlcihTaWJsaW5nc0VudW1lcmFibGUpO2Z1bmN0aW9uIFNpYmxpbmdzRW51bWVyYWJsZShvLHUpe3ZhciBlLGk9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmI7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFNpYmxpbmdzRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxbXSksaT1oLmFzUHJlZGljYXRlKGkpLHAuZGVmaW5lUHJvcGVydHkoKDAscy5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2libGluZ3NJdGVyYXRvcigpe3ZhciByLHQsbixhO3JldHVybiBsLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpuPW8uZ2V0UGFyZW50Tm9kZSh1KSxyPSExLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobi5jaGlsZHJlbiksZS5wcmV2PTMsdC5zKCk7Y2FzZSA1OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTY7YnJlYWt9aWYoYT1uLnZhbHVlLHJ8fCFjLmlzU2FtZU5vZGUoYSx1KSl7ZS5uZXh0PTExO2JyZWFrfXI9ITAsZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTE6aWYoaShhLnZhbHVlKSlyZXR1cm4gZS5uZXh0PTE0LGE7ZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTQ6ZS5uZXh0PTU7YnJlYWs7Y2FzZSAxNjplLm5leHQ9MjE7YnJlYWs7Y2FzZSAxODplLnByZXY9MTgsZS50MD1lLmNhdGNoKDMpLHQuZShlLnQwKTtjYXNlIDIxOnJldHVybiBlLnByZXY9MjEsdC5mKCksZS5maW5pc2goMjEpO2Nhc2UgMjQ6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2libGluZ3NJdGVyYXRvcixudWxsLFtbMywxOCwyMSwyNF1dKX0pKSxlfXJldHVybiBTaWJsaW5nc0VudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiOjE1NyxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi9JVHJlZVwiOjc3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTE3OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi9JVHJlZVwiKSxmPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLHA9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCIpLGU9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKFNpYmxpbmdzRW51bWVyYWJsZSxmKTt2YXIgcj1fY3JlYXRlU3VwZXIoU2libGluZ3NFbnVtZXJhYmxlKTtmdW5jdGlvbiBTaWJsaW5nc0VudW1lcmFibGUobyx1KXt2YXIgZSxpPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxTaWJsaW5nc0VudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsW10pLGk9aC5hc1ByZWRpY2F0ZShpKSxwLmRlZmluZVByb3BlcnR5KCgwLHMuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGwuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFNpYmxpbmdOb2Rlc0l0ZXJhdG9yKCl7dmFyIHIsdCxuLGE7cmV0dXJuIGwuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOm49by5nZXRQYXJlbnROb2RlKHUpLHI9ITEsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihuLmNoaWxkcmVuKSxlLnByZXY9Myx0LnMoKTtjYXNlIDU6aWYoKG49dC5uKCkpLmRvbmUpe2UubmV4dD0xNjticmVha31pZihhPW4udmFsdWUscnx8IWMuaXNTYW1lTm9kZShhLHUpKXtlLm5leHQ9MTE7YnJlYWt9cj0hMCxlLm5leHQ9MTQ7YnJlYWs7Y2FzZSAxMTppZihpKGEudmFsdWUpKXJldHVybiBlLm5leHQ9MTQsYS52YWx1ZTtlLm5leHQ9MTQ7YnJlYWs7Y2FzZSAxNDplLm5leHQ9NTticmVhaztjYXNlIDE2OmUubmV4dD0yMTticmVhaztjYXNlIDE4OmUucHJldj0xOCxlLnQwPWUuY2F0Y2goMyksdC5lKGUudDApO2Nhc2UgMjE6cmV0dXJuIGUucHJldj0yMSx0LmYoKSxlLmZpbmlzaCgyMSk7Y2FzZSAyNDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxTaWJsaW5nTm9kZXNJdGVyYXRvcixudWxsLFtbMywxOCwyMSwyNF1dKX0pKSxlfXJldHVybiBTaWJsaW5nc0VudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiOjE1NyxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi9JVHJlZVwiOjc3LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTE4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsbC5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxpLmRlZmF1bHQpKFNpbmdsZUVudW1lcmFibGUsYyk7dmFyIHQ9X2NyZWF0ZVN1cGVyKFNpbmdsZUVudW1lcmFibGUpO2Z1bmN0aW9uIFNpbmdsZUVudW1lcmFibGUocil7dmFyIGU7cmV0dXJuKDAsby5kZWZhdWx0KSh0aGlzLFNpbmdsZUVudW1lcmFibGUpLGU9dC5jYWxsKHRoaXMsW10pLGYuZGVmaW5lUHJvcGVydHkoKDAsdS5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2luZ2xlSXRlcmF0b3IoKXtyZXR1cm4gYS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUubmV4dD0yLHI7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFNpbmdsZUl0ZXJhdG9yKX0pKSxlfXJldHVybiBTaW5nbGVFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTE5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShTa2lwRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoU2tpcEVudW1lcmFibGUpO2Z1bmN0aW9uIFNraXBFbnVtZXJhYmxlKGEsbyl7dmFyIGU7cmV0dXJuKDAsaS5kZWZhdWx0KSh0aGlzLFNraXBFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGEpLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2tpcEl0ZXJhdG9yKCl7dmFyIHIsdCxuO3JldHVybiB1LmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPTAsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihhKSxlLnByZXY9Mix0LnMoKTtjYXNlIDQ6aWYoKG49dC5uKCkpLmRvbmUpe2UubmV4dD0xMjticmVha31pZihuPW4udmFsdWUsbzw9cilyZXR1cm4gZS5uZXh0PTksbjtlLm5leHQ9OTticmVhaztjYXNlIDk6cisrO2Nhc2UgMTA6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAxMjplLm5leHQ9MTc7YnJlYWs7Y2FzZSAxNDplLnByZXY9MTQsZS50MD1lLmNhdGNoKDIpLHQuZShlLnQwKTtjYXNlIDE3OnJldHVybiBlLnByZXY9MTcsdC5mKCksZS5maW5pc2goMTcpO2Nhc2UgMjA6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2tpcEl0ZXJhdG9yLG51bGwsW1syLDE0LDE3LDIwXV0pfSkpLGV9cmV0dXJuIFNraXBFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTIwOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHA9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxoPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShTa2lwUHJvcG9ydGlvbkVudW1lcmFibGUscyk7dmFyIHI9X2NyZWF0ZVN1cGVyKFNraXBQcm9wb3J0aW9uRW51bWVyYWJsZSk7ZnVuY3Rpb24gU2tpcFByb3BvcnRpb25FbnVtZXJhYmxlKGMpe3ZhciBlLGY9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFNraXBQcm9wb3J0aW9uRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxjKSxoLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHAuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFNraXBQcm9wb3J0aW9uSXRlcmF0b3IoKXt2YXIgcix0LG4sYSxvLHUsaSxsLHM7cmV0dXJuIHAuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKCEoMDxmKSl7ZS5uZXh0PTEyO2JyZWFrfXQ9cj0wLG49W10sYT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjKTt0cnl7Zm9yKGEucygpOyEobz1hLm4oKSkuZG9uZTspdT1vLnZhbHVlLHIrKyxuLnB1c2godSksdCsxPD1yKmYmJih0Kyssbi5zaGlmdCgpKX1jYXRjaChlKXthLmUoZSl9ZmluYWxseXthLmYoKX1pPTAsbD1uO2Nhc2UgNTppZihpPGwubGVuZ3RoKXJldHVybiBzPWxbaV0sZS5uZXh0PTkscztlLm5leHQ9MTI7YnJlYWs7Y2FzZSA5OmkrKyxlLm5leHQ9NTticmVhaztjYXNlIDEyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFNraXBQcm9wb3J0aW9uSXRlcmF0b3IpfSkpLGV9cmV0dXJuIFNraXBQcm9wb3J0aW9uRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEyMTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksaD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTYW1lQ29tcGFyZXJcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoU2tpcFNhbWVFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihTa2lwU2FtZUVudW1lcmFibGUpO2Z1bmN0aW9uIFNraXBTYW1lRW51bWVyYWJsZShpKXt2YXIgZSxsPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpoO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxTa2lwU2FtZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsaSksbD1wLmFzQ29tcGFyZXIobCksZi5kZWZpbmVQcm9wZXJ0eSgoMCxvLmRlZmF1bHQpKGUpLFN5bWJvbC5pdGVyYXRvcixzLmRlZmF1bHQubWFyayhmdW5jdGlvbiBTa2lwU2FtZUl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbyx1O3JldHVybiBzLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpuPXQ9IShyPSEwKSxhPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGkpLGUucHJldj0yLGEucygpO2Nhc2UgNDppZigobz1hLm4oKSkuZG9uZSl7ZS5uZXh0PTIyO2JyZWFrfWlmKHU9by52YWx1ZSwhcil7ZS5uZXh0PTExO2JyZWFrfXQ9dSxyPSExLGUubmV4dD0yMDticmVhaztjYXNlIDExOmlmKG4pcmV0dXJuIGUubmV4dD0xNCx1O2UubmV4dD0xNjticmVhaztjYXNlIDE0OmUubmV4dD0yMDticmVhaztjYXNlIDE2OmlmKGwodSx0KSl7ZS5uZXh0PTIwO2JyZWFrfXJldHVybiBuPSEwLGUubmV4dD0yMCx1O2Nhc2UgMjA6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAyMjplLm5leHQ9Mjc7YnJlYWs7Y2FzZSAyNDplLnByZXY9MjQsZS50MD1lLmNhdGNoKDIpLGEuZShlLnQwKTtjYXNlIDI3OnJldHVybiBlLnByZXY9MjcsYS5mKCksZS5maW5pc2goMjcpO2Nhc2UgMzA6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2tpcFNhbWVJdGVyYXRvcixudWxsLFtbMiwyNCwyNywzMF1dKX0pKSxlfXJldHVybiBTa2lwU2FtZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTIyOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxoPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShTa2lwV2hpbGVFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihTa2lwV2hpbGVFbnVtZXJhYmxlKTtmdW5jdGlvbiBTa2lwV2hpbGVFbnVtZXJhYmxlKHUpe3ZhciBlLGk9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmg7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFNraXBXaGlsZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsdSksaT1wLmFzUHJlZGljYXRlKGkpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2tpcFdoaWxlSXRlcmF0b3IoKXt2YXIgcix0LG4sYSxvO3JldHVybiBsLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPSEwLHQ9MCxuPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHUpLGUucHJldj0yLG4ucygpO2Nhc2UgNDppZigoYT1uLm4oKSkuZG9uZSl7ZS5uZXh0PTEyO2JyZWFrfWlmKG89YS52YWx1ZSxyPXImJmkobyx0KyspKXtlLm5leHQ9MTA7YnJlYWt9cmV0dXJuIGUubmV4dD0xMCxvO2Nhc2UgMTA6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAxMjplLm5leHQ9MTc7YnJlYWs7Y2FzZSAxNDplLnByZXY9MTQsZS50MD1lLmNhdGNoKDIpLG4uZShlLnQwKTtjYXNlIDE3OnJldHVybiBlLnByZXY9MTcsbi5mKCksZS5maW5pc2goMTcpO2Nhc2UgMjA6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2tpcFdoaWxlSXRlcmF0b3IsbnVsbCxbWzIsMTQsMTcsMjBdXSl9KSksZX1yZXR1cm4gU2tpcFdoaWxlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCI6MTU3LFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMjM6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsdS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGY9ZShcIi4vLi4vSUVudW1lcmFibGVcIikscD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLGEuZGVmYXVsdCkoU2xpY2VFbnVtZXJhYmxlLGYpO3ZhciByPV9jcmVhdGVTdXBlcihTbGljZUVudW1lcmFibGUpO2Z1bmN0aW9uIFNsaWNlRW51bWVyYWJsZShhKXt2YXIgZSxvPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowLHU9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjEvMDtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsU2xpY2VFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGEpLHAuZGVmaW5lUHJvcGVydHkoKDAsYy5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsaS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU2xpY2VJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gaS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6KG88MHx8dTwwKSYmKGE9KDAsbC5kZWZhdWx0KShhKSxvPDAmJihvPU1hdGgubWF4KGEubGVuZ3RoK28sMCkpLHU8MCYmKHU9TWF0aC5tYXgoYS5sZW5ndGgrdSwwKSkpLHI9MCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGEpLGUucHJldj0zLHQucygpO2Nhc2UgNTppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTE3O2JyZWFrfWlmKG49bi52YWx1ZSxvPD1yJiZyPHUpcmV0dXJuIGUubmV4dD0xMCxuO2UubmV4dD0xMjticmVhaztjYXNlIDEwOmUubmV4dD0xNDticmVhaztjYXNlIDEyOmlmKHU8PXIpcmV0dXJuIGUuYWJydXB0KFwiYnJlYWtcIiwxNyk7ZS5uZXh0PTE0O2JyZWFrO2Nhc2UgMTQ6cisrO2Nhc2UgMTU6ZS5uZXh0PTU7YnJlYWs7Y2FzZSAxNzplLm5leHQ9MjI7YnJlYWs7Y2FzZSAxOTplLnByZXY9MTksZS50MD1lLmNhdGNoKDMpLHQuZShlLnQwKTtjYXNlIDIyOnJldHVybiBlLnByZXY9MjIsdC5mKCksZS5maW5pc2goMjIpO2Nhc2UgMjU6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU2xpY2VJdGVyYXRvcixudWxsLFtbMywxOSwyMiwyNV1dKX0pKSxlfXJldHVybiBTbGljZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjoyMyxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMjQ6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxjPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxhLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsYS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsYy5kZWZhdWx0KSh0aGlzLHIpfX12YXIgZj1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCIpLGg9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpeygwLHMuZGVmYXVsdCkoU29ydEVudW1lcmFibGUsZik7dmFyIGE9X2NyZWF0ZVN1cGVyKFNvcnRFbnVtZXJhYmxlKTtmdW5jdGlvbiBTb3J0RW51bWVyYWJsZShlKXt2YXIgcix0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpwO2lmKCgwLGwuZGVmYXVsdCkodGhpcyxTb3J0RW51bWVyYWJsZSkscj1hLmNhbGwodGhpcyxlKSx0PWIuYXNDb21wYXJlcih0KSxoLmlzQXJyYXkoZSkmJmguYXJyYXkkc29ydClyZXR1cm4oMCxjLmRlZmF1bHQpKHIsZC5leHRlbmQoaC5hcnJheSRzb3J0LmNhbGwoZSx0KSkpO3ZhciBuPSgwLGkuZGVmYXVsdCkoe30sU3ltYm9sLml0ZXJhdG9yLGVbU3ltYm9sLml0ZXJhdG9yXSk7cmV0dXJuIGguc2V0UHJvcGVydHkoZSxTeW1ib2wuaXRlcmF0b3Isby5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpe3JldHVybiBvLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyZXR1cm4gZS5kZWxlZ2F0ZVlpZWxkKCgwLHUuZGVmYXVsdCkobikuc29ydCh0KSxcInQwXCIsMSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpLCgwLGMuZGVmYXVsdCkocixlKX1yZXR1cm4gU29ydEVudW1lcmFibGV9KCk7dmFyIGQ9ZShcIi4vLi4vRW51bWVyYWJsZVwiKX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiOjE0OSxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI6OCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjoyMyxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMjU6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksZj1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSkscD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKSxoPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLGI9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsdS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLG8uZGVmYXVsdCkodGhpcyxyKX19dmFyIGk9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZD1lKFwiLi8uLi9jb3JlL2NvcmVcIiksZT1mdW5jdGlvbigpeygwLGEuZGVmYXVsdCkoU3BsaWNlRW51bWVyYWJsZSxpKTt2YXIgYz1fY3JlYXRlU3VwZXIoU3BsaWNlRW51bWVyYWJsZSk7ZnVuY3Rpb24gU3BsaWNlRW51bWVyYWJsZShlLHUsaSl7Zm9yKHZhciByLHQsbixsLGE9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSgzPGE/YS0zOjApLG89MztvPGE7bysrKXNbby0zXT1hcmd1bWVudHNbb107cmV0dXJuKDAsaC5kZWZhdWx0KSh0aGlzLFNwbGljZUVudW1lcmFibGUpLHI9Yy5jYWxsKHRoaXMsZSksZC5pc0FycmF5KGUpJiZkLmFycmF5JHNwbGljZT8obj0odD1kLmFycmF5JHNwbGljZSkuY2FsbC5hcHBseSh0LFtlLHUsaV0uY29uY2F0KHMpKSxkLnNldFByb3BlcnR5KCgwLGIuZGVmYXVsdCkociksU3ltYm9sLml0ZXJhdG9yLGYuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXtyZXR1cm4gZi5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUuZGVsZWdhdGVZaWVsZChuLFwidDBcIiwxKTtjYXNlIDE6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sX2NhbGxlZSl9KSkpOihpPXZvaWQgMD09PWk/MS8wOmksbD0oMCxwLmRlZmF1bHQpKHt9LFN5bWJvbC5pdGVyYXRvcixlW1N5bWJvbC5pdGVyYXRvcl0pLGQuc2V0UHJvcGVydHkoZSxTeW1ib2wuaXRlcmF0b3IsZi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKXt2YXIgcix0LG4sYSxvO3JldHVybiBmLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPTAsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihsKSxlLnByZXY9Mix0LnMoKTtjYXNlIDQ6aWYoKG89dC5uKCkpLmRvbmUpe2UubmV4dD0zNTticmVha31pZihuPW8udmFsdWUscjx1KXJldHVybiBlLm5leHQ9OSxuO2UubmV4dD0xMTticmVhaztjYXNlIDk6ZS5uZXh0PTMyO2JyZWFrO2Nhc2UgMTE6aWYociE9dSl7ZS5uZXh0PTI5O2JyZWFrfWE9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocyksZS5wcmV2PTEzLGEucygpO2Nhc2UgMTU6aWYoKG89YS5uKCkpLmRvbmUpe2UubmV4dD0yMTticmVha31yZXR1cm4gbz1vLnZhbHVlLGUubmV4dD0xOSxvO2Nhc2UgMTk6ZS5uZXh0PTE1O2JyZWFrO2Nhc2UgMjE6ZS5uZXh0PTI2O2JyZWFrO2Nhc2UgMjM6ZS5wcmV2PTIzLGUudDA9ZS5jYXRjaCgxMyksYS5lKGUudDApO2Nhc2UgMjY6cmV0dXJuIGUucHJldj0yNixhLmYoKSxlLmZpbmlzaCgyNik7Y2FzZSAyOTppZih1K2k8PXIpcmV0dXJuIGUubmV4dD0zMixuO2UubmV4dD0zMjticmVhaztjYXNlIDMyOnIrKztjYXNlIDMzOmUubmV4dD00O2JyZWFrO2Nhc2UgMzU6ZS5uZXh0PTQwO2JyZWFrO2Nhc2UgMzc6ZS5wcmV2PTM3LGUudDE9ZS5jYXRjaCgyKSx0LmUoZS50MSk7Y2FzZSA0MDpyZXR1cm4gZS5wcmV2PTQwLHQuZigpLGUuZmluaXNoKDQwKTtjYXNlIDQzOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUyLG51bGwsW1syLDM3LDQwLDQzXSxbMTMsMjMsMjYsMjldXSl9KSksZC5zZXRQcm9wZXJ0eSgoMCxiLmRlZmF1bHQpKHIpLFN5bWJvbC5pdGVyYXRvcixmLmRlZmF1bHQubWFyayhmdW5jdGlvbiBTcGxpY2VJdGVyYXRvcigpe3ZhciByLHQsbjtyZXR1cm4gZi5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobCksZS5wcmV2PTIsdC5zKCk7Y2FzZSA0OmlmKChuPXQubigpKS5kb25lKXtlLm5leHQ9MTI7YnJlYWt9aWYobj1uLnZhbHVlLHU8PXImJnI8dStpKXJldHVybiBlLm5leHQ9OSxuO2UubmV4dD05O2JyZWFrO2Nhc2UgOTpyKys7Y2FzZSAxMDplLm5leHQ9NDticmVhaztjYXNlIDEyOmUubmV4dD0xNzticmVhaztjYXNlIDE0OmUucHJldj0xNCxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMTc6cmV0dXJuIGUucHJldj0xNyx0LmYoKSxlLmZpbmlzaCgxNyk7Y2FzZSAyMDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxTcGxpY2VJdGVyYXRvcixudWxsLFtbMiwxNCwxNywyMF1dKX0pKSkscn1yZXR1cm4gU3BsaWNlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiOjgsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTI2OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGY9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxpPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsaS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcD1lKFwiLi9JQ2h1bmtcIikscz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxoPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxiPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxkPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEZhbHNlUHJlZGljYXRlXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKFNwbGl0RW51bWVyYWJsZSxzKTt2YXIgcj1fY3JlYXRlU3VwZXIoU3BsaXRFbnVtZXJhYmxlKTtmdW5jdGlvbiBTcGxpdEVudW1lcmFibGUocyl7dmFyIGUsYz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsU3BsaXRFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLHMpLGM9Yi5hc1ByZWRpY2F0ZShjKSxoLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLGYuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFNwbGl0SXRlcmF0b3IoKXt2YXIgcixuLGEsbyx0LHUsaSxsO3JldHVybiBmLmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPXNbU3ltYm9sLml0ZXJhdG9yXSgpLGE9W10sbz1bXSx0PW49MCx1PWZ1bmN0aW9uKCl7dmFyIHQ7by5wdXNoKG5ldyBwKG4rKywodD1hLGYuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKXt2YXIgcjtyZXR1cm4gZi5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0wO2Nhc2UgMTppZih0Lmxlbmd0aD5yfHxpKCkmJnQubGVuZ3RoPnIpcmV0dXJuIGUubmV4dD00LHRbcisrXTtlLm5leHQ9NjticmVhaztjYXNlIDQ6ZS5uZXh0PTE7YnJlYWs7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LF9jYWxsZWUpfSkpKSl9LGk9ZnVuY3Rpb24oKXt2YXIgZT1yLm5leHQoKTtyZXR1cm4hZS5kb25lJiYoYyhlLnZhbHVlLHQrKyk/KGE9W10sdSgpKTphLnB1c2goZS52YWx1ZSksITApfSx1KCksbD0wO2Nhc2UgOTppZighKG8ubGVuZ3RoPmx8fGkoKSkpe2UubmV4dD0xNTticmVha31pZihvLmxlbmd0aD5sKXJldHVybiBlLm5leHQ9MTMsb1tsKytdO2UubmV4dD0xMzticmVhaztjYXNlIDEzOmUubmV4dD05O2JyZWFrO2Nhc2UgMTU6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sU3BsaXRJdGVyYXRvcil9KSksZX1yZXR1cm4gU3BsaXRFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRGYWxzZVByZWRpY2F0ZVwiOjE1MixcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiLi9JQ2h1bmtcIjo3MixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEyNzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vSXRlcmFibGVFbnVtZXJhYmxlXCIpLGM9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGY9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiKSxoPWUoXCIuLy4uL0VudW1lcmFibGVcIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShTdHJpbmdFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihTdHJpbmdFbnVtZXJhYmxlKTtmdW5jdGlvbiBTdHJpbmdFbnVtZXJhYmxlKG4pe3ZhciBlO3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxTdHJpbmdFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLG4pLGMuZGVmaW5lUHJvcGVydGllcygoMCxvLmRlZmF1bHQpKGUpLHtpbmRleE9mOmZ1bmN0aW9uKGUpe3ZhciByLHQ9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuKHI9Zi5hc1N0cmljdEVxdWFsaXR5Q29tcGFyZXIocj0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06cCkpPT09cCYmYy5zdHJpbmckaW5kZXhPZj9jLnN0cmluZyRpbmRleE9mLmNhbGwobixlLHQpOmguaW5kZXhPZih0aGlzLGUsdCxyKX0sbGFzdEluZGV4T2Y6ZnVuY3Rpb24oZSl7dmFyIHIsdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wO3JldHVybihyPWYuYXNTdHJpY3RFcXVhbGl0eUNvbXBhcmVyKHI9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnApKT09PXAmJmMuc3RyaW5nJGxhc3RJbmRleE9mP2Muc3RyaW5nJGxhc3RJbmRleE9mLmNhbGwobixlLHQpOmgubGFzdEluZGV4T2YodGhpcyxlLHQscil9LGluY2x1ZGVzOmZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowO3JldHVybiBjLnN0cmluZyRpbmNsdWRlcz9jLnN0cmluZyRpbmNsdWRlcy5jYWxsKG4sZSxyKTpoLmluY2x1ZGVzKHRoaXMsZSxyKX19KSxlfXJldHVybiBTdHJpbmdFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL0VudW1lcmFibGVcIjozMSxcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFN0cmljdEVxdWFsaXR5Q29tcGFyZXJcIjoxNjEsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vSXRlcmFibGVFbnVtZXJhYmxlXCI6ODIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOX1dLDEyODpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxjPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIHM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksaD1lKFwiLi8uLi9FbnVtZXJhYmxlXCIpLGI9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShTeW1tZXRyaWNFbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihTeW1tZXRyaWNFbnVtZXJhYmxlKTtmdW5jdGlvbiBTeW1tZXRyaWNFbnVtZXJhYmxlKGksbCl7dmFyIGUscz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YjtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsU3ltbWV0cmljRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxpKSxzPXAuYXNFcXVhbGl0eUNvbXBhcmVyKHMpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gU3ltbWV0cmljSXRlcmF0b3IoKXt2YXIgcix0LG4sYSxvLHU7cmV0dXJuIGMuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9W10sdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpKSxlLnByZXY9Mix0LnMoKTtjYXNlIDQ6aWYoKG89dC5uKCkpLmRvbmUpe2UubmV4dD0xMzticmVha31pZihuPW8udmFsdWUsaC5jb250YWlucyhsLG4scykpe2UubmV4dD0xMTticmVha31pZihoLmNvbnRhaW5zKHIsbixzKSl7ZS5uZXh0PTExO2JyZWFrfXJldHVybiByLnB1c2gobiksZS5uZXh0PTExLG47Y2FzZSAxMTplLm5leHQ9NDticmVhaztjYXNlIDEzOmUubmV4dD0xODticmVhaztjYXNlIDE1OmUucHJldj0xNSxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMTg6cmV0dXJuIGUucHJldj0xOCx0LmYoKSxlLmZpbmlzaCgxOCk7Y2FzZSAyMTphPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGwpLGUucHJldj0yMixhLnMoKTtjYXNlIDI0OmlmKChvPWEubigpKS5kb25lKXtlLm5leHQ9MzM7YnJlYWt9aWYodT1vLnZhbHVlLGguY29udGFpbnMoaSx1LHMpKXtlLm5leHQ9MzE7YnJlYWt9aWYoaC5jb250YWlucyhyLHUscykpe2UubmV4dD0zMTticmVha31yZXR1cm4gci5wdXNoKHUpLGUubmV4dD0zMSx1O2Nhc2UgMzE6ZS5uZXh0PTI0O2JyZWFrO2Nhc2UgMzM6ZS5uZXh0PTM4O2JyZWFrO2Nhc2UgMzU6ZS5wcmV2PTM1LGUudDE9ZS5jYXRjaCgyMiksYS5lKGUudDEpO2Nhc2UgMzg6cmV0dXJuIGUucHJldj0zOCxhLmYoKSxlLmZpbmlzaCgzOCk7Y2FzZSA0MTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxTeW1tZXRyaWNJdGVyYXRvcixudWxsLFtbMiwxNSwxOCwyMV0sWzIyLDM1LDM4LDQxXV0pfSkpLGV9cmV0dXJuIFN5bW1ldHJpY0VudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vRW51bWVyYWJsZVwiOjMxLFwiLi8uLi9JRW51bWVyYWJsZVwiOjMyLFwiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTI5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxlPWZ1bmN0aW9uKCl7KDAsYS5kZWZhdWx0KShUYWtlRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoVGFrZUVudW1lcmFibGUpO2Z1bmN0aW9uIFRha2VFbnVtZXJhYmxlKGEsbyl7dmFyIGU7cmV0dXJuKDAsaS5kZWZhdWx0KSh0aGlzLFRha2VFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGEpLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gVGFrZUl0ZXJhdG9yKCl7dmFyIHIsdCxuO3JldHVybiB1LmRlZmF1bHQud3JhcChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPTAsdD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihhKSxlLnByZXY9Mix0LnMoKTtjYXNlIDQ6aWYoKG49dC5uKCkpLmRvbmUpe2UubmV4dD0xNTticmVha31pZihuPW4udmFsdWUscjxvKXJldHVybiBlLm5leHQ9OSxuO2UubmV4dD0xMTticmVhaztjYXNlIDk6ZS5uZXh0PTEyO2JyZWFrO2Nhc2UgMTE6cmV0dXJuIGUuYWJydXB0KFwiYnJlYWtcIiwxNSk7Y2FzZSAxMjpyKys7Y2FzZSAxMzplLm5leHQ9NDticmVhaztjYXNlIDE1OmUubmV4dD0yMDticmVhaztjYXNlIDE3OmUucHJldj0xNyxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMjA6cmV0dXJuIGUucHJldj0yMCx0LmYoKSxlLmZpbmlzaCgyMCk7Y2FzZSAyMzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxUYWtlSXRlcmF0b3IsbnVsbCxbWzIsMTcsMjAsMjNdXSl9KSksZX1yZXR1cm4gVGFrZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMzA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKFRha2VQcm9wb3J0aW9uRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoVGFrZVByb3BvcnRpb25FbnVtZXJhYmxlKTtmdW5jdGlvbiBUYWtlUHJvcG9ydGlvbkVudW1lcmFibGUodSl7dmFyIGUsaT0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MTtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsVGFrZVByb3BvcnRpb25FbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLHUpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gVGFrZVByb3BvcnRpb25JdGVyYXRvcigpe3ZhciByLHQsbixhLG87cmV0dXJuIGwuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKCEoMDxpKSl7ZS5uZXh0PTIzO2JyZWFrfXQ9cj0wLG49W10sYT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih1KSxlLnByZXY9MyxhLnMoKTtjYXNlIDU6aWYoKG89YS5uKCkpLmRvbmUpe2UubmV4dD0xNTticmVha31pZihvPW8udmFsdWUscisrLG4ucHVzaChvKSx0KzE8PXIqaSlyZXR1cm4gdCsrLGUubmV4dD0xMyxuLnNoaWZ0KCk7ZS5uZXh0PTEzO2JyZWFrO2Nhc2UgMTM6ZS5uZXh0PTU7YnJlYWs7Y2FzZSAxNTplLm5leHQ9MjA7YnJlYWs7Y2FzZSAxNzplLnByZXY9MTcsZS50MD1lLmNhdGNoKDMpLGEuZShlLnQwKTtjYXNlIDIwOnJldHVybiBlLnByZXY9MjAsYS5mKCksZS5maW5pc2goMjApO2Nhc2UgMjM6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sVGFrZVByb3BvcnRpb25JdGVyYXRvcixudWxsLFtbMywxNywyMCwyM11dKX0pKSxlfXJldHVybiBUYWtlUHJvcG9ydGlvbkVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMzE6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2FtZUNvbXBhcmVyXCIpLGU9ZnVuY3Rpb24oKXsoMCx1LmRlZmF1bHQpKFRha2VTYW1lRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoVGFrZVNhbWVFbnVtZXJhYmxlKTtmdW5jdGlvbiBUYWtlU2FtZUVudW1lcmFibGUodSl7dmFyIGUsaT0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsVGFrZVNhbWVFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLHUpLGk9cC5hc0NvbXBhcmVyKGkpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gVGFrZVNhbWVJdGVyYXRvcigpe3ZhciByLHQsbixhLG87cmV0dXJuIGwuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnQ9IShyPSEwKSxuPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHUpLGUucHJldj0yLG4ucygpO2Nhc2UgNDppZigoYT1uLm4oKSkuZG9uZSl7ZS5uZXh0PTIxO2JyZWFrfWlmKG89YS52YWx1ZSxyKXJldHVybiB0PW8scj0hMSxlLm5leHQ9MTEsbztlLm5leHQ9MTM7YnJlYWs7Y2FzZSAxMTplLm5leHQ9MTk7YnJlYWs7Y2FzZSAxMzppZihpKG8sdCkpcmV0dXJuIGUubmV4dD0xNixvO2UubmV4dD0xODticmVhaztjYXNlIDE2OmUubmV4dD0xOTticmVhaztjYXNlIDE4OnJldHVybiBlLmFicnVwdChcImJyZWFrXCIsMjEpO2Nhc2UgMTk6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAyMTplLm5leHQ9MjY7YnJlYWs7Y2FzZSAyMzplLnByZXY9MjMsZS50MD1lLmNhdGNoKDIpLG4uZShlLnQwKTtjYXNlIDI2OnJldHVybiBlLnByZXY9MjYsbi5mKCksZS5maW5pc2goMjYpO2Nhc2UgMjk6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sVGFrZVNhbWVJdGVyYXRvcixudWxsLFtbMiwyMywyNiwyOV1dKX0pKSxlfXJldHVybiBUYWtlU2FtZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTMyOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxzLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAscy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxoPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShUYWtlV2hpbGVFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihUYWtlV2hpbGVFbnVtZXJhYmxlKTtmdW5jdGlvbiBUYWtlV2hpbGVFbnVtZXJhYmxlKG8pe3ZhciBlLHU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmg7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFRha2VXaGlsZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbyksdT1wLmFzUHJlZGljYXRlKHUpLGYuZGVmaW5lUHJvcGVydHkoKDAsbC5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsaS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gVGFrZVdoaWxlSXRlcmF0b3IoKXt2YXIgcix0LG4sYTtyZXR1cm4gaS5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj0hMCx0PTAsbj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvKSxlLnByZXY9MixuLnMoKTtjYXNlIDQ6aWYoKGE9bi5uKCkpLmRvbmUpe2UubmV4dD0xNTticmVha31pZihhPWEudmFsdWUscj1yJiZ1KGEsdCsrKSlyZXR1cm4gZS5uZXh0PTEwLGE7ZS5uZXh0PTEyO2JyZWFrO2Nhc2UgMTA6ZS5uZXh0PTEzO2JyZWFrO2Nhc2UgMTI6cmV0dXJuIGUuYWJydXB0KFwiYnJlYWtcIiwxNSk7Y2FzZSAxMzplLm5leHQ9NDticmVhaztjYXNlIDE1OmUubmV4dD0yMDticmVhaztjYXNlIDE3OmUucHJldj0xNyxlLnQwPWUuY2F0Y2goMiksbi5lKGUudDApO2Nhc2UgMjA6cmV0dXJuIGUucHJldj0yMCxuLmYoKSxlLmZpbmlzaCgyMCk7Y2FzZSAyMzpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxUYWtlV2hpbGVJdGVyYXRvcixudWxsLFtbMiwxNywyMCwyM11dKX0pKSxlfXJldHVybiBUYWtlV2hpbGVFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIjoxNTcsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEzMzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsaS5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGkuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLHUuZGVmYXVsdCkodGhpcyxyKX19dmFyIGw9ZShcIi4vSU9yZGVyZWRFbnVtZXJhYmxlXCIpLHM9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGM9ZShcIi4vLi4vbWV0aG9kcy90aGVuQnlDb21wYXJlclwiKSxmPWUoXCIuLy4uL21ldGhvZHMvc2VsZWN0b3JDb21wYXJlclwiKSxwPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0Q29tcGFyZXJcIiksYj1lKFwiLi8uLi9tZXRob2RzL2Rlc2NlbmRpbmdDb21wYXJlclwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKFRoZW5CeURlc2NlbmRpbmdFbnVtZXJhYmxlLGwpO3ZhciBuPV9jcmVhdGVTdXBlcihUaGVuQnlEZXNjZW5kaW5nRW51bWVyYWJsZSk7ZnVuY3Rpb24gVGhlbkJ5RGVzY2VuZGluZ0VudW1lcmFibGUoZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnAsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06aDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsVGhlbkJ5RGVzY2VuZGluZ0VudW1lcmFibGUpLHI9cy5hc1NlbGVjdG9yKHIpLHQ9cy5hc0NvbXBhcmVyKHQpLG4uY2FsbCh0aGlzLGVbbC5zb3VyY2VdLGMoZVtsLm9yZGVyQnlDb21wYXJlcl0sYihmKHIsdCkpKSl9cmV0dXJuIFRoZW5CeURlc2NlbmRpbmdFbnVtZXJhYmxlfSgpfSx7XCIuLy4uL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCI6MTQ5LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRTZWxlY3RvclwiOjE2MCxcIi4vLi4vbWV0aG9kcy9kZXNjZW5kaW5nQ29tcGFyZXJcIjoxNjQsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vLi4vbWV0aG9kcy9zZWxlY3RvckNvbXBhcmVyXCI6MTc2LFwiLi8uLi9tZXRob2RzL3RoZW5CeUNvbXBhcmVyXCI6MTc4LFwiLi9JT3JkZXJlZEVudW1lcmFibGVcIjo3NixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sMTM0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgbD1lKFwiLi9JT3JkZXJlZEVudW1lcmFibGVcIikscz1lKFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIiksYz1lKFwiLi8uLi9tZXRob2RzL3RoZW5CeUNvbXBhcmVyXCIpLGY9ZShcIi4vLi4vbWV0aG9kcy9zZWxlY3RvckNvbXBhcmVyXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIiksaD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oKXsoMCxvLmRlZmF1bHQpKFRoZW5CeUVudW1lcmFibGUsbCk7dmFyIG49X2NyZWF0ZVN1cGVyKFRoZW5CeUVudW1lcmFibGUpO2Z1bmN0aW9uIFRoZW5CeUVudW1lcmFibGUoZSl7dmFyIHI9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnAsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06aDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsVGhlbkJ5RW51bWVyYWJsZSkscj1zLmFzU2VsZWN0b3IociksdD1zLmFzQ29tcGFyZXIodCksbi5jYWxsKHRoaXMsZVtsLnNvdXJjZV0sYyhlW2wub3JkZXJCeUNvbXBhcmVyXSxmKHIsdCkpKX1yZXR1cm4gVGhlbkJ5RW51bWVyYWJsZX0oKX0se1wiLi8uLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiOjE0OSxcIi4vLi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIi4vLi4vbWV0aG9kcy9zZWxlY3RvckNvbXBhcmVyXCI6MTc2LFwiLi8uLi9tZXRob2RzL3RoZW5CeUNvbXBhcmVyXCI6MTc4LFwiLi9JT3JkZXJlZEVudW1lcmFibGVcIjo3NixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5fV0sMTM1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksbD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxsLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsbC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsby5kZWZhdWx0KSh0aGlzLHIpfX12YXIgcz1lKFwiLi9JVHJlZVwiKSxjPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxmPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdENoaWxkcmVuU2VsZWN0b3JcIikscD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFRyZWVFbnVtZXJhYmxlLHMpO3ZhciBlPV9jcmVhdGVTdXBlcihUcmVlRW51bWVyYWJsZSk7ZnVuY3Rpb24gVHJlZUVudW1lcmFibGUobil7dmFyIGE9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmYsbz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06cDtyZXR1cm4oMCxpLmRlZmF1bHQpKHRoaXMsVHJlZUVudW1lcmFibGUpLGE9Yy5hc1NlbGVjdG9yKGEpLG89Yy5hc1NlbGVjdG9yKG8pLGUuY2FsbCh0aGlzLG8obiksdS5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpe3ZhciByLHQ7cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKCEodD1hKG4pKSl7ZS5uZXh0PTE5O2JyZWFrfXI9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodCksZS5wcmV2PTMsci5zKCk7Y2FzZSA1OmlmKCh0PXIubigpKS5kb25lKXtlLm5leHQ9MTE7YnJlYWt9cmV0dXJuIHQ9dC52YWx1ZSxlLm5leHQ9OSxuZXcgVHJlZUVudW1lcmFibGUodCxhLG8pO2Nhc2UgOTplLm5leHQ9NTticmVhaztjYXNlIDExOmUubmV4dD0xNjticmVhaztjYXNlIDEzOmUucHJldj0xMyxlLnQwPWUuY2F0Y2goMyksci5lKGUudDApO2Nhc2UgMTY6cmV0dXJuIGUucHJldj0xNixyLmYoKSxlLmZpbmlzaCgxNik7Y2FzZSAxOTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxfY2FsbGVlLG51bGwsW1szLDEzLDE2LDE5XV0pfSkpfXJldHVybiBUcmVlRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNlbGVjdG9yXCI6MTQ3LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCI6MTYyLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCIuL0lUcmVlXCI6NzcsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMzY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksYT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxvPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLGk9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLGwuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxpLmRlZmF1bHQpKHRoaXMscil9fXZhciBzPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGg9ZShcIi4vLi4vRW51bWVyYWJsZVwiKSxiPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIiksZT1mdW5jdGlvbigpeygwLHUuZGVmYXVsdCkoVW5pb25FbnVtZXJhYmxlLHMpO3ZhciByPV9jcmVhdGVTdXBlcihVbmlvbkVudW1lcmFibGUpO2Z1bmN0aW9uIFVuaW9uRW51bWVyYWJsZShpLGwpe3ZhciBlLHM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmI7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLFVuaW9uRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyxpKSxzPXAuYXNFcXVhbGl0eUNvbXBhcmVyKHMpLGYuZGVmaW5lUHJvcGVydHkoKDAsby5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsYy5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gVW5pb25JdGVyYXRvcigpe3ZhciByLHQsbixhLG8sdTtyZXR1cm4gYy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj1bXSx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGkpLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobz10Lm4oKSkuZG9uZSl7ZS5uZXh0PTEyO2JyZWFrfWlmKG49by52YWx1ZSxoLmNvbnRhaW5zKHIsbixzKSl7ZS5uZXh0PTEwO2JyZWFrfXJldHVybiByLnB1c2gobiksZS5uZXh0PTEwLG47Y2FzZSAxMDplLm5leHQ9NDticmVhaztjYXNlIDEyOmUubmV4dD0xNzticmVhaztjYXNlIDE0OmUucHJldj0xNCxlLnQwPWUuY2F0Y2goMiksdC5lKGUudDApO2Nhc2UgMTc6cmV0dXJuIGUucHJldj0xNyx0LmYoKSxlLmZpbmlzaCgxNyk7Y2FzZSAyMDphPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGwpLGUucHJldj0yMSxhLnMoKTtjYXNlIDIzOmlmKChvPWEubigpKS5kb25lKXtlLm5leHQ9MzE7YnJlYWt9aWYodT1vLnZhbHVlLGguY29udGFpbnMocix1LHMpKXtlLm5leHQ9Mjk7YnJlYWt9cmV0dXJuIHIucHVzaCh1KSxlLm5leHQ9MjksdTtjYXNlIDI5OmUubmV4dD0yMzticmVhaztjYXNlIDMxOmUubmV4dD0zNjticmVhaztjYXNlIDMzOmUucHJldj0zMyxlLnQxPWUuY2F0Y2goMjEpLGEuZShlLnQxKTtjYXNlIDM2OnJldHVybiBlLnByZXY9MzYsYS5mKCksZS5maW5pc2goMzYpO2Nhc2UgMzk6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sVW5pb25JdGVyYXRvcixudWxsLFtbMiwxNCwxNywyMF0sWzIxLDMzLDM2LDM5XV0pfSkpLGV9cmV0dXJuIFVuaW9uRW51bWVyYWJsZX0oKTtyLmV4cG9ydHM9ZX0se1wiLi8uLi9FbnVtZXJhYmxlXCI6MzEsXCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi8uLi9tZXRob2RzL21ldGhvZHNcIjoxNjksXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiOjQsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjoxMCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxOSxcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI6Mjd9XSwxMzc6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksdT1uKGUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufWZ1bmN0aW9uIF9jcmVhdGVTdXBlcih0KXt2YXIgbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZSxyPSgwLHMuZGVmYXVsdCkodCk7cmV0dXJuIHI9bj8oZT0oMCxzLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGUpKTpyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSwoMCxvLmRlZmF1bHQpKHRoaXMscil9fXZhciBjPWUoXCIuLy4uL0lFbnVtZXJhYmxlXCIpLGY9ZShcIi4vLi4vY29yZS9jb3JlXCIpLHA9ZShcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCIpLGg9ZShcIi4vLi4vbWV0aG9kcy9kZWZhdWx0UHJlZGljYXRlXCIpLGU9ZnVuY3Rpb24oKXsoMCxhLmRlZmF1bHQpKFdoZXJlRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoV2hlcmVFbnVtZXJhYmxlKTtmdW5jdGlvbiBXaGVyZUVudW1lcmFibGUoYSl7dmFyIGUsbz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aDtyZXR1cm4oMCxpLmRlZmF1bHQpKHRoaXMsV2hlcmVFbnVtZXJhYmxlKSxlPXIuY2FsbCh0aGlzLGEpLG89cC5hc1ByZWRpY2F0ZShvKSxmLmRlZmluZVByb3BlcnR5KCgwLGwuZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHUuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFdoZXJlSXRlcmF0b3IoKXt2YXIgcix0LG47cmV0dXJuIHUuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnI9MCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGEpLGUucHJldj0yLHQucygpO2Nhc2UgNDppZigobj10Lm4oKSkuZG9uZSl7ZS5uZXh0PTExO2JyZWFrfWlmKG49bi52YWx1ZSxvKG4scisrKSlyZXR1cm4gZS5uZXh0PTksbjtlLm5leHQ9OTticmVhaztjYXNlIDk6ZS5uZXh0PTQ7YnJlYWs7Y2FzZSAxMTplLm5leHQ9MTY7YnJlYWs7Y2FzZSAxMzplLnByZXY9MTMsZS50MD1lLmNhdGNoKDIpLHQuZShlLnQwKTtjYXNlIDE2OnJldHVybiBlLnByZXY9MTYsdC5mKCksZS5maW5pc2goMTYpO2Nhc2UgMTk6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sV2hlcmVJdGVyYXRvcixudWxsLFtbMiwxMywxNiwxOV1dKX0pKSxlfXJldHVybiBXaGVyZUVudW1lcmFibGV9KCk7ci5leHBvcnRzPWV9LHtcIi4vLi4vSUVudW1lcmFibGVcIjozMixcIi4vLi4vY29yZS9jb3JlXCI6MzYsXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiOjE1NyxcIi4vLi4vbWV0aG9kcy9tZXRob2RzXCI6MTY5LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjo0LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjUsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI6MTAsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTEsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiOjEyLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTksXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiOjI3fV0sMTM4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpLGE9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSkscz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksbz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKSx1PW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlLHIpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYoIXQpe2lmKEFycmF5LmlzQXJyYXkoZSl8fCh0PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGUscik7dmFyIHQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiTWFwXCI9PT0odD1cIk9iamVjdFwiPT09dCYmZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLm5hbWU6dCl8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP19hcnJheUxpa2VUb0FycmF5KGUscik6dm9pZCAwfX0oZSkpfHxyJiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe3QmJihlPXQpO3ZhciBuPTAscj1mdW5jdGlvbigpe307cmV0dXJue3M6cixuOmZ1bmN0aW9uKCl7cmV0dXJuIG4+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW24rK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6cn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBhLG89ITAsdT0hMTtyZXR1cm57czpmdW5jdGlvbigpe3Q9dC5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9dC5uZXh0KCk7cmV0dXJuIG89ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7dT0hMCxhPWV9LGY6ZnVuY3Rpb24oKXt0cnl7b3x8bnVsbD09dC5yZXR1cm58fHQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IGF9fX19ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoZSxyKXsobnVsbD09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKTtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShyKTt0PHI7dCsrKW5bdF09ZVt0XTtyZXR1cm4gbn1mdW5jdGlvbiBfY3JlYXRlU3VwZXIodCl7dmFyIG49ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUscj0oMCxpLmRlZmF1bHQpKHQpO3JldHVybiByPW4/KGU9KDAsaS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3RvcixSZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxlKSk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksKDAsdS5kZWZhdWx0KSh0aGlzLHIpfX12YXIgYz1lKFwiLi8uLi9JRW51bWVyYWJsZVwiKSxmPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxwPWUoXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiKSxoPWUoXCIuLy4uL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiKSxlPWZ1bmN0aW9uKCl7KDAsby5kZWZhdWx0KShXaXBlRW51bWVyYWJsZSxjKTt2YXIgcj1fY3JlYXRlU3VwZXIoV2lwZUVudW1lcmFibGUpO2Z1bmN0aW9uIFdpcGVFbnVtZXJhYmxlKG8pe3ZhciBlLHU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmgsaT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsV2lwZUVudW1lcmFibGUpLGU9ci5jYWxsKHRoaXMsbyksdT1wLmFzUHJlZGljYXRlKHUpLGYuZGVmaW5lUHJvcGVydHkoKDAscy5kZWZhdWx0KShlKSxTeW1ib2wuaXRlcmF0b3IsbC5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gV2lwZUl0ZXJhdG9yKCl7dmFyIHIsdCxuLGE7cmV0dXJuIGwuZGVmYXVsdC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnQ9cj0wLG49X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobyksZS5wcmV2PTMsbi5zKCk7Y2FzZSA1OmlmKChhPW4ubigpKS5kb25lKXtlLm5leHQ9MTM7YnJlYWt9aWYoYT1hLnZhbHVlLDAhPT1pJiZpPHR8fCF1KGEscisrKSlyZXR1cm4gZS5uZXh0PTEwLGE7ZS5uZXh0PTExO2JyZWFrO2Nhc2UgMTA6dCsrO2Nhc2UgMTE6ZS5uZXh0PTU7YnJlYWs7Y2FzZSAxMzplLm5leHQ9MTg7YnJlYWs7Y2FzZSAxNTplLnByZXY9MTUsZS50MD1lLmNhdGNoKDMpLG4uZShlLnQwKTtjYXNlIDE4OnJldHVybiBlLnByZXY9MTgsbi5mKCksZS5maW5pc2goMTgpO2Nhc2UgMjE6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0sV2lwZUl0ZXJhdG9yLG51bGwsW1szLDE1LDE4LDIxXV0pfSkpLGV9cmV0dXJuIFdpcGVFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIjoxNTcsXCIuLy4uL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDEzOTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxzPW4oZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKSxhPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpLG89bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLHU9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSksaT1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpLGw9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKHQpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHI9KDAsbC5kZWZhdWx0KSh0KTtyZXR1cm4gcj1uPyhlPSgwLGwuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3IsUmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsZSkpOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLCgwLGkuZGVmYXVsdCkodGhpcyxyKX19dmFyIGM9ZShcIi4vLi4vSUVudW1lcmFibGVcIiksZj1lKFwiLi8uLi9jb3JlL2NvcmVcIikscD1lKFwiLi8uLi9tZXRob2RzL2RlZmF1bHRSZXN1bHRTZWxlY3RvclwiKSxlPWZ1bmN0aW9uKCl7KDAsdS5kZWZhdWx0KShaaXBFbnVtZXJhYmxlLGMpO3ZhciByPV9jcmVhdGVTdXBlcihaaXBFbnVtZXJhYmxlKTtmdW5jdGlvbiBaaXBFbnVtZXJhYmxlKHUsaSl7dmFyIGUsbD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06cDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsWmlwRW51bWVyYWJsZSksZT1yLmNhbGwodGhpcyx1KSxmLmRlZmluZVByb3BlcnR5KCgwLG8uZGVmYXVsdCkoZSksU3ltYm9sLml0ZXJhdG9yLHMuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIFppcEl0ZXJhdG9yKCl7dmFyIHIsdCxuLGEsbztyZXR1cm4gcy5kZWZhdWx0LndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cj11W1N5bWJvbC5pdGVyYXRvcl0oKSx0PWlbU3ltYm9sLml0ZXJhdG9yXSgpLG89MDtjYXNlIDM6aWYobj1yLm5leHQoKSxhPXQubmV4dCgpLG4uZG9uZXx8YS5kb25lKXtlLm5leHQ9ODticmVha31yZXR1cm4gZS5uZXh0PTgsbChuLnZhbHVlLGEudmFsdWUsbysrKTtjYXNlIDg6aWYoIW4uZG9uZXx8IWEuZG9uZSl7ZS5uZXh0PTM7YnJlYWt9Y2FzZSA5OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LFppcEl0ZXJhdG9yKX0pKSxlfXJldHVybiBaaXBFbnVtZXJhYmxlfSgpO3IuZXhwb3J0cz1lfSx7XCIuLy4uL0lFbnVtZXJhYmxlXCI6MzIsXCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9tZXRob2RzL2RlZmF1bHRSZXN1bHRTZWxlY3RvclwiOjE1OCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI6NCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjo1LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiOjEwLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjExLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjE5LFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjoyN31dLDE0MDpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxsPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpLHM9bihlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSksYz1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSkscD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufXZhciBmPWUoXCIuL2NvcmUvY29yZVwiKSxoPWUoXCIuL0VudW1lcmFibGVcIiksYT1lKFwiLi9tZXRob2RzL21ldGhvZHNcIiksbz1lKFwiLi9tZXRob2RzL2RlZmF1bHRQcmVkaWNhdGVcIiksdT1lKFwiLi9tZXRob2RzL2RlZmF1bHRGYWxzZVByZWRpY2F0ZVwiKSxiPWUoXCIuL21ldGhvZHMvZGVmYXVsdFNlbGVjdG9yXCIpLGk9ZShcIi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCIpLGQ9ZShcIi4vbWV0aG9kcy9kZWZhdWx0U2FtZUNvbXBhcmVyXCIpLG09ZShcIi4vbWV0aG9kcy9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKSx5PWUoXCIuL21ldGhvZHMvZGVmYXVsdFN0cmljdEVxdWFsaXR5Q29tcGFyZXJcIiksdj1lKFwiLi9tZXRob2RzL2RlZmF1bHRDb21wYXJlclwiKSxnPWUoXCIuL21ldGhvZHMvZGVmYXVsdFJlc3VsdFNlbGVjdG9yXCIpLHg9ZShcIi4vbWV0aG9kcy9kZWZhdWx0S2V5U2VsZWN0b3JcIiksRT1lKFwiLi9tZXRob2RzL2RlZmF1bHRWYWx1ZVNlbGVjdG9yXCIpLGs9ZShcIi4vbWV0aG9kcy9kZWZhdWx0UGFyZW50U2VsZWN0b3JcIiksUz1lKFwiLi9tZXRob2RzL2RlZmF1bHRDaGlsZHJlblNlbGVjdG9yXCIpLEk9ZShcIi4vbWV0aG9kcy9kZWZhdWx0QWN0aW9uXCIpLFI9bmV3IE1hcCxDPXtnZXRFbnVtZXJhdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIGguZ2V0RW51bWVyYXRvcih0aGlzKX0sZ2V0SXRlcmF0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gaC5nZXRJdGVyYXRvcih0aGlzKX0sd2hlcmU6ZnVuY3Rpb24oKXtyZXR1cm4gaC53aGVyZSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpvKX0sc2VsZWN0OmZ1bmN0aW9uKCl7cmV0dXJuIGguc2VsZWN0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIpfSxlbGVtZW50QXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGguZWxlbWVudEF0KHRoaXMsZSl9LGVsZW1lbnRBdE9yRGVmYXVsdDpmdW5jdGlvbihlLHIpe3JldHVybiBoLmVsZW1lbnRBdE9yRGVmYXVsdCh0aGlzLGUscil9LGRpc3RpbmN0OmZ1bmN0aW9uKCl7cmV0dXJuIGguZGlzdGluY3QodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bSl9LGV4Y2VwdDpmdW5jdGlvbihlKXtyZXR1cm4gaC5leGNlcHQodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX0sdW5pb246ZnVuY3Rpb24oZSl7cmV0dXJuIGgudW5pb24odGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX0saW50ZXJzZWN0OmZ1bmN0aW9uKGUpe3JldHVybiBoLmludGVyc2VjdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfSxvZlR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGgub2ZUeXBlKHRoaXMsZSl9LHNraXA6ZnVuY3Rpb24oZSl7cmV0dXJuIGguc2tpcCh0aGlzLGUpfSxza2lwV2hpbGU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5za2lwV2hpbGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LHNraXBQcm9wb3J0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGguc2tpcFByb3BvcnRpb24odGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCl9LHNraXBTYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguc2tpcFNhbWUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZCl9LHRha2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGgudGFrZSh0aGlzLGUpfSx0YWtlV2hpbGU6ZnVuY3Rpb24oKXtyZXR1cm4gaC50YWtlV2hpbGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LHRha2VTYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGgudGFrZVNhbWUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZCl9LHRha2VQcm9wb3J0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGgudGFrZVByb3BvcnRpb24odGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCl9LHNvcnRlZDpmdW5jdGlvbigpe3JldHVybiBoLnNvcnRlZCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2KX0sb3JkZXJCeTpmdW5jdGlvbigpe3JldHVybiBoLm9yZGVyQnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dil9LG9yZGVyQnlEZXNjZW5kaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIGgub3JkZXJCeURlc2NlbmRpbmcodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dil9LGdyb3VwQnk6ZnVuY3Rpb24oKXtyZXR1cm4gaC5ncm91cEJ5KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmcsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm0pfSxzZWxlY3RNYW55OmZ1bmN0aW9uKCl7cmV0dXJuIGguc2VsZWN0TWFueSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpnKX0sZmxhdE1hcDpmdW5jdGlvbigpe3JldHVybiBoLmZsYXRNYXAodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zyl9LGZsYXR0ZW46ZnVuY3Rpb24oKXtyZXR1cm4gaC5mbGF0dGVuKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmcpfSxqb2luOmZ1bmN0aW9uKGUpe3ZhciByPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIsbj0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106YixhPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTptO3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD9oLmpvaW4odGhpcyxlKTpoLmpvaW4odGhpcyxlLHIsdCxuLGEpfSxqb2luaW5nOmZ1bmN0aW9uKGUpe3JldHVybiBoLmpvaW5pbmcodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiLDM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpiLDQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTptKX0saW5uZXJKb2luOmZ1bmN0aW9uKGUpe3JldHVybiBoLmlubmVySm9pbih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmksMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmIsNDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOm0pfSxsZWZ0Sm9pbjpmdW5jdGlvbihlKXtyZXR1cm4gaC5sZWZ0Sm9pbih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmksMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmIsNDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOm0pfSxyaWdodEpvaW46ZnVuY3Rpb24oZSl7cmV0dXJuIGgucmlnaHRKb2luKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06aSwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06YiwzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Yiw0PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bSl9LGdyb3VwSm9pbjpmdW5jdGlvbihlKXtyZXR1cm4gaC5ncm91cEpvaW4odGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiLDM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpiLDQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTptKX0sZGVmYXVsdElmRW1wdHk6ZnVuY3Rpb24oZSl7cmV0dXJuIGguZGVmYXVsdElmRW1wdHkodGhpcyxlKX0sYWxsOmZ1bmN0aW9uKCl7cmV0dXJuIGguYWxsKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm8pfSxhbGxNYXRjaDpmdW5jdGlvbigpe3JldHVybiBoLmFsbE1hdGNoKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm8pfSxhbnk6ZnVuY3Rpb24oKXtyZXR1cm4gaC5hbnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LGFueU1hdGNoOmZ1bmN0aW9uKCl7cmV0dXJuIGguYW55TWF0Y2godGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gaC5pc0VtcHR5KHRoaXMpfSxzZXF1ZW5jZUVxdWFsOmZ1bmN0aW9uKGUpe3JldHVybiBoLnNlcXVlbmNlRXF1YWwodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gaC5maXJzdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpvKX0sZmlyc3RPckRlZmF1bHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGguZmlyc3RPckRlZmF1bHQodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpvKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiBoLmxhc3QodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LGxhc3RPckRlZmF1bHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGgubGFzdE9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm8pfSxzaW5nbGU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5zaW5nbGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06byl9LHNpbmdsZU9yRGVmYXVsdDpmdW5jdGlvbihlKXtyZXR1cm4gaC5zaW5nbGVPckRlZmF1bHQodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpvKX0sY291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5jb3VudCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpvKX0sc3VtOmZ1bmN0aW9uKCl7cmV0dXJuIGguc3VtKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIpfSxwcm9kdWN0OmZ1bmN0aW9uKCl7cmV0dXJuIGgucHJvZHVjdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiKX0sbWF4OmZ1bmN0aW9uKCl7cmV0dXJuIGgubWF4KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnYpfSxtYXhPckRlZmF1bHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGgubWF4T3JEZWZhdWx0KHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dil9LG1pbjpmdW5jdGlvbigpe3JldHVybiBoLm1pbih0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp2KX0sbWluT3JEZWZhdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBoLm1pbk9yRGVmYXVsdCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnYpfSxhdmVyYWdlOmZ1bmN0aW9uKCl7cmV0dXJuIGguYXZlcmFnZSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpiKX0sYWdncmVnYXRlOmZ1bmN0aW9uKGUscil7cmV0dXJuIGguYWdncmVnYXRlKHRoaXMsZSxyLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpiKX0sY29udGFpbnM6ZnVuY3Rpb24oZSl7cmV0dXJuIGguY29udGFpbnModGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX0saW5kZXhPZjpmdW5jdGlvbihlKXtyZXR1cm4gaC5pbmRleE9mKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06eSl9LGZpbmRJbmRleDpmdW5jdGlvbihlLHIpe3JldHVybiBoLmZpbmRJbmRleCh0aGlzLGUscil9LGxhc3RJbmRleE9mOmZ1bmN0aW9uKGUpe3JldHVybiBoLmxhc3RJbmRleE9mKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp5KX0sZmluZExhc3Q6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gaC5maW5kTGFzdCh0aGlzLGUscil9LGZpbmRMYXN0SW5kZXg6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gaC5maW5kTGFzdEluZGV4KHRoaXMsZSxyKX0scmV2ZXJzZTpmdW5jdGlvbigpe3JldHVybiBoLnJldmVyc2UodGhpcyl9LGNvcHlXaXRoaW46ZnVuY3Rpb24oKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCxyPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowLHQ9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjEvMDtyZXR1cm4gZi5pc0FycmF5KHRoaXMpJiZmLmFycmF5JGNvcHlXaXRoaW4mJiFmLmxhenk/Zi5hcnJheSRjb3B5V2l0aGluLmNhbGwodGhpcyxlLHIsdCk6aC5jb3B5V2l0aGluKHRoaXMsZSxyLHQpfSxldmVyeTpmdW5jdGlvbihlLHIpe3JldHVybiBoLmV2ZXJ5KHRoaXMsZSxyKX0sZmlsbDpmdW5jdGlvbihlKXt2YXIgcj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCx0PTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxLzA7cmV0dXJuIGYuaXNBcnJheSh0aGlzKSYmZi5hcnJheSRmaWxsJiYhZi5sYXp5P2YuYXJyYXkkZmlsbC5jYWxsKHRoaXMsZSxyLHQpOmguZmlsbCh0aGlzLGUscix0KX0sZmlsdGVyOmZ1bmN0aW9uKGUscil7cmV0dXJuKGYuaXNBcnJheSh0aGlzKXx8Zi5pc0FyZ3VtZW50cyh0aGlzKSkmJmYuYXJyYXkkZmlsdGVyJiYhZi5sYXp5P2YuYXJyYXkkZmlsdGVyLmNhbGwodGhpcyxlLHIpOmguZmlsdGVyKHRoaXMsZSxyKX0sZmluZDpmdW5jdGlvbihlLHIpe3JldHVybiBoLmZpbmQodGhpcyxlLHIpfSxpbmNsdWRlczpmdW5jdGlvbihlKXtyZXR1cm4gaC5pbmNsdWRlcyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjApfSxtYXA6ZnVuY3Rpb24oZSxyKXtyZXR1cm4oZi5pc0FycmF5KHRoaXMpfHxmLmlzQXJndW1lbnRzKHRoaXMpKSYmZi5hcnJheSRtYXAmJiFmLmxhenk/Zi5hcnJheSRtYXAuY2FsbCh0aGlzLGUscik6aC5tYXAodGhpcyxlLHIpfSxwb3A6ZnVuY3Rpb24oKXtyZXR1cm4gaC5wb3AodGhpcyl9LHB1c2g6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtyZXR1cm4gaC5wdXNoLmFwcGx5KGgsZi5hcnJheSRjb25jYXQuY2FsbChbdGhpc10scikpfSxzaGlmdDpmdW5jdGlvbigpe3JldHVybiBoLnNoaWZ0KHRoaXMpfSx1bnNoaWZ0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkoZSksdD0wO3Q8ZTt0Kyspclt0XT1hcmd1bWVudHNbdF07cmV0dXJuIGgudW5zaGlmdC5hcHBseShoLGYuYXJyYXkkY29uY2F0LmNhbGwoW3RoaXNdLHIpKX0scmVkdWNlOmZ1bmN0aW9uKGUscil7cmV0dXJuIGgucmVkdWNlKHRoaXMsZSxyKX0scmVkdWNlUmlnaHQ6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gaC5yZWR1Y2VSaWdodCh0aGlzLGUscil9LHNsaWNlOmZ1bmN0aW9uKCl7dmFyIGU9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjAscj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wO3JldHVybiBmLmlzU3RyaW5nKHRoaXMpJiZmLnN0cmluZyRzbGljZSYmIWYubGF6eT9mLnN0cmluZyRzbGljZS5jYWxsKHRoaXMsZSxyKTooZi5pc0FycmF5KHRoaXMpfHxmLmlzQXJndW1lbnRzKHRoaXMpKSYmZi5hcnJheSRzbGljZSYmIWYubGF6eT9mLmFycmF5JHNsaWNlLmNhbGwodGhpcyxlLHIpOmguc2xpY2UodGhpcyxlLHIpfSxzcGxpY2U6ZnVuY3Rpb24oZSxyKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSgyPHQ/dC0yOjApLGE9MjthPHQ7YSsrKW5bYS0yXT1hcmd1bWVudHNbYV07cmV0dXJuIGguc3BsaWNlLmFwcGx5KGgsZi5hcnJheSRjb25jYXQuY2FsbChbdGhpcyxlLHJdLG4pKX0sc29tZTpmdW5jdGlvbihlLHIpe3JldHVybiBoLnNvbWUodGhpcyxlLHIpfSxzb3J0OmZ1bmN0aW9uKCl7dmFyIGU9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnY7cmV0dXJuIGYuaXNBcnJheSh0aGlzKSYmZi5hcnJheSRzb3J0JiYhZi5sYXp5P2YuYXJyYXkkc29ydC5jYWxsKHRoaXMsYS5hc0NvbXBhcmVyKGUpKTpoLnNvcnQodGhpcyxlKX0semlwOmZ1bmN0aW9uKGUpe3JldHVybiBoLnppcCh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmcpfSx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGgudG9BcnJheSh0aGlzKX0sdG9PYmplY3Q6ZnVuY3Rpb24oKXtyZXR1cm4gaC50b0RpY3Rpb25hcnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06eCwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06RSwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCkudG9PYmplY3QoKX0sdG9QcmVPcmRlcjpmdW5jdGlvbigpe3JldHVybiBoLnRvUHJlT3JkZXIodGhpcyl9LHRvSW5PcmRlcjpmdW5jdGlvbigpe3JldHVybiBoLnRvSW5PcmRlcih0aGlzKX0sdG9Qb3N0T3JkZXI6ZnVuY3Rpb24oKXtyZXR1cm4gaC50b1Bvc3RPcmRlcih0aGlzKX0sZm9yRWFjaDpmdW5jdGlvbigpe3JldHVybiBoLmZvckVhY2godGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06SSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZWFjaDpmdW5jdGlvbigpe3JldHVybiBoLmVhY2godGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06SSl9LGluZGljZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGguaW5kaWNlcyh0aGlzLGUpfSxwZXJtdXRhdGlvbjpmdW5jdGlvbihlKXtyZXR1cm4gaC5wZXJtdXRhdGlvbih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSl9LGNvbWJpbmF0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiBoLmNvbWJpbmF0aW9uKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdKX0sY2h1bms6ZnVuY3Rpb24oZSl7cmV0dXJuIGguY2h1bmsodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowKX0sc3BsaXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5zcGxpdCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp1KX0sbmVhclNwbGl0OmZ1bmN0aW9uKCl7cmV0dXJuIGgubmVhclNwbGl0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnUpfSxsZWZ0UGFkOmZ1bmN0aW9uKGUscil7cmV0dXJuIGgubGVmdFBhZCh0aGlzLGUscil9LHJpZ2h0UGFkOmZ1bmN0aW9uKGUscil7cmV0dXJuIGgucmlnaHRQYWQodGhpcyxlLHIpfSxyYW5kOmZ1bmN0aW9uKCl7cmV0dXJuIGgucmFuZCh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowKX0scmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGgucmFuZG9tKHRoaXMpfSxyYW5kb21PckRlZmF1bHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGgucmFuZG9tT3JEZWZhdWx0KHRoaXMsZSl9LHdpcGU6ZnVuY3Rpb24oKXtyZXR1cm4gaC53aXBlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm8sMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjApfSxuZWFyQnk6ZnVuY3Rpb24oKXtyZXR1cm4gaC5uZWFyQnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZywzPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bSl9LGNvbWJpbmU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5jb21iaW5lKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmssMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOngsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmIsMzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm0pfSxzZXBhcmF0ZTpmdW5jdGlvbigpe3JldHVybiBoLnNlcGFyYXRlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlMsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOkUpfSxpc1N1YjpmdW5jdGlvbihlKXtyZXR1cm4gaC5pc1N1Yih0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfSxpc1N1cGVyOmZ1bmN0aW9uKGUpe3JldHVybiBoLmlzU3VwZXIodGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTptKX0sc3ltbWV0cmljOmZ1bmN0aW9uKGUpe3JldHVybiBoLnN5bW1ldHJpYyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfSxjb25mbGljdDpmdW5jdGlvbigpe3JldHVybiBoLmNvbmZsaWN0KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmIsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0pfSxjb25jYXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtyZXR1cm4gZi5pc1N0cmluZyh0aGlzKSYmZi5zdHJpbmckY29uY2F0JiYhZi5sYXp5P2Yuc3RyaW5nJGNvbmNhdC5hcHBseSh0aGlzLHIpOihmLmlzQXJyYXkodGhpcyl8fGYuaXNBcmd1bWVudHModGhpcykpJiZmLmFycmF5JGNvbmNhdCYmIWYubGF6eT9mLmFycmF5JGNvbmNhdC5hcHBseSh0aGlzLHIpOmguY29uY2F0LmFwcGx5KGgsZi5hcnJheSRjb25jYXQuY2FsbChbdGhpc10scikpfSxwcm9wb3J0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGgucHJvcG9ydGlvbih0aGlzLDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpvKX19O2YuZGVmaW5lUHJvcGVydHkoaCxcImV4dGVuZHNcIixmdW5jdGlvbigpe3ZhciBlLHI9bmV3IE1hcCx0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKFIpO3RyeXtmb3IodC5zKCk7IShlPXQubigpKS5kb25lOyl7dmFyIG4sYT0oMCxwLmRlZmF1bHQpKGUudmFsdWUsMiksbz1hWzBdLHU9YVsxXSxpPW5ldyBNYXAsbD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih1KTt0cnl7Zm9yKGwucygpOyEobj1sLm4oKSkuZG9uZTspe3ZhciBzPSgwLHAuZGVmYXVsdCkobi52YWx1ZSwyKSxjPXNbMF0sZj1zWzFdO2kuc2V0KGMsZil9fWNhdGNoKGUpe2wuZShlKX1maW5hbGx5e2wuZigpfXIuc2V0KG8saSl9fWNhdGNoKGUpe3QuZShlKX1maW5hbGx5e3QuZigpfXJldHVybiByfSwhMCwhMCksaC51bmV4dGVuZEFsbD1mdW5jdGlvbigpe3ZhciBlLHI9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5leHRlbmRzKTt0cnl7Zm9yKHIucygpOyEoZT1yLm4oKSkuZG9uZTspe3ZhciB0LG49KDAscC5kZWZhdWx0KShlLnZhbHVlLDIpLGE9blswXSxvPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5bMV0pO3RyeXtmb3Ioby5zKCk7ISh0PW8ubigpKS5kb25lOyl7dmFyIHU9KDAscC5kZWZhdWx0KSh0LnZhbHVlLDIpLGk9dVswXSxsPXVbMV07aC51bmV4dGVuZChpLGEsITAsbCl9fWNhdGNoKGUpe28uZShlKX1maW5hbGx5e28uZigpfX19Y2F0Y2goZSl7ci5lKGUpfWZpbmFsbHl7ci5mKCl9fSxoLmV4dGVuZEFsbD1mdW5jdGlvbihlKXt2YXIgcix0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUpO3RyeXtmb3IodC5zKCk7IShyPXQubigpKS5kb25lOyl7dmFyIG4sYT0oMCxwLmRlZmF1bHQpKHIudmFsdWUsMiksbz1hWzBdLHU9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYVsxXSk7dHJ5e2Zvcih1LnMoKTshKG49dS5uKCkpLmRvbmU7KXt2YXIgaT0oMCxwLmRlZmF1bHQpKG4udmFsdWUsMiksbD1pWzBdLHM9aVsxXTtoLmV4dGVuZChsLG8sITAscyl9fWNhdGNoKGUpe3UuZShlKX1maW5hbGx5e3UuZigpfX19Y2F0Y2goZSl7dC5lKGUpfWZpbmFsbHl7dC5mKCl9fSxoLnVuZXh0ZW5kPWZ1bmN0aW9uKGUscil7dmFyIHQsbixhPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0sbz0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXSYmYXJndW1lbnRzWzNdO2lmKFwib2JqZWN0XCIhPT0oMCxjLmRlZmF1bHQpKGUpfHxmLmdldFR5cGUocikhPT1mLnR5cGVzLlN0cmluZylyZXR1cm4gZTtpZighKGEmJih0PWUsbj1yLGE9bywhUi5oYXMobil8fCFSLmdldChuKS5oYXModCl8fFIuZ2V0KG4pLmdldCh0KSE9PWF8fChSLmdldChuKS5kZWxldGUodCksaC5pc0VtcHR5KFIuZ2V0KG4pKSYmUi5kZWxldGUobiksMCkpKSl7Zi51bmRlZmluZVByb3BlcnRpZXMoZSxbXS5jb25jYXQoKDAscy5kZWZhdWx0KShPYmplY3Qua2V5cyhDKSksW1widG9EaWN0aW9uYXJ5XCIsXCJ0b0xvb2t1cFwiXSksbyk7dmFyIHUsaT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLnBsdWdpbnMpO3RyeXtmb3IoaS5zKCk7ISh1PWkubigpKS5kb25lOyl7dmFyIGw9dS52YWx1ZTsodGhpcy5pc0VtcHR5KGwudHlwZXMpfHx0aGlzLmNvbnRhaW5zKGwudHlwZXMscikpJiZmLnVuZGVmaW5lUHJvcGVydGllcyhlLFtsLm5hbWVdLG8pfX1jYXRjaChlKXtpLmUoZSl9ZmluYWxseXtpLmYoKX19cmV0dXJuIGV9LGguZXh0ZW5kPWZ1bmN0aW9uKHIsdCl7dmFyIG49dGhpcyxhPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0sZT0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXSYmYXJndW1lbnRzWzNdO2lmKFwib2JqZWN0XCIhPT0oMCxjLmRlZmF1bHQpKHIpfHxmLmdldFR5cGUodCkhPT1mLnR5cGVzLlN0cmluZylyZXR1cm4gcjtpZighYXx8ZnVuY3Rpb24oZSxyLHQsbil7dmFyIGEsbz1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihSKTt0cnl7Zm9yKG8ucygpOyEoYT1vLm4oKSkuZG9uZTspaWYoKDAscC5kZWZhdWx0KShhLnZhbHVlLDIpWzFdLmhhcyhlKSlyZXR1cm4hMX1jYXRjaChlKXtvLmUoZSl9ZmluYWxseXtvLmYoKX1SLmhhcyhyKXx8Ui5zZXQocixuZXcgTWFwKTtyPVIuZ2V0KHIpO3JldHVybiByLmhhcyhlKSYmci5nZXQoZSkhPT10JiZuJiZmLmlzRnVuY3Rpb24obikmJm4oci5nZXQoZSkpLHIuc2V0KGUsdCksITB9KHIsdCxlLGZ1bmN0aW9uKGUpe3JldHVybiBuLnVuZXh0ZW5kKHIsdCxhLGUpfSkpe2YuZGVmaW5lUHJvcGVydGllcyhyLEMsZSksdCE9PWYudHlwZXMuT2JqZWN0P2YuZGVmaW5lUHJvcGVydGllcyhyLHt0b0RpY3Rpb25hcnk6ZnVuY3Rpb24oKXtyZXR1cm4gaC50b0RpY3Rpb25hcnkodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCl9LHRvTG9va3VwOmZ1bmN0aW9uKCl7cmV0dXJuIGgudG9Mb29rdXAodGhpcywwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YiwxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZCl9fSxlKTpmLmRlZmluZVByb3BlcnRpZXMocix7dG9EaWN0aW9uYXJ5OmZ1bmN0aW9uKCl7cmV0dXJuIGgudG9EaWN0aW9uYXJ5KHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOngsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOkUsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmQpfSx0b0xvb2t1cDpmdW5jdGlvbigpe3JldHVybiBoLnRvTG9va3VwKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOngsMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOkUsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmQpfX0sZSk7dmFyIG8sdT1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLnBsdWdpbnMpO3RyeXtmb3IodS5zKCk7IShvPXUubigpKS5kb25lOyl7dmFyIGk9by52YWx1ZTsodGhpcy5pc0VtcHR5KGkudHlwZXMpfHx0aGlzLmNvbnRhaW5zKGkudHlwZXMsdCkpJiZmLmRlZmluZVByb3BlcnRpZXMociwoMCxsLmRlZmF1bHQpKHt9LGkubmFtZSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gaFtlXS5hcHBseShoLFt0aGlzXS5jb25jYXQoYXJndW1lbnRzKSl9fShpLm5hbWUpKSxlKX19Y2F0Y2goZSl7dS5lKGUpfWZpbmFsbHl7dS5mKCl9fXJldHVybiByfX0se1wiLi9FbnVtZXJhYmxlXCI6MzEsXCIuL2NvcmUvY29yZVwiOjM2LFwiLi9tZXRob2RzL2RlZmF1bHRBY3Rpb25cIjoxNDYsXCIuL21ldGhvZHMvZGVmYXVsdENoaWxkcmVuU2VsZWN0b3JcIjoxNDcsXCIuL21ldGhvZHMvZGVmYXVsdENvbXBhcmVyXCI6MTQ5LFwiLi9tZXRob2RzL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi9tZXRob2RzL2RlZmF1bHRGYWxzZVByZWRpY2F0ZVwiOjE1MixcIi4vbWV0aG9kcy9kZWZhdWx0Sm9pblNlbGVjdG9yXCI6MTU0LFwiLi9tZXRob2RzL2RlZmF1bHRLZXlTZWxlY3RvclwiOjE1NSxcIi4vbWV0aG9kcy9kZWZhdWx0UGFyZW50U2VsZWN0b3JcIjoxNTYsXCIuL21ldGhvZHMvZGVmYXVsdFByZWRpY2F0ZVwiOjE1NyxcIi4vbWV0aG9kcy9kZWZhdWx0UmVzdWx0U2VsZWN0b3JcIjoxNTgsXCIuL21ldGhvZHMvZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vbWV0aG9kcy9kZWZhdWx0U2VsZWN0b3JcIjoxNjAsXCIuL21ldGhvZHMvZGVmYXVsdFN0cmljdEVxdWFsaXR5Q29tcGFyZXJcIjoxNjEsXCIuL21ldGhvZHMvZGVmYXVsdFZhbHVlU2VsZWN0b3JcIjoxNjIsXCIuL21ldGhvZHMvbWV0aG9kc1wiOjE2OSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjo4LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiOjIxLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiOjIzLFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjoyNH1dLDE0MTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGUscil7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KHQ9ZnVuY3Rpb24oZSxyKXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJNYXBcIj09PSh0PVwiT2JqZWN0XCI9PT10JiZlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IubmFtZTp0KXx8XCJTZXRcIj09PXQ/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09dHx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCk/X2FycmF5TGlrZVRvQXJyYXkoZSxyKTp2b2lkIDB9fShlKSl8fHImJmUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCl7dCYmKGU9dCk7dmFyIG49MCxyPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpyLG46ZnVuY3Rpb24oKXtyZXR1cm4gbj49ZS5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOmVbbisrXX19LGU6ZnVuY3Rpb24oZSl7dGhyb3cgZX0sZjpyfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGEsbz0hMCx1PSExO3JldHVybntzOmZ1bmN0aW9uKCl7dD10LmNhbGwoZSl9LG46ZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtyZXR1cm4gbz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXt1PSEwLGE9ZX0sZjpmdW5jdGlvbigpe3RyeXtvfHxudWxsPT10LnJldHVybnx8dC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgYX19fX1mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShlLHIpeyhudWxsPT1yfHxyPmUubGVuZ3RoKSYmKHI9ZS5sZW5ndGgpO2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KHIpO3Q8cjt0Kyspblt0XT1lW3RdO3JldHVybiBufXZhciBpPWUoXCIuL0VudW1lcmFibGVcIiksbD1lKFwiLi9jb3JlL2NvcmVcIikscz1bQXJyYXksTWFwLFNldF0sbj1bXCJrZXlzXCIsXCJ2YWx1ZXNcIixcImVudHJpZXNcIl07ci5leHBvcnRzPXtpbnN0YWxsOmZ1bmN0aW9uKCl7aS5leHRlbmQoQXJyYXkucHJvdG90eXBlLGwudHlwZXMuQXJyYXksITApLGZ1bmN0aW9uKGUpe3ZhciByLHQ9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocyk7dHJ5e2Zvcih0LnMoKTshKHI9dC5uKCkpLmRvbmU7KXt2YXIgbj1yLnZhbHVlO2lmKG4pe3ZhciBhLG89X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSk7dHJ5e2ZvcihvLnMoKTshKGE9by5uKCkpLmRvbmU7KXt2YXIgdT1hLnZhbHVlO2wuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsdSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gaS5leHRlbmQoZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksbC50eXBlcy5BcnJheSl9fShuLnByb3RvdHlwZVt1XSkpfX1jYXRjaChlKXtvLmUoZSl9ZmluYWxseXtvLmYoKX19fX1jYXRjaChlKXt0LmUoZSl9ZmluYWxseXt0LmYoKX19KG4pfSx1bmluc3RhbGw6ZnVuY3Rpb24oKXtpLnVuZXh0ZW5kKEFycmF5LnByb3RvdHlwZSxsLnR5cGVzLkFycmF5LCEwKSxmdW5jdGlvbihlKXt2YXIgcix0PV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHMpO3RyeXtmb3IodC5zKCk7IShyPXQubigpKS5kb25lOyl7dmFyIG49ci52YWx1ZTtuJiZsLnVuZGVmaW5lUHJvcGVydGllcyhuLnByb3RvdHlwZSxlKX19Y2F0Y2goZSl7dC5lKGUpfWZpbmFsbHl7dC5mKCl9fShuKX19fSx7XCIuL0VudW1lcmFibGVcIjozMSxcIi4vY29yZS9jb3JlXCI6MzZ9XSwxNDI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9FbnVtZXJhYmxlXCIpLGE9ZShcIi4vY29yZS9jb3JlXCIpO3IuZXhwb3J0cz17aW5zdGFsbDpmdW5jdGlvbigpe24uZXh0ZW5kKE9iamVjdC5wcm90b3R5cGUsYS50eXBlcy5PYmplY3QsITApfSx1bmluc3RhbGw6ZnVuY3Rpb24oKXtuLnVuZXh0ZW5kKE9iamVjdC5wcm90b3R5cGUsYS50eXBlcy5PYmplY3QsITApfX19LHtcIi4vRW51bWVyYWJsZVwiOjMxLFwiLi9jb3JlL2NvcmVcIjozNn1dLDE0MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0VudW1lcmFibGVcIiksYT1lKFwiLi9jb3JlL2NvcmVcIik7ci5leHBvcnRzPXtpbnN0YWxsOmZ1bmN0aW9uKCl7bi5leHRlbmQoU3RyaW5nLnByb3RvdHlwZSxhLnR5cGVzLlN0cmluZywhMCl9LHVuaW5zdGFsbDpmdW5jdGlvbigpe24udW5leHRlbmQoU3RyaW5nLnByb3RvdHlwZSxhLnR5cGVzLlN0cmluZywhMCl9fX0se1wiLi9FbnVtZXJhYmxlXCI6MzEsXCIuL2NvcmUvY29yZVwiOjM2fV0sMTQ0OltmdW5jdGlvbihrLFMsZSl7IWZ1bmN0aW9uKEUpeyFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHBNYShlKXtkZWxldGUgU3RyaW5nLnByb3RvdHlwZVtlXSxkZWxldGUgQXJyYXkucHJvdG90eXBlW2VdLGRlbGV0ZSBNYXAucHJvdG90eXBlW2VdLGRlbGV0ZSBTZXQucHJvdG90eXBlW2VdLGRlbGV0ZSBPYmplY3QucHJvdG90eXBlW2VdfWZ1bmN0aW9uIHFNYShlLHIpe3IuY29uZmlnLmFzIT09byYmcE1hKHIuY29uZmlnLmFzKSxwTWEobyksZS5jb25maWcuZXh0ZW5kcy5hcnJheT1yLmNvbmZpZy5leHRlbmRzLmFycmF5LHIuY29uZmlnLmV4dGVuZHMuYXJyYXk9ITEsZS5jb25maWcuZXh0ZW5kcy5zdHJpbmc9ci5jb25maWcuZXh0ZW5kcy5zdHJpbmcsci5jb25maWcuZXh0ZW5kcy5zdHJpbmc9ITEsZS5jb25maWcuZXh0ZW5kcy5vYmplY3Q9ci5jb25maWcuZXh0ZW5kcy5vYmplY3Qsci5jb25maWcuZXh0ZW5kcy5vYmplY3Q9ITEsZS5leHRlbmRzPXIuZXh0ZW5kcyxyLnVuZXh0ZW5kQWxsJiZyLnVuZXh0ZW5kQWxsKCl9ZnVuY3Rpb24gck1hKGUscil7dmFyIHQ9ci5jb25maWcuYXM7dCE9PShyLmNvbmZpZy5hcz1vKSYmKHIuY29uZmlnLmFzPXQpLHIuY29uZmlnLmV4dGVuZHMuYXJyYXk9ZS5jb25maWcuZXh0ZW5kcy5hcnJheSxyLmNvbmZpZy5leHRlbmRzLnN0cmluZz1lLmNvbmZpZy5leHRlbmRzLnN0cmluZyxyLmNvbmZpZy5leHRlbmRzLm9iamVjdD1lLmNvbmZpZy5leHRlbmRzLm9iamVjdCxyLmV4dGVuZEFsbChlLmV4dGVuZHMpfXZhciB0LGU9ayhcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLHI9ZShrKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSksZT1lKGsoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSksbj1cIm9iamVjdFwiPT09KHZvaWQgMD09PUU/XCJ1bmRlZmluZWRcIjooMCxlLmRlZmF1bHQpKEUpKT9FOlwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz9cInVuZGVmaW5lZFwiOigwLGUuZGVmYXVsdCkod2luZG93KSk/d2luZG93Olwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGY/XCJ1bmRlZmluZWRcIjooMCxlLmRlZmF1bHQpKHNlbGYpKT9zZWxmOnZvaWQgMCxhPSdDYW4gbm90IHNldCB0aGlzIGNvbmZpZyBhZnRlciBjYWxsIHRoZSBub0NvbmZsaWN0IG1ldGhvZC4gSWYgeW91IHdhbnQsIHlvdSBjYW4gdXNlIEVudW1lcmFibGUubm9Db25mbGljdCBtZXRob2Qgd2l0aCBvbmUgcGFyYW1ldGVyIHdoaWNoIHZhbHVlIGlzIFwidHJ1ZVwiIHRvIHNldCBFbnVtZXJhYmxlIG9mIGdsb2JhbCBiYWNrIHRvIHRoaXMgbW9kdWxlJyxvPVwiYXNFbnVtZXJhYmxlXCIsdT1TeW1ib2woXCJ0eXBlQXNcIiksaT17Y29uZmlnOntleHRlbmRzOnthcnJheTohMSxzdHJpbmc6ITEsb2JqZWN0OiExfX0sZXh0ZW5kczpuZXcgTWFwfTtuLkVudW1lcmFibGUmJihxTWEoaSx0PW4uRW51bWVyYWJsZSksZGVsZXRlIG4uRW51bWVyYWJsZSxjb25zb2xlLndhcm4oXCJZb3UgbWF5IHJlcXVpcmUgdGhpcyBtb2R1bGUgdHdpY2Ugb3IgbW9yZS4gSSBzdWdnZXN0IHlvdSB0byBvbmx5IHJlcXVpcmUgb25jZS4gSWYgeW91IG11c3QgdG8sIHlvdSBjYW4gYWxzbyB1c2UgRW51bWVyYWJsZS5ub0NvbmZsaWN0IG1ldGhvZCB0byBzb2x2ZSB0aGUgY29uZmxpY3RcIikpO2Z1bmN0aW9uIEhNYShlKXtlIT09byYmZy5hcyYmZy5hcyE9PW8mJnBNYShnLmFzKSxsLmRlZmluZVByb3BlcnRpZXMoU3RyaW5nLnByb3RvdHlwZSwoMCxyLmRlZmF1bHQpKHt9LGUsZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHAodGhpcyl9KSksbC5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LnByb3RvdHlwZSwoMCxyLmRlZmF1bHQpKHt9LGUsZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGYodGhpcyl9KSksbC5kZWZpbmVQcm9wZXJ0aWVzKE1hcC5wcm90b3R5cGUsKDAsci5kZWZhdWx0KSh7fSxlLGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBjKHRoaXMpfSkpLGwuZGVmaW5lUHJvcGVydGllcyhTZXQucHJvdG90eXBlLCgwLHIuZGVmYXVsdCkoe30sZSxmdW5jdGlvbigpe3JldHVybiBuZXcgZih0aGlzKX0pKSxsLmRlZmluZVByb3BlcnRpZXMoT2JqZWN0LnByb3RvdHlwZSwoMCxyLmRlZmF1bHQpKHt9LGUsZnVuY3Rpb24oZSxyKXtyZXR1cm4gbC5pc0l0ZXJhdG9yKHRoaXMpP25ldyBoKHRoaXMpOnRoaXNbdV09PT1sLnR5cGVzLlN0cmluZz9uZXcgcCh0aGlzKTp0aGlzW3VdPT09bC50eXBlcy5BcnJheXx8dGhpc1t1XT09PWwudHlwZXMuU2V0P25ldyBmKHRoaXMpOnRoaXNbdV09PT1sLnR5cGVzLk1hcD9uZXcgYyh0aGlzKTp0aGlzW3VdPT09bC50eXBlcy5JdGVyYXRvcj9uZXcgaCh0aGlzKTpsLmlzVW5kZWZpbmVkKGUpP25ldyBiKHRoaXMpOm5ldyBkKHRoaXMsZSxyKX0pKSxnLmFzPWV9dmFyIGw9ayhcIi4vY29yZS9jb3JlXCIpLHM9ayhcIi4vRW51bWVyYWJsZVwiKSxjPWsoXCIuL2VudW1lcmFibGVzL01hcEVudW1lcmFibGVcIiksZj1rKFwiLi9lbnVtZXJhYmxlcy9BcnJheUVudW1lcmFibGVcIikscD1rKFwiLi9lbnVtZXJhYmxlcy9TdHJpbmdFbnVtZXJhYmxlXCIpLGg9ayhcIi4vZW51bWVyYWJsZXMvSXRlcmF0b3JFbnVtZXJhYmxlXCIpLGI9ayhcIi4vZW51bWVyYWJsZXMvT2JqZWN0RW51bWVyYWJsZVwiKSxkPWsoXCIuL2VudW1lcmFibGVzL1RyZWVFbnVtZXJhYmxlXCIpLG09ayhcIi4vbGlucS1hcnJheVwiKSx5PWsoXCIuL2xpbnEtb2JqZWN0XCIpLHY9ayhcIi4vbGlucS1zdHJpbmdcIiksZz17ZXh0ZW5kczp7YXJyYXk6ITEsb2JqZWN0OiExLHN0cmluZzohMSxsYXp5OiExfSxhczpvLG5vQ29uZmxpY3Q6ITF9LHg9e2NvbmZpZzp7ZXh0ZW5kczp7YXJyYXk6ITEsb2JqZWN0OiExLHN0cmluZzohMX19LGV4dGVuZHM6W119O0hNYShvKSxzLnR5cGVBcz1mdW5jdGlvbihlLHIpeyhlPWUuY29uc3RydWN0b3IucHJvdG90eXBlIT09ZT9lLnByb3RvdHlwZTplKVt1XT1yfSxzLnR5cGVzPWwudHlwZXMscy5jb25maWc9e2V4dGVuZHM6e3NldCBhcnJheShlKXtnLm5vQ29uZmxpY3Q/Y29uc29sZS53YXJuKGEpOihnLmV4dGVuZHMuYXJyYXkhPT1lJiYoZT9tLmluc3RhbGwoKTptLnVuaW5zdGFsbCgpKSxnLmV4dGVuZHMuYXJyYXk9ZSl9LGdldCBhcnJheSgpe3JldHVybiBnLmV4dGVuZHMuYXJyYXl9LHNldCBvYmplY3QoZSl7Zy5ub0NvbmZsaWN0P2NvbnNvbGUud2FybihhKTooZy5leHRlbmRzLm9iamVjdCE9PWUmJihlP3kuaW5zdGFsbCgpOnkudW5pbnN0YWxsKCkpLGcuZXh0ZW5kcy5vYmplY3Q9ZSl9LGdldCBvYmplY3QoKXtyZXR1cm4gZy5leHRlbmRzLm9iamVjdH0sc2V0IHN0cmluZyhlKXtnLm5vQ29uZmxpY3Q/Y29uc29sZS53YXJuKGEpOihnLmV4dGVuZHMuc3RyaW5nIT09ZSYmKGU/di5pbnN0YWxsKCk6di51bmluc3RhbGwoKSksZy5leHRlbmRzLnN0cmluZz1lKX0sZ2V0IHN0cmluZygpe3JldHVybiBnLmV4dGVuZHMuc3RyaW5nfSxzZXQgbGF6eShlKXtnLmV4dGVuZHMubGF6eSE9PWUmJihsLmxhenk9ZSksZy5leHRlbmRzLmxhenk9ZX0sZ2V0IGxhenkoKXtyZXR1cm4gZy5leHRlbmRzLmxhenl9fSxzZXQgYXMoZSl7SE1hKGUpfSxnZXQgYXMoKXtyZXR1cm4gZy5hc319LHMubm9Db25mbGljdD1mdW5jdGlvbigpe3ZhciBlLHI9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXTtyZXR1cm4hMCE9PXImJnRoaXMuaXNDb25mbGljdCYmKHFNYSh4LHRoaXMpLGcubm9Db25mbGljdD0hMCxyTWEoaSxuLkVudW1lcmFibGU9dCksZT1uLkVudW1lcmFibGUubm9Db25mbGljdCxuLkVudW1lcmFibGUubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiEwPT09KDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0pPyhxTWEoaSxuLkVudW1lcmFibGUpLGcubm9Db25mbGljdD0hMSxyTWEoeCxzKSxuLkVudW1lcmFibGUubm9Db25mbGljdD1lLHMpOmUoKX0pLHImJmwuaXNGdW5jdGlvbihyKSYmcihzKSxzfSxsLmRlZmluZVByb3BlcnR5KHMsXCJpc0NvbmZsaWN0XCIsZnVuY3Rpb24oKXtyZXR1cm4gdCYmIWcubm9Db25mbGljdH0sITAsITApLFMuZXhwb3J0cz1uLkVudW1lcmFibGU9c30uY2FsbCh0aGlzKX0uY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e30pfSx7XCIuL0VudW1lcmFibGVcIjozMSxcIi4vY29yZS9jb3JlXCI6MzYsXCIuL2VudW1lcmFibGVzL0FycmF5RW51bWVyYWJsZVwiOjQ4LFwiLi9lbnVtZXJhYmxlcy9JdGVyYXRvckVudW1lcmFibGVcIjo4MyxcIi4vZW51bWVyYWJsZXMvTWFwRW51bWVyYWJsZVwiOjg4LFwiLi9lbnVtZXJhYmxlcy9PYmplY3RFbnVtZXJhYmxlXCI6OTMsXCIuL2VudW1lcmFibGVzL1N0cmluZ0VudW1lcmFibGVcIjoxMjcsXCIuL2VudW1lcmFibGVzL1RyZWVFbnVtZXJhYmxlXCI6MTM1LFwiLi9saW5xLWFycmF5XCI6MTQxLFwiLi9saW5xLW9iamVjdFwiOjE0MixcIi4vbGlucS1zdHJpbmdcIjoxNDMsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI6OCxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCI6MTIsXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiOjI0fV0sMTQ1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZShcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIik7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGpOYSgpe3JldHVybi0xPT09cj9yPWEuY291bnQoKTpyfXZhciB0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj11LmFzRXF1YWxpdHlDb21wYXJlcihuPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpvKSxhPWUuYXNFbnVtZXJhYmxlKCkscj0tMTtyZXR1cm4gZnVuY3Rpb24oZSxyKXtlPS0xPT09KGU9YS5pbmRleE9mKGUsMCxuKSkmJnQ/ak5hKCk6ZSxyPWEuaW5kZXhPZihyLDAsbik7cmV0dXJuIGUtKHI9LTE9PT1yJiZ0P2pOYSgpOnIpfX07dmFyIHU9ZShcIi4vbWV0aG9kc1wiKX0se1wiLi9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiOjE1MCxcIi4vbWV0aG9kc1wiOjE2OX1dLDE0NjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe319LHt9XSwxNDc6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdm9pZCAwPT09ZS5jaGlsZHJlbj9lOmUuY2hpbGRyZW59fSx7fV0sMTQ4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7bnVsbCE9ZSYmKGUuY2hpbGRyZW49cil9fSx7fV0sMTQ5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vLi4vY29yZS9JQ29tcGFyYWJsZVwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZSBpbnN0YW5jZW9mIG4/ZS5jb21wYXJlKHIpOnIgaW5zdGFuY2VvZiBuPy1yLmNvbXBhcmUoZSk6cjxlPzE6ZT09cj8wOi0xfX0se1wiLi8uLi9jb3JlL0lDb21wYXJhYmxlXCI6MzR9XSwxNTA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi8uLi9jb3JlL0lFcXVhdGFibGVcIik7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIGUgaW5zdGFuY2VvZiBuP2UuZXF1YWxzKHIpOnIgaW5zdGFuY2VvZiBuP3IuZXF1YWxzKGUpOmU9PXJ9fSx7XCIuLy4uL2NvcmUvSUVxdWF0YWJsZVwiOjM1fV0sMTUxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIG51bGwhPWV9fSx7fV0sMTUyOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuITF9fSx7fV0sMTUzOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIHJ9fSx7fV0sMTU0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJue291dGVyOmUsaW5uZXI6cn19fSx7fV0sMTU1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIHZvaWQgMD09PWUua2V5P2U6ZS5rZXl9fSx7fV0sMTU2OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIGUucGFyZW50fX0se31dLDE1NzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiEwfX0se31dLDE1ODpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiByfX0se31dLDE1OTpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiBlPT09cnx8XCJudW1iZXJcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiByJiZpc05hTihlKSYmaXNOYU4ocil9fSx7fV0sMTYwOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIGV9fSx7fV0sMTYxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIGU9PT1yfX0se31dLDE2MjpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybiB2b2lkIDA9PT1lLnZhbHVlP2U6ZS52YWx1ZX19LHt9XSwxNjM6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtudWxsIT1lJiYoZS52YWx1ZT1yKX19LHt9XSwxNjQ6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuLXQoZSxyKX19fSx7fV0sMTY1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZShcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIik7ci5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBuPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTphLG49by5hc0VxdWFsaXR5Q29tcGFyZXIobik7cmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuIG4oZSx0KX19O3ZhciBvPWUoXCIuL21ldGhvZHNcIil9LHtcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIjoxNTAsXCIuL21ldGhvZHNcIjoxNjl9XSwxNjY6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgYT1lKFwiLi9kZWZhdWx0RXF1YWxpdHlDb21wYXJlclwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIG49MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmE7cmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuKG49by5hc0VxdWFsaXR5Q29tcGFyZXIobikpKGUscik/MDp0KGUscik/MTotMX19O3ZhciBvPWUoXCIuL21ldGhvZHNcIil9LHtcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIjoxNTAsXCIuL21ldGhvZHNcIjoxNjl9XSwxNjc6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9kZWZhdWx0U2VsZWN0b3JcIik7ci5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQ9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm4sdD1hLmFzU2VsZWN0b3IodCk7cmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuKGU9dChlKSk9PT0ocj10KHIpKXx8ZSYmciYmZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk9PT1yLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKX19O3ZhciBhPWUoXCIuL21ldGhvZHNcIil9LHtcIi4vZGVmYXVsdFNlbGVjdG9yXCI6MTYwLFwiLi9tZXRob2RzXCI6MTY5fV0sMTY4OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZShcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIik7ci5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBuPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTphO3JldHVybiBmdW5jdGlvbihlLHIpe3JldHVybihuPW8uYXNFcXVhbGl0eUNvbXBhcmVyKG4pKShlLHIpPzA6dChlLHIpPy0xOjF9fTt2YXIgbz1lKFwiLi9tZXRob2RzXCIpfSx7XCIuL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi9tZXRob2RzXCI6MTY5fV0sMTY5OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vLi4vY29yZS9jb3JlXCIpLGE9ZShcIi4vLi4vY29yZS9leGNlcHRpb25zL0ludmFsaWRGdW5jdGlvbkV4Y2VwdGlvblwiKSxvPXthc1NlbGVjdG9yOmZ1bmN0aW9uKGUpe3ZhciByPW4uZ2V0VHlwZShlKTtpZihyPT09bi50eXBlcy5TdHJpbmd8fHI9PT1uLnR5cGVzLk51bWJlcnx8cj09PW4udHlwZXMuU3ltYm9sKXJldHVybiBpKGUpO2lmKHI9PT1uLnR5cGVzLkZ1bmN0aW9uKXJldHVybiBlO3Rocm93IG5ldyBhKGUpfSxhc1NldHRlcjpmdW5jdGlvbihlKXt2YXIgcj1uLmdldFR5cGUoZSk7aWYocj09PW4udHlwZXMuU3RyaW5nfHxyPT09bi50eXBlcy5OdW1iZXJ8fHI9PT1uLnR5cGVzLlN5bWJvbClyZXR1cm4gdShlKTtpZihyPT09bi50eXBlcy5GdW5jdGlvbilyZXR1cm4gZTt0aHJvdyBuZXcgYShlKX0sYXNQcmVkaWNhdGU6ZnVuY3Rpb24oZSl7dmFyIHI9bi5nZXRUeXBlKGUpO2lmKHI9PT1uLnR5cGVzLlN0cmluZ3x8cj09PW4udHlwZXMuTnVtYmVyfHxyPT09bi50eXBlcy5TeW1ib2wpcmV0dXJuIGwoZSk7aWYocj09PW4udHlwZXMuRnVuY3Rpb24pcmV0dXJuIGU7aWYocj09PW4udHlwZXMuUmVnRXhwKXJldHVybiBtKGUpO2lmKHI9PT1uLnR5cGVzLkFycmF5fHxyPT09bi50eXBlcy5PYmplY3QpcmV0dXJuIGQoZSk7dGhyb3cgbmV3IGEoZSl9LGFzRXF1YWxpdHlDb21wYXJlcjpmdW5jdGlvbihlKXt2YXIgcj1uLmdldFR5cGUoZSk7aWYocj09PW4udHlwZXMuU3RyaW5nfHxyPT09bi50eXBlcy5OdW1iZXJ8fHI9PT1uLnR5cGVzLlN5bWJvbClyZXR1cm4gcyhlLGMpO2lmKHI9PT1uLnR5cGVzLkZ1bmN0aW9uKXJldHVybiBlO3Rocm93IG5ldyBhKGUpfSxhc1N0cmljdEVxdWFsaXR5Q29tcGFyZXI6ZnVuY3Rpb24oZSl7dmFyIHI9bi5nZXRUeXBlKGUpO2lmKHI9PT1uLnR5cGVzLlN0cmluZ3x8cj09PW4udHlwZXMuTnVtYmVyfHxyPT09bi50eXBlcy5TeW1ib2wpcmV0dXJuIHMoZSxmKTtpZihyPT09bi50eXBlcy5GdW5jdGlvbilyZXR1cm4gZTt0aHJvdyBuZXcgYShlKX0sYXNTYW1lQ29tcGFyZXI6ZnVuY3Rpb24oZSl7dmFyIHI9bi5nZXRUeXBlKGUpO2lmKHI9PT1uLnR5cGVzLlN0cmluZ3x8cj09PW4udHlwZXMuTnVtYmVyfHxyPT09bi50eXBlcy5TeW1ib2wpcmV0dXJuIHMoZSxwKTtpZihyPT09bi50eXBlcy5GdW5jdGlvbilyZXR1cm4gZTt0aHJvdyBuZXcgYShlKX0sYXNDb21wYXJlcjpmdW5jdGlvbihlKXt2YXIgcj1uLmdldFR5cGUoZSk7aWYocj09PW4udHlwZXMuU3RyaW5nfHxyPT09bi50eXBlcy5OdW1iZXJ8fHI9PT1uLnR5cGVzLlN5bWJvbClyZXR1cm4gcyhlLGgpO2lmKHI9PT1uLnR5cGVzLkFycmF5fHxyPT09bi50eXBlcy5FbnVtZXJhYmxlKXJldHVybiBiKGUpO2lmKHI9PT1uLnR5cGVzLkZ1bmN0aW9uKXJldHVybiBlO3Rocm93IG5ldyBhKGUpfX07ci5leHBvcnRzPW87dmFyIHU9ZShcIi4vcHJvcGVydHlTZXR0ZXJcIiksaT1lKFwiLi9wcm9wZXJ0eVNlbGVjdG9yXCIpLGw9ZShcIi4vc2VsZWN0b3JQcmVkaWNhdGVcIikscz1lKFwiLi9zZWxlY3RvckNvbXBhcmVyXCIpLGM9ZShcIi4vZGVmYXVsdEVxdWFsaXR5Q29tcGFyZXJcIiksZj1lKFwiLi9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiKSxwPWUoXCIuL2RlZmF1bHRTYW1lQ29tcGFyZXJcIiksaD1lKFwiLi9kZWZhdWx0Q29tcGFyZXJcIiksYj1lKFwiLi9hcnJheUNvbXBhcmVyXCIpLGQ9ZShcIi4vcHJvcGVydGllc1ByZWRpY2F0ZVwiKSxtPWUoXCIuL3JlZ2V4cFByZWRpY2F0ZVwiKX0se1wiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vLi4vY29yZS9leGNlcHRpb25zL0ludmFsaWRGdW5jdGlvbkV4Y2VwdGlvblwiOjM4LFwiLi9hcnJheUNvbXBhcmVyXCI6MTQ1LFwiLi9kZWZhdWx0Q29tcGFyZXJcIjoxNDksXCIuL2RlZmF1bHRFcXVhbGl0eUNvbXBhcmVyXCI6MTUwLFwiLi9kZWZhdWx0U2FtZUNvbXBhcmVyXCI6MTU5LFwiLi9kZWZhdWx0U3RyaWN0RXF1YWxpdHlDb21wYXJlclwiOjE2MSxcIi4vcHJvcGVydGllc1ByZWRpY2F0ZVwiOjE3MixcIi4vcHJvcGVydHlTZWxlY3RvclwiOjE3MyxcIi4vcHJvcGVydHlTZXR0ZXJcIjoxNzQsXCIuL3JlZ2V4cFByZWRpY2F0ZVwiOjE3NSxcIi4vc2VsZWN0b3JDb21wYXJlclwiOjE3NixcIi4vc2VsZWN0b3JQcmVkaWNhdGVcIjoxNzd9XSwxNzA6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9kZWZhdWx0RXhpc3RzUHJlZGljYXRlXCIpO3IuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpuLHQ9YS5hc1ByZWRpY2F0ZSh0KTtyZXR1cm4gZnVuY3Rpb24oZSxyKXtyZXR1cm4hdChlLHIpfX07dmFyIGE9ZShcIi4vbWV0aG9kc1wiKX0se1wiLi9kZWZhdWx0RXhpc3RzUHJlZGljYXRlXCI6MTUxLFwiLi9tZXRob2RzXCI6MTY5fV0sMTcxOltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIEdRYSgpe3JldHVybi0xPT09cj9yPW8uY291bnQoKTpyfXZhciBhPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbz1lLmFzRW51bWVyYWJsZSgpLHI9LTE7cmV0dXJuIGZ1bmN0aW9uKHIsdCl7dmFyIGU9LTE9PT0oZT1vLmZpbmRJbmRleChmdW5jdGlvbihlKXtyZXR1cm4gZShyKX0pKSYmYT9HUWEoKTplLG49by5maW5kSW5kZXgoZnVuY3Rpb24oZSl7cmV0dXJuIGUodCl9KTtyZXR1cm4gZS0obj0tMT09PW4mJmE/R1FhKCk6bil9fTtlKFwiLi9tZXRob2RzXCIpfSx7XCIuL21ldGhvZHNcIjoxNjl9XSwxNzI6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBTUWEoZSxyLHQpe2Zvcih2YXIgbiBpbiByKXt2YXIgYT11KG4pKGUpLG89cltuXSxuPWkuZ2V0VHlwZShhKTtpZihuIT09aS5nZXRUeXBlKG8pKXJldHVybiExO2lmKG49PT1pLnR5cGVzLk9iamVjdHx8bj09PWkudHlwZXMuQXJyYXkpe2lmKCFTUWEoYSxvLHQpKXJldHVybiExfWVsc2UgaWYoIXQoYSxvKSlyZXR1cm4hMX1yZXR1cm4hMH12YXIgbj1lKFwiLi9kZWZhdWx0U2FtZUNvbXBhcmVyXCIpLHU9ZShcIi4vcHJvcGVydHlTZWxlY3RvclwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24ocil7dmFyIHQ9YS5hc0VxdWFsaXR5Q29tcGFyZXIodD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bik7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBTUWEoZSxyLHQpfX07dmFyIGE9ZShcIi4vbWV0aG9kc1wiKSxpPWUoXCIuLy4uL2NvcmUvY29yZVwiKX0se1wiLi8uLi9jb3JlL2NvcmVcIjozNixcIi4vZGVmYXVsdFNhbWVDb21wYXJlclwiOjE1OSxcIi4vbWV0aG9kc1wiOjE2OSxcIi4vcHJvcGVydHlTZWxlY3RvclwiOjE3M31dLDE3MzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLy4uL2NvcmUvY29yZVwiKSxhPWUoXCIuLy4uL2NvcmUvZXhjZXB0aW9ucy9Qcm9wZXJ0eUV4cHJlc3Npb25JbnZhbGlkRXhjZXB0aW9uXCIpLG89L14oKFtfJFxcd11bXyRcXHdcXGRdKil8KFxcWygoXFxkKyl8JyhbXiddKyknfFwiKFteXCJdKylcIildKSkoXFwuKFtfJFxcd11bXyRcXHdcXGRdKil8KFxcWygoXFxkKyl8JyhbXiddKyknfFwiKFteXCJdKylcIildKSkqJC9naSx1PS8oPzpefFxcLikoW18kXFx3XVtfJFxcd1xcZF0qKXxcXFsoPzooXFxkKyl8JyhbXiddKyknfFwiKFteXCJdKylcIildL2dpO3IuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2lmKG4uaXNTeW1ib2wodCl8fG4uaXNOdW1iZXIodCkpcmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuIG51bGwhPWU/ZVt0XTplfTtpZihcIlwiPT09dClyZXR1cm4gZnVuY3Rpb24oZSxyKXtyZXR1cm4gZX07aWYoby5sYXN0SW5kZXg9MCxvLnRlc3QodCkpcmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByO2Zvcih1Lmxhc3RJbmRleD0wO251bGwhPWUmJihyPXUuZXhlYyh0KSk7KWU9ZVtyWzFdfHxyWzJdfHxyWzNdfHxyWzRdXTtyZXR1cm4gZX07aWYoIWUpdGhyb3cgbmV3IGEodCl9fSx7XCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvblwiOjQ2fV0sMTc0OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vLi4vY29yZS9jb3JlXCIpLHU9ZShcIi4vLi4vY29yZS9leGNlcHRpb25zL1Byb3BlcnR5RXhwcmVzc2lvbkludmFsaWRFeGNlcHRpb25cIiksaT0vXigoW18kXFx3XVtfJFxcd1xcZF0qKXwoXFxbKChcXGQrKXwnKFteJ10rKSd8XCIoW15cIl0rKVwiKV0pKShcXC4oW18kXFx3XVtfJFxcd1xcZF0qKXwoXFxbKChcXGQrKXwnKFteJ10rKSd8XCIoW15cIl0rKVwiKV0pKSokL2dpLGw9Lyg/Ol58XFwuKShbXyRcXHddW18kXFx3XFxkXSopfFxcWyg/OihcXGQrKXwnKFteJ10rKSd8XCIoW15cIl0rKVwiKV0vZ2kscz1TeW1ib2woXCJmaXJzdFwiKTtyLmV4cG9ydHM9ZnVuY3Rpb24oYSl7dmFyIG89MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXTtpZihuLmlzU3ltYm9sKGEpfHxuLmlzTnVtYmVyKGEpKXJldHVybiBmdW5jdGlvbihlLHIpe2lmKG51bGwhPWUpZVthXT1yO2Vsc2UgaWYoIW8pdGhyb3cgbmV3IHUoYSl9O2lmKFwiXCI9PT1hKXRocm93IG5ldyB1KGEpO2lmKGkubGFzdEluZGV4PTAsaS50ZXN0KGEpKXJldHVybiBmdW5jdGlvbihlLHIpe3ZhciB0O2wubGFzdEluZGV4PTA7Zm9yKHZhciBuPXM7bnVsbCE9ZSYmKHQ9bC5leGVjKGEpKTspbiE9PXMmJihlPWVbbl0pLG49dFsxXXx8dFsyXXx8dFszXXx8dFs0XTtpZihudWxsIT1lJiZuIT09cyllW25dPXI7ZWxzZSBpZighbyl0aHJvdyBuZXcgdShhKX07aWYoIW8pdGhyb3cgbmV3IHUoYSl9fSx7XCIuLy4uL2NvcmUvY29yZVwiOjM2LFwiLi8uLi9jb3JlL2V4Y2VwdGlvbnMvUHJvcGVydHlFeHByZXNzaW9uSW52YWxpZEV4Y2VwdGlvblwiOjQ2fV0sMTc1OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vZGVmYXVsdFNlbGVjdG9yXCIpO3IuZXhwb3J0cz1mdW5jdGlvbihyKXt2YXIgdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bix0PWEuYXNTZWxlY3Rvcih0KTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIHIudGVzdCh0KGUpKX19O3ZhciBhPWUoXCIuL21ldGhvZHNcIil9LHtcIi4vZGVmYXVsdFNlbGVjdG9yXCI6MTYwLFwiLi9tZXRob2RzXCI6MTY5fV0sMTc2OltmdW5jdGlvbihlLHIsdCl7XCJ1c2Ugc3RyaWN0XCI7ci5leHBvcnRzPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHQ9YS5hc1NlbGVjdG9yKHQpLGZ1bmN0aW9uKGUscil7cmV0dXJuIG4odChlKSx0KHIpKX19O3ZhciBhPWUoXCIuL21ldGhvZHNcIil9LHtcIi4vbWV0aG9kc1wiOjE2OX1dLDE3NzpbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3ZhciBhPWUoXCIuL2RlZmF1bHRFeGlzdHNQcmVkaWNhdGVcIik7ci5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBuPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTphO3JldHVybiB0PW8uYXNTZWxlY3Rvcih0KSxuPW8uYXNQcmVkaWNhdGUobiksZnVuY3Rpb24oZSxyKXtyZXR1cm4gbih0KGUscikscil9fTt2YXIgbz1lKFwiLi9tZXRob2RzXCIpfSx7XCIuL2RlZmF1bHRFeGlzdHNQcmVkaWNhdGVcIjoxNTEsXCIuL21ldGhvZHNcIjoxNjl9XSwxNzg6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9ZnVuY3Rpb24obixhKXtyZXR1cm4gZnVuY3Rpb24oZSxyKXt2YXIgdD1uKGUscik7cmV0dXJuIDA9PT10P2EoZSxyKTp0fX19LHt9XSwxNzk6W2Z1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksZD1uKGUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKSxtPW4oZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZSxyKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCF0KXtpZihBcnJheS5pc0FycmF5KGUpfHwodD1mdW5jdGlvbihlLHIpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBfYXJyYXlMaWtlVG9BcnJheShlLHIpO3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk1hcFwiPT09KHQ9XCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5uYW1lOnQpfHxcIlNldFwiPT09dD9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT10fHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KT9fYXJyYXlMaWtlVG9BcnJheShlLHIpOnZvaWQgMH19KGUpKXx8ciYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXt0JiYoZT10KTt2YXIgbj0wLHI9ZnVuY3Rpb24oKXt9O3JldHVybntzOnIsbjpmdW5jdGlvbigpe3JldHVybiBuPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtuKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOnJ9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgYSxvPSEwLHU9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXt0PXQuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3U9ITAsYT1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PXQucmV0dXJufHx0LnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBhfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59ZnVuY3Rpb24geVNhKGUscil7cmV0dXJuIGUubmFtZT09PXIubmFtZX1mdW5jdGlvbiBBU2EoZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHZbZV0uYXBwbHkodixbdGhpc10uY29uY2F0KGFyZ3VtZW50cykpfX12YXIgeT1lKFwiLi9jb3JlL2NvcmVcIiksdj1lKFwiLi9FbnVtZXJhYmxlXCIpLGc9ZShcIi4vSUVudW1lcmFibGVcIikseD1lKFwiLi9jb3JlL2V4Y2VwdGlvbnMvUGx1Z2luUmVwZWF0RXhjZXB0aW9uXCIpLEU9W107eS5kZWZpbmVQcm9wZXJ0eSh2LFwicGx1Z2luc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0KEUsZnVuY3Rpb24oZSl7cmV0dXJue2dldCBuYW1lKCl7cmV0dXJuIGUubmFtZX0sZ2V0IHZhbHVlKCl7cmV0dXJuIGUudmFsdWV9LGdldCB0eXBlcygpe3JldHVybiBlLnR5cGVzfX19KS50b0FycmF5KCl9LCEwLCEwKSx2LmFkZFBsdWdpbnM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtmb3IodmFyIG49MCxhPXI7bjxhLmxlbmd0aDtuKyspe3ZhciBvPWFbbl07aWYoby5uYW1lJiZvLnZhbHVlKXtpZih0aGlzLmNvbnRhaW5zKEUsbyx5U2EpKXRocm93IG5ldyB4KG8pO2lmKHZvaWQgMCE9PXZbby5uYW1lXSl0aHJvdyBuZXcgeChvLCEwKTtvLnR5cGVzPW8udHlwZXN8fFtdLEUucHVzaChvKSx2W28ubmFtZV09ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodixhcmd1bWVudHMpfX0oby52YWx1ZSksZy5wcm90b3R5cGVbby5uYW1lXT1BU2Eoby5uYW1lKTt2YXIgdSxpPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZXh0ZW5kcyk7dHJ5e2ZvcihpLnMoKTshKHU9aS5uKCkpLmRvbmU7KXt2YXIgbCxzPSgwLG0uZGVmYXVsdCkodS52YWx1ZSwyKSxjPXNbMF0sZj1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzWzFdKTt0cnl7Zm9yKGYucygpOyEobD1mLm4oKSkuZG9uZTspe3ZhciBwPSgwLG0uZGVmYXVsdCkobC52YWx1ZSwyKSxoPXBbMF0sYj1wWzFdOyh0aGlzLmlzRW1wdHkoby50eXBlcyl8fHRoaXMuY29udGFpbnMoby50eXBlcyxjKSkmJnkuZGVmaW5lUHJvcGVydGllcyhoLCgwLGQuZGVmYXVsdCkoe30sby5uYW1lLEFTYShvLm5hbWUpKSxiKX19Y2F0Y2goZSl7Zi5lKGUpfWZpbmFsbHl7Zi5mKCl9fX1jYXRjaChlKXtpLmUoZSl9ZmluYWxseXtpLmYoKX19ZWxzZSBjb25zb2xlLmVycm9yKFwiTm90IGEgcGx1Z2luIHZhbHVlXCIpfXJldHVybiB0aGlzfSx2LnJlbW92ZVBsdWdpbnM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSx0PTA7dDxlO3QrKylyW3RdPWFyZ3VtZW50c1t0XTtmb3IodmFyIG49MCxhPXI7bjxhLmxlbmd0aDtuKyspe3ZhciBvPWFbbl07eS5nZXRUeXBlKG8pPT09eS50eXBlcy5TdHJpbmcmJihvPXtuYW1lOm99KTt2YXIgdT10aGlzLmluZGV4T2YoRSxvLDAseVNhKTtpZigtMSE9PXUpe289RVt1XSxFLnNwbGljZSh1LDEpLGRlbGV0ZSB2W28ubmFtZV0sZGVsZXRlIGcucHJvdG90eXBlW28ubmFtZV07dmFyIGksbD1fY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmV4dGVuZHMpO3RyeXtmb3IobC5zKCk7IShpPWwubigpKS5kb25lOyl7dmFyIHMsYz0oMCxtLmRlZmF1bHQpKGkudmFsdWUsMiksZj1jWzBdLHA9X2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY1sxXSk7dHJ5e2ZvcihwLnMoKTshKHM9cC5uKCkpLmRvbmU7KXt2YXIgaD0oMCxtLmRlZmF1bHQpKHMudmFsdWUsMiksYj1oWzBdLGQ9aFsxXTsodGhpcy5pc0VtcHR5KG8udHlwZXMpfHx0aGlzLmNvbnRhaW5zKG8udHlwZXMsZikpJiZ5LnVuZGVmaW5lUHJvcGVydGllcyhiLFtvLm5hbWVdLGQpfX1jYXRjaChlKXtwLmUoZSl9ZmluYWxseXtwLmYoKX19fWNhdGNoKGUpe2wuZShlKX1maW5hbGx5e2wuZigpfX1lbHNlIGNvbnNvbGUuZXJyb3IoJ05vIHBsdWdpbiBmaW5kIHdpdGggbmFtZSBcIicuY29uY2F0KG8ubmFtZSwnXCInKSl9cmV0dXJuIHRoaXN9fSx7XCIuL0VudW1lcmFibGVcIjozMSxcIi4vSUVudW1lcmFibGVcIjozMixcIi4vY29yZS9jb3JlXCI6MzYsXCIuL2NvcmUvZXhjZXB0aW9ucy9QbHVnaW5SZXBlYXRFeGNlcHRpb25cIjo0NSxcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjo4LFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIjoxMixcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiOjIxfV19LHt9LFsxNDRdKSgxNDQpfSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbnEubWluLmpzLm1hcFxyXG4iLCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9ICgpID0+IChbXSk7XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDI1MzkzO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0OyIsImNvbnN0IEVudW1lcmFibGUgPSByZXF1aXJlKCdsaW5xLWpzJyk7XHJcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpO1xyXG5cclxuY29uc3QgaXNQcmUgPSAvXFwucHJlJC9pZztcclxuY29uc3QgYXNWZXJzaW9uID0gdmVyc2lvbiA9PiB2ZXJzaW9uLnJlcGxhY2UoaXNQcmUsICcnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGRlZmF1bHRMYW5nOiAnemgtY24nLFxyXG5cdHZlcnNpb25zOiByZXF1aXJlKCcuLy4uL3Jlc291cmNlcy92ZXJzaW9ucy5qc29uJyksXHJcblx0Z2V0IGVhcmxpZXN0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudmVyc2lvbnNbMF07XHJcblx0fSxcclxuXHRnZXQgbGFzdGVzdCgpIHtcclxuXHRcdHJldHVybiBFbnVtZXJhYmxlLmxhc3QodGhpcy52ZXJzaW9ucywgdmVyc2lvbiA9PiAhaXNQcmUudGVzdCh2ZXJzaW9uKSk7XHJcblx0fSxcclxuXHRnZXQgbmV3ZXN0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudmVyc2lvbnNbdGhpcy52ZXJzaW9ucy5sZW5ndGggLSAxXTtcclxuXHR9LFxyXG5cdG1vZHVsZSh2ZXJzaW9uKSB7XHJcblx0XHRyZXR1cm4gKCdsaW5xLWpzLScgKyAodmVyc2lvbi5lbmRzV2l0aCgnLnByZScpID8gJ3ByZScgOiB2ZXJzaW9uKSk7XHJcblx0fSxcclxuXHRoaXN0b3J5cyhoaXN0b3J5cykge1xyXG5cdFx0aWYgKGhpc3RvcnlzKSB7XHJcblx0XHRcdGxldCBwcmV2ID0gMDtcclxuXHRcdFx0cmV0dXJuIEVudW1lcmFibGUuemlwKGhpc3RvcnlzLCBFbnVtZXJhYmxlLnNraXAoaGlzdG9yeXMsIDEpLmNvbmNhdChbMF0pLCAodiwgbmV4dCkgPT4ge1xyXG5cdFx0XHRcdGxldCBkZXByZWNhdGVkID0gdi5kZXByZWNhdGVkIHx8IG5leHQgJiYgbmV4dC5zaW5jZSAmJiB0aGlzLnByZXZWZXJzaW9uKG5leHQuc2luY2UpO1xyXG5cdFx0XHRcdGlmICh2LnJlZiAmJiBwcmV2KSB7XHJcblx0XHRcdFx0XHR2ID0gZXh0ZW5kKHRydWUsIHsgfSwgcHJldiwgdik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHYuZGVwcmVjYXRlZCA9IGRlcHJlY2F0ZWQ7XHJcblx0XHRcdFx0cmV0dXJuIHByZXYgPSB2O1xyXG5cdFx0XHR9KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBFbnVtZXJhYmxlLmVtcHR5KCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHR2ZXJzaW9uQ29tcGFyZXIodmVyc2lvbiwgb3RoZXIpIHtcclxuXHRcdGxldCB2ID0gRW51bWVyYWJsZS56aXAoYXNWZXJzaW9uKHZlcnNpb24pLnNwbGl0KCcuJyksIGFzVmVyc2lvbihvdGhlcikuc3BsaXQoJy4nKSwgKHZlciwgb3RoZXJWZXIpID0+ICh7IHZlciwgb3RoZXJWZXIgfSkpLmZpcnN0T3JEZWZhdWx0KHsgdmVyOiAwLCBvdGhlclZlcjogMCB9LCB2ID0+IHYudmVyICE9PSB2Lm90aGVyVmVyKTtcclxuXHRcdHJldHVybiB2LnZlciA9PT0gdi5vdGhlclZlciA/IDAgOiBwYXJzZUludCh2LnZlcikgPiBwYXJzZUludCh2Lm90aGVyVmVyKSA/IDEgOiAtMTtcclxuXHR9LFxyXG5cdHByZXZWZXJzaW9uKHZlcnNpb24pIHtcclxuXHRcdHJldHVybiBFbnVtZXJhYmxlLndoZXJlKHRoaXMudmVyc2lvbnMsIHZlciA9PiB0aGlzLnZlcnNpb25Db21wYXJlcih2ZXIsIHZlcnNpb24pIDwgMCkubWF4KCcnLCB0aGlzLnZlcnNpb25Db21wYXJlcik7XHJcblx0fSxcclxuXHRuZXh0VmVyc2lvbih2ZXJzaW9uKSB7XHJcblx0XHRyZXR1cm4gRW51bWVyYWJsZS53aGVyZSh0aGlzLnZlcnNpb25zLCB2ZXIgPT4gdGhpcy52ZXJzaW9uQ29tcGFyZXIodmVyLCB2ZXJzaW9uKSA+IDApLm1pbignJywgdGhpcy52ZXJzaW9uQ29tcGFyZXIpO1xyXG5cdH0sXHJcblx0cHJlVmVyc2lvbih2ZXJzaW9uKSB7XHJcblx0XHRsZXQgdmVyc2lvbnMgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XHJcblx0XHR2ZXJzaW9uc1t2ZXJzaW9ucy5sZW5ndGggLSAxXSA9IHBhcnNlSW50KHZlcnNpb25zW3ZlcnNpb25zLmxlbmd0aCAtIDFdKSArIDE7XHJcblx0XHRyZXR1cm4gdmVyc2lvbnMuam9pbignLicpICsgJy5wcmUnO1xyXG5cdH0sXHJcblx0YXNWZXJzaW9uKHZlcnNpb24pIHtcclxuXHRcdHJldHVybiBhc1ZlcnNpb24odmVyc2lvbik7XHJcblx0fSxcclxuXHRtYXhWZXJzaW9uKC4uLnZlcnNpb25zKSB7XHJcblx0XHRyZXR1cm4gRW51bWVyYWJsZS5tYXgodmVyc2lvbnMsICcnLCB0aGlzLnZlcnNpb25Db21wYXJlcik7XHJcblx0fSxcclxuXHRtaW5WZXJzaW9uKC4uLnZlcnNpb25zKSB7XHJcblx0XHRyZXR1cm4gRW51bWVyYWJsZS5taW4odmVyc2lvbnMsICcnLCB0aGlzLnZlcnNpb25Db21wYXJlcik7XHJcblx0fSxcclxuXHRpc05ld2VyKHZlcnNpb24sIGJhc2VWZXJzaW9uKSB7XHJcblx0XHRsZXQgdiA9IEVudW1lcmFibGUuemlwKGFzVmVyc2lvbih2ZXJzaW9uIHx8IHRoaXMuZWFybGllc3QpLnNwbGl0KCcuJyksIGFzVmVyc2lvbihiYXNlVmVyc2lvbikuc3BsaXQoJy4nKSwgKHZlciwgYmFzZVZlcikgPT4gKHsgdmVyLCBiYXNlVmVyIH0pKS5maXJzdE9yRGVmYXVsdCh7IHZlcjogMCwgYmFzZVZlcjogMCB9LCB2ID0+IHYudmVyICE9PSB2LmJhc2VWZXIpO1xyXG5cdFx0cmV0dXJuIHBhcnNlSW50KHYudmVyKSA8PSBwYXJzZUludCh2LmJhc2VWZXIpO1xyXG5cdH0sXHJcblx0aXNPbGRlcih2ZXJzaW9uLCBiYXNlVmVyc2lvbikge1xyXG5cdFx0bGV0IHYgPSBFbnVtZXJhYmxlLnppcChhc1ZlcnNpb24odmVyc2lvbiB8fCB0aGlzLm5ld2VzdCkuc3BsaXQoJy4nKSwgYXNWZXJzaW9uKGJhc2VWZXJzaW9uKS5zcGxpdCgnLicpLCAodmVyLCBiYXNlVmVyKSA9PiAoeyB2ZXIsIGJhc2VWZXIgfSkpLmZpcnN0T3JEZWZhdWx0KHsgdmVyOiAwLCBiYXNlVmVyOiAwIH0sIHYgPT4gdi52ZXIgIT09IHYuYmFzZVZlcik7XHJcblx0XHRyZXR1cm4gcGFyc2VJbnQodi52ZXIpID49IHBhcnNlSW50KHYuYmFzZVZlcik7XHJcblx0fSxcclxuXHRjYXBpdGFsaXplKHZhbHVlKSB7XHJcblx0XHRpZiAoIXZhbHVlKSByZXR1cm4gJyc7XHJcblx0XHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcblx0XHRyZXR1cm4gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKTtcclxuXHR9LFxyXG5cdHVwcGVyKHZhbHVlKSB7XHJcblx0XHRpZiAoIXZhbHVlKSByZXR1cm4gJyc7XHJcblx0XHRyZXR1cm4gdmFsdWUudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpO1xyXG5cdH0sXHJcblx0bG93ZXIodmFsdWUpIHtcclxuXHRcdGlmICghdmFsdWUpIHJldHVybiAnJztcclxuXHRcdHJldHVybiB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcblx0fSxcclxufTsiLCIkKGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtdG9nZ2xlPVwidG9nZ2xlQ2xhc3NcIl0nLCAoZXZlbnQpID0+IHtcclxuXHRsZXQgZWxlbWVudCA9ICQoZXZlbnQudGFyZ2V0KTtcclxuXHRpZiAoZWxlbWVudC5kYXRhKCd0b2dnbGUnKSAhPT0gJ3RvZ2dsZUNsYXNzJykgZWxlbWVudCA9IGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdG9nZ2xlPVwidG9nZ2xlQ2xhc3NcIl0nKTtcclxuXHRsZXQgdGFyZ2V0ID0gKGVsZW1lbnQuaXMoJ2EnKSA/IGVsZW1lbnQuYXR0cignaHJlZicpIDogJycpIHx8IGVsZW1lbnQuZGF0YSgndGFyZ2V0Jyk7XHJcblx0dGFyZ2V0ICYmICQodGFyZ2V0KS50b2dnbGVDbGFzcyhlbGVtZW50LmRhdGEoJ2NsYXNzZXMnKSk7XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxufSk7IiwiVnVlLmZpbHRlcignanNvbicsIGZ1bmN0aW9uICh2YWx1ZSwgaWdub3JlID0gZmFsc2UpIHtcclxuICAgIGxldCB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGlnbm9yZSA/ICcnIDogJ3VuZGVmaW5lZCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAnbnVtYmVyJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoc3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gKHZlcnNpb24sIGNhbGxiYWNrLCBwcmUsIHBvc3QpID0+IHsgaWYgKHZlcnNpb24gPT09ICcyLjIuMC5wcmUnKSByZXR1cm4gcmVxdWlyZS5lbnN1cmUoW10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgaWYgKGNhbGxiYWNrKSB7IHByZSAmJiBwcmUoKTsgY2FsbGJhY2socmVxdWlyZSgnbGlucS1qcy1wcmUnKSk7IHBvc3QgJiYgcG9zdCgpOyB9IH0sICdsaW5xLWpzLXByZScpOyBlbHNlIGlmICh2ZXJzaW9uID09PSAnMi4xLjI0JykgcmV0dXJuIHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbihyZXF1aXJlKSB7IGlmIChjYWxsYmFjaykgeyBwcmUgJiYgcHJlKCk7IGNhbGxiYWNrKHJlcXVpcmUoJ2xpbnEtanMtMi4xLjI0JykpOyBwb3N0ICYmIHBvc3QoKTsgfSB9LCAnbGlucS1qcy0yLjEuMjQnKTsgZWxzZSBpZiAodmVyc2lvbiA9PT0gJzIuMS4yMycpIHJldHVybiByZXF1aXJlLmVuc3VyZShbXSwgZnVuY3Rpb24ocmVxdWlyZSkgeyBpZiAoY2FsbGJhY2spIHsgcHJlICYmIHByZSgpOyBjYWxsYmFjayhyZXF1aXJlKCdsaW5xLWpzLTIuMS4yMycpKTsgcG9zdCAmJiBwb3N0KCk7IH0gfSwgJ2xpbnEtanMtMi4xLjIzJyk7IGVsc2UgaWYgKHZlcnNpb24gPT09ICcyLjEuMjInKSByZXR1cm4gcmVxdWlyZS5lbnN1cmUoW10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgaWYgKGNhbGxiYWNrKSB7IHByZSAmJiBwcmUoKTsgY2FsbGJhY2socmVxdWlyZSgnbGlucS1qcy0yLjEuMjInKSk7IHBvc3QgJiYgcG9zdCgpOyB9IH0sICdsaW5xLWpzLTIuMS4yMicpOyBlbHNlIGlmICh2ZXJzaW9uID09PSAnMi4xLjIxJykgcmV0dXJuIHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbihyZXF1aXJlKSB7IGlmIChjYWxsYmFjaykgeyBwcmUgJiYgcHJlKCk7IGNhbGxiYWNrKHJlcXVpcmUoJ2xpbnEtanMtMi4xLjIxJykpOyBwb3N0ICYmIHBvc3QoKTsgfSB9LCAnbGlucS1qcy0yLjEuMjEnKTsgZWxzZSBpZiAodmVyc2lvbiA9PT0gJzIuMS4yMCcpIHJldHVybiByZXF1aXJlLmVuc3VyZShbXSwgZnVuY3Rpb24ocmVxdWlyZSkgeyBpZiAoY2FsbGJhY2spIHsgcHJlICYmIHByZSgpOyBjYWxsYmFjayhyZXF1aXJlKCdsaW5xLWpzLTIuMS4yMCcpKTsgcG9zdCAmJiBwb3N0KCk7IH0gfSwgJ2xpbnEtanMtMi4xLjIwJyk7IGVsc2UgaWYgKHZlcnNpb24gPT09ICcyLjEuMTknKSByZXR1cm4gcmVxdWlyZS5lbnN1cmUoW10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgaWYgKGNhbGxiYWNrKSB7IHByZSAmJiBwcmUoKTsgY2FsbGJhY2socmVxdWlyZSgnbGlucS1qcy0yLjEuMTknKSk7IHBvc3QgJiYgcG9zdCgpOyB9IH0sICdsaW5xLWpzLTIuMS4xOScpOyBlbHNlIGlmICh2ZXJzaW9uID09PSAnMi4xLjE4JykgcmV0dXJuIHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbihyZXF1aXJlKSB7IGlmIChjYWxsYmFjaykgeyBwcmUgJiYgcHJlKCk7IGNhbGxiYWNrKHJlcXVpcmUoJ2xpbnEtanMtMi4xLjE4JykpOyBwb3N0ICYmIHBvc3QoKTsgfSB9LCAnbGlucS1qcy0yLjEuMTgnKTsgZWxzZSBpZiAodmVyc2lvbiA9PT0gJzIuMS4xNycpIHJldHVybiByZXF1aXJlLmVuc3VyZShbXSwgZnVuY3Rpb24ocmVxdWlyZSkgeyBpZiAoY2FsbGJhY2spIHsgcHJlICYmIHByZSgpOyBjYWxsYmFjayhyZXF1aXJlKCdsaW5xLWpzLTIuMS4xNycpKTsgcG9zdCAmJiBwb3N0KCk7IH0gfSwgJ2xpbnEtanMtMi4xLjE3Jyk7IGVsc2UgaWYgKHZlcnNpb24gPT09ICcyLjEuMTYnKSByZXR1cm4gcmVxdWlyZS5lbnN1cmUoW10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgaWYgKGNhbGxiYWNrKSB7IHByZSAmJiBwcmUoKTsgY2FsbGJhY2socmVxdWlyZSgnbGlucS1qcy0yLjEuMTYnKSk7IHBvc3QgJiYgcG9zdCgpOyB9IH0sICdsaW5xLWpzLTIuMS4xNicpOyBlbHNlIGlmICh2ZXJzaW9uID09PSAnMi4xLjE1JykgcmV0dXJuIHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbihyZXF1aXJlKSB7IGlmIChjYWxsYmFjaykgeyBwcmUgJiYgcHJlKCk7IGNhbGxiYWNrKHJlcXVpcmUoJ2xpbnEtanMtMi4xLjE1JykpOyBwb3N0ICYmIHBvc3QoKTsgfSB9LCAnbGlucS1qcy0yLjEuMTUnKTsgfTsiLCI8dGVtcGxhdGU+XHJcbiAgICA8c3BhbiBjbGFzcz1cImhsanMtY2xhc3NcIj5cclxuICAgICAgICA8c3BhbiA6Y2xhc3M9XCJbaXNLZXl3b3JkKHR5cGUpID8gJ2hsanMta2V5d29yZCcgOiAnaGxqcy10aXRsZSddXCI+e3sgdHlwZSB9fTwvc3Bhbj5cclxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImdlbmVyaWNzICYmIGdlbmVyaWNzLmxlbmd0aFwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImhsanMtc3ltYm9sXCI+Jmx0Ozwvc3Bhbj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGdlbmVyaWMsIGluZGV4KSBpbiBnZW5lcmljc1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImluZGV4ICE9PSAwXCI+LDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxjb2RlLWNsYXNzIDp0eXBlPVwiZ2VuZXJpYy5uYW1lXCIgOmdlbmVyaWNzPVwiZ2VuZXJpYy5nZW5lcmljc1wiPjwvY29kZS1jbGFzcz5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJobGpzLXN5bWJvbFwiPiZndDs8L3NwYW4+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvc3Bhbj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgIFx0cHJvcHM6IHtcclxuICAgIFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdGdlbmVyaWNzOiBBcnJheVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NvZGUtY2xhc3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29kZS1jbGFzcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2NvZGUtY2xhc3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNjMzliZjcyJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2NvZGUtY2xhc3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9jb2RlLWNsYXNzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtY2xhc3NcIn0sW19jKCdzcGFuJyx7Y2xhc3M6W192bS5pc0tleXdvcmQoX3ZtLnR5cGUpID8gJ2hsanMta2V5d29yZCcgOiAnaGxqcy10aXRsZSddfSxbX3ZtLl92KF92bS5fcyhfdm0udHlwZSkpXSksX3ZtLl92KFwiIFwiKSwoX3ZtLmdlbmVyaWNzICYmIF92bS5nZW5lcmljcy5sZW5ndGgpP1tfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIjxcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgoX3ZtLmdlbmVyaWNzKSxmdW5jdGlvbihnZW5lcmljLGluZGV4KXtyZXR1cm4gWyhpbmRleCAhPT0gMCk/X2MoJ3NwYW4nLFtfdm0uX3YoXCIsXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnY29kZS1jbGFzcycse2F0dHJzOntcInR5cGVcIjpnZW5lcmljLm5hbWUsXCJnZW5lcmljc1wiOmdlbmVyaWMuZ2VuZXJpY3N9fSldfSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIj5cIildKV06X3ZtLl9lKCldLDIpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8Y29kZSBjbGFzcz1cImhsanNcIj5cclxuICAgICAgICA8c3BhbiB2LWlmPVwiY2xhc3NOYW1lXCIgY2xhc3M9XCJobGpzLWNsYXNzXCI+PHNwYW4gY2xhc3M9XCJobGpzLXRpdGxlXCI+e3sgY2xhc3NOYW1lIH19PC9zcGFuPjwvc3Bhbj48dGVtcGxhdGUgdi1pZj1cImNsYXNzTmFtZSAmJiBtZXRob2ROYW1lICYmICFvdmVybG9hZC5zdGF0aWMgJiYgaXNPYmplY3RcIj4uPHNwYW4gY2xhc3M9XCJobGpzLWJ1aWx0X2luXCI+cHJvdG90eXBlPC9zcGFuPjwvdGVtcGxhdGU+PHRlbXBsYXRlIHYtaWY9XCJtZXRob2ROYW1lXCI+LjxzcGFuIGNsYXNzPVwiaGxqcy1hdHRyaWJ1dGVcIj57eyBtZXRob2ROYW1lIH19PC9zcGFuPjwvdGVtcGxhdGU+XHJcbiAgICAgICAgKFxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihwYXJhbWV0ZXIsIHBhcmFtZXRlckluZGV4KSBpbiBvdmVybG9hZC5wYXJhbWV0ZXJzXCI+XHJcbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJwYXJhbWV0ZXJJbmRleCAhPT0gMFwiPiw8L3RlbXBsYXRlPlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJobGpzLXBhcmFtc1wiIHN0eWxlPVwicGFkZGluZy1sZWZ0OjRlbVwiPjxzcGFuIHYtaWY9XCJwYXJhbWV0ZXIucGFyYW1zXCIgY2xhc3M9XCJobGpzLXN5bWJvbFwiPi4uLjwvc3Bhbj57eyBwYXJhbWV0ZXIubmFtZSB9fTwvc3Bhbj5cclxuICAgICAgICA8c3BhbiBjbGFzcz1cImhsanMtc3ltYm9sXCI+Ojwvc3Bhbj5cclxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIodHlwZSwgdHlwZUluZGV4KSBpbiBwYXJhbWV0ZXIudHlwZXNcIj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ0eXBlSW5kZXggIT09IDBcIj48c3BhbiBjbGFzcz1cImhsanMtc3ltYm9sXCI+IHx8IDwvc3Bhbj48L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInBhcmFtZXRlci5wYXJhbXNcIj5cclxuICAgICAgICAgICAgICAgIDxjb2RlLWNsYXNzIHR5cGU9XCJhcnJheVwiPjwvY29kZS1jbGFzcz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaGxqcy1zeW1ib2xcIj4mbHQ7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPGNvZGUtY2xhc3MgOnR5cGU9XCJ0eXBlXCI+PC9jb2RlLWNsYXNzPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJobGpzLXN5bWJvbFwiPiZndDs8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgIDxjb2RlLWNsYXNzIHYtZWxzZSA6dHlwZT1cInR5cGVcIj48L2NvZGUtY2xhc3M+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInR5cGVvZiBwYXJhbWV0ZXIuZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJ1wiPiA9IDxzcGFuIGNsYXNzPVwiaGxqcy12YXJpYWJsZVwiPnt7IHBhcmFtZXRlci5kZWZhdWx0VmFsdWUgfX08L3NwYW4+PC90ZW1wbGF0ZT5cclxuICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJvdmVybG9hZC5wYXJhbWV0ZXJzICYmIG92ZXJsb2FkLnBhcmFtZXRlcnMubGVuZ3RoXCI+PGJyLz48L3RlbXBsYXRlPlxyXG4gICAgICAgIClcclxuICAgICAgICA8c3BhbiBjbGFzcz1cImhsanMtc3ltYm9sXCI+Ojwvc3Bhbj5cclxuICAgICAgICA8Y29kZS1jbGFzcyA6dHlwZT1cIm92ZXJsb2FkLnJldHVybnMudHlwZVwiIDpnZW5lcmljcz1cIm92ZXJsb2FkLnJldHVybnMuZ2VuZXJpY3NcIj48L2NvZGUtY2xhc3M+XHJcbiAgICA8L2NvZGU+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBcdHByb3BzOiB7XHJcblx0XHRcdG92ZXJsb2FkOiBPYmplY3QsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBtZXRob2ROYW1lOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGlzT2JqZWN0OiBCb29sZWFuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29kZS1tZXRob2QtZGVjbGFyZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9jb2RlLW1ldGhvZC1kZWNsYXJlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vY29kZS1tZXRob2QtZGVjbGFyZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzZlNjQ1ODkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vY29kZS1tZXRob2QtZGVjbGFyZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2NvZGUtbWV0aG9kLWRlY2xhcmUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnY29kZScse3N0YXRpY0NsYXNzOlwiaGxqc1wifSxbKF92bS5jbGFzc05hbWUpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLWNsYXNzXCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy10aXRsZVwifSxbX3ZtLl92KF92bS5fcyhfdm0uY2xhc3NOYW1lKSldKV0pOl92bS5fZSgpLChfdm0uY2xhc3NOYW1lICYmIF92bS5tZXRob2ROYW1lICYmICFfdm0ub3ZlcmxvYWQuc3RhdGljICYmIF92bS5pc09iamVjdCk/W192bS5fdihcIi5cIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtYnVpbHRfaW5cIn0sW192bS5fdihcInByb3RvdHlwZVwiKV0pXTpfdm0uX2UoKSwoX3ZtLm1ldGhvZE5hbWUpP1tfdm0uX3YoXCIuXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLWF0dHJpYnV0ZVwifSxbX3ZtLl92KF92bS5fcyhfdm0ubWV0aG9kTmFtZSkpXSldOl92bS5fZSgpLF92bS5fdihcIlxcbiAgICAoXFxuICAgIFwiKSxfdm0uX2woKF92bS5vdmVybG9hZC5wYXJhbWV0ZXJzKSxmdW5jdGlvbihwYXJhbWV0ZXIscGFyYW1ldGVySW5kZXgpe3JldHVybiBbKHBhcmFtZXRlckluZGV4ICE9PSAwKT9bX3ZtLl92KFwiLFwiKV06X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnYnInKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLXBhcmFtc1wiLHN0YXRpY1N0eWxlOntcInBhZGRpbmctbGVmdFwiOlwiNGVtXCJ9fSxbKHBhcmFtZXRlci5wYXJhbXMpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLXN5bWJvbFwifSxbX3ZtLl92KFwiLi4uXCIpXSk6X3ZtLl9lKCksX3ZtLl92KF92bS5fcyhwYXJhbWV0ZXIubmFtZSkpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIjpcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgocGFyYW1ldGVyLnR5cGVzKSxmdW5jdGlvbih0eXBlLHR5cGVJbmRleCl7cmV0dXJuIFsodHlwZUluZGV4ICE9PSAwKT9bX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtc3ltYm9sXCJ9LFtfdm0uX3YoXCIgfHwgXCIpXSldOl92bS5fZSgpLF92bS5fdihcIiBcIiksKHBhcmFtZXRlci5wYXJhbXMpP1tfYygnY29kZS1jbGFzcycse2F0dHJzOntcInR5cGVcIjpcImFycmF5XCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIjxcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdjb2RlLWNsYXNzJyx7YXR0cnM6e1widHlwZVwiOnR5cGV9fSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIj5cIildKV06X2MoJ2NvZGUtY2xhc3MnLHthdHRyczp7XCJ0eXBlXCI6dHlwZX19KV19KSxfdm0uX3YoXCIgXCIpLCh0eXBlb2YgcGFyYW1ldGVyLmRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpP1tfdm0uX3YoXCIgPSBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtdmFyaWFibGVcIn0sW192bS5fdihfdm0uX3MocGFyYW1ldGVyLmRlZmF1bHRWYWx1ZSkpXSldOl92bS5fZSgpXX0pLF92bS5fdihcIiBcIiksKF92bS5vdmVybG9hZC5wYXJhbWV0ZXJzICYmIF92bS5vdmVybG9hZC5wYXJhbWV0ZXJzLmxlbmd0aCk/W19jKCdicicpXTpfdm0uX2UoKSxfdm0uX3YoXCJcXG4gICAgKVxcbiAgICBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtc3ltYm9sXCJ9LFtfdm0uX3YoXCI6XCIpXSksX3ZtLl92KFwiIFwiKSxfYygnY29kZS1jbGFzcycse2F0dHJzOntcInR5cGVcIjpfdm0ub3ZlcmxvYWQucmV0dXJucy50eXBlLFwiZ2VuZXJpY3NcIjpfdm0ub3ZlcmxvYWQucmV0dXJucy5nZW5lcmljc319KV0sMil9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxjb2RlIGNsYXNzPVwiaGxqcyBpbmxpbmVcIiA6dGl0bGU9XCJ0eXBlTmFtZVwiPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidHlwZU5hbWUgJiYgdHlwZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWNsYXJlXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaGxqcy1mdW5jdGlvblwiPnt7IG5hbWUgfX08L3NwYW4+XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGRlY2xhcmVQYXJhbWV0ZXIsIGRlY2xhcmVQYXJhbWV0ZXJJbmRleCkgaW4gZGVjbGFyZS5wYXJhbWV0ZXJzXCI+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImRlY2xhcmVQYXJhbWV0ZXIub3B0aW9uYWxcIj5bPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZGVjbGFyZVBhcmFtZXRlckluZGV4ICE9PSAwXCI+LDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImhsanMtcGFyYW1zXCI+e3sgZGVjbGFyZVBhcmFtZXRlci5uYW1lIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJobGpzLXN5bWJvbFwiPjo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIocGFyYW1ldGVyVHlwZSwgcGFyYW1ldGVyVHlwZUluZGV4KSBpbiBkZWNsYXJlUGFyYW1ldGVyLnR5cGVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJwYXJhbWV0ZXJUeXBlSW5kZXggIT09IDBcIj48c3BhbiBjbGFzcz1cImhsanMtc3ltYm9sXCI+IHx8IDwvc3Bhbj48L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDxjb2RlLWNsYXNzIDp0eXBlPVwicGFyYW1ldGVyVHlwZVwiPjwvY29kZS1jbGFzcz5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImRlY2xhcmVQYXJhbWV0ZXIuZGVmYXVsdFZhbHVlXCI+ID0gPHNwYW4gY2xhc3M9XCJobGpzLXZhcmlhYmxlXCI+e3sgZGVjbGFyZVBhcmFtZXRlci5kZWZhdWx0VmFsdWUgfX08L3NwYW4+PC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZGVjbGFyZVBhcmFtZXRlci5vcHRpb25hbFwiPl08L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaGxqcy1zeW1ib2xcIj46PC9zcGFuPlxyXG4gICAgICAgICAgICA8Y29kZS1jbGFzcyA6dHlwZT1cImRlY2xhcmUucmV0dXJucy50eXBlXCIgOmdlbmVyaWNzPVwiZGVjbGFyZS5yZXR1cm5zLmdlbmVyaWNzXCI+PC9jb2RlLWNsYXNzPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPGNvZGUtY2xhc3Mgdi1lbHNlIDp0eXBlPVwidHlwZU5hbWVcIiA6Z2VuZXJpY3M9XCJ0eXBlR2VuZXJpY3NcIj48L2NvZGUtY2xhc3M+XHJcbiAgICA8L2NvZGU+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBcdHByb3BzOiB7XHJcbiAgICBcdFx0bmFtZToge1xyXG4gICAgXHRcdFx0dHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHR0eXBlOiBbIFN0cmluZywgT2JqZWN0IF0sXHJcblx0XHRcdGdlbmVyaWNzOiBBcnJheSxcclxuXHRcdFx0ZGVjbGFyZTogT2JqZWN0XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICB0eXBlTmFtZSgpIHtcclxuICAgICAgICAgICAgXHRpZiAodHlwZW9mIHRoaXMudHlwZSA9PT0gJ3N0cmluZycgfHwgdGhpcy50eXBlIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIFx0XHRyZXR1cm4gdGhpcy50eXBlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXHRcdHJldHVybiB0aGlzLnR5cGUubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0dHlwZUdlbmVyaWNzKCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGhpcy50eXBlID09PSAnc3RyaW5nJyB8fCB0aGlzLnR5cGUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmdlbmVyaWNzO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50eXBlLmdlbmVyaWNzO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NvZGUtdHlwZS1kZWNsYXJlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NvZGUtdHlwZS1kZWNsYXJlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vY29kZS10eXBlLWRlY2xhcmUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVmZDUyOGUyJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2NvZGUtdHlwZS1kZWNsYXJlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vY29kZS10eXBlLWRlY2xhcmUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnY29kZScse3N0YXRpY0NsYXNzOlwiaGxqcyBpbmxpbmVcIixhdHRyczp7XCJ0aXRsZVwiOl92bS50eXBlTmFtZX19LFsoX3ZtLnR5cGVOYW1lICYmIF92bS50eXBlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZnVuY3Rpb24nICYmIF92bS5kZWNsYXJlKT9bX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtZnVuY3Rpb25cIn0sW192bS5fdihfdm0uX3MoX3ZtLm5hbWUpKV0pLF92bS5fdihcIlxcbiAgICAgICAgKFxcbiAgICAgICAgXCIpLF92bS5fbCgoX3ZtLmRlY2xhcmUucGFyYW1ldGVycyksZnVuY3Rpb24oZGVjbGFyZVBhcmFtZXRlcixkZWNsYXJlUGFyYW1ldGVySW5kZXgpe3JldHVybiBbKGRlY2xhcmVQYXJhbWV0ZXIub3B0aW9uYWwpP1tfdm0uX3YoXCJbXCIpXTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChkZWNsYXJlUGFyYW1ldGVySW5kZXggIT09IDApP1tfdm0uX3YoXCIsXCIpXTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLXBhcmFtc1wifSxbX3ZtLl92KF92bS5fcyhkZWNsYXJlUGFyYW1ldGVyLm5hbWUpKV0pLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhsanMtc3ltYm9sXCJ9LFtfdm0uX3YoXCI6XCIpXSksX3ZtLl92KFwiIFwiKSxfdm0uX2woKGRlY2xhcmVQYXJhbWV0ZXIudHlwZXMpLGZ1bmN0aW9uKHBhcmFtZXRlclR5cGUscGFyYW1ldGVyVHlwZUluZGV4KXtyZXR1cm4gWyhwYXJhbWV0ZXJUeXBlSW5kZXggIT09IDApP1tfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGxqcy1zeW1ib2xcIn0sW192bS5fdihcIiB8fCBcIildKV06X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnY29kZS1jbGFzcycse2F0dHJzOntcInR5cGVcIjpwYXJhbWV0ZXJUeXBlfX0pXX0pLF92bS5fdihcIiBcIiksKGRlY2xhcmVQYXJhbWV0ZXIuZGVmYXVsdFZhbHVlKT9bX3ZtLl92KFwiID0gXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLXZhcmlhYmxlXCJ9LFtfdm0uX3YoX3ZtLl9zKGRlY2xhcmVQYXJhbWV0ZXIuZGVmYXVsdFZhbHVlKSldKV06X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoZGVjbGFyZVBhcmFtZXRlci5vcHRpb25hbCk/W192bS5fdihcIl1cIildOl92bS5fZSgpXX0pLF92bS5fdihcIlxcbiAgICAgICAgKVxcbiAgICAgICAgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJobGpzLXN5bWJvbFwifSxbX3ZtLl92KFwiOlwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2NvZGUtY2xhc3MnLHthdHRyczp7XCJ0eXBlXCI6X3ZtLmRlY2xhcmUucmV0dXJucy50eXBlLFwiZ2VuZXJpY3NcIjpfdm0uZGVjbGFyZS5yZXR1cm5zLmdlbmVyaWNzfX0pXTpfYygnY29kZS1jbGFzcycse2F0dHJzOntcInR5cGVcIjpfdm0udHlwZU5hbWUsXCJnZW5lcmljc1wiOl92bS50eXBlR2VuZXJpY3N9fSldLDIpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgdi1pZj1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgIDxoMT57eyB0aXRsZSB9fTwvaDE+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogJ0NvbnRlbnRUZW1wbGF0ZScsXHJcbiAgICBcdHByb3BzOiB7XHJcbiAgICBcdFx0dGl0bGU6IFN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NvbnRlbnQtdGVtcGxhdGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29udGVudC10ZW1wbGF0ZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2NvbnRlbnQtdGVtcGxhdGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc1MTYyZTA0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2NvbnRlbnQtdGVtcGxhdGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9jb250ZW50LXRlbXBsYXRlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsWyhfdm0udGl0bGUpP19jKCdkaXYnLFtfYygnaDEnLFtfdm0uX3YoX3ZtLl9zKF92bS50aXRsZSkpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8cm91dGVyLWxpbmsgOnRvPVwiYC8keyAkcm91dGUucGFyYW1zLmxhbmcgfHwgJ3poLWNuJyB9LyR7IHRvVmVyc2lvbiA/IHRvVmVyc2lvbiArICcvJyA6IHZlcnNpb24gIT09IGxhc3Rlc3QgPyB2ZXJzaW9uICsgJy8nIDogJycgfSR7IHRvIH1gXCI+PHNsb3Q+PC9zbG90Pjwvcm91dGVyLWxpbms+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBcdHByb3BzOiB7XHJcbiAgICBcdFx0dG86IFN0cmluZyxcclxuICAgICAgICAgICAgdG9WZXJzaW9uOiBTdHJpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sYW5nLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbGFuZy1saW5rLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbGFuZy1saW5rLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mM2JlZGE0NCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9sYW5nLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9sYW5nLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygncm91dGVyLWxpbmsnLHthdHRyczp7XCJ0b1wiOihcIi9cIiArIChfdm0uJHJvdXRlLnBhcmFtcy5sYW5nIHx8ICd6aC1jbicpICsgXCIvXCIgKyAoX3ZtLnRvVmVyc2lvbiA/IF92bS50b1ZlcnNpb24gKyAnLycgOiBfdm0udmVyc2lvbiAhPT0gX3ZtLmxhc3Rlc3QgPyBfdm0udmVyc2lvbiArICcvJyA6ICcnKSArIF92bS50byl9fSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMil9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxhIDpocmVmPVwiYCMkeyAkcm91dGUucGF0aCB9IyR7IGlkIH1gXCIgOmlkPVwiaWRcIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLWxpbmtcIj48L2k+PC9hPlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgXHRwcm9wczoge1xyXG4gICAgXHRcdGlkOiBTdHJpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9tYXJrLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbWFyay1saW5rLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbWFyay1saW5rLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NzQ3OTZiNSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9tYXJrLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9tYXJrLWxpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnYScse2F0dHJzOntcImhyZWZcIjooXCIjXCIgKyAoX3ZtLiRyb3V0ZS5wYXRoKSArIFwiI1wiICsgX3ZtLmlkKSxcImlkXCI6X3ZtLmlkfX0sW19jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYSBmYS1mdyBmYS1saW5rXCJ9KV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8YSA6aHJlZj1cImAjJHsgJHJvdXRlLnBhdGggfSMkeyB0byB9YFwiIEBjbGljaz1cInNjcm9sbEJ5SWRcIj48c2xvdD48L3Nsb3Q+PC9hPlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgXHRwcm9wczoge1xyXG4gICAgXHRcdHRvOiBTdHJpbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgIFx0XHRzY3JvbGxCeUlkKCkge1xyXG4gICAgXHRcdFx0dGhpcy5zY3JvbGxUbygkKCcjJyArIHRoaXMudG8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL21hcmstdG8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbWFyay10by52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL21hcmstdG8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTliZjQyODI2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL21hcmstdG8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9tYXJrLXRvLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6KFwiI1wiICsgKF92bS4kcm91dGUucGF0aCkgKyBcIiNcIiArIF92bS50byl9LG9uOntcImNsaWNrXCI6X3ZtLnNjcm9sbEJ5SWR9fSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMil9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzcGFuJyxbKF92bS5zZWUuZ3VpZGUpP19jKCdsYW5nLWxpbmsnLHthdHRyczp7XCJ0b1wiOihcImd1aWRlcy9cIiArIChfdm0uc2VlLmd1aWRlKSl9fSxbX3ZtLl92KF92bS5fcyhfdm0uc3ViamVjdCkpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5zZWUuZ3VpZGUgJiYgX3ZtLnNlZS5hcGlzKT9fYygnbGFuZy1saW5rJyx7YXR0cnM6e1widG9cIjpcImFwaXMvXCIgKyAoX3ZtLnNlZS5hcGlzKSArIChfdm0uc2VlLnByb3BlcnR5ID8gKFwiL3Byb3BlcnR5L1wiICsgKF92bS5zZWUucHJvcGVydHkpKSA6IF92bS5zZWUubWV0aG9kID8gXCIvbWV0aG9kL1wiICsgKF92bS5zZWUubWV0aG9kKSArICh0eXBlb2YgX3ZtLnNlZS5pbmRleCAhPT0gJ3VuZGVmaW5lZCcgPyAoXCIvXCIgKyAoX3ZtLnNlZS5pbmRleCkpIDogJycpIDogJycpfX0sW192bS5fdihfdm0uX3MoX3ZtLnNlZS5hcGlzID8gKF92bS5zZWUuYXBpcyArIChfdm0uc2VlLnByb3BlcnR5ID8gJy4nICsgX3ZtLnNlZS5wcm9wZXJ0eSA6IF92bS5zZWUubWV0aG9kID8gJy4nICsgX3ZtLnNlZS5tZXRob2QgOiAnJykpIDogX3ZtLnN1YmplY3QpKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0uc2VlLmd1aWRlICYmICFfdm0uc2VlLmFwaXMgJiYgX3ZtLnNlZS5tYXJrKT9fYygnbWFyay10bycse2F0dHJzOntcInRvXCI6X3ZtLnNlZS5ocmVmfX0sW192bS5fdihfdm0uX3MoX3ZtLnN1YmplY3QpKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0uc2VlLmd1aWRlICYmICFfdm0uc2VlLmFwaXMgJiYgIV92bS5zZWUubWFyayAmJiBfdm0uc2VlLmlubmVyKT9fYygnbGFuZy1saW5rJyx7YXR0cnM6e1widG9cIjpfdm0uc2VlLmhyZWZ9fSxbX3ZtLl92KF92bS5fcyhfdm0uc3ViamVjdCkpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5zZWUuZ3VpZGUgJiYgIV92bS5zZWUubWFyayAmJiAhX3ZtLnNlZS5pbm5lciAmJiAhX3ZtLnNlZS5hcGlzICYmIF92bS5zZWUuaHJlZik/X2MoJ2EnLHthdHRyczp7XCJ0YXJnZXRcIjpcIl9ibGFua1wiLFwiaHJlZlwiOl92bS5vdXRlckxpbmsoX3ZtLnNlZS5ocmVmKX19LFtfdm0uX3YoX3ZtLl9zKF92bS5zdWJqZWN0KSldKTpfdm0uX2UoKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxzcGFuPlxyXG4gICAgICAgIDxsYW5nLWxpbmsgdi1pZj1cInNlZS5ndWlkZVwiIDp0bz1cImBndWlkZXMvJHsgc2VlLmd1aWRlIH1gXCI+e3sgc3ViamVjdCB9fTwvbGFuZy1saW5rPlxyXG4gICAgICAgIDxsYW5nLWxpbmsgdi1pZj1cIiFzZWUuZ3VpZGUgJiYgc2VlLmFwaXNcIiA6dG89XCJgYXBpcy8keyBzZWUuYXBpcyB9YCArIChzZWUucHJvcGVydHkgPyBgL3Byb3BlcnR5LyR7IHNlZS5wcm9wZXJ0eSB9YCA6IHNlZS5tZXRob2QgPyBgL21ldGhvZC8keyBzZWUubWV0aG9kIH1gICsgKHR5cGVvZiBzZWUuaW5kZXggIT09ICd1bmRlZmluZWQnID8gYC8keyBzZWUuaW5kZXggfWAgOiAnJykgOiAnJylcIj57eyBzZWUuYXBpcyA/IChzZWUuYXBpcyArIChzZWUucHJvcGVydHkgPyAnLicgKyBzZWUucHJvcGVydHkgOiBzZWUubWV0aG9kID8gJy4nICsgc2VlLm1ldGhvZCA6ICcnKSkgOiBzdWJqZWN0IH19PC9sYW5nLWxpbms+XHJcbiAgICAgICAgPG1hcmstdG8gdi1pZj1cIiFzZWUuZ3VpZGUgJiYgIXNlZS5hcGlzICYmIHNlZS5tYXJrXCIgOnRvPVwic2VlLmhyZWZcIj57eyBzdWJqZWN0IH19PC9tYXJrLXRvPlxyXG4gICAgICAgIDxsYW5nLWxpbmsgdi1pZj1cIiFzZWUuZ3VpZGUgJiYgIXNlZS5hcGlzICYmICFzZWUubWFyayAmJiBzZWUuaW5uZXJcIiA6dG89XCJzZWUuaHJlZlwiPnt7IHN1YmplY3QgfX08L2xhbmctbGluaz5cclxuICAgICAgICA8YSB2LWlmPVwiIXNlZS5ndWlkZSAmJiAhc2VlLm1hcmsgJiYgIXNlZS5pbm5lciAmJiAhc2VlLmFwaXMgJiYgc2VlLmhyZWZcIiB0YXJnZXQ9XCJfYmxhbmtcIiA6aHJlZj1cIm91dGVyTGluayhzZWUuaHJlZilcIj57eyBzdWJqZWN0IH19PC9hPlxyXG4gICAgPC9zcGFuPlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgXHRwcm9wczoge1xyXG4gICAgXHRcdHNlZTogT2JqZWN0LFxyXG4gICAgICAgICAgICB0aXRsZTogU3RyaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhKCkge1xyXG4gICAgXHRcdHJldHVybiB7XHJcbiAgICBcdFx0XHRkaXJlY3Rvcnk6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgXHRcdHN1YmplY3QoKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuZGlyZWN0b3J5ICYmIHRoaXMuc2VlLmd1aWRlICYmICF0aGlzLnNlZS50aXRsZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIEVudW1lcmFibGUuZmlyc3RPckRlZmF1bHQoRW51bWVyYWJsZS5maXJzdE9yRGVmYXVsdCh0aGlzLmRpcmVjdG9yeSwgeyBjaGlsZHJlbjogW10gfSwgbm9kZSA9PiBub2RlLmNvZGUgPT09ICdndWlkZXMnKS5jaGlsZHJlbiwgeyB0aXRsZTogJycgfSwgbm9kZSA9PiBub2RlLmNvZGUgPT09IHRoaXMuc2VlLmd1aWRlKS50aXRsZSB8fCB0aGlzLnNlZS5ndWlkZSB8fCB0aGlzLnRpdGxlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50aXRsZSB8fCB0aGlzLnNlZS50aXRsZSB8fCB0aGlzLnNlZS5ndWlkZSB8fCAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW91bnRlZCgpIHtcclxuICAgIFx0XHRpZiAodGhpcy5zZWUuZ3VpZGUgJiYgIXRoaXMuc2VlLnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEpzb24oWydkaXJlY3RvcnknXSkudGhlbihkaXJlY3RvcnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHR0aGlzLmRpcmVjdG9yeSA9IGRpcmVjdG9yeTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICBcdFx0b3V0ZXJMaW5rKGxpbmspIHtcclxuICAgIFx0XHRcdHJldHVybiBsaW5rID8gbGluay5yZXBsYWNlKC97bGFuZ3VhZ2V9L2lnLCB0aGlzLmxhbmcpIDogJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWUtbGluay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWUtbGluay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3NlZS1saW5rLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYTFiZGY3NCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9zZWUtbGluay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlZS1saW5rLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJzaGllbGRzXCIgOnRpdGxlPVwidGl0bGUgfHwgKChzdWJqZWN0ICYmIHN0YXR1cykgPyBzdWJqZWN0ICsgJzogJyArIHN0YXR1cyA6IChzdWJqZWN0IHx8IHN0YXR1cykpXCI+XHJcbiAgICAgICAgPHNwYW4gdi1pZj1cInN1YmplY3RcIiBjbGFzcz1cInNoaWVsZHMtc3ViamVjdFwiPnt7IHN1YmplY3QgfX08L3NwYW4+PHNwYW4gdi1pZj1cInN0YXR1c1wiIGNsYXNzPVwic2hpZWxkcy1zdGF0dXNcIiA6Y2xhc3M9XCJjb2xvclwiPnt7IHN0YXR1cyB9fTwvc3Bhbj5cclxuICAgIDwvc3Bhbj5cclxuPC90ZW1wbGF0ZT5cclxuPHN0eWxlIGxhbmc9XCJzYXNzXCI+XHJcbi5zaGllbGRzXHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcclxuICAgIGhlaWdodDogMTZweFxyXG4gICAgbGluZS1oZWlnaHQ6IDE2cHhcclxuICAgIGNvbG9yOiB3aGl0ZVxyXG4gICAgZm9udC1zaXplOiAxMnB4XHJcbiAgICBjdXJzb3I6IGRlZmF1bHRcclxuICAgID4gc3BhbjpmaXJzdC1jaGlsZFxyXG4gICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDNweFxyXG4gICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDNweFxyXG4gICAgPiBzcGFuOmxhc3QtY2hpbGRcclxuICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDNweFxyXG4gICAgPiAuc2hpZWxkcy1zdWJqZWN0XHJcbiAgICAgICAgcGFkZGluZzogM3B4XHJcbiAgICAgICAgdGV4dC1zaGFkb3c6IDAgMXB4IDFweCBibGFja1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjNWY1ZjVmLCAjNGQ0ZDRkKVxyXG4gICAgPiAuc2hpZWxkcy1zdGF0dXNcclxuICAgICAgICBwYWRkaW5nOiAzcHhcclxuICAgICAgICB0ZXh0LXNoYWRvdzogMCAxcHggMXB4IGdyYXlcclxuICAgICAgICAmLnllbGxvd1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoI2RiYjMyNywgI2M5YTExNSlcclxuPC9zdHlsZT5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgIFx0cHJvcHM6IHtcclxuICAgIFx0XHRzdWJqZWN0OiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHN0YXR1czogU3RyaW5nLFxyXG4gICAgICAgICAgICBjb2xvcjogU3RyaW5nLFxyXG4gICAgICAgICAgICB0aXRsZTogU3RyaW5nXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2hpZWxkcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zaGllbGRzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vc2hpZWxkcy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OGNhOWM1ZjQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2hpZWxkcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NoaWVsZHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL3NoaWVsZHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zYXNzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwic2hpZWxkc1wiLGF0dHJzOntcInRpdGxlXCI6X3ZtLnRpdGxlIHx8ICgoX3ZtLnN1YmplY3QgJiYgX3ZtLnN0YXR1cykgPyBfdm0uc3ViamVjdCArICc6ICcgKyBfdm0uc3RhdHVzIDogKF92bS5zdWJqZWN0IHx8IF92bS5zdGF0dXMpKX19LFsoX3ZtLnN1YmplY3QpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzaGllbGRzLXN1YmplY3RcIn0sW192bS5fdihfdm0uX3MoX3ZtLnN1YmplY3QpKV0pOl92bS5fZSgpLChfdm0uc3RhdHVzKT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwic2hpZWxkcy1zdGF0dXNcIixjbGFzczpfdm0uY29sb3J9LFtfdm0uX3YoX3ZtLl9zKF92bS5zdGF0dXMpKV0pOl92bS5fZSgpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvKiFcbiAgKiB2dWUtcm91dGVyIHYzLjUuMVxuICAqIChjKSAyMDIxIEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4ndXNlIHN0cmljdCc7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmRpdGlvbikge1xuICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCAoYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGFba2V5XSA9IGJba2V5XTtcbiAgfVxuICByZXR1cm4gYVxufVxuXG4vKiAgKi9cblxudmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7XG52YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7IH07XG52YXIgY29tbWFSRSA9IC8lMkMvZztcblxuLy8gZml4ZWQgZW5jb2RlVVJJQ29tcG9uZW50IHdoaWNoIGlzIG1vcmUgY29uZm9ybWFudCB0byBSRkMzOTg2OlxuLy8gLSBlc2NhcGVzIFshJygpKl1cbi8vIC0gcHJlc2VydmUgY29tbWFzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgICAucmVwbGFjZShlbmNvZGVSZXNlcnZlUkUsIGVuY29kZVJlc2VydmVSZXBsYWNlcilcbiAgICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGUgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwiRXJyb3IgZGVjb2RpbmcgXFxcIlwiICsgc3RyICsgXCJcXFwiLiBMZWF2aW5nIGl0IGludGFjdC5cIikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWVyeSAoXG4gIHF1ZXJ5LFxuICBleHRyYVF1ZXJ5LFxuICBfcGFyc2VRdWVyeVxuKSB7XG4gIGlmICggZXh0cmFRdWVyeSA9PT0gdm9pZCAwICkgZXh0cmFRdWVyeSA9IHt9O1xuXG4gIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XG4gIHZhciBwYXJzZWRRdWVyeTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRRdWVyeSA9IHBhcnNlKHF1ZXJ5IHx8ICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTtcbiAgICBwYXJzZWRRdWVyeSA9IHt9O1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7XG4gICAgdmFyIHZhbHVlID0gZXh0cmFRdWVyeVtrZXldO1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKVxuICAgICAgPyB2YWx1ZS5tYXAoY2FzdFF1ZXJ5UGFyYW1WYWx1ZSlcbiAgICAgIDogY2FzdFF1ZXJ5UGFyYW1WYWx1ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbnZhciBjYXN0UXVlcnlQYXJhbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpKTsgfTtcblxuZnVuY3Rpb24gcGFyc2VRdWVyeSAocXVlcnkpIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHF1ZXJ5LnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG4gICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBkZWNvZGUocGFydHMuam9pbignPScpKSA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqXG4gICAgPyBPYmplY3Qua2V5cyhvYmopXG4gICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodmFsMikge1xuICAgICAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbClcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA+IDA7IH0pXG4gICAgICAuam9pbignJicpXG4gICAgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIsIG9ubHlQYXRoKSB7XG4gIGlmIChiID09PSBTVEFSVCkge1xuICAgIHJldHVybiBhID09PSBiXG4gIH0gZWxzZSBpZiAoIWIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChhLnBhdGggJiYgYi5wYXRoKSB7XG4gICAgcmV0dXJuIGEucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpID09PSBiLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSAmJiAob25seVBhdGggfHxcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIChvbmx5UGF0aCB8fCAoXG4gICAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcykpXG4gICAgICApXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiS2V5ID0gYktleXNbaV07XG4gICAgaWYgKGJLZXkgIT09IGtleSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIHF1ZXJ5IHZhbHVlcyBjYW4gYmUgbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgaWYgKGFWYWwgPT0gbnVsbCB8fCBiVmFsID09IG51bGwpIHsgcmV0dXJuIGFWYWwgPT09IGJWYWwgfVxuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJvdXRlRW50ZXJlZCAocm91dGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5tYXRjaGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJlY29yZCA9IHJvdXRlLm1hdGNoZWRbaV07XG4gICAgZm9yICh2YXIgbmFtZSBpbiByZWNvcmQuaW5zdGFuY2VzKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSByZWNvcmQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgdmFyIGNicyA9IHJlY29yZC5lbnRlcmVkQ2JzW25hbWVdO1xuICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhY2JzKSB7IGNvbnRpbnVlIH1cbiAgICAgIGRlbGV0ZSByZWNvcmQuZW50ZXJlZENic1tuYW1lXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UuX2lzQmVpbmdEZXN0cm95ZWQpIHsgY2JzW2kkMV0oaW5zdGFuY2UpOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBWaWV3ID0ge1xuICBuYW1lOiAnUm91dGVyVmlldycsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoXywgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG4gICAgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2VcbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgPyBwYXJlbnQuJHZub2RlLmRhdGEgOiB7fTtcbiAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9kaXJlY3RJbmFjdGl2ZSAmJiBwYXJlbnQuX2luYWN0aXZlKSB7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHZhciBjYWNoZWREYXRhID0gY2FjaGVbbmFtZV07XG4gICAgICB2YXIgY2FjaGVkQ29tcG9uZW50ID0gY2FjaGVkRGF0YSAmJiBjYWNoZWREYXRhLmNvbXBvbmVudDtcbiAgICAgIGlmIChjYWNoZWRDb21wb25lbnQpIHtcbiAgICAgICAgLy8gIzIzMDFcbiAgICAgICAgLy8gcGFzcyBwcm9wc1xuICAgICAgICBpZiAoY2FjaGVkRGF0YS5jb25maWdQcm9wcykge1xuICAgICAgICAgIGZpbGxQcm9wc2luRGF0YShjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNhY2hlZERhdGEucm91dGUsIGNhY2hlZERhdGEuY29uZmlnUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoKGNhY2hlZENvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW5kZXIgcHJldmlvdXMgZW1wdHkgdmlld1xuICAgICAgICByZXR1cm4gaCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWQgPSByb3V0ZS5tYXRjaGVkW2RlcHRoXTtcbiAgICB2YXIgY29tcG9uZW50ID0gbWF0Y2hlZCAmJiBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyByZW5kZXIgZW1wdHkgbm9kZSBpZiBubyBtYXRjaGVkIHJvdXRlIG9yIG5vIGNvbmZpZyBjb21wb25lbnRcbiAgICBpZiAoIW1hdGNoZWQgfHwgIWNvbXBvbmVudCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIC8vIGNhY2hlIGNvbXBvbmVudFxuICAgIGNhY2hlW25hbWVdID0geyBjb21wb25lbnQ6IGNvbXBvbmVudCB9O1xuXG4gICAgLy8gYXR0YWNoIGluc3RhbmNlIHJlZ2lzdHJhdGlvbiBob29rXG4gICAgLy8gdGhpcyB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgaW5zdGFuY2UncyBpbmplY3RlZCBsaWZlY3ljbGUgaG9va3NcbiAgICBkYXRhLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgdmFsKSB7XG4gICAgICAvLyB2YWwgY291bGQgYmUgdW5kZWZpbmVkIGZvciB1bnJlZ2lzdHJhdGlvblxuICAgICAgdmFyIGN1cnJlbnQgPSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXTtcbiAgICAgIGlmIChcbiAgICAgICAgKHZhbCAmJiBjdXJyZW50ICE9PSB2bSkgfHxcbiAgICAgICAgKCF2YWwgJiYgY3VycmVudCA9PT0gdm0pXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWxzbyByZWdpc3RlciBpbnN0YW5jZSBpbiBwcmVwYXRjaCBob29rXG4gICAgLy8gaW4gY2FzZSB0aGUgc2FtZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGFjcm9zcyBkaWZmZXJlbnQgcm91dGVzXG4gICAgOyhkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KSkucHJlcGF0Y2ggPSBmdW5jdGlvbiAoXywgdm5vZGUpIHtcbiAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGluc3RhbmNlIGluIGluaXQgaG9va1xuICAgIC8vIGluIGNhc2Uga2VwdC1hbGl2ZSBjb21wb25lbnQgYmUgYWN0aXZlZCB3aGVuIHJvdXRlcyBjaGFuZ2VkXG4gICAgZGF0YS5ob29rLmluaXQgPSBmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAhPT0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV1cbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgcm91dGUgdHJhbnNpdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpcm1lZCB0aGVuIHdlIHdlcmVuJ3RcbiAgICAgIC8vIGFibGUgdG8gY2FsbCB0aGUgY2JzIGR1cmluZyBjb25maXJtYXRpb24gYXMgdGhlIGNvbXBvbmVudCB3YXMgbm90XG4gICAgICAvLyByZWdpc3RlcmVkIHlldCwgc28gd2UgY2FsbCBpdCBoZXJlLlxuICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbmZpZ1Byb3BzID0gbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdO1xuICAgIC8vIHNhdmUgcm91dGUgYW5kIGNvbmZpZ1Byb3BzIGluIGNhY2hlXG4gICAgaWYgKGNvbmZpZ1Byb3BzKSB7XG4gICAgICBleHRlbmQoY2FjaGVbbmFtZV0sIHtcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBjb25maWdQcm9wczogY29uZmlnUHJvcHNcbiAgICAgIH0pO1xuICAgICAgZmlsbFByb3BzaW5EYXRhKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59O1xuXG5mdW5jdGlvbiBmaWxsUHJvcHNpbkRhdGEgKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKSB7XG4gIC8vIHJlc29sdmUgcHJvcHNcbiAgdmFyIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IHJlc29sdmVQcm9wcyhyb3V0ZSwgY29uZmlnUHJvcHMpO1xuICBpZiAocHJvcHNUb1Bhc3MpIHtcbiAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7XG4gICAgLy8gcGFzcyBub24tZGVjbGFyZWQgcHJvcHMgYXMgYXR0cnNcbiAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNUb1Bhc3MpIHtcbiAgICAgIGlmICghY29tcG9uZW50LnByb3BzIHx8ICEoa2V5IGluIGNvbXBvbmVudC5wcm9wcykpIHtcbiAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIGRlbGV0ZSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGggKFxuICByZWxhdGl2ZSxcbiAgYmFzZSxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTtcbiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlXG4gIH1cblxuICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHtcbiAgICByZXR1cm4gYmFzZSArIHJlbGF0aXZlXG4gIH1cblxuICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6XG4gIC8vIC0gbm90IGFwcGVuZGluZ1xuICAvLyAtIGFwcGVuZGluZyB0byB0cmFpbGluZyBzbGFzaCAobGFzdCBzZWdtZW50IGlzIGVtcHR5KVxuICBpZiAoIWFwcGVuZCB8fCAhc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aFxuICB2YXIgc2VnbWVudHMgPSByZWxhdGl2ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykge1xuICAgICAgc3RhY2sucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaFxuICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7XG4gICAgc3RhY2sudW5zaGlmdCgnJyk7XG4gIH1cblxuICByZXR1cm4gc3RhY2suam9pbignLycpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgcXVlcnkgPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgIGhhc2ggPSBwYXRoLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy9nLCAnLycpXG59XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbnZhciBwYXRoVG9SZWdleHBfMSA9IHBhdGhUb1JlZ2V4cDtcbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgY29tcGlsZV8xID0gY29tcGlsZTtcbnZhciB0b2tlbnNUb0Z1bmN0aW9uXzEgPSB0b2tlbnNUb0Z1bmN0aW9uO1xudmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDtcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJztcbiAgdmFyIHJlcztcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XTtcbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdO1xuICAgIHZhciBuYW1lID0gcmVzWzNdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdO1xuICAgIHZhciBncm91cCA9IHJlc1s1XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07XG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddO1xuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gICAgICBwYXRoID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4O1xuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlcjtcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXA7XG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpO1xuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgcm91dGUgPSAnJztcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7XG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJztcblxuICAgICAga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJztcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7XG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyO1xuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nO1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJztcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknO1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxuLy8gJGZsb3ctZGlzYWJsZS1saW5lXG52YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gZmlsbFBhcmFtcyAoXG4gIHBhdGgsXG4gIHBhcmFtcyxcbiAgcm91dGVNc2dcbikge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHRyeSB7XG4gICAgdmFyIGZpbGxlciA9XG4gICAgICByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHxcbiAgICAgIChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTtcblxuICAgIC8vIEZpeCAjMjUwNSByZXNvbHZpbmcgYXN0ZXJpc2sgcm91dGVzIHsgbmFtZTogJ25vdC1mb3VuZCcsIHBhcmFtczogeyBwYXRoTWF0Y2g6ICcvbm90LWZvdW5kJyB9fVxuICAgIC8vIGFuZCBmaXggIzMxMDYgc28gdGhhdCB5b3UgY2FuIHdvcmsgd2l0aCBsb2NhdGlvbiBkZXNjcmlwdG9yIG9iamVjdCBoYXZpbmcgcGFyYW1zLnBhdGhNYXRjaCBlcXVhbCB0byBlbXB0eSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnKSB7IHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7IH1cblxuICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEZpeCAjMzA3MiBubyB3YXJuIGlmIGBwYXRoTWF0Y2hgIGlzIHN0cmluZ1xuICAgICAgd2Fybih0eXBlb2YgcGFyYW1zLnBhdGhNYXRjaCA9PT0gJ3N0cmluZycsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkXG4gICAgZGVsZXRlIHBhcmFtc1swXTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgbmV4dCA9IGV4dGVuZCh7fSwgcmF3KTtcbiAgICB2YXIgcGFyYW1zID0gbmV4dC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV4dC5wYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMkMSA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zJDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zJDEsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciB3YXJuZWRDdXN0b21TbG90O1xudmFyIHdhcm5lZFRhZ1Byb3A7XG52YXIgd2FybmVkRXZlbnRQcm9wO1xuXG52YXIgTGluayA9IHtcbiAgbmFtZTogJ1JvdXRlckxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBjdXN0b206IEJvb2xlYW4sXG4gICAgZXhhY3Q6IEJvb2xlYW4sXG4gICAgZXhhY3RQYXRoOiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFyaWFDdXJyZW50VmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwYWdlJ1xuICAgIH0sXG4gICAgZXZlbnQ6IHtcbiAgICAgIHR5cGU6IGV2ZW50VHlwZXMsXG4gICAgICBkZWZhdWx0OiAnY2xpY2snXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuJHJvdXRlO1xuICAgIHZhciByZWYgPSByb3V0ZXIucmVzb2x2ZShcbiAgICAgIHRoaXMudG8sXG4gICAgICBjdXJyZW50LFxuICAgICAgdGhpcy5hcHBlbmRcbiAgICApO1xuICAgIHZhciBsb2NhdGlvbiA9IHJlZi5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGUgPSByZWYucm91dGU7XG4gICAgdmFyIGhyZWYgPSByZWYuaHJlZjtcblxuICAgIHZhciBjbGFzc2VzID0ge307XG4gICAgdmFyIGdsb2JhbEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzO1xuICAgIHZhciBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0V4YWN0QWN0aXZlQ2xhc3M7XG4gICAgLy8gU3VwcG9ydCBnbG9iYWwgZW1wdHkgYWN0aXZlIGNsYXNzXG4gICAgdmFyIGFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbCA/ICdyb3V0ZXItbGluay1hY3RpdmUnIDogZ2xvYmFsQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9XG4gICAgICBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgICAgPyAncm91dGVyLWxpbmstZXhhY3QtYWN0aXZlJ1xuICAgICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGFjdGl2ZUNsYXNzRmFsbGJhY2sgOiB0aGlzLmFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrXG4gICAgICAgIDogdGhpcy5leGFjdEFjdGl2ZUNsYXNzO1xuXG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSByb3V0ZS5yZWRpcmVjdGVkRnJvbVxuICAgICAgPyBjcmVhdGVSb3V0ZShudWxsLCBub3JtYWxpemVMb2NhdGlvbihyb3V0ZS5yZWRpcmVjdGVkRnJvbSksIG51bGwsIHJvdXRlcilcbiAgICAgIDogcm91dGU7XG5cbiAgICBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID0gaXNTYW1lUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCwgdGhpcy5leGFjdFBhdGgpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdCB8fCB0aGlzLmV4YWN0UGF0aFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBhcmlhQ3VycmVudFZhbHVlID0gY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA/IHRoaXMuYXJpYUN1cnJlbnRWYWx1ZSA6IG51bGw7XG5cbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xuICAgICAgICBpZiAodGhpcyQxLnJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXIucmVwbGFjZShsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24sIG5vb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBvbiA9IHsgY2xpY2s6IGd1YXJkRXZlbnQgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIG9uW2VdID0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblt0aGlzLmV2ZW50XSA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7IGNsYXNzOiBjbGFzc2VzIH07XG5cbiAgICB2YXIgc2NvcGVkU2xvdCA9XG4gICAgICAhdGhpcy4kc2NvcGVkU2xvdHMuJGhhc05vcm1hbCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgbmF2aWdhdGU6IGhhbmRsZXIsXG4gICAgICAgIGlzQWN0aXZlOiBjbGFzc2VzW2FjdGl2ZUNsYXNzXSxcbiAgICAgICAgaXNFeGFjdEFjdGl2ZTogY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgfSk7XG5cbiAgICBpZiAoc2NvcGVkU2xvdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuY3VzdG9tKSB7XG4gICAgICAgICF3YXJuZWRDdXN0b21TbG90ICYmIHdhcm4oZmFsc2UsICdJbiBWdWUgUm91dGVyIDQsIHRoZSB2LXNsb3QgQVBJIHdpbGwgYnkgZGVmYXVsdCB3cmFwIGl0cyBjb250ZW50IHdpdGggYW4gPGE+IGVsZW1lbnQuIFVzZSB0aGUgY3VzdG9tIHByb3AgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzpcXG48cm91dGVyLWxpbmsgdi1zbG90PVwieyBuYXZpZ2F0ZSwgaHJlZiB9XCIgY3VzdG9tPjwvcm91dGVyLWxpbms+XFxuJyk7XG4gICAgICAgIHdhcm5lZEN1c3RvbVNsb3QgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90WzBdXG4gICAgICB9IGVsc2UgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID4gMSB8fCAhc2NvcGVkU2xvdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoXCI8cm91dGVyLWxpbms+IHdpdGggdG89XFxcIlwiICsgKHRoaXMudG8pICsgXCJcXFwiIGlzIHRyeWluZyB0byB1c2UgYSBzY29wZWQgc2xvdCBidXQgaXQgZGlkbid0IHByb3ZpZGUgZXhhY3RseSBvbmUgY2hpbGQuIFdyYXBwaW5nIHRoZSBjb250ZW50IHdpdGggYSBzcGFuIGVsZW1lbnQuXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGVkU2xvdC5sZW5ndGggPT09IDAgPyBoKCkgOiBoKCdzcGFuJywge30sIHNjb3BlZFNsb3QpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICgndGFnJyBpbiB0aGlzLiRvcHRpb25zLnByb3BzRGF0YSAmJiAhd2FybmVkVGFnUHJvcCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiPHJvdXRlci1saW5rPidzIHRhZyBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIFJvdXRlciA0LiBVc2UgdGhlIHYtc2xvdCBBUEkgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzogaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyNyZW1vdmFsLW9mLWV2ZW50LWFuZC10YWctcHJvcHMtaW4tcm91dGVyLWxpbmsuXCJcbiAgICAgICAgKTtcbiAgICAgICAgd2FybmVkVGFnUHJvcCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoJ2V2ZW50JyBpbiB0aGlzLiRvcHRpb25zLnByb3BzRGF0YSAmJiAhd2FybmVkRXZlbnRQcm9wKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCI8cm91dGVyLWxpbms+J3MgZXZlbnQgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHRoZSB2LXNsb3QgQVBJIHRvIHJlbW92ZSB0aGlzIHdhcm5pbmc6IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZhbC1vZi1ldmVudC1hbmQtdGFnLXByb3BzLWluLXJvdXRlci1saW5rLlwiXG4gICAgICAgICk7XG4gICAgICAgIHdhcm5lZEV2ZW50UHJvcCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYsICdhcmlhLWN1cnJlbnQnOiBhcmlhQ3VycmVudFZhbHVlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IDxhPiBjaGlsZCBhbmQgYXBwbHkgbGlzdGVuZXIgYW5kIGhyZWZcbiAgICAgIHZhciBhID0gZmluZEFuY2hvcih0aGlzLiRzbG90cy5kZWZhdWx0KTtcbiAgICAgIGlmIChhKSB7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIDxhPiBpcyBhIHN0YXRpYyBub2RlXG4gICAgICAgIGEuaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFEYXRhID0gKGEuZGF0YSA9IGV4dGVuZCh7fSwgYS5kYXRhKSk7XG4gICAgICAgIGFEYXRhLm9uID0gYURhdGEub24gfHwge307XG4gICAgICAgIC8vIHRyYW5zZm9ybSBleGlzdGluZyBldmVudHMgaW4gYm90aCBvYmplY3RzIGludG8gYXJyYXlzIHNvIHdlIGNhbiBwdXNoIGxhdGVyXG4gICAgICAgIGZvciAodmFyIGV2ZW50IGluIGFEYXRhLm9uKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXIkMSA9IGFEYXRhLm9uW2V2ZW50XTtcbiAgICAgICAgICBpZiAoZXZlbnQgaW4gb24pIHtcbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50XSA9IEFycmF5LmlzQXJyYXkoaGFuZGxlciQxKSA/IGhhbmRsZXIkMSA6IFtoYW5kbGVyJDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBlbmQgbmV3IGxpc3RlbmVycyBmb3Igcm91dGVyLWxpbmtcbiAgICAgICAgZm9yICh2YXIgZXZlbnQkMSBpbiBvbikge1xuICAgICAgICAgIGlmIChldmVudCQxIGluIGFEYXRhLm9uKSB7XG4gICAgICAgICAgICAvLyBvbltldmVudF0gaXMgYWx3YXlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdLnB1c2gob25bZXZlbnQkMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhRGF0YS5vbltldmVudCQxXSA9IGhhbmRsZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFBdHRycyA9IChhLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGEuZGF0YS5hdHRycykpO1xuICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7XG4gICAgICAgIGFBdHRyc1snYXJpYS1jdXJyZW50J10gPSBhcmlhQ3VycmVudFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG9lc24ndCBoYXZlIDxhPiBjaGlsZCwgYXBwbHkgbGlzdGVuZXIgdG8gc2VsZlxuICAgICAgICBkYXRhLm9uID0gb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGhpcy50YWcsIGRhdGEsIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwIChcbiAgcm91dGVzLFxuICBvbGRQYXRoTGlzdCxcbiAgb2xkUGF0aE1hcCxcbiAgb2xkTmFtZU1hcCxcbiAgcGFyZW50Um91dGVcbikge1xuICAvLyB0aGUgcGF0aCBsaXN0IGlzIHVzZWQgdG8gY29udHJvbCBwYXRoIG1hdGNoaW5nIHByaW9yaXR5XG4gIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcbiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUsIHBhcmVudFJvdXRlKTtcbiAgfSk7XG5cbiAgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmRcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocGF0aExpc3RbaV0gPT09ICcqJykge1xuICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pO1xuICAgICAgbC0tO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIC8vIHdhcm4gaWYgcm91dGVzIGRvIG5vdCBpbmNsdWRlIGxlYWRpbmcgc2xhc2hlc1xuICAgIHZhciBmb3VuZCA9IHBhdGhMaXN0XG4gICAgLy8gY2hlY2sgZm9yIG1pc3NpbmcgbGVhZGluZyBzbGFzaFxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gcGF0aCAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJyonICYmIHBhdGguY2hhckF0KDApICE9PSAnLyc7IH0pO1xuXG4gICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBwYXRoTmFtZXMgPSBmb3VuZC5tYXAoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIChcIi0gXCIgKyBwYXRoKTsgfSkuam9pbignXFxuJyk7XG4gICAgICB3YXJuKGZhbHNlLCAoXCJOb24tbmVzdGVkIHJvdXRlcyBtdXN0IGluY2x1ZGUgYSBsZWFkaW5nIHNsYXNoIGNoYXJhY3Rlci4gRml4IHRoZSBmb2xsb3dpbmcgcm91dGVzOiBcXG5cIiArIHBhdGhOYW1lcykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aExpc3Q6IHBhdGhMaXN0LFxuICAgIHBhdGhNYXA6IHBhdGhNYXAsXG4gICAgbmFtZU1hcDogbmFtZU1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkIChcbiAgcGF0aExpc3QsXG4gIHBhdGhNYXAsXG4gIG5hbWVNYXAsXG4gIHJvdXRlLFxuICBwYXJlbnQsXG4gIG1hdGNoQXNcbikge1xuICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIHZhciBuYW1lID0gcm91dGUubmFtZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQocGF0aCAhPSBudWxsLCBcIlxcXCJwYXRoXFxcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiByb3V0ZS5jb21wb25lbnQgIT09ICdzdHJpbmcnLFxuICAgICAgXCJyb3V0ZSBjb25maWcgXFxcImNvbXBvbmVudFxcXCIgZm9yIHBhdGg6IFwiICsgKFN0cmluZyhcbiAgICAgICAgcGF0aCB8fCBuYW1lXG4gICAgICApKSArIFwiIGNhbm5vdCBiZSBhIFwiICsgXCJzdHJpbmcgaWQuIFVzZSBhbiBhY3R1YWwgY29tcG9uZW50IGluc3RlYWQuXCJcbiAgICApO1xuXG4gICAgd2FybihcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgICAhL1teXFx1MDAwMC1cXHUwMDdGXSsvLnRlc3QocGF0aCksXG4gICAgICBcIlJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIGNvbnRhaW5zIHVuZW5jb2RlZCBjaGFyYWN0ZXJzLCBtYWtlIHN1cmUgXCIgK1xuICAgICAgICBcInlvdXIgcGF0aCBpcyBjb3JyZWN0bHkgZW5jb2RlZCBiZWZvcmUgcGFzc2luZyBpdCB0byB0aGUgcm91dGVyLiBVc2UgXCIgK1xuICAgICAgICBcImVuY29kZVVSSSB0byBlbmNvZGUgc3RhdGljIHNlZ21lbnRzIG9mIHlvdXIgcGF0aC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9XG4gICAgcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgYWxpYXM6IHJvdXRlLmFsaWFzXG4gICAgICA/IHR5cGVvZiByb3V0ZS5hbGlhcyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBbcm91dGUuYWxpYXNdXG4gICAgICAgIDogcm91dGUuYWxpYXNcbiAgICAgIDogW10sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBlbnRlcmVkQ2JzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOlxuICAgICAgcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgICA/IHt9XG4gICAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKFxuICAgICAgICByb3V0ZS5uYW1lICYmXG4gICAgICAgICFyb3V0ZS5yZWRpcmVjdCAmJlxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSlcbiAgICAgICkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIChcIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29ya1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKFxuICBwYXRoLFxuICBwYXRoVG9SZWdleHBPcHRpb25zXG4pIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2FybihcbiAgICAgICAgIWtleXNba2V5Lm5hbWVdLFxuICAgICAgICAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIilcbiAgICAgICk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKFxuICBwYXRoLFxuICBwYXJlbnQsXG4gIHN0cmljdFxuKSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFJvdXRlIChwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xuICAgIHZhciBwYXJlbnQgPSAodHlwZW9mIHBhcmVudE9yUm91dGUgIT09ICdvYmplY3QnKSA/IG5hbWVNYXBbcGFyZW50T3JSb3V0ZV0gOiB1bmRlZmluZWQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY3JlYXRlUm91dGVNYXAoW3JvdXRlIHx8IHBhcmVudE9yUm91dGVdLCBwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcGFyZW50KTtcblxuICAgIC8vIGFkZCBhbGlhc2VzIG9mIHBhcmVudFxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGNyZWF0ZVJvdXRlTWFwKFxuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUgcm91dGUgaXMgZGVmaW5lZCBpZiBwYXJlbnQgaXNcbiAgICAgICAgcGFyZW50LmFsaWFzLm1hcChmdW5jdGlvbiAoYWxpYXMpIHsgcmV0dXJuICh7IHBhdGg6IGFsaWFzLCBjaGlsZHJlbjogW3JvdXRlXSB9KTsgfSksXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Um91dGVzICgpIHtcbiAgICByZXR1cm4gcGF0aExpc3QubWFwKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiBwYXRoTWFwW3BhdGhdOyB9KVxuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlOiBhZGRSb3V0ZSxcbiAgICBnZXRSb3V0ZXM6IGdldFJvdXRlcyxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGUobVtpXSkgOiBtW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSZWNvcmRQYXRoIChwYXRoLCByZWNvcmQpIHtcbiAgcmV0dXJuIHJlc29sdmVQYXRoKHBhdGgsIHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LnBhdGggOiAnLycsIHRydWUpXG59XG5cbi8qICAqL1xuXG4vLyB1c2UgVXNlciBUaW1pbmcgYXBpIChpZiBwcmVzZW50KSBmb3IgbW9yZSBhY2N1cmF0ZSBrZXkgcHJlY2lzaW9uXG52YXIgVGltZSA9XG4gIGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICAgID8gd2luZG93LnBlcmZvcm1hbmNlXG4gICAgOiBEYXRlO1xuXG5mdW5jdGlvbiBnZW5TdGF0ZUtleSAoKSB7XG4gIHJldHVybiBUaW1lLm5vdygpLnRvRml4ZWQoMylcbn1cblxudmFyIF9rZXkgPSBnZW5TdGF0ZUtleSgpO1xuXG5mdW5jdGlvbiBnZXRTdGF0ZUtleSAoKSB7XG4gIHJldHVybiBfa2V5XG59XG5cbmZ1bmN0aW9uIHNldFN0YXRlS2V5IChrZXkpIHtcbiAgcmV0dXJuIChfa2V5ID0ga2V5KVxufVxuXG4vKiAgKi9cblxudmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBzZXR1cFNjcm9sbCAoKSB7XG4gIC8vIFByZXZlbnQgYnJvd3NlciBzY3JvbGwgYmVoYXZpb3Igb24gSGlzdG9yeSBwb3BzdGF0ZVxuICBpZiAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiB3aW5kb3cuaGlzdG9yeSkge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gIH1cbiAgLy8gRml4IGZvciAjMTU4NSBmb3IgRmlyZWZveFxuICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OFxuICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aFxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RcbiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndFxuICB2YXIgcHJvdG9jb2xBbmRQYXRoID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTtcbiAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpO1xuICBzdGF0ZUNvcHkua2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlQ29weSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcFN0YXRlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVQb3BTdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2Nyb2xsIChcbiAgcm91dGVyLFxuICB0byxcbiAgZnJvbSxcbiAgaXNQb3Bcbikge1xuICBpZiAoIXJvdXRlci5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiZWhhdmlvciA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICBpZiAoIWJlaGF2aW9yKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgYmVoYXZpb3IgPT09ICdmdW5jdGlvbicsIFwic2Nyb2xsQmVoYXZpb3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgLy8gd2FpdCB1bnRpbCByZS1yZW5kZXIgZmluaXNoZXMgYmVmb3JlIHNjcm9sbGluZ1xuICByb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB2YXIgc2hvdWxkU2Nyb2xsID0gYmVoYXZpb3IuY2FsbChcbiAgICAgIHJvdXRlcixcbiAgICAgIHRvLFxuICAgICAgZnJvbSxcbiAgICAgIGlzUG9wID8gcG9zaXRpb24gOiBudWxsXG4gICAgKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGxcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUgKGUpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIGlmIChlLnN0YXRlICYmIGUuc3RhdGUua2V5KSB7XG4gICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXFxkLztcblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZ2V0RWxlbWVudEJ5SWQgd291bGQgc3RpbGwgZmFpbCBpZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgYSBtb3JlIGNvbXBsaWNhdGVkIHF1ZXJ5IGxpa2UgI21haW5bZGF0YS1hdHRyXVxuICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCBpdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBzZWxlY3QgYW4gZWxlbWVudCB3aXRoIGFuIGlkIGFuZCBhbiBleHRyYSBzZWxlY3RvclxuICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPVxuICAgICAgICBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gc2hvdWxkU2Nyb2xsLm9mZnNldFxuICAgICAgICAgIDoge307XG4gICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTtcbiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uLngsXG4gICAgICAgIHRvcDogcG9zaXRpb24ueSxcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGJlaGF2aW9yOiBzaG91bGRTY3JvbGwuYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPVxuICBpbkJyb3dzZXIgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmIChcbiAgICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgdHlwZW9mIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICB9KSgpO1xuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgICAgIHZhciBzdGF0ZUNvcHkgPSBleHRlbmQoe30sIGhpc3Rvcnkuc3RhdGUpO1xuICAgICAgc3RhdGVDb3B5LmtleSA9IGdldFN0YXRlS2V5KCk7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLy8gV2hlbiBjaGFuZ2luZyB0aGluZywgYWxzbyBlZGl0IHJvdXRlci5kLnRzXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge1xuICByZWRpcmVjdGVkOiAyLFxuICBhYm9ydGVkOiA0LFxuICBjYW5jZWxsZWQ6IDgsXG4gIGR1cGxpY2F0ZWQ6IDE2XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uUmVkaXJlY3RlZEVycm9yIChmcm9tLCB0bykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoXG4gICAgZnJvbSxcbiAgICB0byxcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUucmVkaXJlY3RlZCxcbiAgICAoXCJSZWRpcmVjdGVkIHdoZW4gZ29pbmcgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHN0cmluZ2lmeVJvdXRlKFxuICAgICAgdG9cbiAgICApKSArIFwiXFxcIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLlwiKVxuICApXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25EdXBsaWNhdGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHZhciBlcnJvciA9IGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQsXG4gICAgKFwiQXZvaWRlZCByZWR1bmRhbnQgbmF2aWdhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uOiBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIuXCIpXG4gICk7XG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdGhlIGZpcnN0IGludHJvZHVjdGlvbiBvZiBFcnJvcnNcbiAgZXJyb3IubmFtZSA9ICdOYXZpZ2F0aW9uRHVwbGljYXRlZCc7XG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihcbiAgICBmcm9tLFxuICAgIHRvLFxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5jYW5jZWxsZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHRvLmZ1bGxQYXRoKSArIFwiXFxcIiB3aXRoIGEgbmV3IG5hdmlnYXRpb24uXCIpXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkFib3J0ZWRFcnJvciAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmFib3J0ZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBhYm9ydGVkIGZyb20gXFxcIlwiICsgKGZyb20uZnVsbFBhdGgpICsgXCJcXFwiIHRvIFxcXCJcIiArICh0by5mdWxsUGF0aCkgKyBcIlxcXCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC5cIilcbiAgKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvciAoZnJvbSwgdG8sIHR5cGUsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5faXNSb3V0ZXIgPSB0cnVlO1xuICBlcnJvci5mcm9tID0gZnJvbTtcbiAgZXJyb3IudG8gPSB0bztcbiAgZXJyb3IudHlwZSA9IHR5cGU7XG5cbiAgcmV0dXJuIGVycm9yXG59XG5cbnZhciBwcm9wZXJ0aWVzVG9Mb2cgPSBbJ3BhcmFtcycsICdxdWVyeScsICdoYXNoJ107XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVJvdXRlICh0bykge1xuICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykgeyByZXR1cm4gdG8gfVxuICBpZiAoJ3BhdGgnIGluIHRvKSB7IHJldHVybiB0by5wYXRoIH1cbiAgdmFyIGxvY2F0aW9uID0ge307XG4gIHByb3BlcnRpZXNUb0xvZy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5IGluIHRvKSB7IGxvY2F0aW9uW2tleV0gPSB0b1trZXldOyB9XG4gIH0pO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24sIG51bGwsIDIpXG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IgKGVycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xXG59XG5cbmZ1bmN0aW9uIGlzTmF2aWdhdGlvbkZhaWx1cmUgKGVyciwgZXJyb3JUeXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNFcnJvcihlcnIpICYmXG4gICAgZXJyLl9pc1JvdXRlciAmJlxuICAgIChlcnJvclR5cGUgPT0gbnVsbCB8fCBlcnIudHlwZSA9PT0gZXJyb3JUeXBlKVxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlO1xuICAvLyBjYXRjaCByZWRpcmVjdCBvcHRpb24gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMDFcbiAgdHJ5IHtcbiAgICByb3V0ZSA9IHRoaXMucm91dGVyLm1hdGNoKGxvY2F0aW9uLCB0aGlzLmN1cnJlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgY2IoZSk7XG4gICAgfSk7XG4gICAgLy8gRXhjZXB0aW9uIHNob3VsZCBzdGlsbCBiZSB0aHJvd25cbiAgICB0aHJvdyBlXG4gIH1cbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG4gICAgICB0aGlzJDEucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgLy8gSW5pdGlhbCByZWRpcmVjdGlvbiBzaG91bGQgbm90IG1hcmsgdGhlIGhpc3RvcnkgYXMgcmVhZHkgeWV0XG4gICAgICAgIC8vIGJlY2F1c2UgaXQncyB0cmlnZ2VyZWQgYnkgdGhlIHJlZGlyZWN0aW9uIGluc3RlYWRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMjVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMzMzFcbiAgICAgICAgaWYgKCFpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLnJlZGlyZWN0ZWQpIHx8IHByZXYgIT09IFNUQVJUKSB7XG4gICAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gY2hhbmdlZCBhZnRlciBhZGRpbmcgZXJyb3JzIHdpdGhcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzMwNDcgYmVmb3JlIHRoYXQgY2hhbmdlLFxuICAgIC8vIHJlZGlyZWN0IGFuZCBhYm9ydGVkIG5hdmlnYXRpb24gd291bGQgcHJvZHVjZSBhbiBlcnIgPT0gbnVsbFxuICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIpICYmIGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIHZhciBsYXN0Um91dGVJbmRleCA9IHJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgdmFyIGxhc3RDdXJyZW50SW5kZXggPSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgaWYgKFxuICAgIGlzU2FtZVJvdXRlKHJvdXRlLCBjdXJyZW50KSAmJlxuICAgIC8vIGluIHRoZSBjYXNlIHRoZSByb3V0ZSBtYXAgaGFzIGJlZW4gZHluYW1pY2FsbHkgYXBwZW5kZWQgdG9cbiAgICBsYXN0Um91dGVJbmRleCA9PT0gbGFzdEN1cnJlbnRJbmRleCAmJlxuICAgIHJvdXRlLm1hdGNoZWRbbGFzdFJvdXRlSW5kZXhdID09PSBjdXJyZW50Lm1hdGNoZWRbbGFzdEN1cnJlbnRJbmRleF1cbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkR1cGxpY2F0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydChjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IoY3VycmVudCwgcm91dGUpKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25SZWRpcmVjdGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJiB0by5yZXBsYWNlKSB7XG4gICAgICAgICAgICB0aGlzJDEucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMkMS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uZmlybSB0cmFuc2l0aW9uIGFuZCBwYXNzIG9uIHRoZSB2YWx1ZVxuICAgICAgICAgIG5leHQodG8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhYm9ydChlKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkKTtcbiAgICB2YXIgcXVldWUgPSBlbnRlckd1YXJkcy5jb25jYXQodGhpcyQxLnJvdXRlci5yZXNvbHZlSG9va3MpO1xuICAgIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSlcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBlbXB0eVxufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIC8vIGNsZWFuIHVwIGV2ZW50IGxpc3RlbmVyc1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjM0MVxuICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjbGVhbnVwTGlzdGVuZXIpIHtcbiAgICBjbGVhbnVwTGlzdGVuZXIoKTtcbiAgfSk7XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG5cbiAgLy8gcmVzZXQgY3VycmVudCBoaXN0b3J5IHJvdXRlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMjk0XG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgKVxufVxuXG5mdW5jdGlvbiBiaW5kRW50ZXJHdWFyZCAoXG4gIGd1YXJkLFxuICBtYXRjaCxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoIW1hdGNoLmVudGVyZWRDYnNba2V5XSkge1xuICAgICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XS5wdXNoKGNiKTtcbiAgICAgIH1cbiAgICAgIG5leHQoY2IpO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB0aGlzLl9zdGFydExvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcy5iYXNlKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gdGhpcyQxLl9zdGFydExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVJvdXRpbmdFdmVudCk7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVSb3V0aW5nRXZlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgaWYgKGJhc2UgJiYgcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoYmFzZS50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaFxufVxuXG4vKiAgKi9cblxudmFyIEhhc2hIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBIYXNoSGlzdG9yeSAocm91dGVyLCBiYXNlLCBmYWxsYmFjaykge1xuICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIC8vIGNoZWNrIGhpc3RvcnkgZmFsbGJhY2sgZGVlcGxpbmtpbmdcbiAgICBpZiAoZmFsbGJhY2sgJiYgY2hlY2tGYWxsYmFjayh0aGlzLmJhc2UpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW5zdXJlU2xhc2goKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhhc2hIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGFzaEhpc3Rvcnk7XG5cbiAgLy8gdGhpcyBpcyBkZWxheWVkIHVudGlsIHRoZSBhcHAgbW91bnRzXG4gIC8vIHRvIGF2b2lkIHRoZSBoYXNoY2hhbmdlIGxpc3RlbmVyIGJlaW5nIGZpcmVkIHRvbyBlYXJseVxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZXZlbnRUeXBlID0gc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgaGFuZGxlUm91dGluZ0V2ZW50XG4gICAgKTtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlUm91dGluZ0V2ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICBwdXNoSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoO1xuICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHtcbiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SGFzaCgpXG4gIH07XG5cbiAgcmV0dXJuIEhhc2hIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2sgKGJhc2UpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7XG4gIGlmICghL15cXC8jLy50ZXN0KGxvY2F0aW9uKSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGNsZWFuUGF0aChiYXNlICsgJy8jJyArIGxvY2F0aW9uKSk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCAoKSB7XG4gIHZhciBwYXRoID0gZ2V0SGFzaCgpO1xuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoICgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgLy8gZW1wdHkgcGF0aFxuICBpZiAoaW5kZXggPCAwKSB7IHJldHVybiAnJyB9XG5cbiAgaHJlZiA9IGhyZWYuc2xpY2UoaW5kZXggKyAxKTtcblxuICByZXR1cm4gaHJlZlxufVxuXG5mdW5jdGlvbiBnZXRVcmwgKHBhdGgpIHtcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGkgPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjtcbiAgcmV0dXJuIChiYXNlICsgXCIjXCIgKyBwYXRoKVxufVxuXG5mdW5jdGlvbiBwdXNoSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICBwdXNoU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcmVwbGFjZVN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoZ2V0VXJsKHBhdGgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gQWJzdHJhY3RIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgQWJzdHJhY3RIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIHRoaXMkMS5pbmRleCsrO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjtcbiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07XG4gICAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICAgIHJvdXRlLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldiA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQpKSB7XG4gICAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLydcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAoKSB7XG4gICAgLy8gbm9vcFxuICB9O1xuXG4gIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuLyogICovXG5cbnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIgKG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdGhpcy5hcHAgPSBudWxsO1xuICB0aGlzLmFwcHMgPSBbXTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5iZWZvcmVIb29rcyA9IFtdO1xuICB0aGlzLnJlc29sdmVIb29rcyA9IFtdO1xuICB0aGlzLmFmdGVySG9va3MgPSBbXTtcbiAgdGhpcy5tYXRjaGVyID0gY3JlYXRlTWF0Y2hlcihvcHRpb25zLnJvdXRlcyB8fCBbXSwgdGhpcyk7XG5cbiAgdmFyIG1vZGUgPSBvcHRpb25zLm1vZGUgfHwgJ2hhc2gnO1xuICB0aGlzLmZhbGxiYWNrID1cbiAgICBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGFzc2VydChcbiAgICAgIGluc3RhbGwuaW5zdGFsbGVkLFxuICAgICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgICAgIFwiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuXCJcbiAgICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuXG4gICAgaWYgKCF0aGlzJDEuYXBwKSB7IHRoaXMkMS5oaXN0b3J5LnRlYXJkb3duKCk7IH1cbiAgfSk7XG5cbiAgLy8gbWFpbiBhcHAgcHJldmlvdXNseSBpbml0aWFsaXplZFxuICAvLyByZXR1cm4gYXMgd2UgZG9uJ3QgbmVlZCB0byBzZXQgdXAgbmV3IGhpc3RvcnkgbGlzdGVuZXJcbiAgaWYgKHRoaXMuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICB2YXIgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhUTUw1SGlzdG9yeSB8fCBoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgaGFuZGxlSW5pdGlhbFNjcm9sbCA9IGZ1bmN0aW9uIChyb3V0ZU9yRXJyb3IpIHtcbiAgICAgIHZhciBmcm9tID0gaGlzdG9yeS5jdXJyZW50O1xuICAgICAgdmFyIGV4cGVjdFNjcm9sbCA9IHRoaXMkMS5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICAgICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgICBpZiAoc3VwcG9ydHNTY3JvbGwgJiYgJ2Z1bGxQYXRoJyBpbiByb3V0ZU9yRXJyb3IpIHtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMSwgcm91dGVPckVycm9yLCBmcm9tLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocm91dGVPckVycm9yKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgICBoYW5kbGVJbml0aWFsU2Nyb2xsKHJvdXRlT3JFcnJvcik7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cExpc3RlbmVycyxcbiAgICAgIHNldHVwTGlzdGVuZXJzXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoaXMkMS5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICB0aGlzLmhpc3RvcnkuZ28obik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiBiYWNrICgpIHtcbiAgdGhpcy5nbygtMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgdGhpcy5nbygxKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyAodG8pIHtcbiAgdmFyIHJvdXRlID0gdG9cbiAgICA/IHRvLm1hdGNoZWRcbiAgICAgID8gdG9cbiAgICAgIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZVxuICAgIDogdGhpcy5jdXJyZW50Um91dGU7XG4gIGlmICghcm91dGUpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFxuICAgIFtdLFxuICAgIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbS5jb21wb25lbnRzW2tleV1cbiAgICAgIH0pXG4gICAgfSlcbiAgKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICBjdXJyZW50ID0gY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudDtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24odG8sIGN1cnJlbnQsIGFwcGVuZCwgdGhpcyk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0Um91dGVzID0gZnVuY3Rpb24gZ2V0Um91dGVzICgpIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5nZXRSb3V0ZXMoKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZSA9IGZ1bmN0aW9uIGFkZFJvdXRlIChwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xuICB0aGlzLm1hdGNoZXIuYWRkUm91dGUocGFyZW50T3JSb3V0ZSwgcm91dGUpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihmYWxzZSwgJ3JvdXRlci5hZGRSb3V0ZXMoKSBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHJvdXRlci5hZGRSb3V0ZSgpIGluc3RlYWQuJyk7XG4gIH1cbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjUuMSc7XG5WdWVSb3V0ZXIuaXNOYXZpZ2F0aW9uRmFpbHVyZSA9IGlzTmF2aWdhdGlvbkZhaWx1cmU7XG5WdWVSb3V0ZXIuTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xuVnVlUm91dGVyLlNUQVJUX0xPQ0FUSU9OID0gU1RBUlQ7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZVJvdXRlcjtcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNFswXS5ydWxlc1swXS51c2VbMl0hLi9tYWluLnNhc3NcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNTEyYjBkMDZcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTRbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2hpZWxkcy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNhc3MmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjE2NGJmMDhjXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG5pbXBvcnQgbGlzdFRvU3R5bGVzIGZyb20gJy4vbGlzdFRvU3R5bGVzJ1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3R5bGVzQ2xpZW50IChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuIiwiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Z1ZS5jb21tb24ucHJvZC5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdnVlLmNvbW1vbi5kZXYuanMnKVxufVxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xNFxuICogKGMpIDIwMTQtMjAyMSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cInVzZSBzdHJpY3RcIjt2YXIgZT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiB0KGUpe3JldHVybiBudWxsPT1lfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIG51bGwhPWV9ZnVuY3Rpb24gcihlKXtyZXR1cm4hMD09PWV9ZnVuY3Rpb24gaShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fFwic3ltYm9sXCI9PXR5cGVvZiBlfHxcImJvb2xlYW5cIj09dHlwZW9mIGV9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gbnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfXZhciBhPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gcyhlKXtyZXR1cm5cIltvYmplY3QgT2JqZWN0XVwiPT09YS5jYWxsKGUpfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9cGFyc2VGbG9hdChTdHJpbmcoZSkpO3JldHVybiB0Pj0wJiZNYXRoLmZsb29yKHQpPT09dCYmaXNGaW5pdGUoZSl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gbihlKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS50aGVuJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNhdGNofWZ1bmN0aW9uIGwoZSl7cmV0dXJuIG51bGw9PWU/XCJcIjpBcnJheS5pc0FycmF5KGUpfHxzKGUpJiZlLnRvU3RyaW5nPT09YT9KU09OLnN0cmluZ2lmeShlLG51bGwsMik6U3RyaW5nKGUpfWZ1bmN0aW9uIGYoZSl7dmFyIHQ9cGFyc2VGbG9hdChlKTtyZXR1cm4gaXNOYU4odCk/ZTp0fWZ1bmN0aW9uIHAoZSx0KXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPWUuc3BsaXQoXCIsXCIpLGk9MDtpPHIubGVuZ3RoO2krKyluW3JbaV1dPSEwO3JldHVybiB0P2Z1bmN0aW9uKGUpe3JldHVybiBuW2UudG9Mb3dlckNhc2UoKV19OmZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfX12YXIgZD1wKFwic2xvdCxjb21wb25lbnRcIiwhMCksdj1wKFwia2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXNcIik7ZnVuY3Rpb24gaChlLHQpe2lmKGUubGVuZ3RoKXt2YXIgbj1lLmluZGV4T2YodCk7aWYobj4tMSlyZXR1cm4gZS5zcGxpY2UobiwxKX19dmFyIG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiB5KGUsdCl7cmV0dXJuIG0uY2FsbChlLHQpfWZ1bmN0aW9uIGcoZSl7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHRbbl18fCh0W25dPWUobikpfX12YXIgXz0vLShcXHcpL2csYj1nKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoXyxmdW5jdGlvbihlLHQpe3JldHVybiB0P3QudG9VcHBlckNhc2UoKTpcIlwifSl9KSwkPWcoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKX0pLHc9L1xcQihbQS1aXSkvZyxDPWcoZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSh3LFwiLSQxXCIpLnRvTG93ZXJDYXNlKCl9KTt2YXIgeD1GdW5jdGlvbi5wcm90b3R5cGUuYmluZD9mdW5jdGlvbihlLHQpe3JldHVybiBlLmJpbmQodCl9OmZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoO3JldHVybiByP3I+MT9lLmFwcGx5KHQsYXJndW1lbnRzKTplLmNhbGwodCxuKTplLmNhbGwodCl9cmV0dXJuIG4uX2xlbmd0aD1lLmxlbmd0aCxufTtmdW5jdGlvbiBrKGUsdCl7dD10fHwwO2Zvcih2YXIgbj1lLmxlbmd0aC10LHI9bmV3IEFycmF5KG4pO24tLTspcltuXT1lW24rdF07cmV0dXJuIHJ9ZnVuY3Rpb24gQShlLHQpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBPKGUpe2Zvcih2YXIgdD17fSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXSYmQSh0LGVbbl0pO3JldHVybiB0fWZ1bmN0aW9uIFMoZSx0LG4pe312YXIgVD1mdW5jdGlvbihlLHQsbil7cmV0dXJuITF9LE49ZnVuY3Rpb24oZSl7cmV0dXJuIGV9O2Z1bmN0aW9uIEUoZSx0KXtpZihlPT09dClyZXR1cm4hMDt2YXIgbj1vKGUpLHI9byh0KTtpZighbnx8IXIpcmV0dXJuIW4mJiFyJiZTdHJpbmcoZSk9PT1TdHJpbmcodCk7dHJ5e3ZhciBpPUFycmF5LmlzQXJyYXkoZSksYT1BcnJheS5pc0FycmF5KHQpO2lmKGkmJmEpcmV0dXJuIGUubGVuZ3RoPT09dC5sZW5ndGgmJmUuZXZlcnkoZnVuY3Rpb24oZSxuKXtyZXR1cm4gRShlLHRbbl0pfSk7aWYoZSBpbnN0YW5jZW9mIERhdGUmJnQgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBlLmdldFRpbWUoKT09PXQuZ2V0VGltZSgpO2lmKGl8fGEpcmV0dXJuITE7dmFyIHM9T2JqZWN0LmtleXMoZSksYz1PYmplY3Qua2V5cyh0KTtyZXR1cm4gcy5sZW5ndGg9PT1jLmxlbmd0aCYmcy5ldmVyeShmdW5jdGlvbihuKXtyZXR1cm4gRShlW25dLHRbbl0pfSl9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIGooZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylpZihFKGVbbl0sdCkpcmV0dXJuIG47cmV0dXJuLTF9ZnVuY3Rpb24gRChlKXt2YXIgdD0hMTtyZXR1cm4gZnVuY3Rpb24oKXt0fHwodD0hMCxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fXZhciBMPVwiZGF0YS1zZXJ2ZXItcmVuZGVyZWRcIixJPVtcImNvbXBvbmVudFwiLFwiZGlyZWN0aXZlXCIsXCJmaWx0ZXJcIl0sTT1bXCJiZWZvcmVDcmVhdGVcIixcImNyZWF0ZWRcIixcImJlZm9yZU1vdW50XCIsXCJtb3VudGVkXCIsXCJiZWZvcmVVcGRhdGVcIixcInVwZGF0ZWRcIixcImJlZm9yZURlc3Ryb3lcIixcImRlc3Ryb3llZFwiLFwiYWN0aXZhdGVkXCIsXCJkZWFjdGl2YXRlZFwiLFwiZXJyb3JDYXB0dXJlZFwiLFwic2VydmVyUHJlZmV0Y2hcIl0sRj17b3B0aW9uTWVyZ2VTdHJhdGVnaWVzOk9iamVjdC5jcmVhdGUobnVsbCksc2lsZW50OiExLHByb2R1Y3Rpb25UaXA6ITEsZGV2dG9vbHM6ITEscGVyZm9ybWFuY2U6ITEsZXJyb3JIYW5kbGVyOm51bGwsd2FybkhhbmRsZXI6bnVsbCxpZ25vcmVkRWxlbWVudHM6W10sa2V5Q29kZXM6T2JqZWN0LmNyZWF0ZShudWxsKSxpc1Jlc2VydmVkVGFnOlQsaXNSZXNlcnZlZEF0dHI6VCxpc1Vua25vd25FbGVtZW50OlQsZ2V0VGFnTmFtZXNwYWNlOlMscGFyc2VQbGF0Zm9ybVRhZ05hbWU6TixtdXN0VXNlUHJvcDpULGFzeW5jOiEwLF9saWZlY3ljbGVIb29rczpNfSxQPS9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztmdW5jdGlvbiBSKGUsdCxuLHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOm4sZW51bWVyYWJsZTohIXIsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9dmFyIEg9bmV3IFJlZ0V4cChcIlteXCIrUC5zb3VyY2UrXCIuJF9cXFxcZF1cIik7dmFyIEIsVT1cIl9fcHJvdG9fX1wiaW57fSxWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3csej1cInVuZGVmaW5lZFwiIT10eXBlb2YgV1hFbnZpcm9ubWVudCYmISFXWEVudmlyb25tZW50LnBsYXRmb3JtLEs9eiYmV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLEo9ViYmd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxxPUomJi9tc2llfHRyaWRlbnQvLnRlc3QoSiksVz1KJiZKLmluZGV4T2YoXCJtc2llIDkuMFwiKT4wLFo9SiYmSi5pbmRleE9mKFwiZWRnZS9cIik+MCxHPShKJiZKLmluZGV4T2YoXCJhbmRyb2lkXCIpLEomJi9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChKKXx8XCJpb3NcIj09PUspLFg9KEomJi9jaHJvbWVcXC9cXGQrLy50ZXN0KEopLEomJi9waGFudG9tanMvLnRlc3QoSiksSiYmSi5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pKSxZPXt9LndhdGNoLFE9ITE7aWYoVil0cnl7dmFyIGVlPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShlZSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UT0hMH19KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3QtcGFzc2l2ZVwiLG51bGwsZWUpfWNhdGNoKGUpe312YXIgdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09QiYmKEI9IVYmJiF6JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiYoZ2xvYmFsLnByb2Nlc3MmJlwic2VydmVyXCI9PT1nbG9iYWwucHJvY2Vzcy5lbnYuVlVFX0VOVikpLEJ9LG5lPVYmJndpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO2Z1bmN0aW9uIHJlKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJi9uYXRpdmUgY29kZS8udGVzdChlLnRvU3RyaW5nKCkpfXZhciBpZSxvZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZyZShTeW1ib2wpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmcmUoUmVmbGVjdC5vd25LZXlzKTtpZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0JiZyZShTZXQpP1NldDpmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLnNldD1PYmplY3QuY3JlYXRlKG51bGwpfXJldHVybiBlLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuITA9PT10aGlzLnNldFtlXX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3RoaXMuc2V0W2VdPSEwfSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCl9LGV9KCk7dmFyIGFlPVMsc2U9MCxjZT1mdW5jdGlvbigpe3RoaXMuaWQ9c2UrKyx0aGlzLnN1YnM9W119O2NlLnByb3RvdHlwZS5hZGRTdWI9ZnVuY3Rpb24oZSl7dGhpcy5zdWJzLnB1c2goZSl9LGNlLnByb3RvdHlwZS5yZW1vdmVTdWI9ZnVuY3Rpb24oZSl7aCh0aGlzLnN1YnMsZSl9LGNlLnByb3RvdHlwZS5kZXBlbmQ9ZnVuY3Rpb24oKXtjZS50YXJnZXQmJmNlLnRhcmdldC5hZGREZXAodGhpcyl9LGNlLnByb3RvdHlwZS5ub3RpZnk9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5zdWJzLnNsaWNlKCksdD0wLG49ZS5sZW5ndGg7dDxuO3QrKyllW3RdLnVwZGF0ZSgpfSxjZS50YXJnZXQ9bnVsbDt2YXIgdWU9W107ZnVuY3Rpb24gbGUoZSl7dWUucHVzaChlKSxjZS50YXJnZXQ9ZX1mdW5jdGlvbiBmZSgpe3VlLnBvcCgpLGNlLnRhcmdldD11ZVt1ZS5sZW5ndGgtMV19dmFyIHBlPWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEscyl7dGhpcy50YWc9ZSx0aGlzLmRhdGE9dCx0aGlzLmNoaWxkcmVuPW4sdGhpcy50ZXh0PXIsdGhpcy5lbG09aSx0aGlzLm5zPXZvaWQgMCx0aGlzLmNvbnRleHQ9byx0aGlzLmZuQ29udGV4dD12b2lkIDAsdGhpcy5mbk9wdGlvbnM9dm9pZCAwLHRoaXMuZm5TY29wZUlkPXZvaWQgMCx0aGlzLmtleT10JiZ0LmtleSx0aGlzLmNvbXBvbmVudE9wdGlvbnM9YSx0aGlzLmNvbXBvbmVudEluc3RhbmNlPXZvaWQgMCx0aGlzLnBhcmVudD12b2lkIDAsdGhpcy5yYXc9ITEsdGhpcy5pc1N0YXRpYz0hMSx0aGlzLmlzUm9vdEluc2VydD0hMCx0aGlzLmlzQ29tbWVudD0hMSx0aGlzLmlzQ2xvbmVkPSExLHRoaXMuaXNPbmNlPSExLHRoaXMuYXN5bmNGYWN0b3J5PXMsdGhpcy5hc3luY01ldGE9dm9pZCAwLHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyPSExfSxkZT17Y2hpbGQ6e2NvbmZpZ3VyYWJsZTohMH19O2RlLmNoaWxkLmdldD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwZS5wcm90b3R5cGUsZGUpO3ZhciB2ZT1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT1cIlwiKTt2YXIgdD1uZXcgcGU7cmV0dXJuIHQudGV4dD1lLHQuaXNDb21tZW50PSEwLHR9O2Z1bmN0aW9uIGhlKGUpe3JldHVybiBuZXcgcGUodm9pZCAwLHZvaWQgMCx2b2lkIDAsU3RyaW5nKGUpKX1mdW5jdGlvbiBtZShlKXt2YXIgdD1uZXcgcGUoZS50YWcsZS5kYXRhLGUuY2hpbGRyZW4mJmUuY2hpbGRyZW4uc2xpY2UoKSxlLnRleHQsZS5lbG0sZS5jb250ZXh0LGUuY29tcG9uZW50T3B0aW9ucyxlLmFzeW5jRmFjdG9yeSk7cmV0dXJuIHQubnM9ZS5ucyx0LmlzU3RhdGljPWUuaXNTdGF0aWMsdC5rZXk9ZS5rZXksdC5pc0NvbW1lbnQ9ZS5pc0NvbW1lbnQsdC5mbkNvbnRleHQ9ZS5mbkNvbnRleHQsdC5mbk9wdGlvbnM9ZS5mbk9wdGlvbnMsdC5mblNjb3BlSWQ9ZS5mblNjb3BlSWQsdC5hc3luY01ldGE9ZS5hc3luY01ldGEsdC5pc0Nsb25lZD0hMCx0fXZhciB5ZT1BcnJheS5wcm90b3R5cGUsZ2U9T2JqZWN0LmNyZWF0ZSh5ZSk7W1wicHVzaFwiLFwicG9wXCIsXCJzaGlmdFwiLFwidW5zaGlmdFwiLFwic3BsaWNlXCIsXCJzb3J0XCIsXCJyZXZlcnNlXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9eWVbZV07UihnZSxlLGZ1bmN0aW9uKCl7Zm9yKHZhciBuPVtdLHI9YXJndW1lbnRzLmxlbmd0aDtyLS07KW5bcl09YXJndW1lbnRzW3JdO3ZhciBpLG89dC5hcHBseSh0aGlzLG4pLGE9dGhpcy5fX29iX187c3dpdGNoKGUpe2Nhc2VcInB1c2hcIjpjYXNlXCJ1bnNoaWZ0XCI6aT1uO2JyZWFrO2Nhc2VcInNwbGljZVwiOmk9bi5zbGljZSgyKX1yZXR1cm4gaSYmYS5vYnNlcnZlQXJyYXkoaSksYS5kZXAubm90aWZ5KCksb30pfSk7dmFyIF9lPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGdlKSxiZT0hMDtmdW5jdGlvbiAkZShlKXtiZT1lfXZhciB3ZT1mdW5jdGlvbihlKXt2YXIgdDt0aGlzLnZhbHVlPWUsdGhpcy5kZXA9bmV3IGNlLHRoaXMudm1Db3VudD0wLFIoZSxcIl9fb2JfX1wiLHRoaXMpLEFycmF5LmlzQXJyYXkoZSk/KFU/KHQ9Z2UsZS5fX3Byb3RvX189dCk6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj0wLGk9bi5sZW5ndGg7cjxpO3IrKyl7dmFyIG89bltyXTtSKGUsbyx0W29dKX19KGUsZ2UsX2UpLHRoaXMub2JzZXJ2ZUFycmF5KGUpKTp0aGlzLndhbGsoZSl9O2Z1bmN0aW9uIENlKGUsdCl7dmFyIG47aWYobyhlKSYmIShlIGluc3RhbmNlb2YgcGUpKXJldHVybiB5KGUsXCJfX29iX19cIikmJmUuX19vYl9fIGluc3RhbmNlb2Ygd2U/bj1lLl9fb2JfXzpiZSYmIXRlKCkmJihBcnJheS5pc0FycmF5KGUpfHxzKGUpKSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShlKSYmIWUuX2lzVnVlJiYobj1uZXcgd2UoZSkpLHQmJm4mJm4udm1Db3VudCsrLG59ZnVuY3Rpb24geGUoZSx0LG4scixpKXt2YXIgbz1uZXcgY2UsYT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCk7aWYoIWF8fCExIT09YS5jb25maWd1cmFibGUpe3ZhciBzPWEmJmEuZ2V0LGM9YSYmYS5zZXQ7cyYmIWN8fDIhPT1hcmd1bWVudHMubGVuZ3RofHwobj1lW3RdKTt2YXIgdT0haSYmQ2Uobik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9cz9zLmNhbGwoZSk6bjtyZXR1cm4gY2UudGFyZ2V0JiYoby5kZXBlbmQoKSx1JiYodS5kZXAuZGVwZW5kKCksQXJyYXkuaXNBcnJheSh0KSYmZnVuY3Rpb24gZSh0KXtmb3IodmFyIG49dm9pZCAwLHI9MCxpPXQubGVuZ3RoO3I8aTtyKyspKG49dFtyXSkmJm4uX19vYl9fJiZuLl9fb2JfXy5kZXAuZGVwZW5kKCksQXJyYXkuaXNBcnJheShuKSYmZShuKX0odCkpKSx0fSxzZXQ6ZnVuY3Rpb24odCl7dmFyIHI9cz9zLmNhbGwoZSk6bjt0PT09cnx8dCE9dCYmciE9cnx8cyYmIWN8fChjP2MuY2FsbChlLHQpOm49dCx1PSFpJiZDZSh0KSxvLm5vdGlmeSgpKX19KX19ZnVuY3Rpb24ga2UoZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkoZSkmJmModCkpcmV0dXJuIGUubGVuZ3RoPU1hdGgubWF4KGUubGVuZ3RoLHQpLGUuc3BsaWNlKHQsMSxuKSxuO2lmKHQgaW4gZSYmISh0IGluIE9iamVjdC5wcm90b3R5cGUpKXJldHVybiBlW3RdPW4sbjt2YXIgcj1lLl9fb2JfXztyZXR1cm4gZS5faXNWdWV8fHImJnIudm1Db3VudD9uOnI/KHhlKHIudmFsdWUsdCxuKSxyLmRlcC5ub3RpZnkoKSxuKTooZVt0XT1uLG4pfWZ1bmN0aW9uIEFlKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSYmYyh0KSllLnNwbGljZSh0LDEpO2Vsc2V7dmFyIG49ZS5fX29iX187ZS5faXNWdWV8fG4mJm4udm1Db3VudHx8eShlLHQpJiYoZGVsZXRlIGVbdF0sbiYmbi5kZXAubm90aWZ5KCkpfX13ZS5wcm90b3R5cGUud2Fsaz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7bisrKXhlKGUsdFtuXSl9LHdlLnByb3RvdHlwZS5vYnNlcnZlQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aDt0PG47dCsrKUNlKGVbdF0pfTt2YXIgT2U9Ri5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7ZnVuY3Rpb24gU2UoZSx0KXtpZighdClyZXR1cm4gZTtmb3IodmFyIG4scixpLG89b2U/UmVmbGVjdC5vd25LZXlzKHQpOk9iamVjdC5rZXlzKHQpLGE9MDthPG8ubGVuZ3RoO2ErKylcIl9fb2JfX1wiIT09KG49b1thXSkmJihyPWVbbl0saT10W25dLHkoZSxuKT9yIT09aSYmcyhyKSYmcyhpKSYmU2UocixpKTprZShlLG4saSkpO3JldHVybiBlfWZ1bmN0aW9uIFRlKGUsdCxuKXtyZXR1cm4gbj9mdW5jdGlvbigpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5jYWxsKG4sbik6dCxpPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZS5jYWxsKG4sbik6ZTtyZXR1cm4gcj9TZShyLGkpOml9OnQ/ZT9mdW5jdGlvbigpe3JldHVybiBTZShcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QuY2FsbCh0aGlzLHRoaXMpOnQsXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmNhbGwodGhpcyx0aGlzKTplKX06dDplfWZ1bmN0aW9uIE5lKGUsdCl7dmFyIG49dD9lP2UuY29uY2F0KHQpOkFycmF5LmlzQXJyYXkodCk/dDpbdF06ZTtyZXR1cm4gbj9mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbj0wO248ZS5sZW5ndGg7bisrKS0xPT09dC5pbmRleE9mKGVbbl0pJiZ0LnB1c2goZVtuXSk7cmV0dXJuIHR9KG4pOm59ZnVuY3Rpb24gRWUoZSx0LG4scil7dmFyIGk9T2JqZWN0LmNyZWF0ZShlfHxudWxsKTtyZXR1cm4gdD9BKGksdCk6aX1PZS5kYXRhPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbj9UZShlLHQsbik6dCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOlRlKGUsdCl9LE0uZm9yRWFjaChmdW5jdGlvbihlKXtPZVtlXT1OZX0pLEkuZm9yRWFjaChmdW5jdGlvbihlKXtPZVtlK1wic1wiXT1FZX0pLE9lLndhdGNoPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGU9PT1ZJiYoZT12b2lkIDApLHQ9PT1ZJiYodD12b2lkIDApLCF0KXJldHVybiBPYmplY3QuY3JlYXRlKGV8fG51bGwpO2lmKCFlKXJldHVybiB0O3ZhciBpPXt9O2Zvcih2YXIgbyBpbiBBKGksZSksdCl7dmFyIGE9aVtvXSxzPXRbb107YSYmIUFycmF5LmlzQXJyYXkoYSkmJihhPVthXSksaVtvXT1hP2EuY29uY2F0KHMpOkFycmF5LmlzQXJyYXkocyk/czpbc119cmV0dXJuIGl9LE9lLnByb3BzPU9lLm1ldGhvZHM9T2UuaW5qZWN0PU9lLmNvbXB1dGVkPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKCFlKXJldHVybiB0O3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIEEoaSxlKSx0JiZBKGksdCksaX0sT2UucHJvdmlkZT1UZTt2YXIgamU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD9lOnR9O2Z1bmN0aW9uIERlKGUsdCxuKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodD10Lm9wdGlvbnMpLGZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5wcm9wcztpZihuKXt2YXIgcixpLG89e307aWYoQXJyYXkuaXNBcnJheShuKSlmb3Iocj1uLmxlbmd0aDtyLS07KVwic3RyaW5nXCI9PXR5cGVvZihpPW5bcl0pJiYob1tiKGkpXT17dHlwZTpudWxsfSk7ZWxzZSBpZihzKG4pKWZvcih2YXIgYSBpbiBuKWk9blthXSxvW2IoYSldPXMoaSk/aTp7dHlwZTppfTtlLnByb3BzPW99fSh0KSxmdW5jdGlvbihlLHQpe3ZhciBuPWUuaW5qZWN0O2lmKG4pe3ZhciByPWUuaW5qZWN0PXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspcltuW2ldXT17ZnJvbTpuW2ldfTtlbHNlIGlmKHMobikpZm9yKHZhciBvIGluIG4pe3ZhciBhPW5bb107cltvXT1zKGEpP0Eoe2Zyb206b30sYSk6e2Zyb206YX19fX0odCksZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kaXJlY3RpdmVzO2lmKHQpZm9yKHZhciBuIGluIHQpe3ZhciByPXRbbl07XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKHRbbl09e2JpbmQ6cix1cGRhdGU6cn0pfX0odCksIXQuX2Jhc2UmJih0LmV4dGVuZHMmJihlPURlKGUsdC5leHRlbmRzLG4pKSx0Lm1peGlucykpZm9yKHZhciByPTAsaT10Lm1peGlucy5sZW5ndGg7cjxpO3IrKyllPURlKGUsdC5taXhpbnNbcl0sbik7dmFyIG8sYT17fTtmb3IobyBpbiBlKWMobyk7Zm9yKG8gaW4gdCl5KGUsbyl8fGMobyk7ZnVuY3Rpb24gYyhyKXt2YXIgaT1PZVtyXXx8amU7YVtyXT1pKGVbcl0sdFtyXSxuLHIpfXJldHVybiBhfWZ1bmN0aW9uIExlKGUsdCxuLHIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXt2YXIgaT1lW3RdO2lmKHkoaSxuKSlyZXR1cm4gaVtuXTt2YXIgbz1iKG4pO2lmKHkoaSxvKSlyZXR1cm4gaVtvXTt2YXIgYT0kKG8pO3JldHVybiB5KGksYSk/aVthXTppW25dfHxpW29dfHxpW2FdfX1mdW5jdGlvbiBJZShlLHQsbixyKXt2YXIgaT10W2VdLG89IXkobixlKSxhPW5bZV0scz1SZShCb29sZWFuLGkudHlwZSk7aWYocz4tMSlpZihvJiYheShpLFwiZGVmYXVsdFwiKSlhPSExO2Vsc2UgaWYoXCJcIj09PWF8fGE9PT1DKGUpKXt2YXIgYz1SZShTdHJpbmcsaS50eXBlKTsoYzwwfHxzPGMpJiYoYT0hMCl9aWYodm9pZCAwPT09YSl7YT1mdW5jdGlvbihlLHQsbil7aWYoIXkodCxcImRlZmF1bHRcIikpcmV0dXJuO3ZhciByPXQuZGVmYXVsdDtpZihlJiZlLiRvcHRpb25zLnByb3BzRGF0YSYmdm9pZCAwPT09ZS4kb3B0aW9ucy5wcm9wc0RhdGFbbl0mJnZvaWQgMCE9PWUuX3Byb3BzW25dKXJldHVybiBlLl9wcm9wc1tuXTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZcIkZ1bmN0aW9uXCIhPT1GZSh0LnR5cGUpP3IuY2FsbChlKTpyfShyLGksZSk7dmFyIHU9YmU7JGUoITApLENlKGEpLCRlKHUpfXJldHVybiBhfXZhciBNZT0vXlxccypmdW5jdGlvbiAoXFx3KykvO2Z1bmN0aW9uIEZlKGUpe3ZhciB0PWUmJmUudG9TdHJpbmcoKS5tYXRjaChNZSk7cmV0dXJuIHQ/dFsxXTpcIlwifWZ1bmN0aW9uIFBlKGUsdCl7cmV0dXJuIEZlKGUpPT09RmUodCl9ZnVuY3Rpb24gUmUoZSx0KXtpZighQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gUGUodCxlKT8wOi0xO2Zvcih2YXIgbj0wLHI9dC5sZW5ndGg7bjxyO24rKylpZihQZSh0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIEhlKGUsdCxuKXtsZSgpO3RyeXtpZih0KWZvcih2YXIgcj10O3I9ci4kcGFyZW50Oyl7dmFyIGk9ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKGkpZm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspdHJ5e2lmKCExPT09aVtvXS5jYWxsKHIsZSx0LG4pKXJldHVybn1jYXRjaChlKXtVZShlLHIsXCJlcnJvckNhcHR1cmVkIGhvb2tcIil9fVVlKGUsdCxuKX1maW5hbGx5e2ZlKCl9fWZ1bmN0aW9uIEJlKGUsdCxuLHIsaSl7dmFyIG87dHJ5eyhvPW4/ZS5hcHBseSh0LG4pOmUuY2FsbCh0KSkmJiFvLl9pc1Z1ZSYmdShvKSYmIW8uX2hhbmRsZWQmJihvLmNhdGNoKGZ1bmN0aW9uKGUpe3JldHVybiBIZShlLHIsaStcIiAoUHJvbWlzZS9hc3luYylcIil9KSxvLl9oYW5kbGVkPSEwKX1jYXRjaChlKXtIZShlLHIsaSl9cmV0dXJuIG99ZnVuY3Rpb24gVWUoZSx0LG4pe2lmKEYuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gRi5lcnJvckhhbmRsZXIuY2FsbChudWxsLGUsdCxuKX1jYXRjaCh0KXt0IT09ZSYmVmUodCxudWxsLFwiY29uZmlnLmVycm9ySGFuZGxlclwiKX1WZShlLHQsbil9ZnVuY3Rpb24gVmUoZSx0LG4pe2lmKCFWJiYhenx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUpdGhyb3cgZTtjb25zb2xlLmVycm9yKGUpfXZhciB6ZSxLZT0hMSxKZT1bXSxxZT0hMTtmdW5jdGlvbiBXZSgpe3FlPSExO3ZhciBlPUplLnNsaWNlKDApO0plLmxlbmd0aD0wO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0oKX1pZihcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmcmUoUHJvbWlzZSkpe3ZhciBaZT1Qcm9taXNlLnJlc29sdmUoKTt6ZT1mdW5jdGlvbigpe1plLnRoZW4oV2UpLEcmJnNldFRpbWVvdXQoUyl9LEtlPSEwfWVsc2UgaWYocXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXJ8fCFyZShNdXRhdGlvbk9ic2VydmVyKSYmXCJbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl1cIiE9PU11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSl6ZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZyZShzZXRJbW1lZGlhdGUpP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKFdlKX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KFdlLDApfTtlbHNle3ZhciBHZT0xLFhlPW5ldyBNdXRhdGlvbk9ic2VydmVyKFdlKSxZZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoR2UpKTtYZS5vYnNlcnZlKFllLHtjaGFyYWN0ZXJEYXRhOiEwfSksemU9ZnVuY3Rpb24oKXtHZT0oR2UrMSklMixZZS5kYXRhPVN0cmluZyhHZSl9LEtlPSEwfWZ1bmN0aW9uIFFlKGUsdCl7dmFyIG47aWYoSmUucHVzaChmdW5jdGlvbigpe2lmKGUpdHJ5e2UuY2FsbCh0KX1jYXRjaChlKXtIZShlLHQsXCJuZXh0VGlja1wiKX1lbHNlIG4mJm4odCl9KSxxZXx8KHFlPSEwLHplKCkpLCFlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7bj1lfSl9dmFyIGV0PW5ldyBpZTtmdW5jdGlvbiB0dChlKXshZnVuY3Rpb24gZSh0LG4pe3ZhciByLGk7dmFyIGE9QXJyYXkuaXNBcnJheSh0KTtpZighYSYmIW8odCl8fE9iamVjdC5pc0Zyb3plbih0KXx8dCBpbnN0YW5jZW9mIHBlKXJldHVybjtpZih0Ll9fb2JfXyl7dmFyIHM9dC5fX29iX18uZGVwLmlkO2lmKG4uaGFzKHMpKXJldHVybjtuLmFkZChzKX1pZihhKWZvcihyPXQubGVuZ3RoO3ItLTspZSh0W3JdLG4pO2Vsc2UgZm9yKGk9T2JqZWN0LmtleXModCkscj1pLmxlbmd0aDtyLS07KWUodFtpW3JdXSxuKX0oZSxldCksZXQuY2xlYXIoKX12YXIgbnQ9ZyhmdW5jdGlvbihlKXt2YXIgdD1cIiZcIj09PWUuY2hhckF0KDApLG49XCJ+XCI9PT0oZT10P2Uuc2xpY2UoMSk6ZSkuY2hhckF0KDApLHI9XCIhXCI9PT0oZT1uP2Uuc2xpY2UoMSk6ZSkuY2hhckF0KDApO3JldHVybntuYW1lOmU9cj9lLnNsaWNlKDEpOmUsb25jZTpuLGNhcHR1cmU6cixwYXNzaXZlOnR9fSk7ZnVuY3Rpb24gcnQoZSx0KXtmdW5jdGlvbiBuKCl7dmFyIGU9YXJndW1lbnRzLHI9bi5mbnM7aWYoIUFycmF5LmlzQXJyYXkocikpcmV0dXJuIEJlKHIsbnVsbCxhcmd1bWVudHMsdCxcInYtb24gaGFuZGxlclwiKTtmb3IodmFyIGk9ci5zbGljZSgpLG89MDtvPGkubGVuZ3RoO28rKylCZShpW29dLG51bGwsZSx0LFwidi1vbiBoYW5kbGVyXCIpfXJldHVybiBuLmZucz1lLG59ZnVuY3Rpb24gaXQoZSxuLGksbyxhLHMpe3ZhciBjLHUsbCxmO2ZvcihjIGluIGUpdT1lW2NdLGw9bltjXSxmPW50KGMpLHQodSl8fCh0KGwpPyh0KHUuZm5zKSYmKHU9ZVtjXT1ydCh1LHMpKSxyKGYub25jZSkmJih1PWVbY109YShmLm5hbWUsdSxmLmNhcHR1cmUpKSxpKGYubmFtZSx1LGYuY2FwdHVyZSxmLnBhc3NpdmUsZi5wYXJhbXMpKTp1IT09bCYmKGwuZm5zPXUsZVtjXT1sKSk7Zm9yKGMgaW4gbil0KGVbY10pJiZvKChmPW50KGMpKS5uYW1lLG5bY10sZi5jYXB0dXJlKX1mdW5jdGlvbiBvdChlLGksbyl7dmFyIGE7ZSBpbnN0YW5jZW9mIHBlJiYoZT1lLmRhdGEuaG9va3x8KGUuZGF0YS5ob29rPXt9KSk7dmFyIHM9ZVtpXTtmdW5jdGlvbiBjKCl7by5hcHBseSh0aGlzLGFyZ3VtZW50cyksaChhLmZucyxjKX10KHMpP2E9cnQoW2NdKTpuKHMuZm5zKSYmcihzLm1lcmdlZCk/KGE9cykuZm5zLnB1c2goYyk6YT1ydChbcyxjXSksYS5tZXJnZWQ9ITAsZVtpXT1hfWZ1bmN0aW9uIGF0KGUsdCxyLGksbyl7aWYobih0KSl7aWYoeSh0LHIpKXJldHVybiBlW3JdPXRbcl0sb3x8ZGVsZXRlIHRbcl0sITA7aWYoeSh0LGkpKXJldHVybiBlW3JdPXRbaV0sb3x8ZGVsZXRlIHRbaV0sITB9cmV0dXJuITF9ZnVuY3Rpb24gc3QoZSl7cmV0dXJuIGkoZSk/W2hlKGUpXTpBcnJheS5pc0FycmF5KGUpP2Z1bmN0aW9uIGUobyxhKXt2YXIgcz1bXTt2YXIgYyx1LGwsZjtmb3IoYz0wO2M8by5sZW5ndGg7YysrKXQodT1vW2NdKXx8XCJib29sZWFuXCI9PXR5cGVvZiB1fHwobD1zLmxlbmd0aC0xLGY9c1tsXSxBcnJheS5pc0FycmF5KHUpP3UubGVuZ3RoPjAmJihjdCgodT1lKHUsKGF8fFwiXCIpK1wiX1wiK2MpKVswXSkmJmN0KGYpJiYoc1tsXT1oZShmLnRleHQrdVswXS50ZXh0KSx1LnNoaWZ0KCkpLHMucHVzaC5hcHBseShzLHUpKTppKHUpP2N0KGYpP3NbbF09aGUoZi50ZXh0K3UpOlwiXCIhPT11JiZzLnB1c2goaGUodSkpOmN0KHUpJiZjdChmKT9zW2xdPWhlKGYudGV4dCt1LnRleHQpOihyKG8uX2lzVkxpc3QpJiZuKHUudGFnKSYmdCh1LmtleSkmJm4oYSkmJih1LmtleT1cIl9fdmxpc3RcIithK1wiX1wiK2MrXCJfX1wiKSxzLnB1c2godSkpKTtyZXR1cm4gc30oZSk6dm9pZCAwfWZ1bmN0aW9uIGN0KGUpe3JldHVybiBuKGUpJiZuKGUudGV4dCkmJiExPT09ZS5pc0NvbW1lbnR9ZnVuY3Rpb24gdXQoZSx0KXtpZihlKXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPW9lP1JlZmxlY3Qub3duS2V5cyhlKTpPYmplY3Qua2V5cyhlKSxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBvPXJbaV07aWYoXCJfX29iX19cIiE9PW8pe2Zvcih2YXIgYT1lW29dLmZyb20scz10O3M7KXtpZihzLl9wcm92aWRlZCYmeShzLl9wcm92aWRlZCxhKSl7bltvXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcyYmXCJkZWZhdWx0XCJpbiBlW29dKXt2YXIgYz1lW29dLmRlZmF1bHQ7bltvXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2MuY2FsbCh0KTpjfX19cmV0dXJuIG59fWZ1bmN0aW9uIGx0KGUsdCl7aWYoIWV8fCFlLmxlbmd0aClyZXR1cm57fTtmb3IodmFyIG49e30scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyl7dmFyIG89ZVtyXSxhPW8uZGF0YTtpZihhJiZhLmF0dHJzJiZhLmF0dHJzLnNsb3QmJmRlbGV0ZSBhLmF0dHJzLnNsb3Qsby5jb250ZXh0IT09dCYmby5mbkNvbnRleHQhPT10fHwhYXx8bnVsbD09YS5zbG90KShuLmRlZmF1bHR8fChuLmRlZmF1bHQ9W10pKS5wdXNoKG8pO2Vsc2V7dmFyIHM9YS5zbG90LGM9bltzXXx8KG5bc109W10pO1widGVtcGxhdGVcIj09PW8udGFnP2MucHVzaC5hcHBseShjLG8uY2hpbGRyZW58fFtdKTpjLnB1c2gobyl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkoZnQpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBmdChlKXtyZXR1cm4gZS5pc0NvbW1lbnQmJiFlLmFzeW5jRmFjdG9yeXx8XCIgXCI9PT1lLnRleHR9ZnVuY3Rpb24gcHQoZSl7cmV0dXJuIGUuaXNDb21tZW50JiZlLmFzeW5jRmFjdG9yeX1mdW5jdGlvbiBkdCh0LG4scil7dmFyIGksbz1PYmplY3Qua2V5cyhuKS5sZW5ndGg+MCxhPXQ/ISF0LiRzdGFibGU6IW8scz10JiZ0LiRrZXk7aWYodCl7aWYodC5fbm9ybWFsaXplZClyZXR1cm4gdC5fbm9ybWFsaXplZDtpZihhJiZyJiZyIT09ZSYmcz09PXIuJGtleSYmIW8mJiFyLiRoYXNOb3JtYWwpcmV0dXJuIHI7Zm9yKHZhciBjIGluIGk9e30sdCl0W2NdJiZcIiRcIiE9PWNbMF0mJihpW2NdPXZ0KG4sYyx0W2NdKSl9ZWxzZSBpPXt9O2Zvcih2YXIgdSBpbiBuKXUgaW4gaXx8KGlbdV09aHQobix1KSk7cmV0dXJuIHQmJk9iamVjdC5pc0V4dGVuc2libGUodCkmJih0Ll9ub3JtYWxpemVkPWkpLFIoaSxcIiRzdGFibGVcIixhKSxSKGksXCIka2V5XCIscyksUihpLFwiJGhhc05vcm1hbFwiLG8pLGl9ZnVuY3Rpb24gdnQoZSx0LG4pe3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD9uLmFwcGx5KG51bGwsYXJndW1lbnRzKTpuKHt9KSx0PShlPWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiYhQXJyYXkuaXNBcnJheShlKT9bZV06c3QoZSkpJiZlWzBdO3JldHVybiBlJiYoIXR8fDE9PT1lLmxlbmd0aCYmdC5pc0NvbW1lbnQmJiFwdCh0KSk/dm9pZCAwOmV9O3JldHVybiBuLnByb3h5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtnZXQ6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHJ9ZnVuY3Rpb24gaHQoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZVt0XX19ZnVuY3Rpb24gbXQoZSx0KXt2YXIgcixpLGEscyxjO2lmKEFycmF5LmlzQXJyYXkoZSl8fFwic3RyaW5nXCI9PXR5cGVvZiBlKWZvcihyPW5ldyBBcnJheShlLmxlbmd0aCksaT0wLGE9ZS5sZW5ndGg7aTxhO2krKylyW2ldPXQoZVtpXSxpKTtlbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiBlKWZvcihyPW5ldyBBcnJheShlKSxpPTA7aTxlO2krKylyW2ldPXQoaSsxLGkpO2Vsc2UgaWYobyhlKSlpZihvZSYmZVtTeW1ib2wuaXRlcmF0b3JdKXtyPVtdO2Zvcih2YXIgdT1lW1N5bWJvbC5pdGVyYXRvcl0oKSxsPXUubmV4dCgpOyFsLmRvbmU7KXIucHVzaCh0KGwudmFsdWUsci5sZW5ndGgpKSxsPXUubmV4dCgpfWVsc2UgZm9yKHM9T2JqZWN0LmtleXMoZSkscj1uZXcgQXJyYXkocy5sZW5ndGgpLGk9MCxhPXMubGVuZ3RoO2k8YTtpKyspYz1zW2ldLHJbaV09dChlW2NdLGMsaSk7cmV0dXJuIG4ocil8fChyPVtdKSxyLl9pc1ZMaXN0PSEwLHJ9ZnVuY3Rpb24geXQoZSx0LG4scil7dmFyIGksbz10aGlzLiRzY29wZWRTbG90c1tlXTtvPyhuPW58fHt9LHImJihuPUEoQSh7fSxyKSxuKSksaT1vKG4pfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdD90KCk6dCkpOmk9dGhpcy4kc2xvdHNbZV18fChcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QoKTp0KTt2YXIgYT1uJiZuLnNsb3Q7cmV0dXJuIGE/dGhpcy4kY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIse3Nsb3Q6YX0saSk6aX1mdW5jdGlvbiBndChlKXtyZXR1cm4gTGUodGhpcy4kb3B0aW9ucyxcImZpbHRlcnNcIixlKXx8Tn1mdW5jdGlvbiBfdChlLHQpe3JldHVybiBBcnJheS5pc0FycmF5KGUpPy0xPT09ZS5pbmRleE9mKHQpOmUhPT10fWZ1bmN0aW9uIGJ0KGUsdCxuLHIsaSl7dmFyIG89Ri5rZXlDb2Rlc1t0XXx8bjtyZXR1cm4gaSYmciYmIUYua2V5Q29kZXNbdF0/X3QoaSxyKTpvP190KG8sZSk6cj9DKHIpIT09dDp2b2lkIDA9PT1lfWZ1bmN0aW9uICR0KGUsdCxuLHIsaSl7aWYobilpZihvKG4pKXt2YXIgYTtBcnJheS5pc0FycmF5KG4pJiYobj1PKG4pKTt2YXIgcz1mdW5jdGlvbihvKXtpZihcImNsYXNzXCI9PT1vfHxcInN0eWxlXCI9PT1vfHx2KG8pKWE9ZTtlbHNle3ZhciBzPWUuYXR0cnMmJmUuYXR0cnMudHlwZTthPXJ8fEYubXVzdFVzZVByb3AodCxzLG8pP2UuZG9tUHJvcHN8fChlLmRvbVByb3BzPXt9KTplLmF0dHJzfHwoZS5hdHRycz17fSl9dmFyIGM9YihvKSx1PUMobyk7YyBpbiBhfHx1IGluIGF8fChhW29dPW5bb10saSYmKChlLm9ufHwoZS5vbj17fSkpW1widXBkYXRlOlwiK29dPWZ1bmN0aW9uKGUpe25bb109ZX0pKX07Zm9yKHZhciBjIGluIG4pcyhjKX1lbHNlO3JldHVybiBlfWZ1bmN0aW9uIHd0KGUsdCl7dmFyIG49dGhpcy5fc3RhdGljVHJlZXN8fCh0aGlzLl9zdGF0aWNUcmVlcz1bXSkscj1uW2VdO3JldHVybiByJiYhdD9yOih4dChyPW5bZV09dGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbZV0uY2FsbCh0aGlzLl9yZW5kZXJQcm94eSxudWxsLHRoaXMpLFwiX19zdGF0aWNfX1wiK2UsITEpLHIpfWZ1bmN0aW9uIEN0KGUsdCxuKXtyZXR1cm4geHQoZSxcIl9fb25jZV9fXCIrdCsobj9cIl9cIituOlwiXCIpLCEwKSxlfWZ1bmN0aW9uIHh0KGUsdCxuKXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWVbcl0mJlwic3RyaW5nXCIhPXR5cGVvZiBlW3JdJiZrdChlW3JdLHQrXCJfXCIrcixuKTtlbHNlIGt0KGUsdCxuKX1mdW5jdGlvbiBrdChlLHQsbil7ZS5pc1N0YXRpYz0hMCxlLmtleT10LGUuaXNPbmNlPW59ZnVuY3Rpb24gQXQoZSx0KXtpZih0KWlmKHModCkpe3ZhciBuPWUub249ZS5vbj9BKHt9LGUub24pOnt9O2Zvcih2YXIgciBpbiB0KXt2YXIgaT1uW3JdLG89dFtyXTtuW3JdPWk/W10uY29uY2F0KGksbyk6b319ZWxzZTtyZXR1cm4gZX1mdW5jdGlvbiBPdChlLHQsbixyKXt0PXR8fHskc3RhYmxlOiFufTtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG89ZVtpXTtBcnJheS5pc0FycmF5KG8pP090KG8sdCxuKTpvJiYoby5wcm94eSYmKG8uZm4ucHJveHk9ITApLHRbby5rZXldPW8uZm4pfXJldHVybiByJiYodC4ka2V5PXIpLHR9ZnVuY3Rpb24gU3QoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rPTIpe3ZhciByPXRbbl07XCJzdHJpbmdcIj09dHlwZW9mIHImJnImJihlW3Rbbl1dPXRbbisxXSl9cmV0dXJuIGV9ZnVuY3Rpb24gVHQoZSx0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT90K2U6ZX1mdW5jdGlvbiBOdChlKXtlLl9vPUN0LGUuX249ZixlLl9zPWwsZS5fbD1tdCxlLl90PXl0LGUuX3E9RSxlLl9pPWosZS5fbT13dCxlLl9mPWd0LGUuX2s9YnQsZS5fYj0kdCxlLl92PWhlLGUuX2U9dmUsZS5fdT1PdCxlLl9nPUF0LGUuX2Q9U3QsZS5fcD1UdH1mdW5jdGlvbiBFdCh0LG4saSxvLGEpe3ZhciBzLGM9dGhpcyx1PWEub3B0aW9uczt5KG8sXCJfdWlkXCIpPyhzPU9iamVjdC5jcmVhdGUobykpLl9vcmlnaW5hbD1vOihzPW8sbz1vLl9vcmlnaW5hbCk7dmFyIGw9cih1Ll9jb21waWxlZCksZj0hbDt0aGlzLmRhdGE9dCx0aGlzLnByb3BzPW4sdGhpcy5jaGlsZHJlbj1pLHRoaXMucGFyZW50PW8sdGhpcy5saXN0ZW5lcnM9dC5vbnx8ZSx0aGlzLmluamVjdGlvbnM9dXQodS5pbmplY3QsbyksdGhpcy5zbG90cz1mdW5jdGlvbigpe3JldHVybiBjLiRzbG90c3x8ZHQodC5zY29wZWRTbG90cyxjLiRzbG90cz1sdChpLG8pKSxjLiRzbG90c30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzY29wZWRTbG90c1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBkdCh0LnNjb3BlZFNsb3RzLHRoaXMuc2xvdHMoKSl9fSksbCYmKHRoaXMuJG9wdGlvbnM9dSx0aGlzLiRzbG90cz10aGlzLnNsb3RzKCksdGhpcy4kc2NvcGVkU2xvdHM9ZHQodC5zY29wZWRTbG90cyx0aGlzLiRzbG90cykpLHUuX3Njb3BlSWQ/dGhpcy5fYz1mdW5jdGlvbihlLHQsbixyKXt2YXIgaT1IdChzLGUsdCxuLHIsZik7cmV0dXJuIGkmJiFBcnJheS5pc0FycmF5KGkpJiYoaS5mblNjb3BlSWQ9dS5fc2NvcGVJZCxpLmZuQ29udGV4dD1vKSxpfTp0aGlzLl9jPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBIdChzLGUsdCxuLHIsZil9fWZ1bmN0aW9uIGp0KGUsdCxuLHIsaSl7dmFyIG89bWUoZSk7cmV0dXJuIG8uZm5Db250ZXh0PW4sby5mbk9wdGlvbnM9cix0LnNsb3QmJigoby5kYXRhfHwoby5kYXRhPXt9KSkuc2xvdD10LnNsb3QpLG99ZnVuY3Rpb24gRHQoZSx0KXtmb3IodmFyIG4gaW4gdCllW2IobildPXRbbl19TnQoRXQucHJvdG90eXBlKTt2YXIgTHQ9e2luaXQ6ZnVuY3Rpb24oZSx0KXtpZihlLmNvbXBvbmVudEluc3RhbmNlJiYhZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQmJmUuZGF0YS5rZWVwQWxpdmUpe3ZhciByPWU7THQucHJlcGF0Y2gocixyKX1lbHNleyhlLmNvbXBvbmVudEluc3RhbmNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e19pc0NvbXBvbmVudDohMCxfcGFyZW50Vm5vZGU6ZSxwYXJlbnQ6dH0saT1lLmRhdGEuaW5saW5lVGVtcGxhdGU7bihpKSYmKHIucmVuZGVyPWkucmVuZGVyLHIuc3RhdGljUmVuZGVyRm5zPWkuc3RhdGljUmVuZGVyRm5zKTtyZXR1cm4gbmV3IGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKHIpfShlLFp0KSkuJG1vdW50KHQ/ZS5lbG06dm9pZCAwLHQpfX0scHJlcGF0Y2g6ZnVuY3Rpb24odCxuKXt2YXIgcj1uLmNvbXBvbmVudE9wdGlvbnM7IWZ1bmN0aW9uKHQsbixyLGksbyl7dmFyIGE9aS5kYXRhLnNjb3BlZFNsb3RzLHM9dC4kc2NvcGVkU2xvdHMsYz0hIShhJiYhYS4kc3RhYmxlfHxzIT09ZSYmIXMuJHN0YWJsZXx8YSYmdC4kc2NvcGVkU2xvdHMuJGtleSE9PWEuJGtleXx8IWEmJnQuJHNjb3BlZFNsb3RzLiRrZXkpLHU9ISEob3x8dC4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW58fGMpO3QuJG9wdGlvbnMuX3BhcmVudFZub2RlPWksdC4kdm5vZGU9aSx0Ll92bm9kZSYmKHQuX3Zub2RlLnBhcmVudD1pKTtpZih0LiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbj1vLHQuJGF0dHJzPWkuZGF0YS5hdHRyc3x8ZSx0LiRsaXN0ZW5lcnM9cnx8ZSxuJiZ0LiRvcHRpb25zLnByb3BzKXskZSghMSk7Zm9yKHZhciBsPXQuX3Byb3BzLGY9dC4kb3B0aW9ucy5fcHJvcEtleXN8fFtdLHA9MDtwPGYubGVuZ3RoO3ArKyl7dmFyIGQ9ZltwXSx2PXQuJG9wdGlvbnMucHJvcHM7bFtkXT1JZShkLHYsbix0KX0kZSghMCksdC4kb3B0aW9ucy5wcm9wc0RhdGE9bn1yPXJ8fGU7dmFyIGg9dC4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO3QuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycz1yLFd0KHQscixoKSx1JiYodC4kc2xvdHM9bHQobyxpLmNvbnRleHQpLHQuJGZvcmNlVXBkYXRlKCkpfShuLmNvbXBvbmVudEluc3RhbmNlPXQuY29tcG9uZW50SW5zdGFuY2Usci5wcm9wc0RhdGEsci5saXN0ZW5lcnMsbixyLmNoaWxkcmVuKX0saW5zZXJ0OmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5jb250ZXh0LHI9ZS5jb21wb25lbnRJbnN0YW5jZTtyLl9pc01vdW50ZWR8fChyLl9pc01vdW50ZWQ9ITAsUXQocixcIm1vdW50ZWRcIikpLGUuZGF0YS5rZWVwQWxpdmUmJihuLl9pc01vdW50ZWQ/KCh0PXIpLl9pbmFjdGl2ZT0hMSx0bi5wdXNoKHQpKTpZdChyLCEwKSl9LGRlc3Ryb3k6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jb21wb25lbnRJbnN0YW5jZTt0Ll9pc0Rlc3Ryb3llZHx8KGUuZGF0YS5rZWVwQWxpdmU/ZnVuY3Rpb24gZSh0LG4pe2lmKG4mJih0Ll9kaXJlY3RJbmFjdGl2ZT0hMCxYdCh0KSkpcmV0dXJuO2lmKCF0Ll9pbmFjdGl2ZSl7dC5faW5hY3RpdmU9ITA7Zm9yKHZhciByPTA7cjx0LiRjaGlsZHJlbi5sZW5ndGg7cisrKWUodC4kY2hpbGRyZW5bcl0pO1F0KHQsXCJkZWFjdGl2YXRlZFwiKX19KHQsITApOnQuJGRlc3Ryb3koKSl9fSxJdD1PYmplY3Qua2V5cyhMdCk7ZnVuY3Rpb24gTXQoaSxhLHMsYyxsKXtpZighdChpKSl7dmFyIGY9cy4kb3B0aW9ucy5fYmFzZTtpZihvKGkpJiYoaT1mLmV4dGVuZChpKSksXCJmdW5jdGlvblwiPT10eXBlb2YgaSl7dmFyIHA7aWYodChpLmNpZCkmJnZvaWQgMD09PShpPWZ1bmN0aW9uKGUsaSl7aWYocihlLmVycm9yKSYmbihlLmVycm9yQ29tcCkpcmV0dXJuIGUuZXJyb3JDb21wO2lmKG4oZS5yZXNvbHZlZCkpcmV0dXJuIGUucmVzb2x2ZWQ7dmFyIGE9VXQ7YSYmbihlLm93bmVycykmJi0xPT09ZS5vd25lcnMuaW5kZXhPZihhKSYmZS5vd25lcnMucHVzaChhKTtpZihyKGUubG9hZGluZykmJm4oZS5sb2FkaW5nQ29tcCkpcmV0dXJuIGUubG9hZGluZ0NvbXA7aWYoYSYmIW4oZS5vd25lcnMpKXt2YXIgcz1lLm93bmVycz1bYV0sYz0hMCxsPW51bGwsZj1udWxsO2EuJG9uKFwiaG9vazpkZXN0cm95ZWRcIixmdW5jdGlvbigpe3JldHVybiBoKHMsYSl9KTt2YXIgcD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPXMubGVuZ3RoO3Q8bjt0Kyspc1t0XS4kZm9yY2VVcGRhdGUoKTtlJiYocy5sZW5ndGg9MCxudWxsIT09bCYmKGNsZWFyVGltZW91dChsKSxsPW51bGwpLG51bGwhPT1mJiYoY2xlYXJUaW1lb3V0KGYpLGY9bnVsbCkpfSxkPUQoZnVuY3Rpb24odCl7ZS5yZXNvbHZlZD1WdCh0LGkpLGM/cy5sZW5ndGg9MDpwKCEwKX0pLHY9RChmdW5jdGlvbih0KXtuKGUuZXJyb3JDb21wKSYmKGUuZXJyb3I9ITAscCghMCkpfSksbT1lKGQsdik7cmV0dXJuIG8obSkmJih1KG0pP3QoZS5yZXNvbHZlZCkmJm0udGhlbihkLHYpOnUobS5jb21wb25lbnQpJiYobS5jb21wb25lbnQudGhlbihkLHYpLG4obS5lcnJvcikmJihlLmVycm9yQ29tcD1WdChtLmVycm9yLGkpKSxuKG0ubG9hZGluZykmJihlLmxvYWRpbmdDb21wPVZ0KG0ubG9hZGluZyxpKSwwPT09bS5kZWxheT9lLmxvYWRpbmc9ITA6bD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bD1udWxsLHQoZS5yZXNvbHZlZCkmJnQoZS5lcnJvcikmJihlLmxvYWRpbmc9ITAscCghMSkpfSxtLmRlbGF5fHwyMDApKSxuKG0udGltZW91dCkmJihmPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtmPW51bGwsdChlLnJlc29sdmVkKSYmdihudWxsKX0sbS50aW1lb3V0KSkpKSxjPSExLGUubG9hZGluZz9lLmxvYWRpbmdDb21wOmUucmVzb2x2ZWR9fShwPWksZikpKXJldHVybiBmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPXZlKCk7cmV0dXJuIG8uYXN5bmNGYWN0b3J5PWUsby5hc3luY01ldGE9e2RhdGE6dCxjb250ZXh0Om4sY2hpbGRyZW46cix0YWc6aX0sb30ocCxhLHMsYyxsKTthPWF8fHt9LHduKGkpLG4oYS5tb2RlbCkmJmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5tb2RlbCYmZS5tb2RlbC5wcm9wfHxcInZhbHVlXCIsaT1lLm1vZGVsJiZlLm1vZGVsLmV2ZW50fHxcImlucHV0XCI7KHQuYXR0cnN8fCh0LmF0dHJzPXt9KSlbcl09dC5tb2RlbC52YWx1ZTt2YXIgbz10Lm9ufHwodC5vbj17fSksYT1vW2ldLHM9dC5tb2RlbC5jYWxsYmFjaztuKGEpPyhBcnJheS5pc0FycmF5KGEpPy0xPT09YS5pbmRleE9mKHMpOmEhPT1zKSYmKG9baV09W3NdLmNvbmNhdChhKSk6b1tpXT1zfShpLm9wdGlvbnMsYSk7dmFyIGQ9ZnVuY3Rpb24oZSxyLGkpe3ZhciBvPXIub3B0aW9ucy5wcm9wcztpZighdChvKSl7dmFyIGE9e30scz1lLmF0dHJzLGM9ZS5wcm9wcztpZihuKHMpfHxuKGMpKWZvcih2YXIgdSBpbiBvKXt2YXIgbD1DKHUpO2F0KGEsYyx1LGwsITApfHxhdChhLHMsdSxsLCExKX1yZXR1cm4gYX19KGEsaSk7aWYocihpLm9wdGlvbnMuZnVuY3Rpb25hbCkpcmV0dXJuIGZ1bmN0aW9uKHQscixpLG8sYSl7dmFyIHM9dC5vcHRpb25zLGM9e30sdT1zLnByb3BzO2lmKG4odSkpZm9yKHZhciBsIGluIHUpY1tsXT1JZShsLHUscnx8ZSk7ZWxzZSBuKGkuYXR0cnMpJiZEdChjLGkuYXR0cnMpLG4oaS5wcm9wcykmJkR0KGMsaS5wcm9wcyk7dmFyIGY9bmV3IEV0KGksYyxhLG8sdCkscD1zLnJlbmRlci5jYWxsKG51bGwsZi5fYyxmKTtpZihwIGluc3RhbmNlb2YgcGUpcmV0dXJuIGp0KHAsaSxmLnBhcmVudCxzKTtpZihBcnJheS5pc0FycmF5KHApKXtmb3IodmFyIGQ9c3QocCl8fFtdLHY9bmV3IEFycmF5KGQubGVuZ3RoKSxoPTA7aDxkLmxlbmd0aDtoKyspdltoXT1qdChkW2hdLGksZi5wYXJlbnQscyk7cmV0dXJuIHZ9fShpLGQsYSxzLGMpO3ZhciB2PWEub247aWYoYS5vbj1hLm5hdGl2ZU9uLHIoaS5vcHRpb25zLmFic3RyYWN0KSl7dmFyIG09YS5zbG90O2E9e30sbSYmKGEuc2xvdD1tKX0hZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuaG9va3x8KGUuaG9vaz17fSksbj0wO248SXQubGVuZ3RoO24rKyl7dmFyIHI9SXRbbl0saT10W3JdLG89THRbcl07aT09PW98fGkmJmkuX21lcmdlZHx8KHRbcl09aT9GdChvLGkpOm8pfX0oYSk7dmFyIHk9aS5vcHRpb25zLm5hbWV8fGw7cmV0dXJuIG5ldyBwZShcInZ1ZS1jb21wb25lbnQtXCIraS5jaWQrKHk/XCItXCIreTpcIlwiKSxhLHZvaWQgMCx2b2lkIDAsdm9pZCAwLHMse0N0b3I6aSxwcm9wc0RhdGE6ZCxsaXN0ZW5lcnM6dix0YWc6bCxjaGlsZHJlbjpjfSxwKX19fWZ1bmN0aW9uIEZ0KGUsdCl7dmFyIG49ZnVuY3Rpb24obixyKXtlKG4sciksdChuLHIpfTtyZXR1cm4gbi5fbWVyZ2VkPSEwLG59dmFyIFB0PTEsUnQ9MjtmdW5jdGlvbiBIdChlLGEscyxjLHUsbCl7cmV0dXJuKEFycmF5LmlzQXJyYXkocyl8fGkocykpJiYodT1jLGM9cyxzPXZvaWQgMCkscihsKSYmKHU9UnQpLGZ1bmN0aW9uKGUsaSxhLHMsYyl7aWYobihhKSYmbihhLl9fb2JfXykpcmV0dXJuIHZlKCk7bihhKSYmbihhLmlzKSYmKGk9YS5pcyk7aWYoIWkpcmV0dXJuIHZlKCk7QXJyYXkuaXNBcnJheShzKSYmXCJmdW5jdGlvblwiPT10eXBlb2Ygc1swXSYmKChhPWF8fHt9KS5zY29wZWRTbG90cz17ZGVmYXVsdDpzWzBdfSxzLmxlbmd0aD0wKTtjPT09UnQ/cz1zdChzKTpjPT09UHQmJihzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKEFycmF5LmlzQXJyYXkoZVt0XSkpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sZSk7cmV0dXJuIGV9KHMpKTt2YXIgdSxsO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXt2YXIgZjtsPWUuJHZub2RlJiZlLiR2bm9kZS5uc3x8Ri5nZXRUYWdOYW1lc3BhY2UoaSksdT1GLmlzUmVzZXJ2ZWRUYWcoaSk/bmV3IHBlKEYucGFyc2VQbGF0Zm9ybVRhZ05hbWUoaSksYSxzLHZvaWQgMCx2b2lkIDAsZSk6YSYmYS5wcmV8fCFuKGY9TGUoZS4kb3B0aW9ucyxcImNvbXBvbmVudHNcIixpKSk/bmV3IHBlKGksYSxzLHZvaWQgMCx2b2lkIDAsZSk6TXQoZixhLGUscyxpKX1lbHNlIHU9TXQoaSxhLGUscyk7cmV0dXJuIEFycmF5LmlzQXJyYXkodSk/dTpuKHUpPyhuKGwpJiZmdW5jdGlvbiBlKGksbyxhKXtpLm5zPW87XCJmb3JlaWduT2JqZWN0XCI9PT1pLnRhZyYmKG89dm9pZCAwLGE9ITApO2lmKG4oaS5jaGlsZHJlbikpZm9yKHZhciBzPTAsYz1pLmNoaWxkcmVuLmxlbmd0aDtzPGM7cysrKXt2YXIgdT1pLmNoaWxkcmVuW3NdO24odS50YWcpJiYodCh1Lm5zKXx8cihhKSYmXCJzdmdcIiE9PXUudGFnKSYmZSh1LG8sYSl9fSh1LGwpLG4oYSkmJmZ1bmN0aW9uKGUpe28oZS5zdHlsZSkmJnR0KGUuc3R5bGUpO28oZS5jbGFzcykmJnR0KGUuY2xhc3MpfShhKSx1KTp2ZSgpfShlLGEscyxjLHUpfXZhciBCdCxVdD1udWxsO2Z1bmN0aW9uIFZ0KGUsdCl7cmV0dXJuKGUuX19lc01vZHVsZXx8b2UmJlwiTW9kdWxlXCI9PT1lW1N5bWJvbC50b1N0cmluZ1RhZ10pJiYoZT1lLmRlZmF1bHQpLG8oZSk/dC5leHRlbmQoZSk6ZX1mdW5jdGlvbiB6dChlKXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO2lmKG4ocikmJihuKHIuY29tcG9uZW50T3B0aW9ucyl8fHB0KHIpKSlyZXR1cm4gcn19ZnVuY3Rpb24gS3QoZSx0KXtCdC4kb24oZSx0KX1mdW5jdGlvbiBKdChlLHQpe0J0LiRvZmYoZSx0KX1mdW5jdGlvbiBxdChlLHQpe3ZhciBuPUJ0O3JldHVybiBmdW5jdGlvbiByKCl7bnVsbCE9PXQuYXBwbHkobnVsbCxhcmd1bWVudHMpJiZuLiRvZmYoZSxyKX19ZnVuY3Rpb24gV3QoZSx0LG4pe0J0PWUsaXQodCxufHx7fSxLdCxKdCxxdCxlKSxCdD12b2lkIDB9dmFyIFp0PW51bGw7ZnVuY3Rpb24gR3QoZSl7dmFyIHQ9WnQ7cmV0dXJuIFp0PWUsZnVuY3Rpb24oKXtadD10fX1mdW5jdGlvbiBYdChlKXtmb3IoO2UmJihlPWUuJHBhcmVudCk7KWlmKGUuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIFl0KGUsdCl7aWYodCl7aWYoZS5fZGlyZWN0SW5hY3RpdmU9ITEsWHQoZSkpcmV0dXJufWVsc2UgaWYoZS5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKGUuX2luYWN0aXZlfHxudWxsPT09ZS5faW5hY3RpdmUpe2UuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248ZS4kY2hpbGRyZW4ubGVuZ3RoO24rKylZdChlLiRjaGlsZHJlbltuXSk7UXQoZSxcImFjdGl2YXRlZFwiKX19ZnVuY3Rpb24gUXQoZSx0KXtsZSgpO3ZhciBuPWUuJG9wdGlvbnNbdF0scj10K1wiIGhvb2tcIjtpZihuKWZvcih2YXIgaT0wLG89bi5sZW5ndGg7aTxvO2krKylCZShuW2ldLGUsbnVsbCxlLHIpO2UuX2hhc0hvb2tFdmVudCYmZS4kZW1pdChcImhvb2s6XCIrdCksZmUoKX12YXIgZW49W10sdG49W10sbm49e30scm49ITEsb249ITEsYW49MDt2YXIgc249MCxjbj1EYXRlLm5vdztpZihWJiYhcSl7dmFyIHVuPXdpbmRvdy5wZXJmb3JtYW5jZTt1biYmXCJmdW5jdGlvblwiPT10eXBlb2YgdW4ubm93JiZjbigpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYoY249ZnVuY3Rpb24oKXtyZXR1cm4gdW4ubm93KCl9KX1mdW5jdGlvbiBsbigpe3ZhciBlLHQ7Zm9yKHNuPWNuKCksb249ITAsZW4uc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLmlkLXQuaWR9KSxhbj0wO2FuPGVuLmxlbmd0aDthbisrKShlPWVuW2FuXSkuYmVmb3JlJiZlLmJlZm9yZSgpLHQ9ZS5pZCxublt0XT1udWxsLGUucnVuKCk7dmFyIG49dG4uc2xpY2UoKSxyPWVuLnNsaWNlKCk7YW49ZW4ubGVuZ3RoPXRuLmxlbmd0aD0wLG5uPXt9LHJuPW9uPSExLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0uX2luYWN0aXZlPSEwLFl0KGVbdF0sITApfShuKSxmdW5jdGlvbihlKXt2YXIgdD1lLmxlbmd0aDtmb3IoO3QtLTspe3ZhciBuPWVbdF0scj1uLnZtO3IuX3dhdGNoZXI9PT1uJiZyLl9pc01vdW50ZWQmJiFyLl9pc0Rlc3Ryb3llZCYmUXQocixcInVwZGF0ZWRcIil9fShyKSxuZSYmRi5kZXZ0b29scyYmbmUuZW1pdChcImZsdXNoXCIpfXZhciBmbj0wLHBuPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dGhpcy52bT1lLGkmJihlLl93YXRjaGVyPXRoaXMpLGUuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9Kytmbix0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBpZSx0aGlzLm5ld0RlcElkcz1uZXcgaWUsdGhpcy5leHByZXNzaW9uPVwiXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgdD90aGlzLmdldHRlcj10Oih0aGlzLmdldHRlcj1mdW5jdGlvbihlKXtpZighSC50ZXN0KGUpKXt2YXIgdD1lLnNwbGl0KFwiLlwiKTtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe2lmKCFlKXJldHVybjtlPWVbdFtuXV19cmV0dXJuIGV9fX0odCksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1TKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O3BuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgZTtsZSh0aGlzKTt2YXIgdD10aGlzLnZtO3RyeXtlPXRoaXMuZ2V0dGVyLmNhbGwodCx0KX1jYXRjaChlKXtpZighdGhpcy51c2VyKXRocm93IGU7SGUoZSx0LCdnZXR0ZXIgZm9yIHdhdGNoZXIgXCInK3RoaXMuZXhwcmVzc2lvbisnXCInKX1maW5hbGx5e3RoaXMuZGVlcCYmdHQoZSksZmUoKSx0aGlzLmNsZWFudXBEZXBzKCl9cmV0dXJuIGV9LHBuLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pZDt0aGlzLm5ld0RlcElkcy5oYXModCl8fCh0aGlzLm5ld0RlcElkcy5hZGQodCksdGhpcy5uZXdEZXBzLnB1c2goZSksdGhpcy5kZXBJZHMuaGFzKHQpfHxlLmFkZFN1Yih0aGlzKSl9LHBuLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspe3ZhciB0PXRoaXMuZGVwc1tlXTt0aGlzLm5ld0RlcElkcy5oYXModC5pZCl8fHQucmVtb3ZlU3ViKHRoaXMpfXZhciBuPXRoaXMuZGVwSWRzO3RoaXMuZGVwSWRzPXRoaXMubmV3RGVwSWRzLHRoaXMubmV3RGVwSWRzPW4sdGhpcy5uZXdEZXBJZHMuY2xlYXIoKSxuPXRoaXMuZGVwcyx0aGlzLmRlcHM9dGhpcy5uZXdEZXBzLHRoaXMubmV3RGVwcz1uLHRoaXMubmV3RGVwcy5sZW5ndGg9MH0scG4ucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubGF6eT90aGlzLmRpcnR5PSEwOnRoaXMuc3luYz90aGlzLnJ1bigpOmZ1bmN0aW9uKGUpe3ZhciB0PWUuaWQ7aWYobnVsbD09bm5bdF0pe2lmKG5uW3RdPSEwLG9uKXtmb3IodmFyIG49ZW4ubGVuZ3RoLTE7bj5hbiYmZW5bbl0uaWQ+ZS5pZDspbi0tO2VuLnNwbGljZShuKzEsMCxlKX1lbHNlIGVuLnB1c2goZSk7cm58fChybj0hMCxRZShsbikpfX0odGhpcyl9LHBuLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dmFyIGU9dGhpcy5nZXQoKTtpZihlIT09dGhpcy52YWx1ZXx8byhlKXx8dGhpcy5kZWVwKXt2YXIgdD10aGlzLnZhbHVlO2lmKHRoaXMudmFsdWU9ZSx0aGlzLnVzZXIpe3ZhciBuPSdjYWxsYmFjayBmb3Igd2F0Y2hlciBcIicrdGhpcy5leHByZXNzaW9uKydcIic7QmUodGhpcy5jYix0aGlzLnZtLFtlLHRdLHRoaXMudm0sbil9ZWxzZSB0aGlzLmNiLmNhbGwodGhpcy52bSxlLHQpfX19LHBuLnByb3RvdHlwZS5ldmFsdWF0ZT1mdW5jdGlvbigpe3RoaXMudmFsdWU9dGhpcy5nZXQoKSx0aGlzLmRpcnR5PSExfSxwbi5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuZGVwcy5sZW5ndGg7ZS0tOyl0aGlzLmRlcHNbZV0uZGVwZW5kKCl9LHBuLnByb3RvdHlwZS50ZWFyZG93bj1mdW5jdGlvbigpe2lmKHRoaXMuYWN0aXZlKXt0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkfHxoKHRoaXMudm0uX3dhdGNoZXJzLHRoaXMpO2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspdGhpcy5kZXBzW2VdLnJlbW92ZVN1Yih0aGlzKTt0aGlzLmFjdGl2ZT0hMX19O3ZhciBkbj17ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OlMsc2V0OlN9O2Z1bmN0aW9uIHZuKGUsdCxuKXtkbi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1t0XVtuXX0sZG4uc2V0PWZ1bmN0aW9uKGUpe3RoaXNbdF1bbl09ZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbixkbil9ZnVuY3Rpb24gaG4oZSl7ZS5fd2F0Y2hlcnM9W107dmFyIHQ9ZS4kb3B0aW9uczt0LnByb3BzJiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuJG9wdGlvbnMucHJvcHNEYXRhfHx7fSxyPWUuX3Byb3BzPXt9LGk9ZS4kb3B0aW9ucy5fcHJvcEtleXM9W107ZS4kcGFyZW50JiYkZSghMSk7dmFyIG89ZnVuY3Rpb24obyl7aS5wdXNoKG8pO3ZhciBhPUllKG8sdCxuLGUpO3hlKHIsbyxhKSxvIGluIGV8fHZuKGUsXCJfcHJvcHNcIixvKX07Zm9yKHZhciBhIGluIHQpbyhhKTskZSghMCl9KGUsdC5wcm9wcyksdC5tZXRob2RzJiZmdW5jdGlvbihlLHQpe2UuJG9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIHQpZVtuXT1cImZ1bmN0aW9uXCIhPXR5cGVvZiB0W25dP1M6eCh0W25dLGUpfShlLHQubWV0aG9kcyksdC5kYXRhP2Z1bmN0aW9uKGUpe3ZhciB0PWUuJG9wdGlvbnMuZGF0YTtzKHQ9ZS5fZGF0YT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2Z1bmN0aW9uKGUsdCl7bGUoKTt0cnl7cmV0dXJuIGUuY2FsbCh0LHQpfWNhdGNoKGUpe3JldHVybiBIZShlLHQsXCJkYXRhKClcIikse319ZmluYWxseXtmZSgpfX0odCxlKTp0fHx7fSl8fCh0PXt9KTt2YXIgbj1PYmplY3Qua2V5cyh0KSxyPWUuJG9wdGlvbnMucHJvcHMsaT0oZS4kb3B0aW9ucy5tZXRob2RzLG4ubGVuZ3RoKTtmb3IoO2ktLTspe3ZhciBvPW5baV07ciYmeShyLG8pfHwoYT12b2lkIDAsMzYhPT0oYT0obytcIlwiKS5jaGFyQ29kZUF0KDApKSYmOTUhPT1hJiZ2bihlLFwiX2RhdGFcIixvKSl9dmFyIGE7Q2UodCwhMCl9KGUpOkNlKGUuX2RhdGE9e30sITApLHQuY29tcHV0ZWQmJmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5fY29tcHV0ZWRXYXRjaGVycz1PYmplY3QuY3JlYXRlKG51bGwpLHI9dGUoKTtmb3IodmFyIGkgaW4gdCl7dmFyIG89dFtpXSxhPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/bzpvLmdldDtyfHwobltpXT1uZXcgcG4oZSxhfHxTLFMsbW4pKSxpIGluIGV8fHluKGUsaSxvKX19KGUsdC5jb21wdXRlZCksdC53YXRjaCYmdC53YXRjaCE9PVkmJmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpe3ZhciByPXRbbl07aWYoQXJyYXkuaXNBcnJheShyKSlmb3IodmFyIGk9MDtpPHIubGVuZ3RoO2krKylibihlLG4scltpXSk7ZWxzZSBibihlLG4scil9fShlLHQud2F0Y2gpfXZhciBtbj17bGF6eTohMH07ZnVuY3Rpb24geW4oZSx0LG4pe3ZhciByPSF0ZSgpO1wiZnVuY3Rpb25cIj09dHlwZW9mIG4/KGRuLmdldD1yP2duKHQpOl9uKG4pLGRuLnNldD1TKTooZG4uZ2V0PW4uZ2V0P3ImJiExIT09bi5jYWNoZT9nbih0KTpfbihuLmdldCk6Uyxkbi5zZXQ9bi5zZXR8fFMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsZG4pfWZ1bmN0aW9uIGduKGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMmJnRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNbZV07aWYodClyZXR1cm4gdC5kaXJ0eSYmdC5ldmFsdWF0ZSgpLGNlLnRhcmdldCYmdC5kZXBlbmQoKSx0LnZhbHVlfX1mdW5jdGlvbiBfbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJuKGUsdCxuLHIpe3JldHVybiBzKG4pJiYocj1uLG49bi5oYW5kbGVyKSxcInN0cmluZ1wiPT10eXBlb2YgbiYmKG49ZVtuXSksZS4kd2F0Y2godCxuLHIpfXZhciAkbj0wO2Z1bmN0aW9uIHduKGUpe3ZhciB0PWUub3B0aW9ucztpZihlLnN1cGVyKXt2YXIgbj13bihlLnN1cGVyKTtpZihuIT09ZS5zdXBlck9wdGlvbnMpe2Uuc3VwZXJPcHRpb25zPW47dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLm9wdGlvbnMscj1lLnNlYWxlZE9wdGlvbnM7Zm9yKHZhciBpIGluIG4pbltpXSE9PXJbaV0mJih0fHwodD17fSksdFtpXT1uW2ldKTtyZXR1cm4gdH0oZSk7ciYmQShlLmV4dGVuZE9wdGlvbnMsciksKHQ9ZS5vcHRpb25zPURlKG4sZS5leHRlbmRPcHRpb25zKSkubmFtZSYmKHQuY29tcG9uZW50c1t0Lm5hbWVdPWUpfX1yZXR1cm4gdH1mdW5jdGlvbiBDbihlKXt0aGlzLl9pbml0KGUpfWZ1bmN0aW9uIHhuKGUpe2UuY2lkPTA7dmFyIHQ9MTtlLmV4dGVuZD1mdW5jdGlvbihlKXtlPWV8fHt9O3ZhciBuPXRoaXMscj1uLmNpZCxpPWUuX0N0b3J8fChlLl9DdG9yPXt9KTtpZihpW3JdKXJldHVybiBpW3JdO3ZhciBvPWUubmFtZXx8bi5vcHRpb25zLm5hbWUsYT1mdW5jdGlvbihlKXt0aGlzLl9pbml0KGUpfTtyZXR1cm4oYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWEsYS5jaWQ9dCsrLGEub3B0aW9ucz1EZShuLm9wdGlvbnMsZSksYS5zdXBlcj1uLGEub3B0aW9ucy5wcm9wcyYmZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiB0KXZuKGUucHJvdG90eXBlLFwiX3Byb3BzXCIsbil9KGEpLGEub3B0aW9ucy5jb21wdXRlZCYmZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcHRpb25zLmNvbXB1dGVkO2Zvcih2YXIgbiBpbiB0KXluKGUucHJvdG90eXBlLG4sdFtuXSl9KGEpLGEuZXh0ZW5kPW4uZXh0ZW5kLGEubWl4aW49bi5taXhpbixhLnVzZT1uLnVzZSxJLmZvckVhY2goZnVuY3Rpb24oZSl7YVtlXT1uW2VdfSksbyYmKGEub3B0aW9ucy5jb21wb25lbnRzW29dPWEpLGEuc3VwZXJPcHRpb25zPW4ub3B0aW9ucyxhLmV4dGVuZE9wdGlvbnM9ZSxhLnNlYWxlZE9wdGlvbnM9QSh7fSxhLm9wdGlvbnMpLGlbcl09YSxhfX1mdW5jdGlvbiBrbihlKXtyZXR1cm4gZSYmKGUuQ3Rvci5vcHRpb25zLm5hbWV8fGUudGFnKX1mdW5jdGlvbiBBbihlLHQpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UuaW5kZXhPZih0KT4tMTpcInN0cmluZ1wiPT10eXBlb2YgZT9lLnNwbGl0KFwiLFwiKS5pbmRleE9mKHQpPi0xOihuPWUsXCJbb2JqZWN0IFJlZ0V4cF1cIj09PWEuY2FsbChuKSYmZS50ZXN0KHQpKTt2YXIgbn1mdW5jdGlvbiBPbihlLHQpe3ZhciBuPWUuY2FjaGUscj1lLmtleXMsaT1lLl92bm9kZTtmb3IodmFyIG8gaW4gbil7dmFyIGE9bltvXTtpZihhKXt2YXIgcz1hLm5hbWU7cyYmIXQocykmJlNuKG4sbyxyLGkpfX19ZnVuY3Rpb24gU24oZSx0LG4scil7dmFyIGk9ZVt0XTshaXx8ciYmaS50YWc9PT1yLnRhZ3x8aS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpLGVbdF09bnVsbCxoKG4sdCl9IWZ1bmN0aW9uKHQpe3QucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7bi5fdWlkPSRuKyssbi5faXNWdWU9ITAsdCYmdC5faXNDb21wb25lbnQ/ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLiRvcHRpb25zPU9iamVjdC5jcmVhdGUoZS5jb25zdHJ1Y3Rvci5vcHRpb25zKSxyPXQuX3BhcmVudFZub2RlO24ucGFyZW50PXQucGFyZW50LG4uX3BhcmVudFZub2RlPXI7dmFyIGk9ci5jb21wb25lbnRPcHRpb25zO24ucHJvcHNEYXRhPWkucHJvcHNEYXRhLG4uX3BhcmVudExpc3RlbmVycz1pLmxpc3RlbmVycyxuLl9yZW5kZXJDaGlsZHJlbj1pLmNoaWxkcmVuLG4uX2NvbXBvbmVudFRhZz1pLnRhZyx0LnJlbmRlciYmKG4ucmVuZGVyPXQucmVuZGVyLG4uc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zKX0obix0KTpuLiRvcHRpb25zPURlKHduKG4uY29uc3RydWN0b3IpLHR8fHt9LG4pLG4uX3JlbmRlclByb3h5PW4sbi5fc2VsZj1uLGZ1bmN0aW9uKGUpe3ZhciB0PWUuJG9wdGlvbnMsbj10LnBhcmVudDtpZihuJiYhdC5hYnN0cmFjdCl7Zm9yKDtuLiRvcHRpb25zLmFic3RyYWN0JiZuLiRwYXJlbnQ7KW49bi4kcGFyZW50O24uJGNoaWxkcmVuLnB1c2goZSl9ZS4kcGFyZW50PW4sZS4kcm9vdD1uP24uJHJvb3Q6ZSxlLiRjaGlsZHJlbj1bXSxlLiRyZWZzPXt9LGUuX3dhdGNoZXI9bnVsbCxlLl9pbmFjdGl2ZT1udWxsLGUuX2RpcmVjdEluYWN0aXZlPSExLGUuX2lzTW91bnRlZD0hMSxlLl9pc0Rlc3Ryb3llZD0hMSxlLl9pc0JlaW5nRGVzdHJveWVkPSExfShuKSxmdW5jdGlvbihlKXtlLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSxlLl9oYXNIb29rRXZlbnQ9ITE7dmFyIHQ9ZS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO3QmJld0KGUsdCl9KG4pLGZ1bmN0aW9uKHQpe3QuX3Zub2RlPW51bGwsdC5fc3RhdGljVHJlZXM9bnVsbDt2YXIgbj10LiRvcHRpb25zLHI9dC4kdm5vZGU9bi5fcGFyZW50Vm5vZGUsaT1yJiZyLmNvbnRleHQ7dC4kc2xvdHM9bHQobi5fcmVuZGVyQ2hpbGRyZW4saSksdC4kc2NvcGVkU2xvdHM9ZSx0Ll9jPWZ1bmN0aW9uKGUsbixyLGkpe3JldHVybiBIdCh0LGUsbixyLGksITEpfSx0LiRjcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGUsbixyLGkpe3JldHVybiBIdCh0LGUsbixyLGksITApfTt2YXIgbz1yJiZyLmRhdGE7eGUodCxcIiRhdHRyc1wiLG8mJm8uYXR0cnN8fGUsbnVsbCwhMCkseGUodCxcIiRsaXN0ZW5lcnNcIixuLl9wYXJlbnRMaXN0ZW5lcnN8fGUsbnVsbCwhMCl9KG4pLFF0KG4sXCJiZWZvcmVDcmVhdGVcIiksZnVuY3Rpb24oZSl7dmFyIHQ9dXQoZS4kb3B0aW9ucy5pbmplY3QsZSk7dCYmKCRlKCExKSxPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3hlKGUsbix0W25dKX0pLCRlKCEwKSl9KG4pLGhuKG4pLGZ1bmN0aW9uKGUpe3ZhciB0PWUuJG9wdGlvbnMucHJvdmlkZTt0JiYoZS5fcHJvdmlkZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90LmNhbGwoZSk6dCl9KG4pLFF0KG4sXCJjcmVhdGVkXCIpLG4uJG9wdGlvbnMuZWwmJm4uJG1vdW50KG4uJG9wdGlvbnMuZWwpfX0oQ24pLGZ1bmN0aW9uKGUpe3ZhciB0PXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19LG49e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wc319O09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIiRkYXRhXCIsdCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiJHByb3BzXCIsbiksZS5wcm90b3R5cGUuJHNldD1rZSxlLnByb3RvdHlwZS4kZGVsZXRlPUFlLGUucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbihlLHQsbil7aWYocyh0KSlyZXR1cm4gYm4odGhpcyxlLHQsbik7KG49bnx8e30pLnVzZXI9ITA7dmFyIHI9bmV3IHBuKHRoaXMsZSx0LG4pO2lmKG4uaW1tZWRpYXRlKXt2YXIgaT0nY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFwiJytyLmV4cHJlc3Npb24rJ1wiJztsZSgpLEJlKHQsdGhpcyxbci52YWx1ZV0sdGhpcyxpKSxmZSgpfXJldHVybiBmdW5jdGlvbigpe3IudGVhcmRvd24oKX19fShDbiksZnVuY3Rpb24oZSl7dmFyIHQ9L15ob29rOi87ZS5wcm90b3R5cGUuJG9uPWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpcztpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgaT0wLG89ZS5sZW5ndGg7aTxvO2krKylyLiRvbihlW2ldLG4pO2Vsc2Uoci5fZXZlbnRzW2VdfHwoci5fZXZlbnRzW2VdPVtdKSkucHVzaChuKSx0LnRlc3QoZSkmJihyLl9oYXNIb29rRXZlbnQ9ITApO3JldHVybiByfSxlLnByb3RvdHlwZS4kb25jZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7ZnVuY3Rpb24gcigpe24uJG9mZihlLHIpLHQuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiByLmZuPXQsbi4kb24oZSxyKSxufSxlLnByb3RvdHlwZS4kb2ZmPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbi5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksbjtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbi4kb2ZmKGVbcl0sdCk7cmV0dXJuIG59dmFyIG8sYT1uLl9ldmVudHNbZV07aWYoIWEpcmV0dXJuIG47aWYoIXQpcmV0dXJuIG4uX2V2ZW50c1tlXT1udWxsLG47Zm9yKHZhciBzPWEubGVuZ3RoO3MtLTspaWYoKG89YVtzXSk9PT10fHxvLmZuPT09dCl7YS5zcGxpY2UocywxKTticmVha31yZXR1cm4gbn0sZS5wcm90b3R5cGUuJGVtaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fZXZlbnRzW2VdO2lmKHQpe3Q9dC5sZW5ndGg+MT9rKHQpOnQ7Zm9yKHZhciBuPWsoYXJndW1lbnRzLDEpLHI9J2V2ZW50IGhhbmRsZXIgZm9yIFwiJytlKydcIicsaT0wLG89dC5sZW5ndGg7aTxvO2krKylCZSh0W2ldLHRoaXMsbix0aGlzLHIpfXJldHVybiB0aGlzfX0oQ24pLGZ1bmN0aW9uKGUpe2UucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9bi4kZWwsaT1uLl92bm9kZSxvPUd0KG4pO24uX3Zub2RlPWUsbi4kZWw9aT9uLl9fcGF0Y2hfXyhpLGUpOm4uX19wYXRjaF9fKG4uJGVsLGUsdCwhMSksbygpLHImJihyLl9fdnVlX189bnVsbCksbi4kZWwmJihuLiRlbC5fX3Z1ZV9fPW4pLG4uJHZub2RlJiZuLiRwYXJlbnQmJm4uJHZub2RlPT09bi4kcGFyZW50Ll92bm9kZSYmKG4uJHBhcmVudC4kZWw9bi4kZWwpfSxlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl93YXRjaGVyJiZ0aGlzLl93YXRjaGVyLnVwZGF0ZSgpfSxlLnByb3RvdHlwZS4kZGVzdHJveT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoIWUuX2lzQmVpbmdEZXN0cm95ZWQpe1F0KGUsXCJiZWZvcmVEZXN0cm95XCIpLGUuX2lzQmVpbmdEZXN0cm95ZWQ9ITA7dmFyIHQ9ZS4kcGFyZW50OyF0fHx0Ll9pc0JlaW5nRGVzdHJveWVkfHxlLiRvcHRpb25zLmFic3RyYWN0fHxoKHQuJGNoaWxkcmVuLGUpLGUuX3dhdGNoZXImJmUuX3dhdGNoZXIudGVhcmRvd24oKTtmb3IodmFyIG49ZS5fd2F0Y2hlcnMubGVuZ3RoO24tLTspZS5fd2F0Y2hlcnNbbl0udGVhcmRvd24oKTtlLl9kYXRhLl9fb2JfXyYmZS5fZGF0YS5fX29iX18udm1Db3VudC0tLGUuX2lzRGVzdHJveWVkPSEwLGUuX19wYXRjaF9fKGUuX3Zub2RlLG51bGwpLFF0KGUsXCJkZXN0cm95ZWRcIiksZS4kb2ZmKCksZS4kZWwmJihlLiRlbC5fX3Z1ZV9fPW51bGwpLGUuJHZub2RlJiYoZS4kdm5vZGUucGFyZW50PW51bGwpfX19KENuKSxmdW5jdGlvbihlKXtOdChlLnByb3RvdHlwZSksZS5wcm90b3R5cGUuJG5leHRUaWNrPWZ1bmN0aW9uKGUpe3JldHVybiBRZShlLHRoaXMpfSxlLnByb3RvdHlwZS5fcmVuZGVyPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLG49dC4kb3B0aW9ucyxyPW4ucmVuZGVyLGk9bi5fcGFyZW50Vm5vZGU7aSYmKHQuJHNjb3BlZFNsb3RzPWR0KGkuZGF0YS5zY29wZWRTbG90cyx0LiRzbG90cyx0LiRzY29wZWRTbG90cykpLHQuJHZub2RlPWk7dHJ5e1V0PXQsZT1yLmNhbGwodC5fcmVuZGVyUHJveHksdC4kY3JlYXRlRWxlbWVudCl9Y2F0Y2gobil7SGUobix0LFwicmVuZGVyXCIpLGU9dC5fdm5vZGV9ZmluYWxseXtVdD1udWxsfXJldHVybiBBcnJheS5pc0FycmF5KGUpJiYxPT09ZS5sZW5ndGgmJihlPWVbMF0pLGUgaW5zdGFuY2VvZiBwZXx8KGU9dmUoKSksZS5wYXJlbnQ9aSxlfX0oQ24pO3ZhciBUbj1bU3RyaW5nLFJlZ0V4cCxBcnJheV0sTm49e0tlZXBBbGl2ZTp7bmFtZTpcImtlZXAtYWxpdmVcIixhYnN0cmFjdDohMCxwcm9wczp7aW5jbHVkZTpUbixleGNsdWRlOlRuLG1heDpbU3RyaW5nLE51bWJlcl19LG1ldGhvZHM6e2NhY2hlVk5vZGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNhY2hlLHQ9dGhpcy5rZXlzLG49dGhpcy52bm9kZVRvQ2FjaGUscj10aGlzLmtleVRvQ2FjaGU7aWYobil7dmFyIGk9bi50YWcsbz1uLmNvbXBvbmVudEluc3RhbmNlLGE9bi5jb21wb25lbnRPcHRpb25zO2Vbcl09e25hbWU6a24oYSksdGFnOmksY29tcG9uZW50SW5zdGFuY2U6b30sdC5wdXNoKHIpLHRoaXMubWF4JiZ0Lmxlbmd0aD5wYXJzZUludCh0aGlzLm1heCkmJlNuKGUsdFswXSx0LHRoaXMuX3Zub2RlKSx0aGlzLnZub2RlVG9DYWNoZT1udWxsfX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5rZXlzPVtdfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5jYWNoZSlTbih0aGlzLmNhY2hlLGUsdGhpcy5rZXlzKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jYWNoZVZOb2RlKCksdGhpcy4kd2F0Y2goXCJpbmNsdWRlXCIsZnVuY3Rpb24odCl7T24oZSxmdW5jdGlvbihlKXtyZXR1cm4gQW4odCxlKX0pfSksdGhpcy4kd2F0Y2goXCJleGNsdWRlXCIsZnVuY3Rpb24odCl7T24oZSxmdW5jdGlvbihlKXtyZXR1cm4hQW4odCxlKX0pfSl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlVk5vZGUoKX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kc2xvdHMuZGVmYXVsdCx0PXp0KGUpLG49dCYmdC5jb21wb25lbnRPcHRpb25zO2lmKG4pe3ZhciByPWtuKG4pLGk9dGhpcy5pbmNsdWRlLG89dGhpcy5leGNsdWRlO2lmKGkmJighcnx8IUFuKGkscikpfHxvJiZyJiZBbihvLHIpKXJldHVybiB0O3ZhciBhPXRoaXMuY2FjaGUscz10aGlzLmtleXMsYz1udWxsPT10LmtleT9uLkN0b3IuY2lkKyhuLnRhZz9cIjo6XCIrbi50YWc6XCJcIik6dC5rZXk7YVtjXT8odC5jb21wb25lbnRJbnN0YW5jZT1hW2NdLmNvbXBvbmVudEluc3RhbmNlLGgocyxjKSxzLnB1c2goYykpOih0aGlzLnZub2RlVG9DYWNoZT10LHRoaXMua2V5VG9DYWNoZT1jKSx0LmRhdGEua2VlcEFsaXZlPSEwfXJldHVybiB0fHxlJiZlWzBdfX19OyFmdW5jdGlvbihlKXt2YXIgdD17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZ9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNvbmZpZ1wiLHQpLGUudXRpbD17d2FybjphZSxleHRlbmQ6QSxtZXJnZU9wdGlvbnM6RGUsZGVmaW5lUmVhY3RpdmU6eGV9LGUuc2V0PWtlLGUuZGVsZXRlPUFlLGUubmV4dFRpY2s9UWUsZS5vYnNlcnZhYmxlPWZ1bmN0aW9uKGUpe3JldHVybiBDZShlKSxlfSxlLm9wdGlvbnM9T2JqZWN0LmNyZWF0ZShudWxsKSxJLmZvckVhY2goZnVuY3Rpb24odCl7ZS5vcHRpb25zW3QrXCJzXCJdPU9iamVjdC5jcmVhdGUobnVsbCl9KSxlLm9wdGlvbnMuX2Jhc2U9ZSxBKGUub3B0aW9ucy5jb21wb25lbnRzLE5uKSxmdW5jdGlvbihlKXtlLnVzZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9pbnN0YWxsZWRQbHVnaW5zfHwodGhpcy5faW5zdGFsbGVkUGx1Z2lucz1bXSk7aWYodC5pbmRleE9mKGUpPi0xKXJldHVybiB0aGlzO3ZhciBuPWsoYXJndW1lbnRzLDEpO3JldHVybiBuLnVuc2hpZnQodGhpcyksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5pbnN0YWxsP2UuaW5zdGFsbC5hcHBseShlLG4pOlwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUuYXBwbHkobnVsbCxuKSx0LnB1c2goZSksdGhpc319KGUpLGZ1bmN0aW9uKGUpe2UubWl4aW49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub3B0aW9ucz1EZSh0aGlzLm9wdGlvbnMsZSksdGhpc319KGUpLHhuKGUpLGZ1bmN0aW9uKGUpe0kuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPWZ1bmN0aW9uKGUsbil7cmV0dXJuIG4/KFwiY29tcG9uZW50XCI9PT10JiZzKG4pJiYobi5uYW1lPW4ubmFtZXx8ZSxuPXRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQobikpLFwiZGlyZWN0aXZlXCI9PT10JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj17YmluZDpuLHVwZGF0ZTpufSksdGhpcy5vcHRpb25zW3QrXCJzXCJdW2VdPW4sbik6dGhpcy5vcHRpb25zW3QrXCJzXCJdW2VdfX0pfShlKX0oQ24pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbi5wcm90b3R5cGUsXCIkaXNTZXJ2ZXJcIix7Z2V0OnRlfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KENuLnByb3RvdHlwZSxcIiRzc3JDb250ZXh0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQ24sXCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFwiLHt2YWx1ZTpFdH0pLENuLnZlcnNpb249XCIyLjYuMTRcIjt2YXIgRW49cChcInN0eWxlLGNsYXNzXCIpLGpuPXAoXCJpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzXCIpLERuPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5cInZhbHVlXCI9PT1uJiZqbihlKSYmXCJidXR0b25cIiE9PXR8fFwic2VsZWN0ZWRcIj09PW4mJlwib3B0aW9uXCI9PT1lfHxcImNoZWNrZWRcIj09PW4mJlwiaW5wdXRcIj09PWV8fFwibXV0ZWRcIj09PW4mJlwidmlkZW9cIj09PWV9LExuPXAoXCJjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2tcIiksSW49cChcImV2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHlcIiksTW49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQm4odCl8fFwiZmFsc2VcIj09PXQ/XCJmYWxzZVwiOlwiY29udGVudGVkaXRhYmxlXCI9PT1lJiZJbih0KT90OlwidHJ1ZVwifSxGbj1wKFwiYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSxkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSxtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlXCIpLFBuPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFJuPWZ1bmN0aW9uKGUpe3JldHVyblwiOlwiPT09ZS5jaGFyQXQoNSkmJlwieGxpbmtcIj09PWUuc2xpY2UoMCw1KX0sSG49ZnVuY3Rpb24oZSl7cmV0dXJuIFJuKGUpP2Uuc2xpY2UoNixlLmxlbmd0aCk6XCJcIn0sQm49ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZX07ZnVuY3Rpb24gVW4oZSl7Zm9yKHZhciB0PWUuZGF0YSxyPWUsaT1lO24oaS5jb21wb25lbnRJbnN0YW5jZSk7KShpPWkuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKSYmaS5kYXRhJiYodD1WbihpLmRhdGEsdCkpO2Zvcig7bihyPXIucGFyZW50KTspciYmci5kYXRhJiYodD1Wbih0LHIuZGF0YSkpO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKG4oZSl8fG4odCkpcmV0dXJuIHpuKGUsS24odCkpO3JldHVyblwiXCJ9KHQuc3RhdGljQ2xhc3MsdC5jbGFzcyl9ZnVuY3Rpb24gVm4oZSx0KXtyZXR1cm57c3RhdGljQ2xhc3M6em4oZS5zdGF0aWNDbGFzcyx0LnN0YXRpY0NsYXNzKSxjbGFzczpuKGUuY2xhc3MpP1tlLmNsYXNzLHQuY2xhc3NdOnQuY2xhc3N9fWZ1bmN0aW9uIHpuKGUsdCl7cmV0dXJuIGU/dD9lK1wiIFwiK3Q6ZTp0fHxcIlwifWZ1bmN0aW9uIEtuKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2Z1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVwiXCIsaT0wLG89ZS5sZW5ndGg7aTxvO2krKyluKHQ9S24oZVtpXSkpJiZcIlwiIT09dCYmKHImJihyKz1cIiBcIikscis9dCk7cmV0dXJuIHJ9KGUpOm8oZSk/ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtmb3IodmFyIG4gaW4gZSllW25dJiYodCYmKHQrPVwiIFwiKSx0Kz1uKTtyZXR1cm4gdH0oZSk6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTpcIlwifXZhciBKbj17c3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixtYXRoOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwifSxxbj1wKFwiaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucyxjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LGNvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3RcIiksV249cChcInN2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSxmb3JlaWdub2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3XCIsITApLFpuPWZ1bmN0aW9uKGUpe3JldHVybiBxbihlKXx8V24oZSl9O2Z1bmN0aW9uIEduKGUpe3JldHVybiBXbihlKT9cInN2Z1wiOlwibWF0aFwiPT09ZT9cIm1hdGhcIjp2b2lkIDB9dmFyIFhuPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIFluPXAoXCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybFwiKTtmdW5jdGlvbiBRbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTtyZXR1cm4gdHx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKX1yZXR1cm4gZX12YXIgZXI9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpmdW5jdGlvbihlLHQpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7cmV0dXJuXCJzZWxlY3RcIiE9PWU/bjoodC5kYXRhJiZ0LmRhdGEuYXR0cnMmJnZvaWQgMCE9PXQuZGF0YS5hdHRycy5tdWx0aXBsZSYmbi5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLFwibXVsdGlwbGVcIiksbil9LGNyZWF0ZUVsZW1lbnROUzpmdW5jdGlvbihlLHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoSm5bZV0sdCl9LGNyZWF0ZVRleHROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlKX0sY3JlYXRlQ29tbWVudDpmdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChlKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUsdCxuKXtlLmluc2VydEJlZm9yZSh0LG4pfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihlLHQpe2UucmVtb3ZlQ2hpbGQodCl9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGUsdCl7ZS5hcHBlbmRDaGlsZCh0KX0scGFyZW50Tm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJlbnROb2RlfSxuZXh0U2libGluZzpmdW5jdGlvbihlKXtyZXR1cm4gZS5uZXh0U2libGluZ30sdGFnTmFtZTpmdW5jdGlvbihlKXtyZXR1cm4gZS50YWdOYW1lfSxzZXRUZXh0Q29udGVudDpmdW5jdGlvbihlLHQpe2UudGV4dENvbnRlbnQ9dH0sc2V0U3R5bGVTY29wZTpmdW5jdGlvbihlLHQpe2Uuc2V0QXR0cmlidXRlKHQsXCJcIil9fSksdHI9e2NyZWF0ZTpmdW5jdGlvbihlLHQpe25yKHQpfSx1cGRhdGU6ZnVuY3Rpb24oZSx0KXtlLmRhdGEucmVmIT09dC5kYXRhLnJlZiYmKG5yKGUsITApLG5yKHQpKX0sZGVzdHJveTpmdW5jdGlvbihlKXtucihlLCEwKX19O2Z1bmN0aW9uIG5yKGUsdCl7dmFyIHI9ZS5kYXRhLnJlZjtpZihuKHIpKXt2YXIgaT1lLmNvbnRleHQsbz1lLmNvbXBvbmVudEluc3RhbmNlfHxlLmVsbSxhPWkuJHJlZnM7dD9BcnJheS5pc0FycmF5KGFbcl0pP2goYVtyXSxvKTphW3JdPT09byYmKGFbcl09dm9pZCAwKTplLmRhdGEucmVmSW5Gb3I/QXJyYXkuaXNBcnJheShhW3JdKT9hW3JdLmluZGV4T2Yobyk8MCYmYVtyXS5wdXNoKG8pOmFbcl09W29dOmFbcl09b319dmFyIHJyPW5ldyBwZShcIlwiLHt9LFtdKSxpcj1bXCJjcmVhdGVcIixcImFjdGl2YXRlXCIsXCJ1cGRhdGVcIixcInJlbW92ZVwiLFwiZGVzdHJveVwiXTtmdW5jdGlvbiBvcihlLGkpe3JldHVybiBlLmtleT09PWkua2V5JiZlLmFzeW5jRmFjdG9yeT09PWkuYXN5bmNGYWN0b3J5JiYoZS50YWc9PT1pLnRhZyYmZS5pc0NvbW1lbnQ9PT1pLmlzQ29tbWVudCYmbihlLmRhdGEpPT09bihpLmRhdGEpJiZmdW5jdGlvbihlLHQpe2lmKFwiaW5wdXRcIiE9PWUudGFnKXJldHVybiEwO3ZhciByLGk9bihyPWUuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlLG89bihyPXQuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlO3JldHVybiBpPT09b3x8WW4oaSkmJlluKG8pfShlLGkpfHxyKGUuaXNBc3luY1BsYWNlaG9sZGVyKSYmdChpLmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIGFyKGUsdCxyKXt2YXIgaSxvLGE9e307Zm9yKGk9dDtpPD1yOysraSluKG89ZVtpXS5rZXkpJiYoYVtvXT1pKTtyZXR1cm4gYX12YXIgc3I9e2NyZWF0ZTpjcix1cGRhdGU6Y3IsZGVzdHJveTpmdW5jdGlvbihlKXtjcihlLHJyKX19O2Z1bmN0aW9uIGNyKGUsdCl7KGUuZGF0YS5kaXJlY3RpdmVzfHx0LmRhdGEuZGlyZWN0aXZlcykmJmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG89ZT09PXJyLGE9dD09PXJyLHM9bHIoZS5kYXRhLmRpcmVjdGl2ZXMsZS5jb250ZXh0KSxjPWxyKHQuZGF0YS5kaXJlY3RpdmVzLHQuY29udGV4dCksdT1bXSxsPVtdO2ZvcihuIGluIGMpcj1zW25dLGk9Y1tuXSxyPyhpLm9sZFZhbHVlPXIudmFsdWUsaS5vbGRBcmc9ci5hcmcscHIoaSxcInVwZGF0ZVwiLHQsZSksaS5kZWYmJmkuZGVmLmNvbXBvbmVudFVwZGF0ZWQmJmwucHVzaChpKSk6KHByKGksXCJiaW5kXCIsdCxlKSxpLmRlZiYmaS5kZWYuaW5zZXJ0ZWQmJnUucHVzaChpKSk7aWYodS5sZW5ndGgpe3ZhciBmPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPTA7bjx1Lmxlbmd0aDtuKyspcHIodVtuXSxcImluc2VydGVkXCIsdCxlKX07bz9vdCh0LFwiaW5zZXJ0XCIsZik6ZigpfWwubGVuZ3RoJiZvdCh0LFwicG9zdHBhdGNoXCIsZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPGwubGVuZ3RoO24rKylwcihsW25dLFwiY29tcG9uZW50VXBkYXRlZFwiLHQsZSl9KTtpZighbylmb3IobiBpbiBzKWNbbl18fHByKHNbbl0sXCJ1bmJpbmRcIixlLGUsYSl9KGUsdCl9dmFyIHVyPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gbHIoZSx0KXt2YXIgbixyLGk9T2JqZWN0LmNyZWF0ZShudWxsKTtpZighZSlyZXR1cm4gaTtmb3Iobj0wO248ZS5sZW5ndGg7bisrKShyPWVbbl0pLm1vZGlmaWVyc3x8KHIubW9kaWZpZXJzPXVyKSxpW2ZyKHIpXT1yLHIuZGVmPUxlKHQuJG9wdGlvbnMsXCJkaXJlY3RpdmVzXCIsci5uYW1lKTtyZXR1cm4gaX1mdW5jdGlvbiBmcihlKXtyZXR1cm4gZS5yYXdOYW1lfHxlLm5hbWUrXCIuXCIrT2JqZWN0LmtleXMoZS5tb2RpZmllcnN8fHt9KS5qb2luKFwiLlwiKX1mdW5jdGlvbiBwcihlLHQsbixyLGkpe3ZhciBvPWUuZGVmJiZlLmRlZlt0XTtpZihvKXRyeXtvKG4uZWxtLGUsbixyLGkpfWNhdGNoKHIpe0hlKHIsbi5jb250ZXh0LFwiZGlyZWN0aXZlIFwiK2UubmFtZStcIiBcIit0K1wiIGhvb2tcIil9fXZhciBkcj1bdHIsc3JdO2Z1bmN0aW9uIHZyKGUscil7dmFyIGk9ci5jb21wb25lbnRPcHRpb25zO2lmKCEobihpKSYmITE9PT1pLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnN8fHQoZS5kYXRhLmF0dHJzKSYmdChyLmRhdGEuYXR0cnMpKSl7dmFyIG8sYSxzPXIuZWxtLGM9ZS5kYXRhLmF0dHJzfHx7fSx1PXIuZGF0YS5hdHRyc3x8e307Zm9yKG8gaW4gbih1Ll9fb2JfXykmJih1PXIuZGF0YS5hdHRycz1BKHt9LHUpKSx1KWE9dVtvXSxjW29dIT09YSYmaHIocyxvLGEsci5kYXRhLnByZSk7Zm9yKG8gaW4ocXx8WikmJnUudmFsdWUhPT1jLnZhbHVlJiZocihzLFwidmFsdWVcIix1LnZhbHVlKSxjKXQodVtvXSkmJihSbihvKT9zLnJlbW92ZUF0dHJpYnV0ZU5TKFBuLEhuKG8pKTpMbihvKXx8cy5yZW1vdmVBdHRyaWJ1dGUobykpfX1mdW5jdGlvbiBocihlLHQsbixyKXtyfHxlLnRhZ05hbWUuaW5kZXhPZihcIi1cIik+LTE/bXIoZSx0LG4pOkZuKHQpP0JuKG4pP2UucmVtb3ZlQXR0cmlidXRlKHQpOihuPVwiYWxsb3dmdWxsc2NyZWVuXCI9PT10JiZcIkVNQkVEXCI9PT1lLnRhZ05hbWU/XCJ0cnVlXCI6dCxlLnNldEF0dHJpYnV0ZSh0LG4pKTpMbih0KT9lLnNldEF0dHJpYnV0ZSh0LE1uKHQsbikpOlJuKHQpP0JuKG4pP2UucmVtb3ZlQXR0cmlidXRlTlMoUG4sSG4odCkpOmUuc2V0QXR0cmlidXRlTlMoUG4sdCxuKTptcihlLHQsbil9ZnVuY3Rpb24gbXIoZSx0LG4pe2lmKEJuKG4pKWUucmVtb3ZlQXR0cmlidXRlKHQpO2Vsc2V7aWYocSYmIVcmJlwiVEVYVEFSRUFcIj09PWUudGFnTmFtZSYmXCJwbGFjZWhvbGRlclwiPT09dCYmXCJcIiE9PW4mJiFlLl9faWVwaCl7dmFyIHI9ZnVuY3Rpb24odCl7dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLHIpfTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLHIpLGUuX19pZXBoPSEwfWUuc2V0QXR0cmlidXRlKHQsbil9fXZhciB5cj17Y3JlYXRlOnZyLHVwZGF0ZTp2cn07ZnVuY3Rpb24gZ3IoZSxyKXt2YXIgaT1yLmVsbSxvPXIuZGF0YSxhPWUuZGF0YTtpZighKHQoby5zdGF0aWNDbGFzcykmJnQoby5jbGFzcykmJih0KGEpfHx0KGEuc3RhdGljQ2xhc3MpJiZ0KGEuY2xhc3MpKSkpe3ZhciBzPVVuKHIpLGM9aS5fdHJhbnNpdGlvbkNsYXNzZXM7bihjKSYmKHM9em4ocyxLbihjKSkpLHMhPT1pLl9wcmV2Q2xhc3MmJihpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscyksaS5fcHJldkNsYXNzPXMpfX12YXIgX3IsYnIsJHIsd3IsQ3IseHIsa3I9e2NyZWF0ZTpncix1cGRhdGU6Z3J9LEFyPS9bXFx3KS4rXFwtXyRcXF1dLztmdW5jdGlvbiBPcihlKXt2YXIgdCxuLHIsaSxvLGE9ITEscz0hMSxjPSExLHU9ITEsbD0wLGY9MCxwPTAsZD0wO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspaWYobj10LHQ9ZS5jaGFyQ29kZUF0KHIpLGEpMzk9PT10JiY5MiE9PW4mJihhPSExKTtlbHNlIGlmKHMpMzQ9PT10JiY5MiE9PW4mJihzPSExKTtlbHNlIGlmKGMpOTY9PT10JiY5MiE9PW4mJihjPSExKTtlbHNlIGlmKHUpNDc9PT10JiY5MiE9PW4mJih1PSExKTtlbHNlIGlmKDEyNCE9PXR8fDEyND09PWUuY2hhckNvZGVBdChyKzEpfHwxMjQ9PT1lLmNoYXJDb2RlQXQoci0xKXx8bHx8Znx8cCl7c3dpdGNoKHQpe2Nhc2UgMzQ6cz0hMDticmVhaztjYXNlIDM5OmE9ITA7YnJlYWs7Y2FzZSA5NjpjPSEwO2JyZWFrO2Nhc2UgNDA6cCsrO2JyZWFrO2Nhc2UgNDE6cC0tO2JyZWFrO2Nhc2UgOTE6ZisrO2JyZWFrO2Nhc2UgOTM6Zi0tO2JyZWFrO2Nhc2UgMTIzOmwrKzticmVhaztjYXNlIDEyNTpsLS19aWYoNDc9PT10KXtmb3IodmFyIHY9ci0xLGg9dm9pZCAwO3Y+PTAmJlwiIFwiPT09KGg9ZS5jaGFyQXQodikpO3YtLSk7aCYmQXIudGVzdChoKXx8KHU9ITApfX1lbHNlIHZvaWQgMD09PWk/KGQ9cisxLGk9ZS5zbGljZSgwLHIpLnRyaW0oKSk6bSgpO2Z1bmN0aW9uIG0oKXsob3x8KG89W10pKS5wdXNoKGUuc2xpY2UoZCxyKS50cmltKCkpLGQ9cisxfWlmKHZvaWQgMD09PWk/aT1lLnNsaWNlKDAscikudHJpbSgpOjAhPT1kJiZtKCksbylmb3Iocj0wO3I8by5sZW5ndGg7cisrKWk9U3IoaSxvW3JdKTtyZXR1cm4gaX1mdW5jdGlvbiBTcihlLHQpe3ZhciBuPXQuaW5kZXhPZihcIihcIik7aWYobjwwKXJldHVybidfZihcIicrdCsnXCIpKCcrZStcIilcIjt2YXIgcj10LnNsaWNlKDAsbiksaT10LnNsaWNlKG4rMSk7cmV0dXJuJ19mKFwiJytyKydcIikoJytlKyhcIilcIiE9PWk/XCIsXCIraTppKX1mdW5jdGlvbiBUcihlLHQpe2NvbnNvbGUuZXJyb3IoXCJbVnVlIGNvbXBpbGVyXTogXCIrZSl9ZnVuY3Rpb24gTnIoZSx0KXtyZXR1cm4gZT9lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZVt0XX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pOltdfWZ1bmN0aW9uIEVyKGUsdCxuLHIsaSl7KGUucHJvcHN8fChlLnByb3BzPVtdKSkucHVzaChIcih7bmFtZTp0LHZhbHVlOm4sZHluYW1pYzppfSxyKSksZS5wbGFpbj0hMX1mdW5jdGlvbiBqcihlLHQsbixyLGkpeyhpP2UuZHluYW1pY0F0dHJzfHwoZS5keW5hbWljQXR0cnM9W10pOmUuYXR0cnN8fChlLmF0dHJzPVtdKSkucHVzaChIcih7bmFtZTp0LHZhbHVlOm4sZHluYW1pYzppfSxyKSksZS5wbGFpbj0hMX1mdW5jdGlvbiBEcihlLHQsbixyKXtlLmF0dHJzTWFwW3RdPW4sZS5hdHRyc0xpc3QucHVzaChIcih7bmFtZTp0LHZhbHVlOm59LHIpKX1mdW5jdGlvbiBMcihlLHQsbixyLGksbyxhLHMpeyhlLmRpcmVjdGl2ZXN8fChlLmRpcmVjdGl2ZXM9W10pKS5wdXNoKEhyKHtuYW1lOnQscmF3TmFtZTpuLHZhbHVlOnIsYXJnOmksaXNEeW5hbWljQXJnOm8sbW9kaWZpZXJzOmF9LHMpKSxlLnBsYWluPSExfWZ1bmN0aW9uIElyKGUsdCxuKXtyZXR1cm4gbj9cIl9wKFwiK3QrJyxcIicrZSsnXCIpJzplK3R9ZnVuY3Rpb24gTXIodCxuLHIsaSxvLGEscyxjKXt2YXIgdTsoaT1pfHxlKS5yaWdodD9jP249XCIoXCIrbitcIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KFwiK24rXCIpXCI6XCJjbGlja1wiPT09biYmKG49XCJjb250ZXh0bWVudVwiLGRlbGV0ZSBpLnJpZ2h0KTppLm1pZGRsZSYmKGM/bj1cIihcIituK1wiKT09PSdjbGljayc/J21vdXNldXAnOihcIituK1wiKVwiOlwiY2xpY2tcIj09PW4mJihuPVwibW91c2V1cFwiKSksaS5jYXB0dXJlJiYoZGVsZXRlIGkuY2FwdHVyZSxuPUlyKFwiIVwiLG4sYykpLGkub25jZSYmKGRlbGV0ZSBpLm9uY2Usbj1JcihcIn5cIixuLGMpKSxpLnBhc3NpdmUmJihkZWxldGUgaS5wYXNzaXZlLG49SXIoXCImXCIsbixjKSksaS5uYXRpdmU/KGRlbGV0ZSBpLm5hdGl2ZSx1PXQubmF0aXZlRXZlbnRzfHwodC5uYXRpdmVFdmVudHM9e30pKTp1PXQuZXZlbnRzfHwodC5ldmVudHM9e30pO3ZhciBsPUhyKHt2YWx1ZTpyLnRyaW0oKSxkeW5hbWljOmN9LHMpO2khPT1lJiYobC5tb2RpZmllcnM9aSk7dmFyIGY9dVtuXTtBcnJheS5pc0FycmF5KGYpP28/Zi51bnNoaWZ0KGwpOmYucHVzaChsKTp1W25dPWY/bz9bbCxmXTpbZixsXTpsLHQucGxhaW49ITF9ZnVuY3Rpb24gRnIoZSx0LG4pe3ZhciByPVByKGUsXCI6XCIrdCl8fFByKGUsXCJ2LWJpbmQ6XCIrdCk7aWYobnVsbCE9cilyZXR1cm4gT3Iocik7aWYoITEhPT1uKXt2YXIgaT1QcihlLHQpO2lmKG51bGwhPWkpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGkpfX1mdW5jdGlvbiBQcihlLHQsbil7dmFyIHI7aWYobnVsbCE9KHI9ZS5hdHRyc01hcFt0XSkpZm9yKHZhciBpPWUuYXR0cnNMaXN0LG89MCxhPWkubGVuZ3RoO288YTtvKyspaWYoaVtvXS5uYW1lPT09dCl7aS5zcGxpY2UobywxKTticmVha31yZXR1cm4gbiYmZGVsZXRlIGUuYXR0cnNNYXBbdF0scn1mdW5jdGlvbiBScihlLHQpe2Zvcih2YXIgbj1lLmF0dHJzTGlzdCxyPTAsaT1uLmxlbmd0aDtyPGk7cisrKXt2YXIgbz1uW3JdO2lmKHQudGVzdChvLm5hbWUpKXJldHVybiBuLnNwbGljZShyLDEpLG99fWZ1bmN0aW9uIEhyKGUsdCl7cmV0dXJuIHQmJihudWxsIT10LnN0YXJ0JiYoZS5zdGFydD10LnN0YXJ0KSxudWxsIT10LmVuZCYmKGUuZW5kPXQuZW5kKSksZX1mdW5jdGlvbiBCcihlLHQsbil7dmFyIHI9bnx8e30saT1yLm51bWJlcixvPVwiJCR2XCI7ci50cmltJiYobz1cIih0eXBlb2YgJCR2ID09PSAnc3RyaW5nJz8gJCR2LnRyaW0oKTogJCR2KVwiKSxpJiYobz1cIl9uKFwiK28rXCIpXCIpO3ZhciBhPVVyKHQsbyk7ZS5tb2RlbD17dmFsdWU6XCIoXCIrdCtcIilcIixleHByZXNzaW9uOkpTT04uc3RyaW5naWZ5KHQpLGNhbGxiYWNrOlwiZnVuY3Rpb24gKCQkdikge1wiK2ErXCJ9XCJ9fWZ1bmN0aW9uIFVyKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7aWYoZT1lLnRyaW0oKSxfcj1lLmxlbmd0aCxlLmluZGV4T2YoXCJbXCIpPDB8fGUubGFzdEluZGV4T2YoXCJdXCIpPF9yLTEpcmV0dXJuKHdyPWUubGFzdEluZGV4T2YoXCIuXCIpKT4tMT97ZXhwOmUuc2xpY2UoMCx3ciksa2V5OidcIicrZS5zbGljZSh3cisxKSsnXCInfTp7ZXhwOmUsa2V5Om51bGx9O2JyPWUsd3I9Q3I9eHI9MDtmb3IoOyF6cigpOylLcigkcj1WcigpKT9xcigkcik6OTE9PT0kciYmSnIoJHIpO3JldHVybntleHA6ZS5zbGljZSgwLENyKSxrZXk6ZS5zbGljZShDcisxLHhyKX19KGUpO3JldHVybiBudWxsPT09bi5rZXk/ZStcIj1cIit0OlwiJHNldChcIituLmV4cCtcIiwgXCIrbi5rZXkrXCIsIFwiK3QrXCIpXCJ9ZnVuY3Rpb24gVnIoKXtyZXR1cm4gYnIuY2hhckNvZGVBdCgrK3dyKX1mdW5jdGlvbiB6cigpe3JldHVybiB3cj49X3J9ZnVuY3Rpb24gS3IoZSl7cmV0dXJuIDM0PT09ZXx8Mzk9PT1lfWZ1bmN0aW9uIEpyKGUpe3ZhciB0PTE7Zm9yKENyPXdyOyF6cigpOylpZihLcihlPVZyKCkpKXFyKGUpO2Vsc2UgaWYoOTE9PT1lJiZ0KyssOTM9PT1lJiZ0LS0sMD09PXQpe3hyPXdyO2JyZWFrfX1mdW5jdGlvbiBxcihlKXtmb3IodmFyIHQ9ZTshenIoKSYmKGU9VnIoKSkhPT10Oyk7fXZhciBXcixacj1cIl9fclwiLEdyPVwiX19jXCI7ZnVuY3Rpb24gWHIoZSx0LG4pe3ZhciByPVdyO3JldHVybiBmdW5jdGlvbiBpKCl7bnVsbCE9PXQuYXBwbHkobnVsbCxhcmd1bWVudHMpJiZlaShlLGksbixyKX19dmFyIFlyPUtlJiYhKFgmJk51bWJlcihYWzFdKTw9NTMpO2Z1bmN0aW9uIFFyKGUsdCxuLHIpe2lmKFlyKXt2YXIgaT1zbixvPXQ7dD1vLl93cmFwcGVyPWZ1bmN0aW9uKGUpe2lmKGUudGFyZ2V0PT09ZS5jdXJyZW50VGFyZ2V0fHxlLnRpbWVTdGFtcD49aXx8ZS50aW1lU3RhbXA8PTB8fGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQhPT1kb2N1bWVudClyZXR1cm4gby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fVdyLmFkZEV2ZW50TGlzdGVuZXIoZSx0LFE/e2NhcHR1cmU6bixwYXNzaXZlOnJ9Om4pfWZ1bmN0aW9uIGVpKGUsdCxuLHIpeyhyfHxXcikucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHQuX3dyYXBwZXJ8fHQsbil9ZnVuY3Rpb24gdGkoZSxyKXtpZighdChlLmRhdGEub24pfHwhdChyLmRhdGEub24pKXt2YXIgaT1yLmRhdGEub258fHt9LG89ZS5kYXRhLm9ufHx7fTtXcj1yLmVsbSxmdW5jdGlvbihlKXtpZihuKGVbWnJdKSl7dmFyIHQ9cT9cImNoYW5nZVwiOlwiaW5wdXRcIjtlW3RdPVtdLmNvbmNhdChlW1pyXSxlW3RdfHxbXSksZGVsZXRlIGVbWnJdfW4oZVtHcl0pJiYoZS5jaGFuZ2U9W10uY29uY2F0KGVbR3JdLGUuY2hhbmdlfHxbXSksZGVsZXRlIGVbR3JdKX0oaSksaXQoaSxvLFFyLGVpLFhyLHIuY29udGV4dCksV3I9dm9pZCAwfX12YXIgbmkscmk9e2NyZWF0ZTp0aSx1cGRhdGU6dGl9O2Z1bmN0aW9uIGlpKGUscil7aWYoIXQoZS5kYXRhLmRvbVByb3BzKXx8IXQoci5kYXRhLmRvbVByb3BzKSl7dmFyIGksbyxhPXIuZWxtLHM9ZS5kYXRhLmRvbVByb3BzfHx7fSxjPXIuZGF0YS5kb21Qcm9wc3x8e307Zm9yKGkgaW4gbihjLl9fb2JfXykmJihjPXIuZGF0YS5kb21Qcm9wcz1BKHt9LGMpKSxzKWkgaW4gY3x8KGFbaV09XCJcIik7Zm9yKGkgaW4gYyl7aWYobz1jW2ldLFwidGV4dENvbnRlbnRcIj09PWl8fFwiaW5uZXJIVE1MXCI9PT1pKXtpZihyLmNoaWxkcmVuJiYoci5jaGlsZHJlbi5sZW5ndGg9MCksbz09PXNbaV0pY29udGludWU7MT09PWEuY2hpbGROb2Rlcy5sZW5ndGgmJmEucmVtb3ZlQ2hpbGQoYS5jaGlsZE5vZGVzWzBdKX1pZihcInZhbHVlXCI9PT1pJiZcIlBST0dSRVNTXCIhPT1hLnRhZ05hbWUpe2EuX3ZhbHVlPW87dmFyIHU9dChvKT9cIlwiOlN0cmluZyhvKTtvaShhLHUpJiYoYS52YWx1ZT11KX1lbHNlIGlmKFwiaW5uZXJIVE1MXCI9PT1pJiZXbihhLnRhZ05hbWUpJiZ0KGEuaW5uZXJIVE1MKSl7KG5pPW5pfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5pbm5lckhUTUw9XCI8c3ZnPlwiK28rXCI8L3N2Zz5cIjtmb3IodmFyIGw9bmkuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2wuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChsLmZpcnN0Q2hpbGQpfWVsc2UgaWYobyE9PXNbaV0pdHJ5e2FbaV09b31jYXRjaChlKXt9fX19ZnVuY3Rpb24gb2koZSx0KXtyZXR1cm4hZS5jb21wb3NpbmcmJihcIk9QVElPTlwiPT09ZS50YWdOYW1lfHxmdW5jdGlvbihlLHQpe3ZhciBuPSEwO3RyeXtuPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1lfWNhdGNoKGUpe31yZXR1cm4gbiYmZS52YWx1ZSE9PXR9KGUsdCl8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS52YWx1ZSxpPWUuX3ZNb2RpZmllcnM7aWYobihpKSl7aWYoaS5udW1iZXIpcmV0dXJuIGYocikhPT1mKHQpO2lmKGkudHJpbSlyZXR1cm4gci50cmltKCkhPT10LnRyaW0oKX1yZXR1cm4gciE9PXR9KGUsdCkpfXZhciBhaT17Y3JlYXRlOmlpLHVwZGF0ZTppaX0sc2k9ZyhmdW5jdGlvbihlKXt2YXIgdD17fSxuPS86KC4rKS87cmV0dXJuIGUuc3BsaXQoLzsoPyFbXihdKlxcKSkvZykuZm9yRWFjaChmdW5jdGlvbihlKXtpZihlKXt2YXIgcj1lLnNwbGl0KG4pO3IubGVuZ3RoPjEmJih0W3JbMF0udHJpbSgpXT1yWzFdLnRyaW0oKSl9fSksdH0pO2Z1bmN0aW9uIGNpKGUpe3ZhciB0PXVpKGUuc3R5bGUpO3JldHVybiBlLnN0YXRpY1N0eWxlP0EoZS5zdGF0aWNTdHlsZSx0KTp0fWZ1bmN0aW9uIHVpKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP08oZSk6XCJzdHJpbmdcIj09dHlwZW9mIGU/c2koZSk6ZX12YXIgbGksZmk9L14tLS8scGk9L1xccyohaW1wb3J0YW50JC8sZGk9ZnVuY3Rpb24oZSx0LG4pe2lmKGZpLnRlc3QodCkpZS5zdHlsZS5zZXRQcm9wZXJ0eSh0LG4pO2Vsc2UgaWYocGkudGVzdChuKSllLnN0eWxlLnNldFByb3BlcnR5KEModCksbi5yZXBsYWNlKHBpLFwiXCIpLFwiaW1wb3J0YW50XCIpO2Vsc2V7dmFyIHI9aGkodCk7aWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspZS5zdHlsZVtyXT1uW2ldO2Vsc2UgZS5zdHlsZVtyXT1ufX0sdmk9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLGhpPWcoZnVuY3Rpb24oZSl7aWYobGk9bGl8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJmaWx0ZXJcIiE9PShlPWIoZSkpJiZlIGluIGxpKXJldHVybiBlO2Zvcih2YXIgdD1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksbj0wO248dmkubGVuZ3RoO24rKyl7dmFyIHI9dmlbbl0rdDtpZihyIGluIGxpKXJldHVybiByfX0pO2Z1bmN0aW9uIG1pKGUscil7dmFyIGk9ci5kYXRhLG89ZS5kYXRhO2lmKCEodChpLnN0YXRpY1N0eWxlKSYmdChpLnN0eWxlKSYmdChvLnN0YXRpY1N0eWxlKSYmdChvLnN0eWxlKSkpe3ZhciBhLHMsYz1yLmVsbSx1PW8uc3RhdGljU3R5bGUsbD1vLm5vcm1hbGl6ZWRTdHlsZXx8by5zdHlsZXx8e30sZj11fHxsLHA9dWkoci5kYXRhLnN0eWxlKXx8e307ci5kYXRhLm5vcm1hbGl6ZWRTdHlsZT1uKHAuX19vYl9fKT9BKHt9LHApOnA7dmFyIGQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPXt9O2lmKHQpZm9yKHZhciBpPWU7aS5jb21wb25lbnRJbnN0YW5jZTspKGk9aS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZpLmRhdGEmJihuPWNpKGkuZGF0YSkpJiZBKHIsbik7KG49Y2koZS5kYXRhKSkmJkEocixuKTtmb3IodmFyIG89ZTtvPW8ucGFyZW50OylvLmRhdGEmJihuPWNpKG8uZGF0YSkpJiZBKHIsbik7cmV0dXJuIHJ9KHIsITApO2ZvcihzIGluIGYpdChkW3NdKSYmZGkoYyxzLFwiXCIpO2ZvcihzIGluIGQpKGE9ZFtzXSkhPT1mW3NdJiZkaShjLHMsbnVsbD09YT9cIlwiOmEpfX12YXIgeWk9e2NyZWF0ZTptaSx1cGRhdGU6bWl9LGdpPS9cXHMrLztmdW5jdGlvbiBfaShlLHQpe2lmKHQmJih0PXQudHJpbSgpKSlpZihlLmNsYXNzTGlzdCl0LmluZGV4T2YoXCIgXCIpPi0xP3Quc3BsaXQoZ2kpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGUuY2xhc3NMaXN0LmFkZCh0KX0pOmUuY2xhc3NMaXN0LmFkZCh0KTtlbHNle3ZhciBuPVwiIFwiKyhlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKStcIiBcIjtuLmluZGV4T2YoXCIgXCIrdCtcIiBcIik8MCYmZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLChuK3QpLnRyaW0oKSl9fWZ1bmN0aW9uIGJpKGUsdCl7aWYodCYmKHQ9dC50cmltKCkpKWlmKGUuY2xhc3NMaXN0KXQuaW5kZXhPZihcIiBcIik+LTE/dC5zcGxpdChnaSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS5jbGFzc0xpc3QucmVtb3ZlKHQpfSk6ZS5jbGFzc0xpc3QucmVtb3ZlKHQpLGUuY2xhc3NMaXN0Lmxlbmd0aHx8ZS5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKTtlbHNle2Zvcih2YXIgbj1cIiBcIisoZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIscj1cIiBcIit0K1wiIFwiO24uaW5kZXhPZihyKT49MDspbj1uLnJlcGxhY2UocixcIiBcIik7KG49bi50cmltKCkpP2Uuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixuKTplLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpfX1mdW5jdGlvbiAkaShlKXtpZihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIHQ9e307cmV0dXJuITEhPT1lLmNzcyYmQSh0LHdpKGUubmFtZXx8XCJ2XCIpKSxBKHQsZSksdH1yZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT93aShlKTp2b2lkIDB9fXZhciB3aT1nKGZ1bmN0aW9uKGUpe3JldHVybntlbnRlckNsYXNzOmUrXCItZW50ZXJcIixlbnRlclRvQ2xhc3M6ZStcIi1lbnRlci10b1wiLGVudGVyQWN0aXZlQ2xhc3M6ZStcIi1lbnRlci1hY3RpdmVcIixsZWF2ZUNsYXNzOmUrXCItbGVhdmVcIixsZWF2ZVRvQ2xhc3M6ZStcIi1sZWF2ZS10b1wiLGxlYXZlQWN0aXZlQ2xhc3M6ZStcIi1sZWF2ZS1hY3RpdmVcIn19KSxDaT1WJiYhVyx4aT1cInRyYW5zaXRpb25cIixraT1cImFuaW1hdGlvblwiLEFpPVwidHJhbnNpdGlvblwiLE9pPVwidHJhbnNpdGlvbmVuZFwiLFNpPVwiYW5pbWF0aW9uXCIsVGk9XCJhbmltYXRpb25lbmRcIjtDaSYmKHZvaWQgMD09PXdpbmRvdy5vbnRyYW5zaXRpb25lbmQmJnZvaWQgMCE9PXdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQmJihBaT1cIldlYmtpdFRyYW5zaXRpb25cIixPaT1cIndlYmtpdFRyYW5zaXRpb25FbmRcIiksdm9pZCAwPT09d2luZG93Lm9uYW5pbWF0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQmJihTaT1cIldlYmtpdEFuaW1hdGlvblwiLFRpPVwid2Via2l0QW5pbWF0aW9uRW5kXCIpKTt2YXIgTmk9Vj93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lP3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpOnNldFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUoKX07ZnVuY3Rpb24gRWkoZSl7TmkoZnVuY3Rpb24oKXtOaShlKX0pfWZ1bmN0aW9uIGppKGUsdCl7dmFyIG49ZS5fdHJhbnNpdGlvbkNsYXNzZXN8fChlLl90cmFuc2l0aW9uQ2xhc3Nlcz1bXSk7bi5pbmRleE9mKHQpPDAmJihuLnB1c2godCksX2koZSx0KSl9ZnVuY3Rpb24gRGkoZSx0KXtlLl90cmFuc2l0aW9uQ2xhc3NlcyYmaChlLl90cmFuc2l0aW9uQ2xhc3Nlcyx0KSxiaShlLHQpfWZ1bmN0aW9uIExpKGUsdCxuKXt2YXIgcj1NaShlLHQpLGk9ci50eXBlLG89ci50aW1lb3V0LGE9ci5wcm9wQ291bnQ7aWYoIWkpcmV0dXJuIG4oKTt2YXIgcz1pPT09eGk/T2k6VGksYz0wLHU9ZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIocyxsKSxuKCl9LGw9ZnVuY3Rpb24odCl7dC50YXJnZXQ9PT1lJiYrK2M+PWEmJnUoKX07c2V0VGltZW91dChmdW5jdGlvbigpe2M8YSYmdSgpfSxvKzEpLGUuYWRkRXZlbnRMaXN0ZW5lcihzLGwpfXZhciBJaT0vXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO2Z1bmN0aW9uIE1pKGUsdCl7dmFyIG4scj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxpPShyW0FpK1wiRGVsYXlcIl18fFwiXCIpLnNwbGl0KFwiLCBcIiksbz0ocltBaStcIkR1cmF0aW9uXCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGE9RmkoaSxvKSxzPShyW1NpK1wiRGVsYXlcIl18fFwiXCIpLnNwbGl0KFwiLCBcIiksYz0ocltTaStcIkR1cmF0aW9uXCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLHU9RmkocyxjKSxsPTAsZj0wO3JldHVybiB0PT09eGk/YT4wJiYobj14aSxsPWEsZj1vLmxlbmd0aCk6dD09PWtpP3U+MCYmKG49a2ksbD11LGY9Yy5sZW5ndGgpOmY9KG49KGw9TWF0aC5tYXgoYSx1KSk+MD9hPnU/eGk6a2k6bnVsbCk/bj09PXhpP28ubGVuZ3RoOmMubGVuZ3RoOjAse3R5cGU6bix0aW1lb3V0OmwscHJvcENvdW50OmYsaGFzVHJhbnNmb3JtOm49PT14aSYmSWkudGVzdChyW0FpK1wiUHJvcGVydHlcIl0pfX1mdW5jdGlvbiBGaShlLHQpe2Zvcig7ZS5sZW5ndGg8dC5sZW5ndGg7KWU9ZS5jb25jYXQoZSk7cmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsdC5tYXAoZnVuY3Rpb24odCxuKXtyZXR1cm4gUGkodCkrUGkoZVtuXSl9KSl9ZnVuY3Rpb24gUGkoZSl7cmV0dXJuIDFlMypOdW1iZXIoZS5zbGljZSgwLC0xKS5yZXBsYWNlKFwiLFwiLFwiLlwiKSl9ZnVuY3Rpb24gUmkoZSxyKXt2YXIgaT1lLmVsbTtuKGkuX2xlYXZlQ2IpJiYoaS5fbGVhdmVDYi5jYW5jZWxsZWQ9ITAsaS5fbGVhdmVDYigpKTt2YXIgYT0kaShlLmRhdGEudHJhbnNpdGlvbik7aWYoIXQoYSkmJiFuKGkuX2VudGVyQ2IpJiYxPT09aS5ub2RlVHlwZSl7Zm9yKHZhciBzPWEuY3NzLGM9YS50eXBlLHU9YS5lbnRlckNsYXNzLGw9YS5lbnRlclRvQ2xhc3MscD1hLmVudGVyQWN0aXZlQ2xhc3MsZD1hLmFwcGVhckNsYXNzLHY9YS5hcHBlYXJUb0NsYXNzLGg9YS5hcHBlYXJBY3RpdmVDbGFzcyxtPWEuYmVmb3JlRW50ZXIseT1hLmVudGVyLGc9YS5hZnRlckVudGVyLF89YS5lbnRlckNhbmNlbGxlZCxiPWEuYmVmb3JlQXBwZWFyLCQ9YS5hcHBlYXIsdz1hLmFmdGVyQXBwZWFyLEM9YS5hcHBlYXJDYW5jZWxsZWQseD1hLmR1cmF0aW9uLGs9WnQsQT1adC4kdm5vZGU7QSYmQS5wYXJlbnQ7KWs9QS5jb250ZXh0LEE9QS5wYXJlbnQ7dmFyIE89IWsuX2lzTW91bnRlZHx8IWUuaXNSb290SW5zZXJ0O2lmKCFPfHwkfHxcIlwiPT09JCl7dmFyIFM9TyYmZD9kOnUsVD1PJiZoP2g6cCxOPU8mJnY/djpsLEU9TyYmYnx8bSxqPU8mJlwiZnVuY3Rpb25cIj09dHlwZW9mICQ/JDp5LEw9TyYmd3x8ZyxJPU8mJkN8fF8sTT1mKG8oeCk/eC5lbnRlcjp4KSxGPSExIT09cyYmIVcsUD1VaShqKSxSPWkuX2VudGVyQ2I9RChmdW5jdGlvbigpe0YmJihEaShpLE4pLERpKGksVCkpLFIuY2FuY2VsbGVkPyhGJiZEaShpLFMpLEkmJkkoaSkpOkwmJkwoaSksaS5fZW50ZXJDYj1udWxsfSk7ZS5kYXRhLnNob3d8fG90KGUsXCJpbnNlcnRcIixmdW5jdGlvbigpe3ZhciB0PWkucGFyZW50Tm9kZSxuPXQmJnQuX3BlbmRpbmcmJnQuX3BlbmRpbmdbZS5rZXldO24mJm4udGFnPT09ZS50YWcmJm4uZWxtLl9sZWF2ZUNiJiZuLmVsbS5fbGVhdmVDYigpLGomJmooaSxSKX0pLEUmJkUoaSksRiYmKGppKGksUyksamkoaSxUKSxFaShmdW5jdGlvbigpe0RpKGksUyksUi5jYW5jZWxsZWR8fChqaShpLE4pLFB8fChCaShNKT9zZXRUaW1lb3V0KFIsTSk6TGkoaSxjLFIpKSl9KSksZS5kYXRhLnNob3cmJihyJiZyKCksaiYmaihpLFIpKSxGfHxQfHxSKCl9fX1mdW5jdGlvbiBIaShlLHIpe3ZhciBpPWUuZWxtO24oaS5fZW50ZXJDYikmJihpLl9lbnRlckNiLmNhbmNlbGxlZD0hMCxpLl9lbnRlckNiKCkpO3ZhciBhPSRpKGUuZGF0YS50cmFuc2l0aW9uKTtpZih0KGEpfHwxIT09aS5ub2RlVHlwZSlyZXR1cm4gcigpO2lmKCFuKGkuX2xlYXZlQ2IpKXt2YXIgcz1hLmNzcyxjPWEudHlwZSx1PWEubGVhdmVDbGFzcyxsPWEubGVhdmVUb0NsYXNzLHA9YS5sZWF2ZUFjdGl2ZUNsYXNzLGQ9YS5iZWZvcmVMZWF2ZSx2PWEubGVhdmUsaD1hLmFmdGVyTGVhdmUsbT1hLmxlYXZlQ2FuY2VsbGVkLHk9YS5kZWxheUxlYXZlLGc9YS5kdXJhdGlvbixfPSExIT09cyYmIVcsYj1VaSh2KSwkPWYobyhnKT9nLmxlYXZlOmcpLHc9aS5fbGVhdmVDYj1EKGZ1bmN0aW9uKCl7aS5wYXJlbnROb2RlJiZpLnBhcmVudE5vZGUuX3BlbmRpbmcmJihpLnBhcmVudE5vZGUuX3BlbmRpbmdbZS5rZXldPW51bGwpLF8mJihEaShpLGwpLERpKGkscCkpLHcuY2FuY2VsbGVkPyhfJiZEaShpLHUpLG0mJm0oaSkpOihyKCksaCYmaChpKSksaS5fbGVhdmVDYj1udWxsfSk7eT95KEMpOkMoKX1mdW5jdGlvbiBDKCl7dy5jYW5jZWxsZWR8fCghZS5kYXRhLnNob3cmJmkucGFyZW50Tm9kZSYmKChpLnBhcmVudE5vZGUuX3BlbmRpbmd8fChpLnBhcmVudE5vZGUuX3BlbmRpbmc9e30pKVtlLmtleV09ZSksZCYmZChpKSxfJiYoamkoaSx1KSxqaShpLHApLEVpKGZ1bmN0aW9uKCl7RGkoaSx1KSx3LmNhbmNlbGxlZHx8KGppKGksbCksYnx8KEJpKCQpP3NldFRpbWVvdXQodywkKTpMaShpLGMsdykpKX0pKSx2JiZ2KGksdyksX3x8Ynx8dygpKX19ZnVuY3Rpb24gQmkoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJiFpc05hTihlKX1mdW5jdGlvbiBVaShlKXtpZih0KGUpKXJldHVybiExO3ZhciByPWUuZm5zO3JldHVybiBuKHIpP1VpKEFycmF5LmlzQXJyYXkocik/clswXTpyKTooZS5fbGVuZ3RofHxlLmxlbmd0aCk+MX1mdW5jdGlvbiBWaShlLHQpeyEwIT09dC5kYXRhLnNob3cmJlJpKHQpfXZhciB6aT1mdW5jdGlvbihlKXt2YXIgbyxhLHM9e30sYz1lLm1vZHVsZXMsdT1lLm5vZGVPcHM7Zm9yKG89MDtvPGlyLmxlbmd0aDsrK28pZm9yKHNbaXJbb11dPVtdLGE9MDthPGMubGVuZ3RoOysrYSluKGNbYV1baXJbb11dKSYmc1tpcltvXV0ucHVzaChjW2FdW2lyW29dXSk7ZnVuY3Rpb24gbChlKXt2YXIgdD11LnBhcmVudE5vZGUoZSk7bih0KSYmdS5yZW1vdmVDaGlsZCh0LGUpfWZ1bmN0aW9uIGYoZSx0LGksbyxhLGMsbCl7aWYobihlLmVsbSkmJm4oYykmJihlPWNbbF09bWUoZSkpLGUuaXNSb290SW5zZXJ0PSFhLCFmdW5jdGlvbihlLHQsaSxvKXt2YXIgYT1lLmRhdGE7aWYobihhKSl7dmFyIGM9bihlLmNvbXBvbmVudEluc3RhbmNlKSYmYS5rZWVwQWxpdmU7aWYobihhPWEuaG9vaykmJm4oYT1hLmluaXQpJiZhKGUsITEpLG4oZS5jb21wb25lbnRJbnN0YW5jZSkpcmV0dXJuIGQoZSx0KSx2KGksZS5lbG0sbykscihjKSYmZnVuY3Rpb24oZSx0LHIsaSl7Zm9yKHZhciBvLGE9ZTthLmNvbXBvbmVudEluc3RhbmNlOylpZihhPWEuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLG4obz1hLmRhdGEpJiZuKG89by50cmFuc2l0aW9uKSl7Zm9yKG89MDtvPHMuYWN0aXZhdGUubGVuZ3RoOysrbylzLmFjdGl2YXRlW29dKHJyLGEpO3QucHVzaChhKTticmVha312KHIsZS5lbG0saSl9KGUsdCxpLG8pLCEwfX0oZSx0LGksbykpe3ZhciBmPWUuZGF0YSxwPWUuY2hpbGRyZW4sbT1lLnRhZztuKG0pPyhlLmVsbT1lLm5zP3UuY3JlYXRlRWxlbWVudE5TKGUubnMsbSk6dS5jcmVhdGVFbGVtZW50KG0sZSksZyhlKSxoKGUscCx0KSxuKGYpJiZ5KGUsdCksdihpLGUuZWxtLG8pKTpyKGUuaXNDb21tZW50KT8oZS5lbG09dS5jcmVhdGVDb21tZW50KGUudGV4dCksdihpLGUuZWxtLG8pKTooZS5lbG09dS5jcmVhdGVUZXh0Tm9kZShlLnRleHQpLHYoaSxlLmVsbSxvKSl9fWZ1bmN0aW9uIGQoZSx0KXtuKGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSYmKHQucHVzaC5hcHBseSh0LGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSxlLmRhdGEucGVuZGluZ0luc2VydD1udWxsKSxlLmVsbT1lLmNvbXBvbmVudEluc3RhbmNlLiRlbCxtKGUpPyh5KGUsdCksZyhlKSk6KG5yKGUpLHQucHVzaChlKSl9ZnVuY3Rpb24gdihlLHQscil7bihlKSYmKG4ocik/dS5wYXJlbnROb2RlKHIpPT09ZSYmdS5pbnNlcnRCZWZvcmUoZSx0LHIpOnUuYXBwZW5kQ2hpbGQoZSx0KSl9ZnVuY3Rpb24gaChlLHQsbil7aWYoQXJyYXkuaXNBcnJheSh0KSlmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrcilmKHRbcl0sbixlLmVsbSxudWxsLCEwLHQscik7ZWxzZSBpKGUudGV4dCkmJnUuYXBwZW5kQ2hpbGQoZS5lbG0sdS5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoZS50ZXh0KSkpfWZ1bmN0aW9uIG0oZSl7Zm9yKDtlLmNvbXBvbmVudEluc3RhbmNlOyllPWUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO3JldHVybiBuKGUudGFnKX1mdW5jdGlvbiB5KGUsdCl7Zm9yKHZhciByPTA7cjxzLmNyZWF0ZS5sZW5ndGg7KytyKXMuY3JlYXRlW3JdKHJyLGUpO24obz1lLmRhdGEuaG9vaykmJihuKG8uY3JlYXRlKSYmby5jcmVhdGUocnIsZSksbihvLmluc2VydCkmJnQucHVzaChlKSl9ZnVuY3Rpb24gZyhlKXt2YXIgdDtpZihuKHQ9ZS5mblNjb3BlSWQpKXUuc2V0U3R5bGVTY29wZShlLmVsbSx0KTtlbHNlIGZvcih2YXIgcj1lO3I7KW4odD1yLmNvbnRleHQpJiZuKHQ9dC4kb3B0aW9ucy5fc2NvcGVJZCkmJnUuc2V0U3R5bGVTY29wZShlLmVsbSx0KSxyPXIucGFyZW50O24odD1adCkmJnQhPT1lLmNvbnRleHQmJnQhPT1lLmZuQ29udGV4dCYmbih0PXQuJG9wdGlvbnMuX3Njb3BlSWQpJiZ1LnNldFN0eWxlU2NvcGUoZS5lbG0sdCl9ZnVuY3Rpb24gXyhlLHQsbixyLGksbyl7Zm9yKDtyPD1pOysrcilmKG5bcl0sbyxlLHQsITEsbixyKX1mdW5jdGlvbiBiKGUpe3ZhciB0LHIsaT1lLmRhdGE7aWYobihpKSlmb3Iobih0PWkuaG9vaykmJm4odD10LmRlc3Ryb3kpJiZ0KGUpLHQ9MDt0PHMuZGVzdHJveS5sZW5ndGg7Kyt0KXMuZGVzdHJveVt0XShlKTtpZihuKHQ9ZS5jaGlsZHJlbikpZm9yKHI9MDtyPGUuY2hpbGRyZW4ubGVuZ3RoOysrciliKGUuY2hpbGRyZW5bcl0pfWZ1bmN0aW9uICQoZSx0LHIpe2Zvcig7dDw9cjsrK3Qpe3ZhciBpPWVbdF07bihpKSYmKG4oaS50YWcpPyh3KGkpLGIoaSkpOmwoaS5lbG0pKX19ZnVuY3Rpb24gdyhlLHQpe2lmKG4odCl8fG4oZS5kYXRhKSl7dmFyIHIsaT1zLnJlbW92ZS5sZW5ndGgrMTtmb3Iobih0KT90Lmxpc3RlbmVycys9aTp0PWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpezA9PS0tbi5saXN0ZW5lcnMmJmwoZSl9cmV0dXJuIG4ubGlzdGVuZXJzPXQsbn0oZS5lbG0saSksbihyPWUuY29tcG9uZW50SW5zdGFuY2UpJiZuKHI9ci5fdm5vZGUpJiZuKHIuZGF0YSkmJncocix0KSxyPTA7cjxzLnJlbW92ZS5sZW5ndGg7KytyKXMucmVtb3ZlW3JdKGUsdCk7bihyPWUuZGF0YS5ob29rKSYmbihyPXIucmVtb3ZlKT9yKGUsdCk6dCgpfWVsc2UgbChlLmVsbSl9ZnVuY3Rpb24gQyhlLHQscixpKXtmb3IodmFyIG89cjtvPGk7bysrKXt2YXIgYT10W29dO2lmKG4oYSkmJm9yKGUsYSkpcmV0dXJuIG99fWZ1bmN0aW9uIHgoZSxpLG8sYSxjLGwpe2lmKGUhPT1pKXtuKGkuZWxtKSYmbihhKSYmKGk9YVtjXT1tZShpKSk7dmFyIHA9aS5lbG09ZS5lbG07aWYocihlLmlzQXN5bmNQbGFjZWhvbGRlcikpbihpLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCk/TyhlLmVsbSxpLG8pOmkuaXNBc3luY1BsYWNlaG9sZGVyPSEwO2Vsc2UgaWYocihpLmlzU3RhdGljKSYmcihlLmlzU3RhdGljKSYmaS5rZXk9PT1lLmtleSYmKHIoaS5pc0Nsb25lZCl8fHIoaS5pc09uY2UpKSlpLmNvbXBvbmVudEluc3RhbmNlPWUuY29tcG9uZW50SW5zdGFuY2U7ZWxzZXt2YXIgZCx2PWkuZGF0YTtuKHYpJiZuKGQ9di5ob29rKSYmbihkPWQucHJlcGF0Y2gpJiZkKGUsaSk7dmFyIGg9ZS5jaGlsZHJlbix5PWkuY2hpbGRyZW47aWYobih2KSYmbShpKSl7Zm9yKGQ9MDtkPHMudXBkYXRlLmxlbmd0aDsrK2Qpcy51cGRhdGVbZF0oZSxpKTtuKGQ9di5ob29rKSYmbihkPWQudXBkYXRlKSYmZChlLGkpfXQoaS50ZXh0KT9uKGgpJiZuKHkpP2ghPT15JiZmdW5jdGlvbihlLHIsaSxvLGEpe2Zvcih2YXIgcyxjLGwscD0wLGQ9MCx2PXIubGVuZ3RoLTEsaD1yWzBdLG09clt2XSx5PWkubGVuZ3RoLTEsZz1pWzBdLGI9aVt5XSx3PSFhO3A8PXYmJmQ8PXk7KXQoaCk/aD1yWysrcF06dChtKT9tPXJbLS12XTpvcihoLGcpPyh4KGgsZyxvLGksZCksaD1yWysrcF0sZz1pWysrZF0pOm9yKG0sYik/KHgobSxiLG8saSx5KSxtPXJbLS12XSxiPWlbLS15XSk6b3IoaCxiKT8oeChoLGIsbyxpLHkpLHcmJnUuaW5zZXJ0QmVmb3JlKGUsaC5lbG0sdS5uZXh0U2libGluZyhtLmVsbSkpLGg9clsrK3BdLGI9aVstLXldKTpvcihtLGcpPyh4KG0sZyxvLGksZCksdyYmdS5pbnNlcnRCZWZvcmUoZSxtLmVsbSxoLmVsbSksbT1yWy0tdl0sZz1pWysrZF0pOih0KHMpJiYocz1hcihyLHAsdikpLHQoYz1uKGcua2V5KT9zW2cua2V5XTpDKGcscixwLHYpKT9mKGcsbyxlLGguZWxtLCExLGksZCk6b3IobD1yW2NdLGcpPyh4KGwsZyxvLGksZCkscltjXT12b2lkIDAsdyYmdS5pbnNlcnRCZWZvcmUoZSxsLmVsbSxoLmVsbSkpOmYoZyxvLGUsaC5lbG0sITEsaSxkKSxnPWlbKytkXSk7cD52P18oZSx0KGlbeSsxXSk/bnVsbDppW3krMV0uZWxtLGksZCx5LG8pOmQ+eSYmJChyLHAsdil9KHAsaCx5LG8sbCk6bih5KT8obihlLnRleHQpJiZ1LnNldFRleHRDb250ZW50KHAsXCJcIiksXyhwLG51bGwseSwwLHkubGVuZ3RoLTEsbykpOm4oaCk/JChoLDAsaC5sZW5ndGgtMSk6bihlLnRleHQpJiZ1LnNldFRleHRDb250ZW50KHAsXCJcIik6ZS50ZXh0IT09aS50ZXh0JiZ1LnNldFRleHRDb250ZW50KHAsaS50ZXh0KSxuKHYpJiZuKGQ9di5ob29rKSYmbihkPWQucG9zdHBhdGNoKSYmZChlLGkpfX19ZnVuY3Rpb24gayhlLHQsaSl7aWYocihpKSYmbihlLnBhcmVudCkpZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0PXQ7ZWxzZSBmb3IodmFyIG89MDtvPHQubGVuZ3RoOysrbyl0W29dLmRhdGEuaG9vay5pbnNlcnQodFtvXSl9dmFyIEE9cChcImF0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleVwiKTtmdW5jdGlvbiBPKGUsdCxpLG8pe3ZhciBhLHM9dC50YWcsYz10LmRhdGEsdT10LmNoaWxkcmVuO2lmKG89b3x8YyYmYy5wcmUsdC5lbG09ZSxyKHQuaXNDb21tZW50KSYmbih0LmFzeW5jRmFjdG9yeSkpcmV0dXJuIHQuaXNBc3luY1BsYWNlaG9sZGVyPSEwLCEwO2lmKG4oYykmJihuKGE9Yy5ob29rKSYmbihhPWEuaW5pdCkmJmEodCwhMCksbihhPXQuY29tcG9uZW50SW5zdGFuY2UpKSlyZXR1cm4gZCh0LGkpLCEwO2lmKG4ocykpe2lmKG4odSkpaWYoZS5oYXNDaGlsZE5vZGVzKCkpaWYobihhPWMpJiZuKGE9YS5kb21Qcm9wcykmJm4oYT1hLmlubmVySFRNTCkpe2lmKGEhPT1lLmlubmVySFRNTClyZXR1cm4hMX1lbHNle2Zvcih2YXIgbD0hMCxmPWUuZmlyc3RDaGlsZCxwPTA7cDx1Lmxlbmd0aDtwKyspe2lmKCFmfHwhTyhmLHVbcF0saSxvKSl7bD0hMTticmVha31mPWYubmV4dFNpYmxpbmd9aWYoIWx8fGYpcmV0dXJuITF9ZWxzZSBoKHQsdSxpKTtpZihuKGMpKXt2YXIgdj0hMTtmb3IodmFyIG0gaW4gYylpZighQShtKSl7dj0hMCx5KHQsaSk7YnJlYWt9IXYmJmMuY2xhc3MmJnR0KGMuY2xhc3MpfX1lbHNlIGUuZGF0YSE9PXQudGV4dCYmKGUuZGF0YT10LnRleHQpO3JldHVybiEwfXJldHVybiBmdW5jdGlvbihlLGksbyxhKXtpZighdChpKSl7dmFyIGMsbD0hMSxwPVtdO2lmKHQoZSkpbD0hMCxmKGkscCk7ZWxzZXt2YXIgZD1uKGUubm9kZVR5cGUpO2lmKCFkJiZvcihlLGkpKXgoZSxpLHAsbnVsbCxudWxsLGEpO2Vsc2V7aWYoZCl7aWYoMT09PWUubm9kZVR5cGUmJmUuaGFzQXR0cmlidXRlKEwpJiYoZS5yZW1vdmVBdHRyaWJ1dGUoTCksbz0hMCkscihvKSYmTyhlLGkscCkpcmV0dXJuIGsoaSxwLCEwKSxlO2M9ZSxlPW5ldyBwZSh1LnRhZ05hbWUoYykudG9Mb3dlckNhc2UoKSx7fSxbXSx2b2lkIDAsYyl9dmFyIHY9ZS5lbG0saD11LnBhcmVudE5vZGUodik7aWYoZihpLHAsdi5fbGVhdmVDYj9udWxsOmgsdS5uZXh0U2libGluZyh2KSksbihpLnBhcmVudCkpZm9yKHZhciB5PWkucGFyZW50LGc9bShpKTt5Oyl7Zm9yKHZhciBfPTA7XzxzLmRlc3Ryb3kubGVuZ3RoOysrXylzLmRlc3Ryb3lbX10oeSk7aWYoeS5lbG09aS5lbG0sZyl7Zm9yKHZhciB3PTA7dzxzLmNyZWF0ZS5sZW5ndGg7Kyt3KXMuY3JlYXRlW3ddKHJyLHkpO3ZhciBDPXkuZGF0YS5ob29rLmluc2VydDtpZihDLm1lcmdlZClmb3IodmFyIEE9MTtBPEMuZm5zLmxlbmd0aDtBKyspQy5mbnNbQV0oKX1lbHNlIG5yKHkpO3k9eS5wYXJlbnR9bihoKT8kKFtlXSwwLDApOm4oZS50YWcpJiZiKGUpfX1yZXR1cm4gayhpLHAsbCksaS5lbG19bihlKSYmYihlKX19KHtub2RlT3BzOmVyLG1vZHVsZXM6W3lyLGtyLHJpLGFpLHlpLFY/e2NyZWF0ZTpWaSxhY3RpdmF0ZTpWaSxyZW1vdmU6ZnVuY3Rpb24oZSx0KXshMCE9PWUuZGF0YS5zaG93P0hpKGUsdCk6dCgpfX06e31dLmNvbmNhdChkcil9KTtXJiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O2UmJmUudm1vZGVsJiZZaShlLFwiaW5wdXRcIil9KTt2YXIgS2k9e2luc2VydGVkOmZ1bmN0aW9uKGUsdCxuLHIpe1wic2VsZWN0XCI9PT1uLnRhZz8oci5lbG0mJiFyLmVsbS5fdk9wdGlvbnM/b3QobixcInBvc3RwYXRjaFwiLGZ1bmN0aW9uKCl7S2kuY29tcG9uZW50VXBkYXRlZChlLHQsbil9KTpKaShlLHQsbi5jb250ZXh0KSxlLl92T3B0aW9ucz1bXS5tYXAuY2FsbChlLm9wdGlvbnMsWmkpKTooXCJ0ZXh0YXJlYVwiPT09bi50YWd8fFluKGUudHlwZSkpJiYoZS5fdk1vZGlmaWVycz10Lm1vZGlmaWVycyx0Lm1vZGlmaWVycy5sYXp5fHwoZS5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25zdGFydFwiLEdpKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbmVuZFwiLFhpKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixYaSksVyYmKGUudm1vZGVsPSEwKSkpfSxjb21wb25lbnRVcGRhdGVkOmZ1bmN0aW9uKGUsdCxuKXtpZihcInNlbGVjdFwiPT09bi50YWcpe0ppKGUsdCxuLmNvbnRleHQpO3ZhciByPWUuX3ZPcHRpb25zLGk9ZS5fdk9wdGlvbnM9W10ubWFwLmNhbGwoZS5vcHRpb25zLFppKTtpZihpLnNvbWUoZnVuY3Rpb24oZSx0KXtyZXR1cm4hRShlLHJbdF0pfSkpKGUubXVsdGlwbGU/dC52YWx1ZS5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiBXaShlLGkpfSk6dC52YWx1ZSE9PXQub2xkVmFsdWUmJldpKHQudmFsdWUsaSkpJiZZaShlLFwiY2hhbmdlXCIpfX19O2Z1bmN0aW9uIEppKGUsdCxuKXtxaShlLHQsbiksKHF8fFopJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cWkoZSx0LG4pfSwwKX1mdW5jdGlvbiBxaShlLHQsbil7dmFyIHI9dC52YWx1ZSxpPWUubXVsdGlwbGU7aWYoIWl8fEFycmF5LmlzQXJyYXkocikpe2Zvcih2YXIgbyxhLHM9MCxjPWUub3B0aW9ucy5sZW5ndGg7czxjO3MrKylpZihhPWUub3B0aW9uc1tzXSxpKW89aihyLFppKGEpKT4tMSxhLnNlbGVjdGVkIT09byYmKGEuc2VsZWN0ZWQ9byk7ZWxzZSBpZihFKFppKGEpLHIpKXJldHVybiB2b2lkKGUuc2VsZWN0ZWRJbmRleCE9PXMmJihlLnNlbGVjdGVkSW5kZXg9cykpO2l8fChlLnNlbGVjdGVkSW5kZXg9LTEpfX1mdW5jdGlvbiBXaShlLHQpe3JldHVybiB0LmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiFFKHQsZSl9KX1mdW5jdGlvbiBaaShlKXtyZXR1cm5cIl92YWx1ZVwiaW4gZT9lLl92YWx1ZTplLnZhbHVlfWZ1bmN0aW9uIEdpKGUpe2UudGFyZ2V0LmNvbXBvc2luZz0hMH1mdW5jdGlvbiBYaShlKXtlLnRhcmdldC5jb21wb3NpbmcmJihlLnRhcmdldC5jb21wb3Npbmc9ITEsWWkoZS50YXJnZXQsXCJpbnB1dFwiKSl9ZnVuY3Rpb24gWWkoZSx0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7bi5pbml0RXZlbnQodCwhMCwhMCksZS5kaXNwYXRjaEV2ZW50KG4pfWZ1bmN0aW9uIFFpKGUpe3JldHVybiFlLmNvbXBvbmVudEluc3RhbmNlfHxlLmRhdGEmJmUuZGF0YS50cmFuc2l0aW9uP2U6UWkoZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpfXZhciBlbz17bW9kZWw6S2ksc2hvdzp7YmluZDpmdW5jdGlvbihlLHQsbil7dmFyIHI9dC52YWx1ZSxpPShuPVFpKG4pKS5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbixvPWUuX192T3JpZ2luYWxEaXNwbGF5PVwibm9uZVwiPT09ZS5zdHlsZS5kaXNwbGF5P1wiXCI6ZS5zdHlsZS5kaXNwbGF5O3ImJmk/KG4uZGF0YS5zaG93PSEwLFJpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9b30pKTplLnN0eWxlLmRpc3BsYXk9cj9vOlwibm9uZVwifSx1cGRhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQudmFsdWU7IXIhPSF0Lm9sZFZhbHVlJiYoKG49UWkobikpLmRhdGEmJm4uZGF0YS50cmFuc2l0aW9uPyhuLmRhdGEuc2hvdz0hMCxyP1JpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9ZS5fX3ZPcmlnaW5hbERpc3BsYXl9KTpIaShuLGZ1bmN0aW9uKCl7ZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSkpOmUuc3R5bGUuZGlzcGxheT1yP2UuX192T3JpZ2luYWxEaXNwbGF5Olwibm9uZVwiKX0sdW5iaW5kOmZ1bmN0aW9uKGUsdCxuLHIsaSl7aXx8KGUuc3R5bGUuZGlzcGxheT1lLl9fdk9yaWdpbmFsRGlzcGxheSl9fX0sdG89e25hbWU6U3RyaW5nLGFwcGVhcjpCb29sZWFuLGNzczpCb29sZWFuLG1vZGU6U3RyaW5nLHR5cGU6U3RyaW5nLGVudGVyQ2xhc3M6U3RyaW5nLGxlYXZlQ2xhc3M6U3RyaW5nLGVudGVyVG9DbGFzczpTdHJpbmcsbGVhdmVUb0NsYXNzOlN0cmluZyxlbnRlckFjdGl2ZUNsYXNzOlN0cmluZyxsZWF2ZUFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJDbGFzczpTdHJpbmcsYXBwZWFyQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhclRvQ2xhc3M6U3RyaW5nLGR1cmF0aW9uOltOdW1iZXIsU3RyaW5nLE9iamVjdF19O2Z1bmN0aW9uIG5vKGUpe3ZhciB0PWUmJmUuY29tcG9uZW50T3B0aW9ucztyZXR1cm4gdCYmdC5DdG9yLm9wdGlvbnMuYWJzdHJhY3Q/bm8oenQodC5jaGlsZHJlbikpOmV9ZnVuY3Rpb24gcm8oZSl7dmFyIHQ9e30sbj1lLiRvcHRpb25zO2Zvcih2YXIgciBpbiBuLnByb3BzRGF0YSl0W3JdPWVbcl07dmFyIGk9bi5fcGFyZW50TGlzdGVuZXJzO2Zvcih2YXIgbyBpbiBpKXRbYihvKV09aVtvXTtyZXR1cm4gdH1mdW5jdGlvbiBpbyhlLHQpe2lmKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QodC50YWcpKXJldHVybiBlKFwia2VlcC1hbGl2ZVwiLHtwcm9wczp0LmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhfSl9dmFyIG9vPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRhZ3x8cHQoZSl9LGFvPWZ1bmN0aW9uKGUpe3JldHVyblwic2hvd1wiPT09ZS5uYW1lfSxzbz17bmFtZTpcInRyYW5zaXRpb25cIixwcm9wczp0byxhYnN0cmFjdDohMCxyZW5kZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMuJHNsb3RzLmRlZmF1bHQ7aWYobiYmKG49bi5maWx0ZXIob28pKS5sZW5ndGgpe3ZhciByPXRoaXMubW9kZSxvPW5bMF07aWYoZnVuY3Rpb24oZSl7Zm9yKDtlPWUucGFyZW50OylpZihlLmRhdGEudHJhbnNpdGlvbilyZXR1cm4hMH0odGhpcy4kdm5vZGUpKXJldHVybiBvO3ZhciBhPW5vKG8pO2lmKCFhKXJldHVybiBvO2lmKHRoaXMuX2xlYXZpbmcpcmV0dXJuIGlvKGUsbyk7dmFyIHM9XCJfX3RyYW5zaXRpb24tXCIrdGhpcy5fdWlkK1wiLVwiO2Eua2V5PW51bGw9PWEua2V5P2EuaXNDb21tZW50P3MrXCJjb21tZW50XCI6cythLnRhZzppKGEua2V5KT8wPT09U3RyaW5nKGEua2V5KS5pbmRleE9mKHMpP2Eua2V5OnMrYS5rZXk6YS5rZXk7dmFyIGM9KGEuZGF0YXx8KGEuZGF0YT17fSkpLnRyYW5zaXRpb249cm8odGhpcyksdT10aGlzLl92bm9kZSxsPW5vKHUpO2lmKGEuZGF0YS5kaXJlY3RpdmVzJiZhLmRhdGEuZGlyZWN0aXZlcy5zb21lKGFvKSYmKGEuZGF0YS5zaG93PSEwKSxsJiZsLmRhdGEmJiFmdW5jdGlvbihlLHQpe3JldHVybiB0LmtleT09PWUua2V5JiZ0LnRhZz09PWUudGFnfShhLGwpJiYhcHQobCkmJighbC5jb21wb25lbnRJbnN0YW5jZXx8IWwuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudCkpe3ZhciBmPWwuZGF0YS50cmFuc2l0aW9uPUEoe30sYyk7aWYoXCJvdXQtaW5cIj09PXIpcmV0dXJuIHRoaXMuX2xlYXZpbmc9ITAsb3QoZixcImFmdGVyTGVhdmVcIixmdW5jdGlvbigpe3QuX2xlYXZpbmc9ITEsdC4kZm9yY2VVcGRhdGUoKX0pLGlvKGUsbyk7aWYoXCJpbi1vdXRcIj09PXIpe2lmKHB0KGEpKXJldHVybiB1O3ZhciBwLGQ9ZnVuY3Rpb24oKXtwKCl9O290KGMsXCJhZnRlckVudGVyXCIsZCksb3QoYyxcImVudGVyQ2FuY2VsbGVkXCIsZCksb3QoZixcImRlbGF5TGVhdmVcIixmdW5jdGlvbihlKXtwPWV9KX19cmV0dXJuIG99fX0sY289QSh7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSx0byk7ZnVuY3Rpb24gdW8oZSl7ZS5lbG0uX21vdmVDYiYmZS5lbG0uX21vdmVDYigpLGUuZWxtLl9lbnRlckNiJiZlLmVsbS5fZW50ZXJDYigpfWZ1bmN0aW9uIGxvKGUpe2UuZGF0YS5uZXdQb3M9ZS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCl9ZnVuY3Rpb24gZm8oZSl7dmFyIHQ9ZS5kYXRhLnBvcyxuPWUuZGF0YS5uZXdQb3Mscj10LmxlZnQtbi5sZWZ0LGk9dC50b3Atbi50b3A7aWYocnx8aSl7ZS5kYXRhLm1vdmVkPSEwO3ZhciBvPWUuZWxtLnN0eWxlO28udHJhbnNmb3JtPW8uV2Via2l0VHJhbnNmb3JtPVwidHJhbnNsYXRlKFwiK3IrXCJweCxcIitpK1wicHgpXCIsby50cmFuc2l0aW9uRHVyYXRpb249XCIwc1wifX1kZWxldGUgY28ubW9kZTt2YXIgcG89e1RyYW5zaXRpb246c28sVHJhbnNpdGlvbkdyb3VwOntwcm9wczpjbyxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl91cGRhdGU7dGhpcy5fdXBkYXRlPWZ1bmN0aW9uKG4scil7dmFyIGk9R3QoZSk7ZS5fX3BhdGNoX18oZS5fdm5vZGUsZS5rZXB0LCExLCEwKSxlLl92bm9kZT1lLmtlcHQsaSgpLHQuY2FsbChlLG4scil9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudGFnfHx0aGlzLiR2bm9kZS5kYXRhLnRhZ3x8XCJzcGFuXCIsbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9dGhpcy5wcmV2Q2hpbGRyZW49dGhpcy5jaGlsZHJlbixpPXRoaXMuJHNsb3RzLmRlZmF1bHR8fFtdLG89dGhpcy5jaGlsZHJlbj1bXSxhPXJvKHRoaXMpLHM9MDtzPGkubGVuZ3RoO3MrKyl7dmFyIGM9aVtzXTtjLnRhZyYmbnVsbCE9Yy5rZXkmJjAhPT1TdHJpbmcoYy5rZXkpLmluZGV4T2YoXCJfX3ZsaXN0XCIpJiYoby5wdXNoKGMpLG5bYy5rZXldPWMsKGMuZGF0YXx8KGMuZGF0YT17fSkpLnRyYW5zaXRpb249YSl9aWYocil7Zm9yKHZhciB1PVtdLGw9W10sZj0wO2Y8ci5sZW5ndGg7ZisrKXt2YXIgcD1yW2ZdO3AuZGF0YS50cmFuc2l0aW9uPWEscC5kYXRhLnBvcz1wLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuW3Aua2V5XT91LnB1c2gocCk6bC5wdXNoKHApfXRoaXMua2VwdD1lKHQsbnVsbCx1KSx0aGlzLnJlbW92ZWQ9bH1yZXR1cm4gZSh0LG51bGwsbyl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByZXZDaGlsZHJlbix0PXRoaXMubW92ZUNsYXNzfHwodGhpcy5uYW1lfHxcInZcIikrXCItbW92ZVwiO2UubGVuZ3RoJiZ0aGlzLmhhc01vdmUoZVswXS5lbG0sdCkmJihlLmZvckVhY2godW8pLGUuZm9yRWFjaChsbyksZS5mb3JFYWNoKGZvKSx0aGlzLl9yZWZsb3c9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5tb3ZlZCl7dmFyIG49ZS5lbG0scj1uLnN0eWxlO2ppKG4sdCksci50cmFuc2Zvcm09ci5XZWJraXRUcmFuc2Zvcm09ci50cmFuc2l0aW9uRHVyYXRpb249XCJcIixuLmFkZEV2ZW50TGlzdGVuZXIoT2ksbi5fbW92ZUNiPWZ1bmN0aW9uIGUocil7ciYmci50YXJnZXQhPT1ufHxyJiYhL3RyYW5zZm9ybSQvLnRlc3Qoci5wcm9wZXJ0eU5hbWUpfHwobi5yZW1vdmVFdmVudExpc3RlbmVyKE9pLGUpLG4uX21vdmVDYj1udWxsLERpKG4sdCkpfSl9fSkpfSxtZXRob2RzOntoYXNNb3ZlOmZ1bmN0aW9uKGUsdCl7aWYoIUNpKXJldHVybiExO2lmKHRoaXMuX2hhc01vdmUpcmV0dXJuIHRoaXMuX2hhc01vdmU7dmFyIG49ZS5jbG9uZU5vZGUoKTtlLl90cmFuc2l0aW9uQ2xhc3NlcyYmZS5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbihlKXtiaShuLGUpfSksX2kobix0KSxuLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy4kZWwuYXBwZW5kQ2hpbGQobik7dmFyIHI9TWkobik7cmV0dXJuIHRoaXMuJGVsLnJlbW92ZUNoaWxkKG4pLHRoaXMuX2hhc01vdmU9ci5oYXNUcmFuc2Zvcm19fX19O0NuLmNvbmZpZy5tdXN0VXNlUHJvcD1EbixDbi5jb25maWcuaXNSZXNlcnZlZFRhZz1abixDbi5jb25maWcuaXNSZXNlcnZlZEF0dHI9RW4sQ24uY29uZmlnLmdldFRhZ05hbWVzcGFjZT1HbixDbi5jb25maWcuaXNVbmtub3duRWxlbWVudD1mdW5jdGlvbihlKXtpZighVilyZXR1cm4hMDtpZihabihlKSlyZXR1cm4hMTtpZihlPWUudG9Mb3dlckNhc2UoKSxudWxsIT1YbltlXSlyZXR1cm4gWG5bZV07dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm4gZS5pbmRleE9mKFwiLVwiKT4tMT9YbltlXT10LmNvbnN0cnVjdG9yPT09d2luZG93LkhUTUxVbmtub3duRWxlbWVudHx8dC5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MRWxlbWVudDpYbltlXT0vSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KHQudG9TdHJpbmcoKSl9LEEoQ24ub3B0aW9ucy5kaXJlY3RpdmVzLGVvKSxBKENuLm9wdGlvbnMuY29tcG9uZW50cyxwbyksQ24ucHJvdG90eXBlLl9fcGF0Y2hfXz1WP3ppOlMsQ24ucHJvdG90eXBlLiRtb3VudD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIGUuJGVsPXQsZS4kb3B0aW9ucy5yZW5kZXJ8fChlLiRvcHRpb25zLnJlbmRlcj12ZSksUXQoZSxcImJlZm9yZU1vdW50XCIpLHI9ZnVuY3Rpb24oKXtlLl91cGRhdGUoZS5fcmVuZGVyKCksbil9LG5ldyBwbihlLHIsUyx7YmVmb3JlOmZ1bmN0aW9uKCl7ZS5faXNNb3VudGVkJiYhZS5faXNEZXN0cm95ZWQmJlF0KGUsXCJiZWZvcmVVcGRhdGVcIil9fSwhMCksbj0hMSxudWxsPT1lLiR2bm9kZSYmKGUuX2lzTW91bnRlZD0hMCxRdChlLFwibW91bnRlZFwiKSksZX0odGhpcyxlPWUmJlY/UW4oZSk6dm9pZCAwLHQpfSxWJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Ri5kZXZ0b29scyYmbmUmJm5lLmVtaXQoXCJpbml0XCIsQ24pfSwwKTt2YXIgdm89L1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2csaG89L1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZyxtbz1nKGZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0ucmVwbGFjZShobyxcIlxcXFwkJlwiKSxuPWVbMV0ucmVwbGFjZShobyxcIlxcXFwkJlwiKTtyZXR1cm4gbmV3IFJlZ0V4cCh0K1wiKCg/Oi58XFxcXG4pKz8pXCIrbixcImdcIil9KTt2YXIgeW89e3N0YXRpY0tleXM6W1wic3RhdGljQ2xhc3NcIl0sdHJhbnNmb3JtTm9kZTpmdW5jdGlvbihlLHQpe3Qud2Fybjt2YXIgbj1QcihlLFwiY2xhc3NcIik7biYmKGUuc3RhdGljQ2xhc3M9SlNPTi5zdHJpbmdpZnkobikpO3ZhciByPUZyKGUsXCJjbGFzc1wiLCExKTtyJiYoZS5jbGFzc0JpbmRpbmc9cil9LGdlbkRhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtyZXR1cm4gZS5zdGF0aWNDbGFzcyYmKHQrPVwic3RhdGljQ2xhc3M6XCIrZS5zdGF0aWNDbGFzcytcIixcIiksZS5jbGFzc0JpbmRpbmcmJih0Kz1cImNsYXNzOlwiK2UuY2xhc3NCaW5kaW5nK1wiLFwiKSx0fX07dmFyIGdvLF9vPXtzdGF0aWNLZXlzOltcInN0YXRpY1N0eWxlXCJdLHRyYW5zZm9ybU5vZGU6ZnVuY3Rpb24oZSx0KXt0Lndhcm47dmFyIG49UHIoZSxcInN0eWxlXCIpO24mJihlLnN0YXRpY1N0eWxlPUpTT04uc3RyaW5naWZ5KHNpKG4pKSk7dmFyIHI9RnIoZSxcInN0eWxlXCIsITEpO3ImJihlLnN0eWxlQmluZGluZz1yKX0sZ2VuRGF0YTpmdW5jdGlvbihlKXt2YXIgdD1cIlwiO3JldHVybiBlLnN0YXRpY1N0eWxlJiYodCs9XCJzdGF0aWNTdHlsZTpcIitlLnN0YXRpY1N0eWxlK1wiLFwiKSxlLnN0eWxlQmluZGluZyYmKHQrPVwic3R5bGU6KFwiK2Uuc3R5bGVCaW5kaW5nK1wiKSxcIiksdH19LGJvPWZ1bmN0aW9uKGUpe3JldHVybihnbz1nb3x8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPWUsZ28udGV4dENvbnRlbnR9LCRvPXAoXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbixsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiKSx3bz1wKFwiY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZVwiKSxDbz1wKFwiYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLGRldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSxoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSxvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsdGl0bGUsdHIsdHJhY2tcIikseG89L15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy8sa289L15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XSs/XFxdW15cXHNcIic8PlxcLz1dKikoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LyxBbz1cIlthLXpBLVpfXVtcXFxcLVxcXFwuMC05X2EtekEtWlwiK1Auc291cmNlK1wiXSpcIixPbz1cIigoPzpcIitBbytcIlxcXFw6KT9cIitBbytcIilcIixTbz1uZXcgUmVnRXhwKFwiXjxcIitPbyksVG89L15cXHMqKFxcLz8pPi8sTm89bmV3IFJlZ0V4cChcIl48XFxcXC9cIitPbytcIltePl0qPlwiKSxFbz0vXjwhRE9DVFlQRSBbXj5dKz4vaSxqbz0vXjwhXFwtLS8sRG89L148IVxcWy8sTG89cChcInNjcmlwdCxzdHlsZSx0ZXh0YXJlYVwiLCEwKSxJbz17fSxNbz17XCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInLFwiJmFtcDtcIjpcIiZcIixcIiYjMTA7XCI6XCJcXG5cIixcIiYjOTtcIjpcIlxcdFwiLFwiJiMzOTtcIjpcIidcIn0sRm89LyYoPzpsdHxndHxxdW90fGFtcHwjMzkpOy9nLFBvPS8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2csUm89cChcInByZSx0ZXh0YXJlYVwiLCEwKSxIbz1mdW5jdGlvbihlLHQpe3JldHVybiBlJiZSbyhlKSYmXCJcXG5cIj09PXRbMF19O2Z1bmN0aW9uIEJvKGUsdCl7dmFyIG49dD9QbzpGbztyZXR1cm4gZS5yZXBsYWNlKG4sZnVuY3Rpb24oZSl7cmV0dXJuIE1vW2VdfSl9dmFyIFVvLFZvLHpvLEtvLEpvLHFvLFdvLFpvLEdvPS9eQHxedi1vbjovLFhvPS9edi18XkB8Xjp8XiMvLFlvPS8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLyxRbz0vLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC8sZWE9L15cXCh8XFwpJC9nLHRhPS9eXFxbLipcXF0kLyxuYT0vOiguKikkLyxyYT0vXjp8XlxcLnxedi1iaW5kOi8saWE9L1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2csb2E9L152LXNsb3QoOnwkKXxeIy8sYWE9L1tcXHJcXG5dLyxzYT0vWyBcXGZcXHRcXHJcXG5dKy9nLGNhPWcoYm8pLHVhPVwiX2VtcHR5X1wiO2Z1bmN0aW9uIGxhKGUsdCxuKXtyZXR1cm57dHlwZToxLHRhZzplLGF0dHJzTGlzdDp0LGF0dHJzTWFwOnlhKHQpLHJhd0F0dHJzTWFwOnt9LHBhcmVudDpuLGNoaWxkcmVuOltdfX1mdW5jdGlvbiBmYShlLHQpe1VvPXQud2Fybnx8VHIscW89dC5pc1ByZVRhZ3x8VCxXbz10Lm11c3RVc2VQcm9wfHxULFpvPXQuZ2V0VGFnTmFtZXNwYWNlfHxUO3QuaXNSZXNlcnZlZFRhZzt6bz1Ocih0Lm1vZHVsZXMsXCJ0cmFuc2Zvcm1Ob2RlXCIpLEtvPU5yKHQubW9kdWxlcyxcInByZVRyYW5zZm9ybU5vZGVcIiksSm89TnIodC5tb2R1bGVzLFwicG9zdFRyYW5zZm9ybU5vZGVcIiksVm89dC5kZWxpbWl0ZXJzO3ZhciBuLHIsaT1bXSxvPSExIT09dC5wcmVzZXJ2ZVdoaXRlc3BhY2UsYT10LndoaXRlc3BhY2Uscz0hMSxjPSExO2Z1bmN0aW9uIHUoZSl7aWYobChlKSxzfHxlLnByb2Nlc3NlZHx8KGU9cGEoZSx0KSksaS5sZW5ndGh8fGU9PT1ufHxuLmlmJiYoZS5lbHNlaWZ8fGUuZWxzZSkmJnZhKG4se2V4cDplLmVsc2VpZixibG9jazplfSksciYmIWUuZm9yYmlkZGVuKWlmKGUuZWxzZWlmfHxlLmVsc2UpYT1lLCh1PWZ1bmN0aW9uKGUpe3ZhciB0PWUubGVuZ3RoO2Zvcig7dC0tOyl7aWYoMT09PWVbdF0udHlwZSlyZXR1cm4gZVt0XTtlLnBvcCgpfX0oci5jaGlsZHJlbikpJiZ1LmlmJiZ2YSh1LHtleHA6YS5lbHNlaWYsYmxvY2s6YX0pO2Vsc2V7aWYoZS5zbG90U2NvcGUpe3ZhciBvPWUuc2xvdFRhcmdldHx8J1wiZGVmYXVsdFwiJzsoci5zY29wZWRTbG90c3x8KHIuc2NvcGVkU2xvdHM9e30pKVtvXT1lfXIuY2hpbGRyZW4ucHVzaChlKSxlLnBhcmVudD1yfXZhciBhLHU7ZS5jaGlsZHJlbj1lLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hZS5zbG90U2NvcGV9KSxsKGUpLGUucHJlJiYocz0hMSkscW8oZS50YWcpJiYoYz0hMSk7Zm9yKHZhciBmPTA7ZjxKby5sZW5ndGg7ZisrKUpvW2ZdKGUsdCl9ZnVuY3Rpb24gbChlKXtpZighYylmb3IodmFyIHQ7KHQ9ZS5jaGlsZHJlbltlLmNoaWxkcmVuLmxlbmd0aC0xXSkmJjM9PT10LnR5cGUmJlwiIFwiPT09dC50ZXh0OyllLmNoaWxkcmVuLnBvcCgpfXJldHVybiBmdW5jdGlvbihlLHQpe2Zvcih2YXIgbixyLGk9W10sbz10LmV4cGVjdEhUTUwsYT10LmlzVW5hcnlUYWd8fFQscz10LmNhbkJlTGVmdE9wZW5UYWd8fFQsYz0wO2U7KXtpZihuPWUsciYmTG8ocikpe3ZhciB1PTAsbD1yLnRvTG93ZXJDYXNlKCksZj1Jb1tsXXx8KElvW2xdPW5ldyBSZWdFeHAoXCIoW1xcXFxzXFxcXFNdKj8pKDwvXCIrbCtcIltePl0qPilcIixcImlcIikpLHA9ZS5yZXBsYWNlKGYsZnVuY3Rpb24oZSxuLHIpe3JldHVybiB1PXIubGVuZ3RoLExvKGwpfHxcIm5vc2NyaXB0XCI9PT1sfHwobj1uLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLFwiJDFcIikucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLFwiJDFcIikpLEhvKGwsbikmJihuPW4uc2xpY2UoMSkpLHQuY2hhcnMmJnQuY2hhcnMobiksXCJcIn0pO2MrPWUubGVuZ3RoLXAubGVuZ3RoLGU9cCxBKGwsYy11LGMpfWVsc2V7dmFyIGQ9ZS5pbmRleE9mKFwiPFwiKTtpZigwPT09ZCl7aWYoam8udGVzdChlKSl7dmFyIHY9ZS5pbmRleE9mKFwiLS1cXHgzZVwiKTtpZih2Pj0wKXt0LnNob3VsZEtlZXBDb21tZW50JiZ0LmNvbW1lbnQoZS5zdWJzdHJpbmcoNCx2KSxjLGMrdiszKSxDKHYrMyk7Y29udGludWV9fWlmKERvLnRlc3QoZSkpe3ZhciBoPWUuaW5kZXhPZihcIl0+XCIpO2lmKGg+PTApe0MoaCsyKTtjb250aW51ZX19dmFyIG09ZS5tYXRjaChFbyk7aWYobSl7QyhtWzBdLmxlbmd0aCk7Y29udGludWV9dmFyIHk9ZS5tYXRjaChObyk7aWYoeSl7dmFyIGc9YztDKHlbMF0ubGVuZ3RoKSxBKHlbMV0sZyxjKTtjb250aW51ZX12YXIgXz14KCk7aWYoXyl7ayhfKSxIbyhfLnRhZ05hbWUsZSkmJkMoMSk7Y29udGludWV9fXZhciBiPXZvaWQgMCwkPXZvaWQgMCx3PXZvaWQgMDtpZihkPj0wKXtmb3IoJD1lLnNsaWNlKGQpOyEoTm8udGVzdCgkKXx8U28udGVzdCgkKXx8am8udGVzdCgkKXx8RG8udGVzdCgkKXx8KHc9JC5pbmRleE9mKFwiPFwiLDEpKTwwKTspZCs9dywkPWUuc2xpY2UoZCk7Yj1lLnN1YnN0cmluZygwLGQpfWQ8MCYmKGI9ZSksYiYmQyhiLmxlbmd0aCksdC5jaGFycyYmYiYmdC5jaGFycyhiLGMtYi5sZW5ndGgsYyl9aWYoZT09PW4pe3QuY2hhcnMmJnQuY2hhcnMoZSk7YnJlYWt9fWZ1bmN0aW9uIEModCl7Yys9dCxlPWUuc3Vic3RyaW5nKHQpfWZ1bmN0aW9uIHgoKXt2YXIgdD1lLm1hdGNoKFNvKTtpZih0KXt2YXIgbixyLGk9e3RhZ05hbWU6dFsxXSxhdHRyczpbXSxzdGFydDpjfTtmb3IoQyh0WzBdLmxlbmd0aCk7IShuPWUubWF0Y2goVG8pKSYmKHI9ZS5tYXRjaChrbyl8fGUubWF0Y2goeG8pKTspci5zdGFydD1jLEMoclswXS5sZW5ndGgpLHIuZW5kPWMsaS5hdHRycy5wdXNoKHIpO2lmKG4pcmV0dXJuIGkudW5hcnlTbGFzaD1uWzFdLEMoblswXS5sZW5ndGgpLGkuZW5kPWMsaX19ZnVuY3Rpb24gayhlKXt2YXIgbj1lLnRhZ05hbWUsYz1lLnVuYXJ5U2xhc2g7byYmKFwicFwiPT09ciYmQ28obikmJkEocikscyhuKSYmcj09PW4mJkEobikpO2Zvcih2YXIgdT1hKG4pfHwhIWMsbD1lLmF0dHJzLmxlbmd0aCxmPW5ldyBBcnJheShsKSxwPTA7cDxsO3ArKyl7dmFyIGQ9ZS5hdHRyc1twXSx2PWRbM118fGRbNF18fGRbNV18fFwiXCIsaD1cImFcIj09PW4mJlwiaHJlZlwiPT09ZFsxXT90LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzO2ZbcF09e25hbWU6ZFsxXSx2YWx1ZTpCbyh2LGgpfX11fHwoaS5wdXNoKHt0YWc6bixsb3dlckNhc2VkVGFnOm4udG9Mb3dlckNhc2UoKSxhdHRyczpmLHN0YXJ0OmUuc3RhcnQsZW5kOmUuZW5kfSkscj1uKSx0LnN0YXJ0JiZ0LnN0YXJ0KG4sZix1LGUuc3RhcnQsZS5lbmQpfWZ1bmN0aW9uIEEoZSxuLG8pe3ZhciBhLHM7aWYobnVsbD09biYmKG49YyksbnVsbD09byYmKG89YyksZSlmb3Iocz1lLnRvTG93ZXJDYXNlKCksYT1pLmxlbmd0aC0xO2E+PTAmJmlbYV0ubG93ZXJDYXNlZFRhZyE9PXM7YS0tKTtlbHNlIGE9MDtpZihhPj0wKXtmb3IodmFyIHU9aS5sZW5ndGgtMTt1Pj1hO3UtLSl0LmVuZCYmdC5lbmQoaVt1XS50YWcsbixvKTtpLmxlbmd0aD1hLHI9YSYmaVthLTFdLnRhZ31lbHNlXCJiclwiPT09cz90LnN0YXJ0JiZ0LnN0YXJ0KGUsW10sITAsbixvKTpcInBcIj09PXMmJih0LnN0YXJ0JiZ0LnN0YXJ0KGUsW10sITEsbixvKSx0LmVuZCYmdC5lbmQoZSxuLG8pKX1BKCl9KGUse3dhcm46VW8sZXhwZWN0SFRNTDp0LmV4cGVjdEhUTUwsaXNVbmFyeVRhZzp0LmlzVW5hcnlUYWcsY2FuQmVMZWZ0T3BlblRhZzp0LmNhbkJlTGVmdE9wZW5UYWcsc2hvdWxkRGVjb2RlTmV3bGluZXM6dC5zaG91bGREZWNvZGVOZXdsaW5lcyxzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6dC5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsc2hvdWxkS2VlcENvbW1lbnQ6dC5jb21tZW50cyxvdXRwdXRTb3VyY2VSYW5nZTp0Lm91dHB1dFNvdXJjZVJhbmdlLHN0YXJ0OmZ1bmN0aW9uKGUsbyxhLGwsZil7dmFyIHA9ciYmci5uc3x8Wm8oZSk7cSYmXCJzdmdcIj09PXAmJihvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07Z2EudGVzdChyLm5hbWUpfHwoci5uYW1lPXIubmFtZS5yZXBsYWNlKF9hLFwiXCIpLHQucHVzaChyKSl9cmV0dXJuIHR9KG8pKTt2YXIgZCx2PWxhKGUsbyxyKTtwJiYodi5ucz1wKSxcInN0eWxlXCIhPT0oZD12KS50YWcmJihcInNjcmlwdFwiIT09ZC50YWd8fGQuYXR0cnNNYXAudHlwZSYmXCJ0ZXh0L2phdmFzY3JpcHRcIiE9PWQuYXR0cnNNYXAudHlwZSl8fHRlKCl8fCh2LmZvcmJpZGRlbj0hMCk7Zm9yKHZhciBoPTA7aDxLby5sZW5ndGg7aCsrKXY9S29baF0odix0KXx8djtzfHwoIWZ1bmN0aW9uKGUpe251bGwhPVByKGUsXCJ2LXByZVwiKSYmKGUucHJlPSEwKX0odiksdi5wcmUmJihzPSEwKSkscW8odi50YWcpJiYoYz0hMCkscz9mdW5jdGlvbihlKXt2YXIgdD1lLmF0dHJzTGlzdCxuPXQubGVuZ3RoO2lmKG4pZm9yKHZhciByPWUuYXR0cnM9bmV3IEFycmF5KG4pLGk9MDtpPG47aSsrKXJbaV09e25hbWU6dFtpXS5uYW1lLHZhbHVlOkpTT04uc3RyaW5naWZ5KHRbaV0udmFsdWUpfSxudWxsIT10W2ldLnN0YXJ0JiYocltpXS5zdGFydD10W2ldLnN0YXJ0LHJbaV0uZW5kPXRbaV0uZW5kKTtlbHNlIGUucHJlfHwoZS5wbGFpbj0hMCl9KHYpOnYucHJvY2Vzc2VkfHwoZGEodiksZnVuY3Rpb24oZSl7dmFyIHQ9UHIoZSxcInYtaWZcIik7aWYodCllLmlmPXQsdmEoZSx7ZXhwOnQsYmxvY2s6ZX0pO2Vsc2V7bnVsbCE9UHIoZSxcInYtZWxzZVwiKSYmKGUuZWxzZT0hMCk7dmFyIG49UHIoZSxcInYtZWxzZS1pZlwiKTtuJiYoZS5lbHNlaWY9bil9fSh2KSxmdW5jdGlvbihlKXtudWxsIT1QcihlLFwidi1vbmNlXCIpJiYoZS5vbmNlPSEwKX0odikpLG58fChuPXYpLGE/dSh2KToocj12LGkucHVzaCh2KSl9LGVuZDpmdW5jdGlvbihlLHQsbil7dmFyIG89aVtpLmxlbmd0aC0xXTtpLmxlbmd0aC09MSxyPWlbaS5sZW5ndGgtMV0sdShvKX0sY2hhcnM6ZnVuY3Rpb24oZSx0LG4pe2lmKHImJighcXx8XCJ0ZXh0YXJlYVwiIT09ci50YWd8fHIuYXR0cnNNYXAucGxhY2Vob2xkZXIhPT1lKSl7dmFyIGksdSxsLGY9ci5jaGlsZHJlbjtpZihlPWN8fGUudHJpbSgpP1wic2NyaXB0XCI9PT0oaT1yKS50YWd8fFwic3R5bGVcIj09PWkudGFnP2U6Y2EoZSk6Zi5sZW5ndGg/YT9cImNvbmRlbnNlXCI9PT1hJiZhYS50ZXN0KGUpP1wiXCI6XCIgXCI6bz9cIiBcIjpcIlwiOlwiXCIpY3x8XCJjb25kZW5zZVwiIT09YXx8KGU9ZS5yZXBsYWNlKHNhLFwiIFwiKSksIXMmJlwiIFwiIT09ZSYmKHU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10P21vKHQpOnZvO2lmKG4udGVzdChlKSl7Zm9yKHZhciByLGksbyxhPVtdLHM9W10sYz1uLmxhc3RJbmRleD0wO3I9bi5leGVjKGUpOyl7KGk9ci5pbmRleCk+YyYmKHMucHVzaChvPWUuc2xpY2UoYyxpKSksYS5wdXNoKEpTT04uc3RyaW5naWZ5KG8pKSk7dmFyIHU9T3IoclsxXS50cmltKCkpO2EucHVzaChcIl9zKFwiK3UrXCIpXCIpLHMucHVzaCh7XCJAYmluZGluZ1wiOnV9KSxjPWkrclswXS5sZW5ndGh9cmV0dXJuIGM8ZS5sZW5ndGgmJihzLnB1c2gobz1lLnNsaWNlKGMpKSxhLnB1c2goSlNPTi5zdHJpbmdpZnkobykpKSx7ZXhwcmVzc2lvbjphLmpvaW4oXCIrXCIpLHRva2VuczpzfX19KGUsVm8pKT9sPXt0eXBlOjIsZXhwcmVzc2lvbjp1LmV4cHJlc3Npb24sdG9rZW5zOnUudG9rZW5zLHRleHQ6ZX06XCIgXCI9PT1lJiZmLmxlbmd0aCYmXCIgXCI9PT1mW2YubGVuZ3RoLTFdLnRleHR8fChsPXt0eXBlOjMsdGV4dDplfSksbCYmZi5wdXNoKGwpfX0sY29tbWVudDpmdW5jdGlvbihlLHQsbil7aWYocil7dmFyIGk9e3R5cGU6Myx0ZXh0OmUsaXNDb21tZW50OiEwfTtyLmNoaWxkcmVuLnB1c2goaSl9fX0pLG59ZnVuY3Rpb24gcGEoZSx0KXt2YXIgbixyOyhyPUZyKG49ZSxcImtleVwiKSkmJihuLmtleT1yKSxlLnBsYWluPSFlLmtleSYmIWUuc2NvcGVkU2xvdHMmJiFlLmF0dHJzTGlzdC5sZW5ndGgsZnVuY3Rpb24oZSl7dmFyIHQ9RnIoZSxcInJlZlwiKTt0JiYoZS5yZWY9dCxlLnJlZkluRm9yPWZ1bmN0aW9uKGUpe3ZhciB0PWU7Zm9yKDt0Oyl7aWYodm9pZCAwIT09dC5mb3IpcmV0dXJuITA7dD10LnBhcmVudH1yZXR1cm4hMX0oZSkpfShlKSxmdW5jdGlvbihlKXt2YXIgdDtcInRlbXBsYXRlXCI9PT1lLnRhZz8odD1QcihlLFwic2NvcGVcIiksZS5zbG90U2NvcGU9dHx8UHIoZSxcInNsb3Qtc2NvcGVcIikpOih0PVByKGUsXCJzbG90LXNjb3BlXCIpKSYmKGUuc2xvdFNjb3BlPXQpO3ZhciBuPUZyKGUsXCJzbG90XCIpO24mJihlLnNsb3RUYXJnZXQ9J1wiXCInPT09bj8nXCJkZWZhdWx0XCInOm4sZS5zbG90VGFyZ2V0RHluYW1pYz0hKCFlLmF0dHJzTWFwW1wiOnNsb3RcIl0mJiFlLmF0dHJzTWFwW1widi1iaW5kOnNsb3RcIl0pLFwidGVtcGxhdGVcIj09PWUudGFnfHxlLnNsb3RTY29wZXx8anIoZSxcInNsb3RcIixuLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUucmF3QXR0cnNNYXBbXCI6XCIrdF18fGUucmF3QXR0cnNNYXBbXCJ2LWJpbmQ6XCIrdF18fGUucmF3QXR0cnNNYXBbdF19KGUsXCJzbG90XCIpKSk7aWYoXCJ0ZW1wbGF0ZVwiPT09ZS50YWcpe3ZhciByPVJyKGUsb2EpO2lmKHIpe3ZhciBpPWhhKHIpLG89aS5uYW1lLGE9aS5keW5hbWljO2Uuc2xvdFRhcmdldD1vLGUuc2xvdFRhcmdldER5bmFtaWM9YSxlLnNsb3RTY29wZT1yLnZhbHVlfHx1YX19ZWxzZXt2YXIgcz1ScihlLG9hKTtpZihzKXt2YXIgYz1lLnNjb3BlZFNsb3RzfHwoZS5zY29wZWRTbG90cz17fSksdT1oYShzKSxsPXUubmFtZSxmPXUuZHluYW1pYyxwPWNbbF09bGEoXCJ0ZW1wbGF0ZVwiLFtdLGUpO3Auc2xvdFRhcmdldD1sLHAuc2xvdFRhcmdldER5bmFtaWM9ZixwLmNoaWxkcmVuPWUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGUpe2lmKCFlLnNsb3RTY29wZSlyZXR1cm4gZS5wYXJlbnQ9cCwhMH0pLHAuc2xvdFNjb3BlPXMudmFsdWV8fHVhLGUuY2hpbGRyZW49W10sZS5wbGFpbj0hMX19fShlKSxmdW5jdGlvbihlKXtcInNsb3RcIj09PWUudGFnJiYoZS5zbG90TmFtZT1GcihlLFwibmFtZVwiKSl9KGUpLGZ1bmN0aW9uKGUpe3ZhciB0Oyh0PUZyKGUsXCJpc1wiKSkmJihlLmNvbXBvbmVudD10KTtudWxsIT1QcihlLFwiaW5saW5lLXRlbXBsYXRlXCIpJiYoZS5pbmxpbmVUZW1wbGF0ZT0hMCl9KGUpO2Zvcih2YXIgaT0wO2k8em8ubGVuZ3RoO2krKyllPXpvW2ldKGUsdCl8fGU7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYSxzLGMsdT1lLmF0dHJzTGlzdDtmb3IodD0wLG49dS5sZW5ndGg7dDxuO3QrKylpZihyPWk9dVt0XS5uYW1lLG89dVt0XS52YWx1ZSxYby50ZXN0KHIpKWlmKGUuaGFzQmluZGluZ3M9ITAsKGE9bWEoci5yZXBsYWNlKFhvLFwiXCIpKSkmJihyPXIucmVwbGFjZShpYSxcIlwiKSkscmEudGVzdChyKSlyPXIucmVwbGFjZShyYSxcIlwiKSxvPU9yKG8pLChjPXRhLnRlc3QocikpJiYocj1yLnNsaWNlKDEsLTEpKSxhJiYoYS5wcm9wJiYhYyYmXCJpbm5lckh0bWxcIj09PShyPWIocikpJiYocj1cImlubmVySFRNTFwiKSxhLmNhbWVsJiYhYyYmKHI9YihyKSksYS5zeW5jJiYocz1VcihvLFwiJGV2ZW50XCIpLGM/TXIoZSwnXCJ1cGRhdGU6XCIrKCcrcitcIilcIixzLG51bGwsITEsMCx1W3RdLCEwKTooTXIoZSxcInVwZGF0ZTpcIitiKHIpLHMsbnVsbCwhMSwwLHVbdF0pLEMocikhPT1iKHIpJiZNcihlLFwidXBkYXRlOlwiK0MocikscyxudWxsLCExLDAsdVt0XSkpKSksYSYmYS5wcm9wfHwhZS5jb21wb25lbnQmJldvKGUudGFnLGUuYXR0cnNNYXAudHlwZSxyKT9FcihlLHIsbyx1W3RdLGMpOmpyKGUscixvLHVbdF0sYyk7ZWxzZSBpZihHby50ZXN0KHIpKXI9ci5yZXBsYWNlKEdvLFwiXCIpLChjPXRhLnRlc3QocikpJiYocj1yLnNsaWNlKDEsLTEpKSxNcihlLHIsbyxhLCExLDAsdVt0XSxjKTtlbHNle3ZhciBsPShyPXIucmVwbGFjZShYbyxcIlwiKSkubWF0Y2gobmEpLGY9bCYmbFsxXTtjPSExLGYmJihyPXIuc2xpY2UoMCwtKGYubGVuZ3RoKzEpKSx0YS50ZXN0KGYpJiYoZj1mLnNsaWNlKDEsLTEpLGM9ITApKSxMcihlLHIsaSxvLGYsYyxhLHVbdF0pfWVsc2UganIoZSxyLEpTT04uc3RyaW5naWZ5KG8pLHVbdF0pLCFlLmNvbXBvbmVudCYmXCJtdXRlZFwiPT09ciYmV28oZS50YWcsZS5hdHRyc01hcC50eXBlLHIpJiZFcihlLHIsXCJ0cnVlXCIsdVt0XSl9KGUpLGV9ZnVuY3Rpb24gZGEoZSl7dmFyIHQ7aWYodD1QcihlLFwidi1mb3JcIikpe3ZhciBuPWZ1bmN0aW9uKGUpe3ZhciB0PWUubWF0Y2goWW8pO2lmKCF0KXJldHVybjt2YXIgbj17fTtuLmZvcj10WzJdLnRyaW0oKTt2YXIgcj10WzFdLnRyaW0oKS5yZXBsYWNlKGVhLFwiXCIpLGk9ci5tYXRjaChRbyk7aT8obi5hbGlhcz1yLnJlcGxhY2UoUW8sXCJcIikudHJpbSgpLG4uaXRlcmF0b3IxPWlbMV0udHJpbSgpLGlbMl0mJihuLml0ZXJhdG9yMj1pWzJdLnRyaW0oKSkpOm4uYWxpYXM9cjtyZXR1cm4gbn0odCk7biYmQShlLG4pfX1mdW5jdGlvbiB2YShlLHQpe2UuaWZDb25kaXRpb25zfHwoZS5pZkNvbmRpdGlvbnM9W10pLGUuaWZDb25kaXRpb25zLnB1c2godCl9ZnVuY3Rpb24gaGEoZSl7dmFyIHQ9ZS5uYW1lLnJlcGxhY2Uob2EsXCJcIik7cmV0dXJuIHR8fFwiI1wiIT09ZS5uYW1lWzBdJiYodD1cImRlZmF1bHRcIiksdGEudGVzdCh0KT97bmFtZTp0LnNsaWNlKDEsLTEpLGR5bmFtaWM6ITB9OntuYW1lOidcIicrdCsnXCInLGR5bmFtaWM6ITF9fWZ1bmN0aW9uIG1hKGUpe3ZhciB0PWUubWF0Y2goaWEpO2lmKHQpe3ZhciBuPXt9O3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24oZSl7bltlLnNsaWNlKDEpXT0hMH0pLG59fWZ1bmN0aW9uIHlhKGUpe2Zvcih2YXIgdD17fSxuPTAscj1lLmxlbmd0aDtuPHI7bisrKXRbZVtuXS5uYW1lXT1lW25dLnZhbHVlO3JldHVybiB0fXZhciBnYT0vXnhtbG5zOk5TXFxkKy8sX2E9L15OU1xcZCs6LztmdW5jdGlvbiBiYShlKXtyZXR1cm4gbGEoZS50YWcsZS5hdHRyc0xpc3Quc2xpY2UoKSxlLnBhcmVudCl9dmFyICRhPVt5byxfbyx7cHJlVHJhbnNmb3JtTm9kZTpmdW5jdGlvbihlLHQpe2lmKFwiaW5wdXRcIj09PWUudGFnKXt2YXIgbixyPWUuYXR0cnNNYXA7aWYoIXJbXCJ2LW1vZGVsXCJdKXJldHVybjtpZigocltcIjp0eXBlXCJdfHxyW1widi1iaW5kOnR5cGVcIl0pJiYobj1GcihlLFwidHlwZVwiKSksci50eXBlfHxufHwhcltcInYtYmluZFwiXXx8KG49XCIoXCIrcltcInYtYmluZFwiXStcIikudHlwZVwiKSxuKXt2YXIgaT1QcihlLFwidi1pZlwiLCEwKSxvPWk/XCImJihcIitpK1wiKVwiOlwiXCIsYT1udWxsIT1QcihlLFwidi1lbHNlXCIsITApLHM9UHIoZSxcInYtZWxzZS1pZlwiLCEwKSxjPWJhKGUpO2RhKGMpLERyKGMsXCJ0eXBlXCIsXCJjaGVja2JveFwiKSxwYShjLHQpLGMucHJvY2Vzc2VkPSEwLGMuaWY9XCIoXCIrbitcIik9PT0nY2hlY2tib3gnXCIrbyx2YShjLHtleHA6Yy5pZixibG9jazpjfSk7dmFyIHU9YmEoZSk7UHIodSxcInYtZm9yXCIsITApLERyKHUsXCJ0eXBlXCIsXCJyYWRpb1wiKSxwYSh1LHQpLHZhKGMse2V4cDpcIihcIituK1wiKT09PSdyYWRpbydcIitvLGJsb2NrOnV9KTt2YXIgbD1iYShlKTtyZXR1cm4gUHIobCxcInYtZm9yXCIsITApLERyKGwsXCI6dHlwZVwiLG4pLHBhKGwsdCksdmEoYyx7ZXhwOmksYmxvY2s6bH0pLGE/Yy5lbHNlPSEwOnMmJihjLmVsc2VpZj1zKSxjfX19fV07dmFyIHdhLENhLHhhPXtleHBlY3RIVE1MOiEwLG1vZHVsZXM6JGEsZGlyZWN0aXZlczp7bW9kZWw6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQudmFsdWUsaT10Lm1vZGlmaWVycyxvPWUudGFnLGE9ZS5hdHRyc01hcC50eXBlO2lmKGUuY29tcG9uZW50KXJldHVybiBCcihlLHIsaSksITE7aWYoXCJzZWxlY3RcIj09PW8pIWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj0ndmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSkubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcIl92YWx1ZVwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuICcrKG4mJm4ubnVtYmVyP1wiX24odmFsKVwiOlwidmFsXCIpK1wifSk7XCI7cj1yK1wiIFwiK1VyKHQsXCIkZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF1cIiksTXIoZSxcImNoYW5nZVwiLHIsbnVsbCwhMCl9KGUscixpKTtlbHNlIGlmKFwiaW5wdXRcIj09PW8mJlwiY2hlY2tib3hcIj09PWEpIWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uJiZuLm51bWJlcixpPUZyKGUsXCJ2YWx1ZVwiKXx8XCJudWxsXCIsbz1GcihlLFwidHJ1ZS12YWx1ZVwiKXx8XCJ0cnVlXCIsYT1GcihlLFwiZmFsc2UtdmFsdWVcIil8fFwiZmFsc2VcIjtFcihlLFwiY2hlY2tlZFwiLFwiQXJyYXkuaXNBcnJheShcIit0K1wiKT9faShcIit0K1wiLFwiK2krXCIpPi0xXCIrKFwidHJ1ZVwiPT09bz9cIjooXCIrdCtcIilcIjpcIjpfcShcIit0K1wiLFwiK28rXCIpXCIpKSxNcihlLFwiY2hhbmdlXCIsXCJ2YXIgJCRhPVwiK3QrXCIsJCRlbD0kZXZlbnQudGFyZ2V0LCQkYz0kJGVsLmNoZWNrZWQ/KFwiK28rXCIpOihcIithK1wiKTtpZihBcnJheS5pc0FycmF5KCQkYSkpe3ZhciAkJHY9XCIrKHI/XCJfbihcIitpK1wiKVwiOmkpK1wiLCQkaT1faSgkJGEsJCR2KTtpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoXCIrVXIodCxcIiQkYS5jb25jYXQoWyQkdl0pXCIpK1wiKX1lbHNleyQkaT4tMSYmKFwiK1VyKHQsXCIkJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKVwiKStcIil9fWVsc2V7XCIrVXIodCxcIiQkY1wiKStcIn1cIixudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoXCJpbnB1dFwiPT09byYmXCJyYWRpb1wiPT09YSkhZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4mJm4ubnVtYmVyLGk9RnIoZSxcInZhbHVlXCIpfHxcIm51bGxcIjtFcihlLFwiY2hlY2tlZFwiLFwiX3EoXCIrdCtcIixcIisoaT1yP1wiX24oXCIraStcIilcIjppKStcIilcIiksTXIoZSxcImNoYW5nZVwiLFVyKHQsaSksbnVsbCwhMCl9KGUscixpKTtlbHNlIGlmKFwiaW5wdXRcIj09PW98fFwidGV4dGFyZWFcIj09PW8pIWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmF0dHJzTWFwLnR5cGUsaT1ufHx7fSxvPWkubGF6eSxhPWkubnVtYmVyLHM9aS50cmltLGM9IW8mJlwicmFuZ2VcIiE9PXIsdT1vP1wiY2hhbmdlXCI6XCJyYW5nZVwiPT09cj9acjpcImlucHV0XCIsbD1cIiRldmVudC50YXJnZXQudmFsdWVcIjtzJiYobD1cIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpXCIpLGEmJihsPVwiX24oXCIrbCtcIilcIik7dmFyIGY9VXIodCxsKTtjJiYoZj1cImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIitmKSxFcihlLFwidmFsdWVcIixcIihcIit0K1wiKVwiKSxNcihlLHUsZixudWxsLCEwKSwoc3x8YSkmJk1yKGUsXCJibHVyXCIsXCIkZm9yY2VVcGRhdGUoKVwiKX0oZSxyLGkpO2Vsc2UgaWYoIUYuaXNSZXNlcnZlZFRhZyhvKSlyZXR1cm4gQnIoZSxyLGkpLCExO3JldHVybiEwfSx0ZXh0OmZ1bmN0aW9uKGUsdCl7dC52YWx1ZSYmRXIoZSxcInRleHRDb250ZW50XCIsXCJfcyhcIit0LnZhbHVlK1wiKVwiLHQpfSxodG1sOmZ1bmN0aW9uKGUsdCl7dC52YWx1ZSYmRXIoZSxcImlubmVySFRNTFwiLFwiX3MoXCIrdC52YWx1ZStcIilcIix0KX19LGlzUHJlVGFnOmZ1bmN0aW9uKGUpe3JldHVyblwicHJlXCI9PT1lfSxpc1VuYXJ5VGFnOiRvLG11c3RVc2VQcm9wOkRuLGNhbkJlTGVmdE9wZW5UYWc6d28saXNSZXNlcnZlZFRhZzpabixnZXRUYWdOYW1lc3BhY2U6R24sc3RhdGljS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb25jYXQodC5zdGF0aWNLZXlzfHxbXSl9LFtdKS5qb2luKFwiLFwiKX0oJGEpfSxrYT1nKGZ1bmN0aW9uKGUpe3JldHVybiBwKFwidHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXBcIisoZT9cIixcIitlOlwiXCIpKX0pO2Z1bmN0aW9uIEFhKGUsdCl7ZSYmKHdhPWthKHQuc3RhdGljS2V5c3x8XCJcIiksQ2E9dC5pc1Jlc2VydmVkVGFnfHxULGZ1bmN0aW9uIGUodCl7dC5zdGF0aWM9ZnVuY3Rpb24oZSl7aWYoMj09PWUudHlwZSlyZXR1cm4hMTtpZigzPT09ZS50eXBlKXJldHVybiEwO3JldHVybiEoIWUucHJlJiYoZS5oYXNCaW5kaW5nc3x8ZS5pZnx8ZS5mb3J8fGQoZS50YWcpfHwhQ2EoZS50YWcpfHxmdW5jdGlvbihlKXtmb3IoO2UucGFyZW50Oyl7aWYoXCJ0ZW1wbGF0ZVwiIT09KGU9ZS5wYXJlbnQpLnRhZylyZXR1cm4hMTtpZihlLmZvcilyZXR1cm4hMH1yZXR1cm4hMX0oZSl8fCFPYmplY3Qua2V5cyhlKS5ldmVyeSh3YSkpKX0odCk7aWYoMT09PXQudHlwZSl7aWYoIUNhKHQudGFnKSYmXCJzbG90XCIhPT10LnRhZyYmbnVsbD09dC5hdHRyc01hcFtcImlubGluZS10ZW1wbGF0ZVwiXSlyZXR1cm47Zm9yKHZhciBuPTAscj10LmNoaWxkcmVuLmxlbmd0aDtuPHI7bisrKXt2YXIgaT10LmNoaWxkcmVuW25dO2UoaSksaS5zdGF0aWN8fCh0LnN0YXRpYz0hMSl9aWYodC5pZkNvbmRpdGlvbnMpZm9yKHZhciBvPTEsYT10LmlmQ29uZGl0aW9ucy5sZW5ndGg7bzxhO28rKyl7dmFyIHM9dC5pZkNvbmRpdGlvbnNbb10uYmxvY2s7ZShzKSxzLnN0YXRpY3x8KHQuc3RhdGljPSExKX19fShlKSxmdW5jdGlvbiBlKHQsbil7aWYoMT09PXQudHlwZSl7aWYoKHQuc3RhdGljfHx0Lm9uY2UpJiYodC5zdGF0aWNJbkZvcj1uKSx0LnN0YXRpYyYmdC5jaGlsZHJlbi5sZW5ndGgmJigxIT09dC5jaGlsZHJlbi5sZW5ndGh8fDMhPT10LmNoaWxkcmVuWzBdLnR5cGUpKXJldHVybiB2b2lkKHQuc3RhdGljUm9vdD0hMCk7aWYodC5zdGF0aWNSb290PSExLHQuY2hpbGRyZW4pZm9yKHZhciByPTAsaT10LmNoaWxkcmVuLmxlbmd0aDtyPGk7cisrKWUodC5jaGlsZHJlbltyXSxufHwhIXQuZm9yKTtpZih0LmlmQ29uZGl0aW9ucylmb3IodmFyIG89MSxhPXQuaWZDb25kaXRpb25zLmxlbmd0aDtvPGE7bysrKWUodC5pZkNvbmRpdGlvbnNbb10uYmxvY2ssbil9fShlLCExKSl9dmFyIE9hPS9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvLFNhPS9cXChbXildKj9cXCk7KiQvLFRhPS9eW0EtWmEtel8kXVtcXHckXSooPzpcXC5bQS1aYS16XyRdW1xcdyRdKnxcXFsnW14nXSo/J118XFxbXCJbXlwiXSo/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqJC8sTmE9e2VzYzoyNyx0YWI6OSxlbnRlcjoxMyxzcGFjZTozMix1cDozOCxsZWZ0OjM3LHJpZ2h0OjM5LGRvd246NDAsZGVsZXRlOls4LDQ2XX0sRWE9e2VzYzpbXCJFc2NcIixcIkVzY2FwZVwiXSx0YWI6XCJUYWJcIixlbnRlcjpcIkVudGVyXCIsc3BhY2U6W1wiIFwiLFwiU3BhY2ViYXJcIl0sdXA6W1wiVXBcIixcIkFycm93VXBcIl0sbGVmdDpbXCJMZWZ0XCIsXCJBcnJvd0xlZnRcIl0scmlnaHQ6W1wiUmlnaHRcIixcIkFycm93UmlnaHRcIl0sZG93bjpbXCJEb3duXCIsXCJBcnJvd0Rvd25cIl0sZGVsZXRlOltcIkJhY2tzcGFjZVwiLFwiRGVsZXRlXCIsXCJEZWxcIl19LGphPWZ1bmN0aW9uKGUpe3JldHVyblwiaWYoXCIrZStcIilyZXR1cm4gbnVsbDtcIn0sRGE9e3N0b3A6XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XCIscHJldmVudDpcIiRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1wiLHNlbGY6amEoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxjdHJsOmphKFwiISRldmVudC5jdHJsS2V5XCIpLHNoaWZ0OmphKFwiISRldmVudC5zaGlmdEtleVwiKSxhbHQ6amEoXCIhJGV2ZW50LmFsdEtleVwiKSxtZXRhOmphKFwiISRldmVudC5tZXRhS2V5XCIpLGxlZnQ6amEoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxtaWRkbGU6amEoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxyaWdodDpqYShcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyXCIpfTtmdW5jdGlvbiBMYShlLHQpe3ZhciBuPXQ/XCJuYXRpdmVPbjpcIjpcIm9uOlwiLHI9XCJcIixpPVwiXCI7Zm9yKHZhciBvIGluIGUpe3ZhciBhPUlhKGVbb10pO2Vbb10mJmVbb10uZHluYW1pYz9pKz1vK1wiLFwiK2ErXCIsXCI6cis9J1wiJytvKydcIjonK2ErXCIsXCJ9cmV0dXJuIHI9XCJ7XCIrci5zbGljZSgwLC0xKStcIn1cIixpP24rXCJfZChcIityK1wiLFtcIitpLnNsaWNlKDAsLTEpK1wiXSlcIjpuK3J9ZnVuY3Rpb24gSWEoZSl7aWYoIWUpcmV0dXJuXCJmdW5jdGlvbigpe31cIjtpZihBcnJheS5pc0FycmF5KGUpKXJldHVyblwiW1wiK2UubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBJYShlKX0pLmpvaW4oXCIsXCIpK1wiXVwiO3ZhciB0PVRhLnRlc3QoZS52YWx1ZSksbj1PYS50ZXN0KGUudmFsdWUpLHI9VGEudGVzdChlLnZhbHVlLnJlcGxhY2UoU2EsXCJcIikpO2lmKGUubW9kaWZpZXJzKXt2YXIgaT1cIlwiLG89XCJcIixhPVtdO2Zvcih2YXIgcyBpbiBlLm1vZGlmaWVycylpZihEYVtzXSlvKz1EYVtzXSxOYVtzXSYmYS5wdXNoKHMpO2Vsc2UgaWYoXCJleGFjdFwiPT09cyl7dmFyIGM9ZS5tb2RpZmllcnM7bys9amEoW1wiY3RybFwiLFwic2hpZnRcIixcImFsdFwiLFwibWV0YVwiXS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWNbZV19KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCIkZXZlbnQuXCIrZStcIktleVwifSkuam9pbihcInx8XCIpKX1lbHNlIGEucHVzaChzKTtyZXR1cm4gYS5sZW5ndGgmJihpKz1mdW5jdGlvbihlKXtyZXR1cm5cImlmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmXCIrZS5tYXAoTWEpLmpvaW4oXCImJlwiKStcIilyZXR1cm4gbnVsbDtcIn0oYSkpLG8mJihpKz1vKSxcImZ1bmN0aW9uKCRldmVudCl7XCIraSsodD9cInJldHVybiBcIitlLnZhbHVlK1wiLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcIjpuP1wicmV0dXJuIChcIitlLnZhbHVlK1wiKS5hcHBseShudWxsLCBhcmd1bWVudHMpXCI6cj9cInJldHVybiBcIitlLnZhbHVlOmUudmFsdWUpK1wifVwifXJldHVybiB0fHxuP2UudmFsdWU6XCJmdW5jdGlvbigkZXZlbnQpe1wiKyhyP1wicmV0dXJuIFwiK2UudmFsdWU6ZS52YWx1ZSkrXCJ9XCJ9ZnVuY3Rpb24gTWEoZSl7dmFyIHQ9cGFyc2VJbnQoZSwxMCk7aWYodClyZXR1cm5cIiRldmVudC5rZXlDb2RlIT09XCIrdDt2YXIgbj1OYVtlXSxyPUVhW2VdO3JldHVyblwiX2soJGV2ZW50LmtleUNvZGUsXCIrSlNPTi5zdHJpbmdpZnkoZSkrXCIsXCIrSlNPTi5zdHJpbmdpZnkobikrXCIsJGV2ZW50LmtleSxcIitKU09OLnN0cmluZ2lmeShyKStcIilcIn12YXIgRmE9e29uOmZ1bmN0aW9uKGUsdCl7ZS53cmFwTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVyblwiX2coXCIrZStcIixcIit0LnZhbHVlK1wiKVwifX0sYmluZDpmdW5jdGlvbihlLHQpe2Uud3JhcERhdGE9ZnVuY3Rpb24obil7cmV0dXJuXCJfYihcIituK1wiLCdcIitlLnRhZytcIicsXCIrdC52YWx1ZStcIixcIisodC5tb2RpZmllcnMmJnQubW9kaWZpZXJzLnByb3A/XCJ0cnVlXCI6XCJmYWxzZVwiKSsodC5tb2RpZmllcnMmJnQubW9kaWZpZXJzLnN5bmM/XCIsdHJ1ZVwiOlwiXCIpK1wiKVwifX0sY2xvYWs6U30sUGE9ZnVuY3Rpb24oZSl7dGhpcy5vcHRpb25zPWUsdGhpcy53YXJuPWUud2Fybnx8VHIsdGhpcy50cmFuc2Zvcm1zPU5yKGUubW9kdWxlcyxcInRyYW5zZm9ybUNvZGVcIiksdGhpcy5kYXRhR2VuRm5zPU5yKGUubW9kdWxlcyxcImdlbkRhdGFcIiksdGhpcy5kaXJlY3RpdmVzPUEoQSh7fSxGYSksZS5kaXJlY3RpdmVzKTt2YXIgdD1lLmlzUmVzZXJ2ZWRUYWd8fFQ7dGhpcy5tYXliZUNvbXBvbmVudD1mdW5jdGlvbihlKXtyZXR1cm4hIWUuY29tcG9uZW50fHwhdChlLnRhZyl9LHRoaXMub25jZUlkPTAsdGhpcy5zdGF0aWNSZW5kZXJGbnM9W10sdGhpcy5wcmU9ITF9O2Z1bmN0aW9uIFJhKGUsdCl7dmFyIG49bmV3IFBhKHQpO3JldHVybntyZW5kZXI6XCJ3aXRoKHRoaXMpe3JldHVybiBcIisoZT9cInNjcmlwdFwiPT09ZS50YWc/XCJudWxsXCI6SGEoZSxuKTonX2MoXCJkaXZcIiknKStcIn1cIixzdGF0aWNSZW5kZXJGbnM6bi5zdGF0aWNSZW5kZXJGbnN9fWZ1bmN0aW9uIEhhKGUsdCl7aWYoZS5wYXJlbnQmJihlLnByZT1lLnByZXx8ZS5wYXJlbnQucHJlKSxlLnN0YXRpY1Jvb3QmJiFlLnN0YXRpY1Byb2Nlc3NlZClyZXR1cm4gQmEoZSx0KTtpZihlLm9uY2UmJiFlLm9uY2VQcm9jZXNzZWQpcmV0dXJuIFVhKGUsdCk7aWYoZS5mb3ImJiFlLmZvclByb2Nlc3NlZClyZXR1cm4gemEoZSx0KTtpZihlLmlmJiYhZS5pZlByb2Nlc3NlZClyZXR1cm4gVmEoZSx0KTtpZihcInRlbXBsYXRlXCIhPT1lLnRhZ3x8ZS5zbG90VGFyZ2V0fHx0LnByZSl7aWYoXCJzbG90XCI9PT1lLnRhZylyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnNsb3ROYW1lfHwnXCJkZWZhdWx0XCInLHI9V2EoZSx0KSxpPVwiX3QoXCIrbisocj9cIixmdW5jdGlvbigpe3JldHVybiBcIityK1wifVwiOlwiXCIpLG89ZS5hdHRyc3x8ZS5keW5hbWljQXR0cnM/WGEoKGUuYXR0cnN8fFtdKS5jb25jYXQoZS5keW5hbWljQXR0cnN8fFtdKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6YihlLm5hbWUpLHZhbHVlOmUudmFsdWUsZHluYW1pYzplLmR5bmFtaWN9fSkpOm51bGwsYT1lLmF0dHJzTWFwW1widi1iaW5kXCJdOyFvJiYhYXx8cnx8KGkrPVwiLG51bGxcIik7byYmKGkrPVwiLFwiK28pO2EmJihpKz0obz9cIlwiOlwiLG51bGxcIikrXCIsXCIrYSk7cmV0dXJuIGkrXCIpXCJ9KGUsdCk7dmFyIG47aWYoZS5jb21wb25lbnQpbj1mdW5jdGlvbihlLHQsbil7dmFyIHI9dC5pbmxpbmVUZW1wbGF0ZT9udWxsOldhKHQsbiwhMCk7cmV0dXJuXCJfYyhcIitlK1wiLFwiK0thKHQsbikrKHI/XCIsXCIrcjpcIlwiKStcIilcIn0oZS5jb21wb25lbnQsZSx0KTtlbHNle3ZhciByOyghZS5wbGFpbnx8ZS5wcmUmJnQubWF5YmVDb21wb25lbnQoZSkpJiYocj1LYShlLHQpKTt2YXIgaT1lLmlubGluZVRlbXBsYXRlP251bGw6V2EoZSx0LCEwKTtuPVwiX2MoJ1wiK2UudGFnK1wiJ1wiKyhyP1wiLFwiK3I6XCJcIikrKGk/XCIsXCIraTpcIlwiKStcIilcIn1mb3IodmFyIG89MDtvPHQudHJhbnNmb3Jtcy5sZW5ndGg7bysrKW49dC50cmFuc2Zvcm1zW29dKGUsbik7cmV0dXJuIG59cmV0dXJuIFdhKGUsdCl8fFwidm9pZCAwXCJ9ZnVuY3Rpb24gQmEoZSx0KXtlLnN0YXRpY1Byb2Nlc3NlZD0hMDt2YXIgbj10LnByZTtyZXR1cm4gZS5wcmUmJih0LnByZT1lLnByZSksdC5zdGF0aWNSZW5kZXJGbnMucHVzaChcIndpdGgodGhpcyl7cmV0dXJuIFwiK0hhKGUsdCkrXCJ9XCIpLHQucHJlPW4sXCJfbShcIisodC5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoLTEpKyhlLnN0YXRpY0luRm9yP1wiLHRydWVcIjpcIlwiKStcIilcIn1mdW5jdGlvbiBVYShlLHQpe2lmKGUub25jZVByb2Nlc3NlZD0hMCxlLmlmJiYhZS5pZlByb2Nlc3NlZClyZXR1cm4gVmEoZSx0KTtpZihlLnN0YXRpY0luRm9yKXtmb3IodmFyIG49XCJcIixyPWUucGFyZW50O3I7KXtpZihyLmZvcil7bj1yLmtleTticmVha31yPXIucGFyZW50fXJldHVybiBuP1wiX28oXCIrSGEoZSx0KStcIixcIit0Lm9uY2VJZCsrK1wiLFwiK24rXCIpXCI6SGEoZSx0KX1yZXR1cm4gQmEoZSx0KX1mdW5jdGlvbiBWYShlLHQsbixyKXtyZXR1cm4gZS5pZlByb2Nlc3NlZD0hMCxmdW5jdGlvbiBlKHQsbixyLGkpe2lmKCF0Lmxlbmd0aClyZXR1cm4gaXx8XCJfZSgpXCI7dmFyIG89dC5zaGlmdCgpO3JldHVybiBvLmV4cD9cIihcIitvLmV4cCtcIik/XCIrYShvLmJsb2NrKStcIjpcIitlKHQsbixyLGkpOlwiXCIrYShvLmJsb2NrKTtmdW5jdGlvbiBhKGUpe3JldHVybiByP3IoZSxuKTplLm9uY2U/VWEoZSxuKTpIYShlLG4pfX0oZS5pZkNvbmRpdGlvbnMuc2xpY2UoKSx0LG4scil9ZnVuY3Rpb24gemEoZSx0LG4scil7dmFyIGk9ZS5mb3Isbz1lLmFsaWFzLGE9ZS5pdGVyYXRvcjE/XCIsXCIrZS5pdGVyYXRvcjE6XCJcIixzPWUuaXRlcmF0b3IyP1wiLFwiK2UuaXRlcmF0b3IyOlwiXCI7cmV0dXJuIGUuZm9yUHJvY2Vzc2VkPSEwLChyfHxcIl9sXCIpK1wiKChcIitpK1wiKSxmdW5jdGlvbihcIitvK2ErcytcIil7cmV0dXJuIFwiKyhufHxIYSkoZSx0KStcIn0pXCJ9ZnVuY3Rpb24gS2EoZSx0KXt2YXIgbj1cIntcIixyPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5kaXJlY3RpdmVzO2lmKCFuKXJldHVybjt2YXIgcixpLG8sYSxzPVwiZGlyZWN0aXZlczpbXCIsYz0hMTtmb3Iocj0wLGk9bi5sZW5ndGg7cjxpO3IrKyl7bz1uW3JdLGE9ITA7dmFyIHU9dC5kaXJlY3RpdmVzW28ubmFtZV07dSYmKGE9ISF1KGUsbyx0Lndhcm4pKSxhJiYoYz0hMCxzKz0ne25hbWU6XCInK28ubmFtZSsnXCIscmF3TmFtZTpcIicrby5yYXdOYW1lKydcIicrKG8udmFsdWU/XCIsdmFsdWU6KFwiK28udmFsdWUrXCIpLGV4cHJlc3Npb246XCIrSlNPTi5zdHJpbmdpZnkoby52YWx1ZSk6XCJcIikrKG8uYXJnP1wiLGFyZzpcIisoby5pc0R5bmFtaWNBcmc/by5hcmc6J1wiJytvLmFyZysnXCInKTpcIlwiKSsoby5tb2RpZmllcnM/XCIsbW9kaWZpZXJzOlwiK0pTT04uc3RyaW5naWZ5KG8ubW9kaWZpZXJzKTpcIlwiKStcIn0sXCIpfWlmKGMpcmV0dXJuIHMuc2xpY2UoMCwtMSkrXCJdXCJ9KGUsdCk7ciYmKG4rPXIrXCIsXCIpLGUua2V5JiYobis9XCJrZXk6XCIrZS5rZXkrXCIsXCIpLGUucmVmJiYobis9XCJyZWY6XCIrZS5yZWYrXCIsXCIpLGUucmVmSW5Gb3ImJihuKz1cInJlZkluRm9yOnRydWUsXCIpLGUucHJlJiYobis9XCJwcmU6dHJ1ZSxcIiksZS5jb21wb25lbnQmJihuKz0ndGFnOlwiJytlLnRhZysnXCIsJyk7Zm9yKHZhciBpPTA7aTx0LmRhdGFHZW5GbnMubGVuZ3RoO2krKyluKz10LmRhdGFHZW5GbnNbaV0oZSk7aWYoZS5hdHRycyYmKG4rPVwiYXR0cnM6XCIrWGEoZS5hdHRycykrXCIsXCIpLGUucHJvcHMmJihuKz1cImRvbVByb3BzOlwiK1hhKGUucHJvcHMpK1wiLFwiKSxlLmV2ZW50cyYmKG4rPUxhKGUuZXZlbnRzLCExKStcIixcIiksZS5uYXRpdmVFdmVudHMmJihuKz1MYShlLm5hdGl2ZUV2ZW50cywhMCkrXCIsXCIpLGUuc2xvdFRhcmdldCYmIWUuc2xvdFNjb3BlJiYobis9XCJzbG90OlwiK2Uuc2xvdFRhcmdldCtcIixcIiksZS5zY29wZWRTbG90cyYmKG4rPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmZvcnx8T2JqZWN0LmtleXModCkuc29tZShmdW5jdGlvbihlKXt2YXIgbj10W2VdO3JldHVybiBuLnNsb3RUYXJnZXREeW5hbWljfHxuLmlmfHxuLmZvcnx8SmEobil9KSxpPSEhZS5pZjtpZighcilmb3IodmFyIG89ZS5wYXJlbnQ7bzspe2lmKG8uc2xvdFNjb3BlJiZvLnNsb3RTY29wZSE9PXVhfHxvLmZvcil7cj0hMDticmVha31vLmlmJiYoaT0hMCksbz1vLnBhcmVudH12YXIgYT1PYmplY3Qua2V5cyh0KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHFhKHRbZV0sbil9KS5qb2luKFwiLFwiKTtyZXR1cm5cInNjb3BlZFNsb3RzOl91KFtcIithK1wiXVwiKyhyP1wiLG51bGwsdHJ1ZVwiOlwiXCIpKyghciYmaT9cIixudWxsLGZhbHNlLFwiK2Z1bmN0aW9uKGUpe3ZhciB0PTUzODEsbj1lLmxlbmd0aDtmb3IoO247KXQ9MzMqdF5lLmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gdD4+PjB9KGEpOlwiXCIpK1wiKVwifShlLGUuc2NvcGVkU2xvdHMsdCkrXCIsXCIpLGUubW9kZWwmJihuKz1cIm1vZGVsOnt2YWx1ZTpcIitlLm1vZGVsLnZhbHVlK1wiLGNhbGxiYWNrOlwiK2UubW9kZWwuY2FsbGJhY2srXCIsZXhwcmVzc2lvbjpcIitlLm1vZGVsLmV4cHJlc3Npb24rXCJ9LFwiKSxlLmlubGluZVRlbXBsYXRlKXt2YXIgbz1mdW5jdGlvbihlLHQpe3ZhciBuPWUuY2hpbGRyZW5bMF07aWYobiYmMT09PW4udHlwZSl7dmFyIHI9UmEobix0Lm9wdGlvbnMpO3JldHVyblwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiK3IucmVuZGVyK1wifSxzdGF0aWNSZW5kZXJGbnM6W1wiK3Iuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uKCl7XCIrZStcIn1cIn0pLmpvaW4oXCIsXCIpK1wiXX1cIn19KGUsdCk7byYmKG4rPW8rXCIsXCIpfXJldHVybiBuPW4ucmVwbGFjZSgvLCQvLFwiXCIpK1wifVwiLGUuZHluYW1pY0F0dHJzJiYobj1cIl9iKFwiK24rJyxcIicrZS50YWcrJ1wiLCcrWGEoZS5keW5hbWljQXR0cnMpK1wiKVwiKSxlLndyYXBEYXRhJiYobj1lLndyYXBEYXRhKG4pKSxlLndyYXBMaXN0ZW5lcnMmJihuPWUud3JhcExpc3RlbmVycyhuKSksbn1mdW5jdGlvbiBKYShlKXtyZXR1cm4gMT09PWUudHlwZSYmKFwic2xvdFwiPT09ZS50YWd8fGUuY2hpbGRyZW4uc29tZShKYSkpfWZ1bmN0aW9uIHFhKGUsdCl7dmFyIG49ZS5hdHRyc01hcFtcInNsb3Qtc2NvcGVcIl07aWYoZS5pZiYmIWUuaWZQcm9jZXNzZWQmJiFuKXJldHVybiBWYShlLHQscWEsXCJudWxsXCIpO2lmKGUuZm9yJiYhZS5mb3JQcm9jZXNzZWQpcmV0dXJuIHphKGUsdCxxYSk7dmFyIHI9ZS5zbG90U2NvcGU9PT11YT9cIlwiOlN0cmluZyhlLnNsb3RTY29wZSksaT1cImZ1bmN0aW9uKFwiK3IrXCIpe3JldHVybiBcIisoXCJ0ZW1wbGF0ZVwiPT09ZS50YWc/ZS5pZiYmbj9cIihcIitlLmlmK1wiKT9cIisoV2EoZSx0KXx8XCJ1bmRlZmluZWRcIikrXCI6dW5kZWZpbmVkXCI6V2EoZSx0KXx8XCJ1bmRlZmluZWRcIjpIYShlLHQpKStcIn1cIixvPXI/XCJcIjpcIixwcm94eTp0cnVlXCI7cmV0dXJuXCJ7a2V5OlwiKyhlLnNsb3RUYXJnZXR8fCdcImRlZmF1bHRcIicpK1wiLGZuOlwiK2krbytcIn1cIn1mdW5jdGlvbiBXYShlLHQsbixyLGkpe3ZhciBvPWUuY2hpbGRyZW47aWYoby5sZW5ndGgpe3ZhciBhPW9bMF07aWYoMT09PW8ubGVuZ3RoJiZhLmZvciYmXCJ0ZW1wbGF0ZVwiIT09YS50YWcmJlwic2xvdFwiIT09YS50YWcpe3ZhciBzPW4/dC5tYXliZUNvbXBvbmVudChhKT9cIiwxXCI6XCIsMFwiOlwiXCI7cmV0dXJuXCJcIisocnx8SGEpKGEsdCkrc312YXIgYz1uP2Z1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgaT1lW3JdO2lmKDE9PT1pLnR5cGUpe2lmKFphKGkpfHxpLmlmQ29uZGl0aW9ucyYmaS5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gWmEoZS5ibG9jayl9KSl7bj0yO2JyZWFrfSh0KGkpfHxpLmlmQ29uZGl0aW9ucyYmaS5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gdChlLmJsb2NrKX0pKSYmKG49MSl9fXJldHVybiBufShvLHQubWF5YmVDb21wb25lbnQpOjAsdT1pfHxHYTtyZXR1cm5cIltcIitvLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdShlLHQpfSkuam9pbihcIixcIikrXCJdXCIrKGM/XCIsXCIrYzpcIlwiKX19ZnVuY3Rpb24gWmEoZSl7cmV0dXJuIHZvaWQgMCE9PWUuZm9yfHxcInRlbXBsYXRlXCI9PT1lLnRhZ3x8XCJzbG90XCI9PT1lLnRhZ31mdW5jdGlvbiBHYShlLHQpe3JldHVybiAxPT09ZS50eXBlP0hhKGUsdCk6Mz09PWUudHlwZSYmZS5pc0NvbW1lbnQ/KHI9ZSxcIl9lKFwiK0pTT04uc3RyaW5naWZ5KHIudGV4dCkrXCIpXCIpOlwiX3YoXCIrKDI9PT0obj1lKS50eXBlP24uZXhwcmVzc2lvbjpZYShKU09OLnN0cmluZ2lmeShuLnRleHQpKSkrXCIpXCI7dmFyIG4scn1mdW5jdGlvbiBYYShlKXtmb3IodmFyIHQ9XCJcIixuPVwiXCIscj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgaT1lW3JdLG89WWEoaS52YWx1ZSk7aS5keW5hbWljP24rPWkubmFtZStcIixcIitvK1wiLFwiOnQrPSdcIicraS5uYW1lKydcIjonK28rXCIsXCJ9cmV0dXJuIHQ9XCJ7XCIrdC5zbGljZSgwLC0xKStcIn1cIixuP1wiX2QoXCIrdCtcIixbXCIrbi5zbGljZSgwLC0xKStcIl0pXCI6dH1mdW5jdGlvbiBZYShlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHUyMDI4L2csXCJcXFxcdTIwMjhcIikucmVwbGFjZSgvXFx1MjAyOS9nLFwiXFxcXHUyMDI5XCIpfW5ldyBSZWdFeHAoXCJcXFxcYlwiK1wiZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCxzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50c1wiLnNwbGl0KFwiLFwiKS5qb2luKFwiXFxcXGJ8XFxcXGJcIikrXCJcXFxcYlwiKTtmdW5jdGlvbiBRYShlLHQpe3RyeXtyZXR1cm4gbmV3IEZ1bmN0aW9uKGUpfWNhdGNoKG4pe3JldHVybiB0LnB1c2goe2VycjpuLGNvZGU6ZX0pLFN9fWZ1bmN0aW9uIGVzKGUpe3ZhciB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGZ1bmN0aW9uKG4scixpKXsocj1BKHt9LHIpKS53YXJuO2RlbGV0ZSByLndhcm47dmFyIG89ci5kZWxpbWl0ZXJzP1N0cmluZyhyLmRlbGltaXRlcnMpK246bjtpZih0W29dKXJldHVybiB0W29dO3ZhciBhPWUobixyKSxzPXt9LGM9W107cmV0dXJuIHMucmVuZGVyPVFhKGEucmVuZGVyLGMpLHMuc3RhdGljUmVuZGVyRm5zPWEuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gUWEoZSxjKX0pLHRbb109c319dmFyIHRzLG5zLHJzPSh0cz1mdW5jdGlvbihlLHQpe3ZhciBuPWZhKGUudHJpbSgpLHQpOyExIT09dC5vcHRpbWl6ZSYmQWEobix0KTt2YXIgcj1SYShuLHQpO3JldHVybnthc3Q6bixyZW5kZXI6ci5yZW5kZXIsc3RhdGljUmVuZGVyRm5zOnIuc3RhdGljUmVuZGVyRm5zfX0sZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LG4pe3ZhciByPU9iamVjdC5jcmVhdGUoZSksaT1bXSxvPVtdO2lmKG4pZm9yKHZhciBhIGluIG4ubW9kdWxlcyYmKHIubW9kdWxlcz0oZS5tb2R1bGVzfHxbXSkuY29uY2F0KG4ubW9kdWxlcykpLG4uZGlyZWN0aXZlcyYmKHIuZGlyZWN0aXZlcz1BKE9iamVjdC5jcmVhdGUoZS5kaXJlY3RpdmVzfHxudWxsKSxuLmRpcmVjdGl2ZXMpKSxuKVwibW9kdWxlc1wiIT09YSYmXCJkaXJlY3RpdmVzXCIhPT1hJiYoclthXT1uW2FdKTtyLndhcm49ZnVuY3Rpb24oZSx0LG4peyhuP286aSkucHVzaChlKX07dmFyIHM9dHModC50cmltKCkscik7cmV0dXJuIHMuZXJyb3JzPWkscy50aXBzPW8sc31yZXR1cm57Y29tcGlsZTp0LGNvbXBpbGVUb0Z1bmN0aW9uczplcyh0KX19KSh4YSksaXM9KHJzLmNvbXBpbGUscnMuY29tcGlsZVRvRnVuY3Rpb25zKTtmdW5jdGlvbiBvcyhlKXtyZXR1cm4obnM9bnN8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLmlubmVySFRNTD1lPyc8YSBocmVmPVwiXFxuXCIvPic6JzxkaXYgYT1cIlxcblwiLz4nLG5zLmlubmVySFRNTC5pbmRleE9mKFwiJiMxMDtcIik+MH12YXIgYXM9ISFWJiZvcyghMSksc3M9ISFWJiZvcyghMCksY3M9ZyhmdW5jdGlvbihlKXt2YXIgdD1RbihlKTtyZXR1cm4gdCYmdC5pbm5lckhUTUx9KSx1cz1Dbi5wcm90b3R5cGUuJG1vdW50O0NuLnByb3RvdHlwZS4kbW91bnQ9ZnVuY3Rpb24oZSx0KXtpZigoZT1lJiZRbihlKSk9PT1kb2N1bWVudC5ib2R5fHxlPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KXJldHVybiB0aGlzO3ZhciBuPXRoaXMuJG9wdGlvbnM7aWYoIW4ucmVuZGVyKXt2YXIgcj1uLnRlbXBsYXRlO2lmKHIpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHIpXCIjXCI9PT1yLmNoYXJBdCgwKSYmKHI9Y3MocikpO2Vsc2V7aWYoIXIubm9kZVR5cGUpcmV0dXJuIHRoaXM7cj1yLmlubmVySFRNTH1lbHNlIGUmJihyPWZ1bmN0aW9uKGUpe2lmKGUub3V0ZXJIVE1MKXJldHVybiBlLm91dGVySFRNTDt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiB0LmFwcGVuZENoaWxkKGUuY2xvbmVOb2RlKCEwKSksdC5pbm5lckhUTUx9KGUpKTtpZihyKXt2YXIgaT1pcyhyLHtvdXRwdXRTb3VyY2VSYW5nZTohMSxzaG91bGREZWNvZGVOZXdsaW5lczphcyxzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6c3MsZGVsaW1pdGVyczpuLmRlbGltaXRlcnMsY29tbWVudHM6bi5jb21tZW50c30sdGhpcyksbz1pLnJlbmRlcixhPWkuc3RhdGljUmVuZGVyRm5zO24ucmVuZGVyPW8sbi5zdGF0aWNSZW5kZXJGbnM9YX19cmV0dXJuIHVzLmNhbGwodGhpcyxlLHQpfSxDbi5jb21waWxlPWlzLG1vZHVsZS5leHBvcnRzPUNuOyIsInZhciBtYXAgPSB7XG5cdFwiLi9jb2RlLWNsYXNzLnZ1ZVwiOiAxNTU4Nyxcblx0XCIuL2NvZGUtbWV0aG9kLWRlY2xhcmUudnVlXCI6IDM0MDA2LFxuXHRcIi4vY29kZS10eXBlLWRlY2xhcmUudnVlXCI6IDQxNjIsXG5cdFwiLi9jb250ZW50LXRlbXBsYXRlLnZ1ZVwiOiAzNzk2OSxcblx0XCIuL2xhbmctbGluay52dWVcIjogMzU3NTUsXG5cdFwiLi9tYXJrLWxpbmsudnVlXCI6IDc5MTY0LFxuXHRcIi4vbWFyay10by52dWVcIjogNzMxOTIsXG5cdFwiLi9zZWUtbGluay52dWVcIjogMTEwMjUsXG5cdFwiLi9zaGllbGRzLnZ1ZVwiOiAxNzU5NlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDY1ODk7IiwidmFyIG1hcCA9IHtcblx0XCIuL2Fib3V0LnZ1ZVwiOiBbXG5cdFx0MTQ2OTQsXG5cdFx0Njk0XG5cdF0sXG5cdFwiLi9jaGFuZ2UudnVlXCI6IFtcblx0XHQ1MjMxOSxcblx0XHQzMTlcblx0XSxcblx0XCIuL2NsYXNzLnZ1ZVwiOiBbXG5cdFx0MTE2OTEsXG5cdFx0NjkxXG5cdF0sXG5cdFwiLi9jb250ZW50LnZ1ZVwiOiBbXG5cdFx0NDQ5ODAsXG5cdFx0OTgwXG5cdF0sXG5cdFwiLi9kaXJlY3RvcnkudnVlXCI6IFtcblx0XHQ3MTAzMyxcblx0XHQzM1xuXHRdLFxuXHRcIi4vZ3VpZGUudnVlXCI6IFtcblx0XHQ3MzU4MCxcblx0XHQ1ODBcblx0XSxcblx0XCIuL2luZGV4LnZ1ZVwiOiBbXG5cdFx0MjA3MzcsXG5cdFx0ODc2LFxuXHRcdDczN1xuXHRdLFxuXHRcIi4vaW5zdGFsbC52dWVcIjogW1xuXHRcdDU4MDM2LFxuXHRcdDM2XG5cdF0sXG5cdFwiLi9pbnRyb2R1Y3Rpb24udnVlXCI6IFtcblx0XHQ0MzA0NCxcblx0XHQ0NFxuXHRdLFxuXHRcIi4vbGFuZy52dWVcIjogW1xuXHRcdDU1NDA3LFxuXHRcdDQwN1xuXHRdLFxuXHRcIi4vbWV0aG9kLnZ1ZVwiOiBbXG5cdFx0ODM2NzgsXG5cdFx0Njc4XG5cdF0sXG5cdFwiLi9uYXYudnVlXCI6IFtcblx0XHQzMDYyNSxcblx0XHQ2MjVcblx0XSxcblx0XCIuL3Byb3BlcnR5LnZ1ZVwiOiBbXG5cdFx0MzAxMjEsXG5cdFx0MTIxXG5cdF1cbn07XG5mdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0KHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgaWRzID0gbWFwW3JlcV0sIGlkID0gaWRzWzBdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoaWRzLnNsaWNlKDEpLm1hcChfX3dlYnBhY2tfcmVxdWlyZV9fLmUpKS50aGVuKCgpID0+IHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG5cdH0pO1xufVxud2VicGFja0FzeW5jQ29udGV4dC5rZXlzID0gKCkgPT4gKE9iamVjdC5rZXlzKG1hcCkpO1xud2VicGFja0FzeW5jQ29udGV4dC5pZCA9IDIyMzg1O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQXN5bmNDb250ZXh0OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyAoe1wiMTQ4XCI6XCJsaW5xLWpzLTIuMS4yM1wiLFwiMjI4XCI6XCJsaW5xLWpzLTIuMS4yMlwiLFwiMjYxXCI6XCJsaW5xLWpzLXByZVwiLFwiMzg0XCI6XCJsaW5xLWpzLTIuMS4xN1wiLFwiNTQzXCI6XCJsaW5xLWpzLTIuMS4yMFwiLFwiNTYxXCI6XCJsaW5xLWpzLTIuMS4yMVwiLFwiNTgxXCI6XCJsaW5xLWpzLTIuMS4xOVwiLFwiNzIxXCI6XCJsaW5xLWpzLTIuMS4xOFwiLFwiNzQxXCI6XCJsaW5xLWpzLTIuMS4xNlwiLFwiOTM3XCI6XCJsaW5xLWpzLTIuMS4xNVwifVtjaHVua0lkXSB8fCBjaHVua0lkKSArIFwiLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2xpbnFqcy9kaXN0L1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDAsXG5cdDU5MjogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rbGlucV9qc19kb2NzXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2xpbnFfanNfZG9jc1wiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiaW1wb3J0IGNvbW1vbiBmcm9tICcuL2NvbW1vbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0dXBkYXRlZCgpIHtcclxuXHRcdCQoJ3ByZSBjb2RlJykuZWFjaCgoaSwgYmxvY2spID0+IHtcclxuXHRcdFx0aWYgKCEkKGJsb2NrKS5oYXNDbGFzcygnaGxqcycpKSB7XHJcblx0XHRcdFx0aGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0ZGF0YSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGRlZmF1bHRMYW5nOiBjb21tb24uZGVmYXVsdExhbmcsXHJcblx0XHRcdGxhc3Rlc3Q6IGNvbW1vbi5sYXN0ZXN0LFxyXG5cdFx0XHR2ZXJzaW9uczogY29tbW9uLnZlcnNpb25zLFxyXG5cdFx0XHRwcm9taXNlczogW11cclxuXHRcdH1cclxuXHR9LFxyXG5cdHdhdGNoOiB7XHJcblx0XHQnJHJvdXRlLnBhcmFtcycoKSB7XHJcblx0XHRcdHRoaXMucmVsb2FkKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRjb21wdXRlZDoge1xyXG5cdFx0bGFuZygpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuJHJvdXRlLnBhcmFtc1snbGFuZyddIHx8IHRoaXMuZGVmYXVsdExhbmc7XHJcblx0XHR9LFxyXG5cdFx0dmVyc2lvbigpIHtcclxuXHRcdFx0cmV0dXJuICh0aGlzLiRyb3V0ZS5wYXJhbXNbJ3ZlcnNpb24nXSB8fCB0aGlzLmxhc3Rlc3QpICsgKHRoaXMuJHJvdXRlLnBhcmFtc1sncHJlJ10gfHwgJycpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0bW91bnRlZCgpIHtcclxuXHRcdGlmICh0aGlzLiRyb3V0ZSAmJiB0aGlzLiRyb3V0ZS5oYXNoKSB7XHJcblx0XHRcdHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuXHRcdFx0XHRsZXQgc2Nyb2xsVG8gPSAkKHRoaXMuJGVsKTtcclxuXHRcdFx0XHRpZiAoc2Nyb2xsVG8uaXModGhpcy4kcm91dGUuaGFzaCkpIHtcclxuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsVG8oc2Nyb2xsVG8pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRtZXRob2RzOiB7XHJcblx0XHRoYXNIaXN0b3J5cyhtZXRhcykge1xyXG5cdFx0XHRyZXR1cm4gRW51bWVyYWJsZS5hbnkobWV0YXMsIG1ldGEgPT4gbWV0YSAmJiB0aGlzLmhhc0hpc3RvcnkobWV0YS5oaXN0b3J5cykpO1xyXG5cdFx0fSxcclxuXHRcdGhhc0hpc3RvcnkoaGlzdG9yeXMpIHtcclxuXHRcdFx0cmV0dXJuIEVudW1lcmFibGUuYW55KHRoaXMuaGlzdG9yeXMoaGlzdG9yeXMpLCBoaXN0b3J5ID0+IHRoaXMuaXNOZXdlcihoaXN0b3J5LnNpbmNlKSAmJiB0aGlzLmlzT2xkZXIoaGlzdG9yeS5kZXByZWNhdGVkKSk7XHJcblx0XHR9LFxyXG5cdFx0aGlzdG9yeXMoaGlzdG9yeXMpIHtcclxuXHRcdFx0cmV0dXJuIGNvbW1vbi5oaXN0b3J5cyhoaXN0b3J5cykudG9BcnJheSgpO1xyXG5cdFx0fSxcclxuXHRcdGFzVmVyc2lvbih2ZXJzaW9uKSB7XHJcblx0XHRcdHJldHVybiBjb21tb24uYXNWZXJzaW9uKHZlcnNpb24pO1xyXG5cdFx0fSxcclxuXHRcdGlzTmV3ZXIodmVyc2lvbikge1xyXG5cdFx0XHRyZXR1cm4gY29tbW9uLmlzTmV3ZXIodmVyc2lvbiwgdGhpcy52ZXJzaW9uKTtcclxuXHRcdH0sXHJcblx0XHRpc09sZGVyKHZlcnNpb24pIHtcclxuXHRcdFx0cmV0dXJuIGNvbW1vbi5pc09sZGVyKHZlcnNpb24sIHRoaXMudmVyc2lvbik7XHJcblx0XHR9LFxyXG5cdFx0Y2FwaXRhbGl6ZSh2YWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gY29tbW9uLmNhcGl0YWxpemUodmFsdWUpO1xyXG5cdFx0fSxcclxuXHRcdHVwcGVyKHZhbHVlKSB7XHJcblx0XHRcdHJldHVybiBjb21tb24udXBwZXIodmFsdWUpO1xyXG5cdFx0fSxcclxuXHRcdHNjcm9sbFRvKHNjcm9sbFRvKSB7XHJcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdCQoJy5hY3RpdmF0YWJsZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRsZXQgZml4ZWQgPSAkKCcjdG9wYmFyJykuY3NzKCdwb3NpdGlvbicpID09PSAnZml4ZWQnID8gNTAgOiAwO1xyXG5cdFx0XHRcdCQoZG9jdW1lbnQpLnNjcm9sbFRvcChzY3JvbGxUby5jbG9zZXN0KCcuYWN0aXZhdGFibGUnKS5hZGRDbGFzcygnYWN0aXZlJykub2Zmc2V0KCkudG9wIC0gZml4ZWQgLSAxMCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHRcdGlzS2V5d29yZCh0eXBlKSB7XHJcblx0XHRcdHJldHVybiAvXlthLXpdLy50ZXN0KHR5cGUpO1xyXG5cdFx0fSxcclxuXHRcdGhpZ2hsaWdodCgpIHtcclxuXHRcdFx0dGhpcy4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgJCgncHJlIGNvZGUnKS5lYWNoKChpLCBibG9jaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICQoYmxvY2spLnJlbW92ZUNsYXNzKCdobGpzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cdFx0cmVsb2FkKCkge1xyXG5cdFx0XHRmb3IgKGxldCBwcm9taXNlIG9mIHRoaXMucHJvbWlzZXMpIHtcclxuXHRcdFx0XHRsZXQgcCA9IG5ldyBQcm9taXNlKHByb21pc2UuZXhlYyk7XHJcblx0XHRcdFx0Zm9yIChsZXQgY2FsbGJhY2sgb2YgcHJvbWlzZS5jYWxsYmFja3MpIHtcclxuXHRcdFx0XHRcdGlmIChjYWxsYmFjay5zdWNjZXNzKSB7XHJcblx0XHRcdFx0XHRcdHAudGhlbihjYWxsYmFjay5zdWNjZXNzLCBjYWxsYmFjay5mYWlsZWQpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cC5jYXRjaChjYWxsYmFjay5mYWlsZWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGdldEpzb24oLi4ubmFtZXMpIHtcclxuXHRcdFx0bGV0IGxvYWQgPSAocmV2b2xzZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFx0cmVxdWlyZS5lbnN1cmUoW10sICgpID0+IHtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGxldCByZXN1bHRzID0gbmFtZXMubWFwKG5hbWUgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGxldCBpc0FycmF5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0aWYgKG5hbWUgaW5zdGFuY2VvZiBBcnJheSB8fCBBcnJheS5pc0FycmF5KG5hbWUpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gbmFtZVswXTtcclxuXHRcdFx0XHRcdFx0XHRcdGlzQXJyYXkgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBuYW1lLmNhbGwodGhpcyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmIChuYW1lLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlcXVpcmUoYC4uL3Jlc291cmNlcyR7IG5hbWUgfS5qc29uYCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgfTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IGRlZmF1bHRMYW5nID0gaXNBcnJheSA/IFtdIDogeyB9LCBsYW5nID0gaXNBcnJheSA/IFtdIDogeyB9O1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdExhbmcgPSByZXF1aXJlKGAuLi9yZXNvdXJjZXMvJHsgdGhpcy5kZWZhdWx0TGFuZyB9LyR7IG5hbWUgfS5qc29uYCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7IGNvbnNvbGUud2FybihlKTsgfVxyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bGFuZyA9IHJlcXVpcmUoYC4uL3Jlc291cmNlcy8keyB0aGlzLmxhbmcgfS8keyBuYW1lIH0uanNvbmApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkgeyBjb25zb2xlLndhcm4oZSk7IH1cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAkLmV4dGVuZCh0cnVlLCBpc0FycmF5ID8gW10gOiB7IH0sIGRlZmF1bHRMYW5nLCBsYW5nKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzdWx0cy5sZW5ndGggPT09IDEpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXZvbHNlICYmIHJldm9sc2UocmVzdWx0c1swXSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmV2b2xzZSAmJiByZXZvbHNlKHJlc3VsdHMpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0ICYmIHJlamVjdChlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHRcdFx0bGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShsb2FkKTtcclxuXHRcdFx0bGV0IF90aGVuID0gcHJvbWlzZS50aGVuO1xyXG5cdFx0XHRsZXQgX2NhdGNoID0gcHJvbWlzZS5jYXRjaDtcclxuXHRcdFx0cHJvbWlzZS5leGVjID0gbG9hZDtcclxuXHRcdFx0cHJvbWlzZS5jYWxsYmFja3MgPSBbXTtcclxuXHRcdFx0cHJvbWlzZS50aGVuID0gZnVuY3Rpb24oc3VjY2VzcywgZmFpbGVkKSB7XHJcblx0XHRcdFx0dGhpcy5jYWxsYmFja3MucHVzaCh7XHJcblx0XHRcdFx0XHRzdWNjZXNzOiBzdWNjZXNzLFxyXG5cdFx0XHRcdFx0ZmFpbGVkOiBmYWlsZWRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRfdGhlbi5jYWxsKHRoaXMsIHN1Y2Nlc3MsIGZhaWxlZCk7XHJcblx0XHRcdH07XHJcblx0XHRcdHByb21pc2UuY2F0Y2ggPSBmdW5jdGlvbihmYWlsZWQpIHtcclxuXHRcdFx0XHR0aGlzLmNhbGxiYWNrcy5wdXNoKHtcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IG51bGwsXHJcblx0XHRcdFx0XHRmYWlsZWQ6IGZhaWxlZFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdF9jYXRjaC5jYWxsKHRoaXMsIGZhaWxlZCk7XHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMucHJvbWlzZXMucHVzaChwcm9taXNlKTtcclxuXHRcdFx0cmV0dXJuIHByb21pc2U7XHJcblx0XHR9LFxyXG5cdFx0Z2V0TGFuZ3VhZ2VzKCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRyZXNvbHZlICYmIHJlc29sdmUocmVxdWlyZShgLi4vcmVzb3VyY2VzL2xhbmcuanNvbmApKTtcclxuXHRcdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRcdHJlamVjdCAmJiByZWplY3QoZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBbXCJjb2RlLWNsYXNzXCIsXCJjb2RlLW1ldGhvZC1kZWNsYXJlXCIsXCJjb2RlLXR5cGUtZGVjbGFyZVwiLFwiY29udGVudC10ZW1wbGF0ZVwiLFwibGFuZy1saW5rXCIsXCJtYXJrLWxpbmtcIixcIm1hcmstdG9cIixcInNlZS1saW5rXCIsXCJzaGllbGRzXCJdIiwiaW1wb3J0ICcuLi9zdHlsZXMvbWFpbi5zYXNzJztcclxuXHJcbmltcG9ydCAnLi9oaXN0b3J5JztcclxuXHJcbmltcG9ydCAnLi9leHRlbmRzJztcclxuaW1wb3J0ICcuL2ZpbHRlcnMnO1xyXG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzJztcclxuaW1wb3J0IG1peGluIGZyb20gJy4vbWl4aW4nO1xyXG5pbXBvcnQgY29tcG9uZW50cyBmcm9tICcuL2NvbXBvbmVudHMnO1xyXG5cclxuY29uc3QgbG9hZCA9IHBhZ2UgPT4gKCkgPT4gaW1wb3J0KGAuLi9wYWdlcy8ke3BhZ2V9LnZ1ZWApO1xyXG5cclxuVnVlLnVzZShWdWVSb3V0ZXIpO1xyXG5WdWUubWl4aW4obWl4aW4pO1xyXG5cclxuZm9yIChsZXQgY29tcG9uZW50IG9mIGNvbXBvbmVudHMpIHtcclxuXHRWdWUuY29tcG9uZW50KGNvbXBvbmVudCwgcmVxdWlyZShgLi4vY29tcG9uZW50cy8keyBjb21wb25lbnQgfS52dWVgKS5kZWZhdWx0KTtcclxufVxyXG5cclxuY29uc3Qgcm91dGVyID0gbmV3IFZ1ZVJvdXRlcih7XHJcblx0cm91dGVzOiBbXHJcblx0XHR7XHJcblx0XHRcdHBhdGg6ICcvJyxcclxuXHRcdFx0Y29tcG9uZW50OiBsb2FkKCdsYW5nJyksXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRwYXRoOiAnLzpsYW5nJyxcclxuXHRcdFx0Y29tcG9uZW50OiBsb2FkKCdpbmRleCcpLFxyXG5cdFx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHBhdGg6ICcvJyxcclxuXHRcdFx0XHRcdGNvbXBvbmVudHM6IHtcclxuXHRcdFx0XHRcdFx0bmF2OiBsb2FkKCduYXYnKSxcclxuXHRcdFx0XHRcdFx0ZGlyZWN0b3J5OiBsb2FkKCdkaXJlY3RvcnknKSxcclxuXHRcdFx0XHRcdFx0Y29udGVudDogbG9hZCgnY29udGVudCcpXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Y2hpbGRyZW46IEVudW1lcmFibGUuc2VsZWN0TWFueShPYmplY3QuZW50cmllcyhyb3V0ZXMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoeyBrZXksIHZhbHVlIH0pKSwgZW50cnkgPT4gWyAnJywgJzp2ZXJzaW9uKFxcXFxkK1xcXFwuXFxcXGQrXFxcXC5cXFxcZCspOnByZShcXFxcLnByZSk/LycgXSwgKGVudHJ5LCBwcmVmaXgpID0+ICh7IHBhdGg6IHByZWZpeCArIGVudHJ5LmtleSwgY29tcG9uZW50OiBsb2FkKGVudHJ5LnZhbHVlKSB9KSlcclxuXHRcdFx0XHRcdFx0LmNvbmNhdChbeyBwYXRoOiAnJywgY29tcG9uZW50OiBsb2FkKCdpbnRyb2R1Y3Rpb24nKSB9LCB7IHBhdGg6ICc6dmVyc2lvbihcXFxcZCtcXFxcLlxcXFxkK1xcXFwuXFxcXGQrKTpwcmUoXFxcXC5wcmUpPycsIGNvbXBvbmVudDogbG9hZCgnaW50cm9kdWN0aW9uJykgfV0pLnRvQXJyYXkoKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XVxyXG5cdFx0fVxyXG5cdF0sXHJcblx0YmFzZTonL2xpbnFqcydcclxufSk7XHJcblxyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuXHRyb3V0ZXJcclxufSkuJG1vdW50KCcjYXBwJyk7IiwiZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdpbnRyb2R1Y3Rpb24nOiAnaW50cm9kdWN0aW9uJyxcclxuXHQnaW5zdGFsbCc6ICdpbnN0YWxsJyxcclxuXHQnYWJvdXQnOiAnYWJvdXQnLFxyXG5cdCdjaGFuZ2UnOiAnY2hhbmdlJyxcclxuXHQnZ3VpZGVzLzpjb2RlJzogJ2d1aWRlJyxcclxuXHQnYXBpcy86Y2xhc3MnOiAnY2xhc3MnLFxyXG5cdCdhcGlzLzpjbGFzcy9tZXRob2QvOm1ldGhvZCc6ICdtZXRob2QnLFxyXG5cdCdhcGlzLzpjbGFzcy9tZXRob2QvOm1ldGhvZC86aW5kZXgnOiAnbWV0aG9kJyxcclxuXHQnYXBpcy86Y2xhc3MvcHJvcGVydHkvOnByb3BlcnR5JzogJ3Byb3BlcnR5J1xyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=
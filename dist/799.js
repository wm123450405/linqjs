(self.webpackChunklinq_js_docs=self.webpackChunklinq_js_docs||[]).push([[799],{76465:e=>{e.exports={constructors:{historys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]},name:"Enumerable",properties:[{name:"actions",historys:[{deprecated:0,description:"An object contains same useful actions"}]},{name:"comparers",historys:[{deprecated:0,description:"An object contains same useful comparers"}]},{name:"config",historys:[{deprecated:0,description:"Global config"}]},{name:"predicates",historys:[{deprecated:0,description:"An object contains same useful predicates"}]},{name:"selectors",historys:[{deprecated:0,description:"An object contains same useful selectors"}]}],methods:[{name:"asEnumerable",historys:[{deprecated:0,overloads:[{description:"Create an object of type IEnumerable from source"}]}]},{name:"empty",historys:[{deprecated:0,overloads:[{description:"Create an empty IEnumerable object"}]}]}]}},12565:e=>{e.exports={constructors:{historys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]}}},86290:e=>{e.exports={historys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]}},26149:e=>{e.exports={historys:[{overloads:[{description:"Create an empty IEnumerable object"}]}]}},77003:e=>{e.exports={historys:[{description:"An object contains same useful actions"}]}},16659:e=>{e.exports={historys:[{description:"An object contains same useful comparers"}]}},61117:e=>{e.exports={historys:[{description:"Global config"}]}},12527:e=>{e.exports={historys:[{description:"An object contains same useful predicates"}]}},91509:e=>{e.exports={historys:[{description:"An object contains same useful selectors"}]}},7221:e=>{e.exports={class:"class",interface:"interface",object:"object",constructor:"constructor",constructors:"constructors",property:"property",properties:"properties",method:"method",methods:"methods",since:"since",deprecated:"deprecated",details:"details",description:"description",summary:"summary",warning:"warning",warnings:"warnings",remark:"remark",remarks:"remarks",example:"example",examples:"examples",static:"static",new:"new",see:"see",declare:"declare",parameters:"parameters",parameter:"parameter",returns:"return value",generics:"type parameters",apis:"APIs",guide:"Guide",publish:"publish",time:"time",date:"date",prepublish:"prepublish",version:"version",author:"author",email:"email",project:"project",default:"default",value:"value",defaultValue:"default value",readonly:"readonly",lazy:"deferred execution",try:"try it",run:"run",clear:"clear",close:"close",loadRuntime:"loading runtime",executing:"executing",enableExtend:"enable extends of Array",newInstance:{only:"can only use new operator",both:"can use new operator or not",cannot:"can not use new operator"}}},5900:e=>{e.exports=[{publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"],version:"2.1.15"},{publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"],version:"2.1.16"},{publish:"2017-04-12",contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"],version:"2.1.17"},{publish:"2017-08-30",contents:["新增 Enumerable.typeAs 方法用来对指定类型设置 asEnumerable 转换时的参考类型","新增 Enumerable.types 对象,包含各参考类型的常量值","Enumerable.addPlugins、Enumerable.removePlugins 方法增加返回值,方便链式调用","新增 Enumerable.comparers.ignoreCase 忽略大小写的相等比较器","新增 IEnumerable.prototype.leftJoin、IEnumerable.prototype.rightJoin 方法用来对两个序列分别进行内部左联接与内部右联接","修复 concat 方法在参数值为 String 或 Arguments 类型是结果超出预期的bug","移除过时的功能 arrayComparer、predicateComparer","新增 Enumerable.extends.lazy 配置选项","修复 启用扩展后 对象上不能使用 getEnumerator 方法的问题","新增 IEnumerable.prototype.chunk 方法用来对序列进行分块","新增 IEnumerable.prototype.product 方法用来计算乘积","新增 IEnumerable.prototype.leftPad、IEnumerable.prototype.rightPad 方法","新增 IEnumerable.prototype.rand 方法","","Bugs","调用 Object 对象的 asEnumerable 方法将会返回一个不可控的结果"],version:"2.1.18"},{publish:"2017-09-08",contents:["新增(New):","1. 增加各 选择器(Selector)/比较器(Comparer)/筛选器(Predicate) 对 Number/Symbol 类型参数的支持","2. 新增 Enumerable.selectors.join 作为 defaultJoinSelector","3. 新增 IEnumerable.prototype.innerJoin 方法与原先的 join 方法功能一致, 主要为了区别仅有一个参数的情况下的逻辑","4. 新增 Enumerable.noConflict 方法 用于解决重复引用的问题","","优化(Optimization):","1. 优化了 join 方法的处理逻辑","2. 将 IGrouping.prototype.key 与 IChunk.prototype.index 设置成只读","3. 为 groupJoin, leftJoin, rightJoin 等方法的 resultSelector 参数设置了 defaultJoinSelector 默认值","4. 优化了 Enumerable.extend/Enumerable.unextend/Enumerable.addPlugins/Enumerble.removePlugins 等方法, 并新增了 Enumerable.extendAll/Enumerable.unextendAll 方法","","修复(Fixed):","1. 修复一处针对 String 扩展后 String.prototype.slice 返回超出预期的问题","2. 修复由 groupBy/groupJoin/chunk 等方法获取到的 IGrouping/IChunk 对象不能被重复遍历的问题","3. 修复对 Object 对象使用 asEnumerable 方法时不能返回此对象键值对序列或出现错误的bug"],version:"2.1.19"},{publish:"2017-09-22",contents:["新增(New):","1. 新增 IEnumerable.prototype.random / IEnumerable.prototype.randomOrDefault 方法, 用来从序列中随机获取一个元素","2. 新增 IEnumerable.prototype.wipe 方法, 用来剔除序列中满足条件指定数量的元素","3. 新增 IEnumerable.prototype.nearBy 方法, 用来对序列中相同且相邻的元素进行分组","4. 新增 Enumerable.between 方法, 生成范围内的整数序列","5. 新增 Enumerable.from 方法, 功能与 asEnumerable 方法一致","6. 为 Enumerable.range 方法新增第三个参数, 设置步长","7. 新增 Enumerable.generate 方法, 通过生成方法构建新序列","8. 新增 IEnumerable.prototype.separate / IEnumerable.prototype.combine 方法, 分别用来对递归的结构进行拆解与合并","","优化(Optimization):","1. 优化 chunk/leftPad/rightPad/rand 方法的逻辑","2. 优化 defaultValueSelector","","修复(Fixed):","1. 修复 开启扩展后 average/defaultIfEmpty/join 方法返回超出预期或报错的bug"],version:"2.1.20"},{publish:"2017-11-20",contents:["新增(New):","1. 新增 IEnumerable.prototype.isSub / IEnumerable.prototype.isSuper 方法, 用来判断两个序列的从属关系","2. 新增 IEnumerable.prototype.symmetric 方法, 用来计算两个序列的对称差集","","优化(Optimization):","1. 优化 orderBy/orderByDescending/thenBy/thenByDescending 方法的性能","","修复(Fixed):"],version:"2.1.21"},{publish:"2018-03-21",contents:["新增(New):","1. 新增 ITree 接口, 拥有对树形结构的基本操作. 包含: value, children, values 等属性, 包含: depth, degree, getChild, getValue, breadthTraverse, breadthSearch, breadthSubTree, depthTraverse, depthSearch, depthSubTree, lowestAncestor, isDescendantOf, isAncestorOf, path, pathTo, isBinary, isFullBinary, isCompleteBinary, isProfectBinary, asBinary 等方法","2. 新增 BinaryTree 类, 拥有对二叉树的基本操作. 包含: left, right 等属性, 包含: hasLeft, hasRight, preOrder, inOrder, postOrder 等方法","3. 修改 ICombine 继承 ITree 接口, 可进行树形结构的操作","4. 新增 IEnumerable.prototype.maxOrDefault, IEnumerable.prototype.minOrDefault 方法","5. 为 object 对象新增 asEnumerable(childrenSelector, valueSelector) 重载, 用于或一个 ITree 对象","6. 新增 toPreOrder, toInOrder, toPostOrder 方法, 用于生成一个完全二叉树, 分别使得此二叉树的 前序遍历|中序遍历|后序遍历 的结果与源序列一致","","优化(Optimization):","1. 优化 IteratorEnumerable","","修复(Fixed):"],version:"2.1.22"},{publish:"2018-03-29",contents:["新增(New):","1. 增加 ITree.prototype.toValue 方法,将树形结构转化 object 对象 ( JSON 数据 )","2. 增加 ITree.prototype.isParentOf, ITree.prototype.isChildOf, ITree.prototype.getParent, ITree.prototype.prev, ITree.prototype.prevAll, ITree.prototype.next, ITree.prototype.nextAll, ITree.prototype.siblings, ITree.prototype.getParentNode, ITree.prototype.prevNode, ITree.prototype.prevAllNodes, ITree.prototype.nextNode, ITree.prototype.nextAllNodes, ITree.prototype.siblingNodes, ITree.prototype.pathNodes, ITree.prototype.pathNodesTo 方法,操作树形的各节点关系","3. 增加 IEnumerable.prototype.each 方法,对序列中的每个元素执行一次操作,并返回序列本身 ( 与 forEach 方法的区别在于 each 方法可以继续链式调用 )","4. 增加 IEnumerable.prototype.split 方法,对序列按照指定的条件进行拆分","5. 增加 IEnumerable.prototype.indices 方法,用使用一个索引序列从源序列中生成一个新序列","6. 增加 IEnumerable.prototype.permutation, IEnumerable.prototype.combination 方法,用来计算排列与组合","7. 增加 Enumerable.setters.children, Enumerable.setters.value 属性,一个默认的 children/value 设置器","8. 增加 Enumerable.setters.property 方法,用来生成一个属性设置器","","优化(Optimization):","1. 优化 ITree.prototype.isAncestorOf, ITree.prototype.isDescendantOf 方法的性能","2. 优化 IEnumerable.prototype.chunk, IEnumerable.prototype.groupBy, IEnumerable.prototype.groupJoin 等方法性能","3. 优化 ITree.prototype.lowestAncestor 方法的性能","4. 优化 Enumerable.selectors.property 方法, 增加一个参数控制是否忽略无效的属性","","修复(Fixed):","1. 修复 ITree.prototype.lowestAncestor 在处理节点值为false的情况下返回错误的问题","2. 修复 ITree.prototype.lowestAncestor 在处理节点值类型与参数值类型不同但数值相等的情况下返回错误的问题"],version:"2.1.23"},{publish:"2020-03-03",contents:["新增(New):","1. 为一些方法增加别名, 方便其他语言使用者更容易的转移","2. 新增 conflict 方法用来判断一个序列中是否包含重复的元素","3. 新增 nearSplit 方法用来分割一个序列,与 split 方法区别在于连续的符合条件的分割元素之间将不会被分割出空序列","4. 新增 skipSame, takeSame 方法用来获取或忽略开头部分相同的元素","","优化(Optimization):","","修复(Fixed):","1. 修复 skipWhile, takeWhile 方法默认参数错误的bug"],version:"2.1.24"},{prepublish:!0,contents:["新增(New):","1. 增加 proportion、skipProportion, takeProportion 方法","","优化(Optimization):","","修复(Fixed):","1. 修复了 IEnumerable 中未注册 random、 randomOrDefault 方法的问题"],version:"2.1.25.pre"}]},19749:e=>{e.exports=[{code:"introduction",title:"Introduction"},{code:"install",title:"Install"},{code:"guides",title:"Guide",children:[{code:"instance",title:"Get IEnumerable instance",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"use",title:"Start use",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"config",title:"Configuration",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"selector",title:"Selector",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"predicate",title:"Predicate",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"comparer",title:"Comparer",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"action",title:"Action",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"setter",title:"设置器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"iterator",title:"迭代器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"enumerator",title:"枚举器",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"extend",title:"扩展",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"plugin",title:"插件",since:"2.1.15",deprecated:"2.1.25.pre"}]},{code:"apis",title:"APIs",children:[{code:"BinaryTree",title:"BinaryTree Class",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"Directory",title:"Directory Class",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Entry",title:"Entry Class",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable",title:"Enumerable Class",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.actions",title:"Enumerable.actions Object",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.comparers",title:"Enumerable.comparers Object",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.config",title:"Enumerable.config Object",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.predicates",title:"Enumerable.predicates Object",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.selectors",title:"Enumerable.selectors Object",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Enumerable.setters",title:"Enumerable.setters Object",since:"2.1.20",deprecated:"2.1.25.pre"},{code:"IChunk",title:"IChunk Interface",since:"2.1.18",deprecated:"2.1.25.pre"},{code:"ICombine",title:"ICombine Interface",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"IEnumerable",title:"IEnumerable Interface",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IEnumerator",title:"IEnumerator Interface",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IGrouping",title:"IGrouping Interface",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IMapEnumerable",title:"IMapEnumerable Interface",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"IOrderedEnumerable",title:"IOrderedEnumerable Interface",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"ITree",title:"ITree Interface",since:"2.1.22",deprecated:"2.1.25.pre"},{code:"Lookup",title:"Lookup Class",since:"2.1.15",deprecated:"2.1.25.pre"},{code:"Plugin",title:"Plugin Class",since:"2.1.15",deprecated:"2.1.25.pre"}]},{code:"change",title:"Change List"},{code:"about",title:"About"}]},21167:e=>{e.exports=[{code:"introduction",title:"Introduction"},{code:"install",title:"Install"},"guides","apis",{code:"change",title:"Change List"},{code:"about",title:"About"}]},55166:e=>{e.exports={}},13273:e=>{e.exports={"1.js":'let fruits = [ "apple", "mango", "orange", "passionfruit", "grape" ];\r\n\r\n// Determine whether any string in the array is longer than "banana".\r\nlet longestName =\r\n    fruits.asEnumerable().aggregate("banana",\r\n        (longest, next) =>\r\n            next.length > longest.length ? next : longest,\r\n        // Return the final result as an upper case string.\r\n        fruit => fruit.toUpperCase());\r\n\r\nconsole.log(`The fruit with the longest name is ${ longestName }`);\r\n\r\n// This code produces the following output:\r\n//\r\n// The fruit with the longest name is PASSIONFRUIT.'}},31386:e=>{e.exports={"1.js":'// Create an array of Pets.\r\nlet pets = [\r\n    { name: "Barley", age: 10 },\r\n    { name: "Boots", age: 14 },\r\n    { name: "Whiskers", age: 6 }\r\n];\r\n\r\n// Determine whether all pet names\r\n// in the array start with \'B\'.\r\nlet allStartWithB = pets.asEnumerable().all(pet => pet.name.startsWith("B"));\r\n\r\nconsole.log(`${ allStartWithB ? "All" : "Not all" } pet names start with \'B\'.`);\r\n\r\n// This code produces the following output:\r\n//\r\n//  Not all pet names start with \'B\'.',"2.js":'let people = [\r\n    {\r\n        lastName: "Haas",\r\n        pets: [\r\n            { name: "Barley", age: 10 },\r\n            { name: "Boots", age: 14 },\r\n            { name: "Whiskers", age: 6 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "Fakhouri",\r\n        pets: [\r\n            { name: "Snowball", age: 1 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "Antebi",\r\n        pets: [\r\n            { name: "Belle", age: 8 }\r\n        ]\r\n    },\r\n    {\r\n        lastName: "Philips",\r\n        pets: [\r\n            { name: "Sweetie", age: 2 },\r\n            { name: "Rover", age: 13 }\r\n        ]\r\n    }\r\n];\r\n\r\n// Determine which people have pets that are all older than 5.\r\nlet names = people.asEnumerable().where(person => person.pets.all(pet => pet.age > 5)).select(person => person.lastName);\r\n\r\nfor (let name of names) {\r\n    console.log(name);\r\n}\r\n\r\n/* This code produces the following output:\r\n *\r\n * Haas\r\n * Antebi\r\n */'}},33564:e=>{e.exports={"1.js":'// Create an array of Pets.\r\nlet pets = [\r\n    { name: "Barley", age: 8, vaccinated: true },\r\n    { name: "Boots", age: 4, vaccinated: false },\r\n    { name: "Whiskers", age: 1, vaccinated: false }\r\n];\r\n\r\n// Determine whether any pets over age 1 are also unvaccinated.\r\nlet unvaccinated = pets.asEnumerable().any(p => p.age > 1 && p.vaccinated === false);\r\n\r\nconsole.log(`There ${ unvaccinated ? "are" : "are not any" } unvaccinated animals over age one.`);\r\n\r\n// This code produces the following output:\r\n//\r\n//  There are unvaccinated animals over age one.'}},68414:e=>{e.exports={"1.js":'let numbers = [ "10007", "37", 299846234235 ];\r\n\r\nlet average = numbers.asEnumerable().average();\r\n\r\nconsole.log(`The average is ${ average }.`);\r\n\r\n// This code produces the following output:\r\n//\r\n// The average is 99948748093.'}},92595:e=>{e.exports={"1.js":'let cats = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 }\r\n];\r\n\r\nlet dogs = [\r\n    { name: "Bounder", age: 3 },\r\n    { name: "Snoopy", age: 14 },\r\n    { name: "Fido", age: 9 }\r\n];\r\n\r\nlet query = cats.asEnumerable().select(cat => cat.name)\r\n    .concat(dogs.asEnumerable().select(dog => dog.name));\r\n\r\nfor (let name of query) {\r\n    console.log(name);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// Barley\r\n// Boots\r\n// Whiskers\r\n// Bounder\r\n// Snoopy\r\n// Fido'}},50318:e=>{e.exports={"1.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet fruit = "mango";\r\n\r\nlet hasMango = fruits.asEnumerable().contains(fruit);\r\n\r\nconsole.log(`The array ${ hasMango ? "does" : "does not" } contain \'${ fruit }\'.`);\r\n\r\n// This code produces the following output:\r\n//\r\n// The array does contain \'mango\'.',"2.js":'// Custom comparer for contains\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // Fruits are equal if their names and product numbers are equal.\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet fruits = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 },\r\n    { name: "lemon", code: 12 }\r\n];\r\n\r\nlet apple = { name: "apple", code: 9 };\r\nlet kiwi = { name: "kiwi", code: 8 };\r\n\r\nlet hasApple = fruits.asEnumerable().contains(apple, productComparer);\r\nlet hasKiwi = fruits.asEnumerable().contains(kiwi, productComparer);\r\n\r\nconsole.log("Apple? " + hasApple);\r\nconsole.log("Kiwi? " + hasKiwi);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Apple? true\r\n Kiwi? false\r\n */'}},22909:e=>{e.exports={"1.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet numberOfFruits = fruits.asEnumerable().count();\r\n\r\nconsole.log(`There are ${ numberOfFruits } fruits in the collection.`);\r\n\r\n// This code produces the following output:\r\n//\r\n// There are 6 fruits in the collection.\r\n',"2.js":'let pets = [\r\n    { name: "Barley", vaccinated: true },\r\n    { name: "Boots", vaccinated: false },\r\n    { name: "Whiskers", vaccinated: false }\r\n];\r\n\r\nlet numberUnvaccinated = pets.asEnumerable().count(p => p.vaccinated === false);\r\n\r\nconsole.log(`There are ${ numberUnvaccinated } unvaccinated animals.`);\r\n\r\n// This code produces the following output:\r\n//\r\n// There are 2 unvaccinated animals.',"3.js":'let pets = [\r\n    { name: "Barley", vaccinated: true },\r\n    { name: "Boots", vaccinated: false },\r\n    { name: "Whiskers", vaccinated: false }\r\n];\r\n\r\nlet numberUnvaccinated = pets.asEnumerable().count({ vaccinated: false });\r\n\r\nconsole.log(`There are ${ numberUnvaccinated } unvaccinated animals.`);\r\n\r\n// This code produces the following output:\r\n//\r\n// There are 2 unvaccinated animals.'}},91412:e=>{e.exports={"1.js":'let defaultPet = { name: "Default Pet Name", age: 0 };\r\n\r\nlet pets1 = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 }\r\n];\r\n\r\nfor (let pet of pets1.asEnumerable().defaultIfEmpty(defaultPet)) {\r\n    console.log(`Name: ${ pet.name }`);\r\n}\r\n\r\nconsole.log();\r\n\r\nlet pets2 = [];\r\n\r\nfor (let pet of pets2.asEnumerable().defaultIfEmpty(defaultPet)) {\r\n    console.log(`Name: ${ pet.name }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Name: Barley\r\n Name: Boots\r\n Name: Whiskers\r\n\r\n Name: Default Pet Name\r\n */'}},50930:e=>{e.exports={"1.js":'let ages = [ 21, 46, 46, 55, 17, 21, 55, 55 ];\r\n\r\nlet distinctAges = ages.asEnumerable().distinct();\r\n\r\nconsole.log("Distinct ages:");\r\n\r\nfor (let age of distinctAges) {\r\n    console.log(age);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Distinct ages:\r\n 21\r\n 46\r\n 55\r\n 17\r\n */\r\n',"2.js":'// Custom comparer for distinct\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // Check whether the products\' properties are equal.\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet products = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 },\r\n    { name: "apple", code: 9 },\r\n    { name: "lemon", code: 12 }\r\n];\r\n\r\n// Exclude duplicates.\r\nlet noduplicates = products.distinct(productComparer);\r\n\r\nfor (let product of noduplicates) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n apple 9\r\n orange 4\r\n lemon 12\r\n */'}},11190:e=>{e.exports={"1.js":'let names = [ "Hartono, Tommy", "Adams, Terry", "Andersen, Henriette Thaulow", "Hedlund, Magnus", "Ito, Shu" ];\r\n\r\nlet name = names.asEnumerable().elementAt(4);\r\n\r\nconsole.log(`The name is \'${ name }\'.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The name is \'Ito, Shu\'.\r\n */'}},56138:e=>{e.exports={"1.js":'let names = [ "Hartono, Tommy", "Adams, Terry", "Andersen, Henriette Thaulow", "Hedlund, Magnus", "Ito, Shu" ];\r\n\r\nlet index = 20;\r\n\r\nlet name = names.asEnumerable().elementAtOrDefault(index, "[no name at this index]");\r\n\r\nconsole.log(`The name chosen at index ${ index } is \'${ name }\'.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The name chosen at index 20 is \'[no name at this index]\'.\r\n */'}},20369:e=>{e.exports={"1.js":"let numbers1 = [ 2.0, 2.0, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5 ];\r\nlet numbers2 = [ 2.2 ];\r\n\r\nlet onlyInFirstSet = numbers1.asEnumerable().except(numbers2);\r\n\r\nfor (let number of onlyInFirstSet) {\r\n    console.log(number);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 2\r\n 2.1\r\n 2.3\r\n 2.4\r\n 2.5\r\n */","2.js":'// Custom comparer for distinct\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // Check whether the products\' properties are equal.\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet fruits1 = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 },\r\n    { name: "lemon", code: 12 }\r\n];\r\n\r\nlet fruits2 = [ { name: "apple", code: 9 } ];\r\n\r\n//Get all the elements from the first array\r\n//except for the elements from the second array.\r\nlet except = fruits1.asEnumerable().except(fruits2, productComparer);\r\n\r\nfor (let product of except) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n orange 4\r\n lemon 12\r\n */'}},46332:e=>{e.exports={"1.js":"let numbers = [ 9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19 ];\r\n\r\nlet first = numbers.asEnumerable().first();\r\n\r\nconsole.log(first);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 9\r\n */","2.js":"let numbers = [ 9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19 ];\r\n\r\nlet first = numbers.asEnumerable().first(number => number > 80);\r\n\r\nconsole.log(first);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 92\r\n */"}},24160:e=>{e.exports={"1.js":"let numbers = [];\r\nlet first = numbers.asEnumerable().firstOrDefault(0);\r\nconsole.log(first);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 0\r\n */","2.js":'let names = [ "Hartono, Tommy", "Adams, Terry",\r\n    "Andersen, Henriette Thaulow",\r\n    "Hedlund, Magnus", "Ito, Shu" ];\r\n\r\nlet firstLongName = names.asEnumerable().firstOrDefault("", name => name.length > 20);\r\n\r\nconsole.log(`The first long name is ${ firstLongName }.`);\r\n\r\nlet firstVeryLongName = names.asEnumerable().firstOrDefault("", name => name.length > 30);\r\n\r\nconsole.log(`There is ${ firstVeryLongName === "" ? "not a" : "a" } name longer than 30 characters.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The first long name is \'Andersen, Henriette Thaulow\'.\r\n There is not a name longer than 30 characters.\r\n */'}},25024:e=>{e.exports={"1.js":'// Create a list of pets.\r\nlet pets = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 },\r\n    { name: "Daisy", age: 4 }\r\n];\r\n\r\n// Group the pets using Age as the key value\r\n// and selecting only the pet\'s Name for each value.\r\nlet query = pets.asEnumerable().groupBy(pet => pet.age, pet => pet.name);\r\n\r\n// Iterate over each IGrouping in the collection.\r\nfor (let petGroup of query) {\r\n    // Print the key value of the IGrouping.\r\n    console.log(petGroup.key);\r\n    // Iterate over each value in the\r\n    // IGrouping and print the value.\r\n    for (let name of petGroup)\r\n        console.log(`  ${ name }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 8\r\n   Barley\r\n 4\r\n   Boots\r\n   Daisy\r\n 1\r\n   Whiskers\r\n */',"2-2.1.19.js":'// Create a list of pets.\r\nlet petsList = [\r\n    { name: "Barley", age: 8.3 },\r\n    { name: "Boots", age: 4.9 },\r\n    { name: "Whiskers", age: 1.5 },\r\n    { name: "Daisy", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group\'s\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count(),\r\n        min: pets.min(pet => pet.age),\r\n        max: pets.max(pet => pet.age)\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log("\\nAge group: " + result.key);\r\n    console.log("Number of pets in this age group: " + result.count);\r\n    console.log("Minimum age: " + result.min);\r\n    console.log("Maximum age: " + result.max);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n Minimum age: 8.3\r\n Maximum age: 8.3\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n Minimum age: 4.3\r\n Maximum age: 4.9\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n Minimum age: 1.5\r\n Maximum age: 1.5\r\n */',"2.js":'// Create a list of pets.\r\nlet petsList = [\r\n    { name: "Barley", age: 8.3 },\r\n    { name: "Boots", age: 4.9 },\r\n    { name: "Whiskers", age: 1.5 },\r\n    { name: "Daisy", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group\'s elements.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log("\\nAge group: " + result.key);\r\n    console.log("Number of pets in this age group: " + result.count);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n */',"3-2.1.19.js":'// Create a list of pets.\r\nlet petsList = [\r\n    { name: "Barley", age: 8.3 },\r\n    { name: "Boots", age: 4.9 },\r\n    { name: "Whiskers", age: 1.5 },\r\n    { name: "Daisy", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group\'s\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count(),\r\n        min: ages.min(),\r\n        max: ages.max()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log("\\nAge group: " + result.key);\r\n    console.log("Number of pets in this age group: " + result.count);\r\n    console.log("Minimum age: " + result.min);\r\n    console.log("Maximum age: " + result.max);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n Minimum age: 8.3\r\n Maximum age: 8.3\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n Minimum age: 4.3\r\n Maximum age: 4.9\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n Minimum age: 1.5\r\n Maximum age: 1.5\r\n */',"3.js":'// Create a list of pets.\r\nlet petsList = [\r\n    { name: "Barley", age: 8.3 },\r\n    { name: "Boots", age: 4.9 },\r\n    { name: "Whiskers", age: 1.5 },\r\n    { name: "Daisy", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group\'s\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log("\\nAge group: " + result.key);\r\n    console.log("Number of pets in this age group: " + result.count)\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n */'}},55556:e=>{e.exports={"1.js":'let magnus = { name: "Hedlund, Magnus" };\r\nlet terry = { name: "Adams, Terry" };\r\nlet charlotte = { name: "Weiss, Charlotte" };\r\n\r\nlet barley = { name: "Barley", owner: terry };\r\nlet boots = { name: "Boots", owner: terry };\r\nlet whiskers = { name: "Whiskers", owner: charlotte };\r\nlet daisy = { name: "Daisy", owner: magnus };\r\n\r\nlet people = [ magnus, terry, charlotte ];\r\nlet pets = [ barley, boots, whiskers, daisy ];\r\n\r\n// Create a list where each element is an anonymous\r\n// type that contains a person\'s name and\r\n// a collection of names of the pets they own.\r\nlet query = people.asEnumerable().groupJoin(pets,\r\n    (person, petCollection) => ({\r\n        ownerName: person.name,\r\n        pets: petCollection.select(pet => pet.name)\r\n    }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    // Output the owner\'s name.\r\n    console.log(`${ obj.ownerName }:`);\r\n    // Output each of the owner\'s pet\'s names.\r\n    for (let pet of obj.pets) {\r\n        console.log(`  ${ pet }`);\r\n    }\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Hedlund, Magnus:\r\n   Daisy\r\n Adams, Terry:\r\n   Barley\r\n   Boots\r\n Weiss, Charlotte:\r\n   Whiskers\r\n */'}},31683:e=>{e.exports={"1.js":"let id1 = [ 44, 26, 92, 30, 71, 38 ];\r\nlet id2 = [ 39, 59, 83, 47, 26, 4, 30 ];\r\n\r\nlet both = id1.asEnumerable().intersect(id2);\r\n\r\nfor (let id of both) {\r\n    console.log(id);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 26\r\n 30\r\n */","2.js":'// Custom comparer for distinct\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // Check whether the products\' properties are equal.\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet store1 = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 }\r\n];\r\nlet store2 = [\r\n    { name: "apple", code: 9 },\r\n    { name: "lemon", code: 12 }\r\n];\r\n\r\n// Get the products from the first array\r\n// that have duplicates in the second array.\r\nlet duplicates = store1.asEnumerable().intersect(store2, productComparer);\r\n\r\nfor (let product of duplicates) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n apple 9\r\n */'}},63867:e=>{e.exports={"1.1.js":'let magnus = { name: "Hedlund, Magnus" };\r\nlet terry = { name: "Adams, Terry" };\r\nlet charlotte = { name: "Weiss, Charlotte" };\r\n\r\nlet barley = { name: "Barley", owner: terry };\r\nlet boots = { name: "Boots", owner: terry };\r\nlet whiskers = { name: "Whiskers", owner: charlotte };\r\nlet daisy = { name: "Daisy", owner: magnus };\r\n\r\nlet people = [ magnus, terry, charlotte ];\r\nlet pets = [ barley, boots, whiskers, daisy ];\r\n\r\n// Create a list of Person-Pet pairs where\r\n// each element is an anonymous type that contains a\r\n// Pet\'s name and the name of the Person that owns the Pet.\r\nlet query = people.asEnumerable().join(pets,\r\n    (person, pet) => ({ ownerName: person.name, pet: pet.name }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    console.log(`${ obj.ownerName } - ${ obj.pet }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Hedlund, Magnus - Daisy\r\n Adams, Terry - Barley\r\n Adams, Terry - Boots\r\n Weiss, Charlotte - Whiskers\r\n */'}},27065:e=>{e.exports={"1.js":"let longs = [ 4294967296, 466855135, 81125 ];\r\n\r\nlet max = longs.asEnumerable().max();\r\n\r\nconsole.log(`The largest number is ${ max }.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The largest number is 4294967296.\r\n */","2.js":'let pets = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 }\r\n];\r\n\r\nlet max = pets.asEnumerable().max(pet => pet.age + pet.name.length);\r\n\r\nconsole.log(`The maximum pet age plus name length is ${ max }.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The maximum pet age plus name length is 14.\r\n */'}},81622:e=>{e.exports={"1.js":"let longs = [ 4294967296, 466855135, 81125 ];\r\n\r\nlet min = longs.asEnumerable().min();\r\n\r\nconsole.log(`The smallest number is ${ min }.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The smallest number is 81125.\r\n */","2.js":'let pets = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 }\r\n];\r\n\r\nlet min = pets.asEnumerable().min(pet => pet.age);\r\n\r\nconsole.log(`The youngest animal is age ${ min }.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The youngest animal is age 5.\r\n */'}},45849:e=>{e.exports={"1-2.1.19.js":'let fruits = ["Mango", "Orange", "Apple", 3.0, "Banana"];\r\n\r\n// Apply ofType() to the Array\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log("Elements of type \'String\' are:");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// The following query shows that the standard query operators such as\r\n// where() can be applied to the Array type after calling ofType().\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.asEnumerable().contains("n", Enumerable.comparers.ignoreCase()));\r\n\r\nconsole.log("\\nThe following strings contain \'n\':");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// Elements of type \'string\' are:\r\n// Mango\r\n// Orange\r\n// Apple\r\n// Banana\r\n//\r\n// The following strings contain \'n\':\r\n// Mango\r\n// Orange\r\n// Banana',"1.js":'let fruits = ["Mango", "Orange", "Apple", 3.0, "Banana"];\r\n\r\n// Apply ofType() to the Array\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log("Elements of type \'String\' are:");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// The following query shows that the standard query operators such as\r\n// where() can be applied to the Array type after calling ofType().\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.toLowerCase().asEnumerable().contains("n"));\r\n\r\nconsole.log("\\nThe following strings contain \'n\':");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// Elements of type \'string\' are:\r\n// Mango\r\n// Orange\r\n// Apple\r\n// Banana\r\n//\r\n// The following strings contain \'n\':\r\n// Mango\r\n// Orange\r\n// Banana'}},93101:e=>{e.exports={"1.js":'let pets = [\r\n    { name: "Barley", age: 8 },\r\n    { name: "Boots", age: 4 },\r\n    { name: "Whiskers", age: 1 }\r\n];\r\n\r\nlet query = pets.asEnumerable().orderBy(pet => pet.age);\r\n\r\nfor (let pet of query) {\r\n    console.log(`${ pet.name } - ${ pet.age }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Whiskers - 1\r\n Boots - 4\r\n Barley - 8\r\n*/'}},80098:e=>{e.exports={"1.js":"const specialComparer = (d1, d2) => {\r\n    let f1 = d1 * 1e16 % 1e16 / 1e16;\r\n    let f2 = d2 * 1e16 % 1e16 / 1e16;\r\n    if (f1 === f2) {\r\n        return d1 - d2;\r\n    } else if (f1 > f2) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n};\r\n\r\nlet decimals = [ 6.2, 8.3, 0.5, 1.3, 6.3, 9.7 ];\r\n\r\nlet query = decimals.asEnumerable().orderByDescending(num => num, specialComparer);\r\n\r\nfor (let num of query) {\r\n    console.log(num);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 9.7\r\n 0.5\r\n 8.3\r\n 6.3\r\n 1.3\r\n 6.2\r\n*/"}},46805:e=>{e.exports={"1.js":"let squares = Enumerable.range(1, 10).select(x => x * x);\r\n\r\nfor (let num of squares) {\r\n    console.log(num);\r\n}\r\n/*\r\n This code produces the following output:\r\n\r\n 1\r\n 4\r\n 9\r\n 16\r\n 25\r\n 36\r\n 49\r\n 64\r\n 81\r\n 100\r\n*/","2.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet query = fruits.asEnumerable().select((fruit, index) => ({ index, str: fruit.substring(0, index) }));\r\n\r\nfor (let obj of query) {\r\n    console.log(obj);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n {"index":0,"str":""}\r\n {"index":1,"str":"b"}\r\n {"index":2,"str":"ma"}\r\n {"index":3,"str":"ora"}\r\n {"index":4,"str":"pass"}\r\n {"index":5,"str":"grape"}\r\n*/'}},16536:e=>{e.exports={"1.js":'let petOwners = [\r\n    { name: "Higa, Sidney", pets: [ "Scruffy", "Sam" ] },\r\n    { name: "Ashkenazi, Ronen", pets: [ "Walker", "Sugar" ] },\r\n    { name: "Price, Vernette", pets: [ "Scratches", "Diesel" ] }\r\n];\r\n\r\n// Query using selectMany().\r\nlet query1 = petOwners.asEnumerable().selectMany(petOwner => petOwner.pets);\r\n\r\nconsole.log("Using selectMany():");\r\n\r\n// Only one foreach loop is required to iterate\r\n// through the results since it is a\r\n// one-dimensional collection.\r\nfor (let pet of query1) {\r\n    console.log(pet);\r\n}\r\n\r\n// This code shows how to use select()\r\n// instead of selectMany().\r\nlet query2 = petOwners.asEnumerable().select(petOwner => petOwner.pets);\r\n\r\nconsole.log("\\nUsing select():");\r\n\r\n// Notice that two foreach loops are required to\r\n// iterate through the results\r\n// because the query returns a collection of arrays.\r\nfor (let petList of query2) {\r\n    for (let pet of petList) {\r\n        console.log(pet);\r\n    }\r\n    console.log();\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Using selectMany():\r\n Scruffy\r\n Sam\r\n Walker\r\n Sugar\r\n Scratches\r\n Diesel\r\n\r\n Using select():\r\n Scruffy\r\n Sam\r\n\r\n Walker\r\n Sugar\r\n\r\n Scratches\r\n Diesel\r\n\r\n*/',"2.js":'let petOwners = [\r\n    { name: "Higa, Sidney", pets: [ "Scruffy", "Sam" ] },\r\n    { name: "Ashkenazi, Ronen", pets: [ "Walker", "Sugar" ] },\r\n    { name: "Price, Vernette", pets: [ "Scratches", "Diesel" ] },\r\n    { name: "Hines, Patrick", pets: [ "Dusty" ] }\r\n];\r\n\r\n// Project the items in the array by appending the index\r\n// of each PetOwner to each pet\'s name in that petOwner\'s\r\n// array of pets.\r\nlet query = petOwners.asEnumerable().selectMany((petOwner, index) =>\r\n        petOwner.pets.asEnumerable().select(pet => index + pet));\r\n\r\nfor (let pet of query) {\r\n    console.log(pet);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// 0Scruffy\r\n// 0Sam\r\n// 1Walker\r\n// 1Sugar\r\n// 2Scratches\r\n// 2Diesel\r\n// 3Dusty',"3.js":'let petOwners = [\r\n    { name: "Higa, Sidney", pets: [ "Scruffy", "Sam" ] },\r\n    { name: "Ashkenazi, Ronen", pets: [ "Walker", "Sugar" ] },\r\n    { name: "Price, Vernette", pets: [ "Scratches", "Diesel" ] },\r\n    { name: "Hines, Patrick", pets: [ "Dusty" ] }\r\n];\r\n\r\n// Project the pet owner\'s name and the pet\'s name.\r\nlet query = petOwners.asEnumerable().selectMany(petOwner => petOwner.pets, (petOwner, petName) => ({ petOwner, petName }))\r\n        .where(ownerAndPet => ownerAndPet.petName.startsWith("S"))\r\n        .select(ownerAndPet => ({\r\n            owner: ownerAndPet.petOwner.name,\r\n            pet: ownerAndPet.petName\r\n        }));\r\n\r\n// Print the results.\r\nfor (let obj of query) {\r\n    console.log(obj);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// {"owner":"Higa","pet":"Scruffy"}\r\n// {"owner":"Higa","pet":"Sam"}\r\n// {"owner":"Ashkenazi","pet":"Sugar"}\r\n// {"owner":"Price","pet":"Scratches"}'}},42569:e=>{e.exports={"1.js":'let pet1 = { name: "Turbo", age: 2 };\r\nlet pet2 = { name: "Peanut", age: 8 };\r\n\r\n// Create two lists of pets.\r\nlet pets1 = [ pet1, pet2 ];\r\nlet pets2 = [ pet1, pet2 ];\r\n\r\nlet equal = pets1.asEnumerable().sequenceEqual(pets2);\r\n\r\nconsole.log(`The lists ${ equal ? "are" : "are not" } equal.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The lists are equal.\r\n*/',"2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和数目相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet storeA = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 }\r\n];\r\n\r\nlet storeB = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 }\r\n];\r\n\r\nlet equalAB = storeA.asEnumerable().sequenceEqual(storeB, productComparer);\r\n\r\nconsole.log("Equal? " + equalAB);\r\n\r\n/*\r\n    This code produces the following output:\r\n\r\n    Equal? True\r\n*/'}},3087:e=>{e.exports={"1.js":'let fruits1 = [ "orange" ];\r\n\r\nlet fruit1 = fruits1.asEnumerable().single();\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n orange\r\n*/',"2.js":'let fruits2 = [ "orange", "apple" ];\r\nlet fruit2 = null;\r\n\r\ntry {\r\n    fruit2 = fruits2.asEnumerable().single();\r\n    console.log(fruit2);\r\n} catch (e) {\r\n    console.log("The collection does not contain exactly one element.");\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The collection does not contain exactly one element.\r\n*/\r\n',"3.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet fruit1 = fruits.asEnumerable().single(fruit => fruit.length > 10);\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n passionfruit\r\n*/',"4.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\nlet fruit2 = null;\r\n\r\ntry {\r\n    fruit2 = fruits.asEnumerable().single(fruit => fruit.length > 15);\r\n\r\n    console.log(fruit2);\r\n} catch (e) {\r\n    console.log("The collection does not contain exactly one element whose length is greater than 15.");\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// The collection does not contain exactly one element whose length is greater than 15.'}},9249:e=>{e.exports={"1.js":'let fruits1 = [ "orange" ];\r\n\r\nlet fruit1 = fruits1.asEnumerable().singleOrDefault("No such string!");\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n orange\r\n*/',"2.js":'let fruits2 = [];\r\n\r\nlet fruit2 = fruits2.asEnumerable().singleOrDefault("No such string!");\r\n\r\nconsole.log(fruit2);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n No such string!\r\n*/',"3.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet fruit1 = fruits.asEnumerable().singleOrDefault("No such string!", fruit => fruit.length > 10);\r\n\r\nconsole.log(fruit1);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n passionfruit\r\n*/',"4.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet fruit2 = fruits.asEnumerable().singleOrDefault("No such string!", fruit => fruit.length > 15);\r\n\r\nconsole.log(fruit2);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n No such string!\r\n*/'}},3961:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet lowerGrades = grades.asEnumerable().orderByDescending(g => g).skip(3);\r\n\r\nconsole.log("All grades except the top three are:");\r\nfor (let grade of lowerGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n All grades except the top three are:\r\n 82\r\n 70\r\n 59\r\n 56\r\n*/'}},28613:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet lowerGrades = grades.asEnumerable().orderByDescending().skipWhile(grade => grade >= 80);\r\n\r\nconsole.log("All grades below 80:");\r\nfor (let grade of lowerGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n All grades below 80:\r\n 70\r\n 59\r\n 56\r\n*/',"2.js":"let amounts = [ 5000, 2500, 9000, 8000, 6500, 4000, 1500, 5500 ];\r\n\r\nlet query = amounts.asEnumerable().skipWhile((amount, index) => amount > index * 1000);\r\n\r\nfor (let amount of query) {\r\n    console.log(amount);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 4000\r\n 1500\r\n 5500\r\n*/"}},78846:e=>{e.exports={"1.js":"let numbers = [ 43.68, 1.25, 583.7, 6.5 ];\r\n\r\nlet sum = numbers.asEnumerable().sum();\r\n\r\nconsole.log(`The sum of the numbers is ${ sum }.`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The sum of the numbers is 635.13.\r\n*/","2.js":'let packages = [\r\n    { company: "Coho Vineyard", weight: 25.2 },\r\n    { company: "Lucerne Publishing", weight: 18.7 },\r\n    { company: "Wingtip Toys", weight: 6.0 },\r\n    { company: "Adventure Works", weight: 33.9 }\r\n];\r\n\r\nlet totalWeight = packages.asEnumerable().sum(pkg => pkg.weight);\r\n\r\nconsole.log(`The total weight of the packages is: ${ totalWeight }`);\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The total weight of the packages is: 83.8\r\n*/'}},84570:e=>{e.exports={"1.js":'let grades = [ 59, 82, 70, 56, 92, 98, 85 ];\r\n\r\nlet topThreeGrades = grades.asEnumerable().orderByDescending().take(3);\r\n\r\nconsole.log("The top three grades are:");\r\nfor (let grade of topThreeGrades) {\r\n    console.log(grade);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n The top three grades are:\r\n 98\r\n 92\r\n 85\r\n*/'}},55190:e=>{e.exports={"1.js":'let fruits = [ "apple", "banana", "mango", "orange", "passionfruit", "grape" ];\r\n\r\nlet query = fruits.asEnumerable().takeWhile(fruit => "orange" !== fruit);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n apple\r\n banana\r\n mango\r\n*/',"2.js":'let fruits = [ "apple", "passionfruit", "banana", "mango", "orange", "blueberry", "grape", "strawberry" ];\r\n\r\nlet query = fruits.asEnumerable().takeWhile((fruit, index) => fruit.length >= index);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n apple\r\n passionfruit\r\n banana\r\n mango\r\n orange\r\n blueberry\r\n*/'}},87941:e=>{e.exports={"1.js":"let ints1 = [ 5, 3, 9, 7, 5, 9, 3, 7 ];\r\nlet ints2 = [ 8, 3, 6, 4, 4, 9, 1, 0 ];\r\n\r\nlet union = ints1.asEnumerable().union(ints2);\r\n\r\nfor (let num of union) {\r\n    console.log(num);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 5\r\n 3\r\n 9\r\n 7\r\n 8\r\n 6\r\n 4\r\n 1\r\n 0\r\n*/","2.js":'// 一个自定义的比较器。\r\nlet productComparer = (x, y) => {\r\n    if (x === y) return true;\r\n    if (!x || !y) return false;\r\n    // 如果产品的名称和编号相等，则表示是相同的产品。\r\n    return x.code === y.code && x.name === y.name;\r\n};\r\n\r\nlet store1 = [\r\n    { name: "apple", code: 9 },\r\n    { name: "orange", code: 4 }\r\n];\r\n\r\nlet store2 = [\r\n    { name: "apple", code: 9 },\r\n    { name: "lemon", code: 12 }\r\n];\r\n\r\n//Get the products from the both arrays\r\n//excluding duplicates.\r\nlet union = store1.asEnumerable().union(store2, productComparer);\r\n\r\nfor (let product of union) {\r\n    console.log(product.name + " " + product.code);\r\n}\r\n\r\n/*\r\n    This code produces the following output:\r\n\r\n    apple 9\r\n    orange 4\r\n    lemon 12\r\n*/'}},47067:e=>{e.exports={"1.js":'let fruits = [ "apple", "passionfruit", "banana", "mango", "orange", "blueberry", "grape", "strawberry" ];\r\n\r\nlet query = fruits.asEnumerable().where(fruit => fruit.length < 6);\r\n\r\nfor (let fruit of query) {\r\n    console.log(fruit);\r\n}\r\n/*\r\n This code produces the following output:\r\n\r\n apple\r\n mango\r\n grape\r\n*/',"2.js":"let numbers = [ 0, 30, 20, 15, 90, 85, 40, 75 ];\r\n\r\nlet query = numbers.asEnumerable().where((number, index) => number <= index * 10);\r\n\r\nfor (let number of query) {\r\n    console.log(number);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 0\r\n 20\r\n 15\r\n 40\r\n*/"}},33808:e=>{e.exports={"1.js":'let numbers = [ 1, 2, 3, 4 ];\r\nlet words = [ "one", "two", "three" ];\r\n\r\nlet numbersAndWords = numbers.asEnumerable().zip(words, (first, second) => first + " " + second);\r\n\r\nfor (let item of numbersAndWords) {\r\n    console.log(item);\r\n}\r\n\r\n// This code produces the following output:\r\n\r\n// 1 one\r\n// 2 two\r\n// 3 three'}},14285:e=>{e.exports={"config.as.js":"Enumerable.config.as = 'em';\r\nlet enumerable = [1, 2, 3].em();","config.extends.js":"Enumerable.config.extends.array = true; //Open extends for Array. After open this, Array will have all the features of LINQ and you can use methods of LINQ for Array. (Suggest)\r\nEnumerable.config.extends.string = true; //Open extends for String. After open this, String will have all the features of LINQ and you can use methods of LINQ for String.(Not suggest)\r\nEnumerable.config.extends.object = true; //Open extends for Object. After open this, each object will have all the features of LINQ and you can use methods of LINQ for every object.(Not suggest)"}},80846:e=>{e.exports={"asEnumerable.js":"let a = [1, 2, 3].asEnumerable();\r\nlet o = ({ key: 1, value: 'a' }).asEnumerable();\r\nlet s = 'abc'.asEnumerable();","Enumerable.asEnumerable.js":"let enumerable = Enumerable.asEnumerable([1, 2, 3]);","Enumerable.js":"let enumerable = Enumerable([1, 2, 3]);"}},67632:e=>{e.exports={"1.js":'let pets = [\r\n    { name: "Barley", props: { age: 10, weight: 59 } },\r\n    { name: "Boots", props: { age: 14, weight: 50 } },\r\n    { name: "Whiskers", props: { age: 6, weight: 36 } }\r\n];\r\n\r\npets.asEnumerable().select("name");\r\n//the above code and the following code are same feature.\r\npets.asEnumerable().select(pet => pet.name);',"1.try.js":'let pets = [\r\n    { name: "Barley", props: { age: 10, weight: 59 } },\r\n    { name: "Boots", props: { age: 14, weight: 50 } },\r\n    { name: "Whiskers", props: { age: 6, weight: 36 } }\r\n];\r\n\r\nconsole.log(pets.asEnumerable().select("name"));\r\n//the above code and the following code are same feature.\r\nconsole.log(pets.asEnumerable().select(pet => pet.name));',"2.js":"let arrays = [\r\n    [ 1, 2, 4, 8 ],\r\n    [ 1, 3, 9 ],\r\n    [ 1, 5 ]\r\n];\r\n\r\narrays.asEnumerable().select(1);\r\n//the above code and the following code are same feature.\r\narrays.asEnumerable().select(array => array[1]);"}},79741:e=>{e.exports={"1.js":'let pets = [ { name: "Barley", age: 8, vaccinated: true }, { name: "Boots", age: 4, vaccinated: false }, { name: "Whiskers", age: 1, vaccinated: false } ];\r\n\r\nlet unvaccinated = pets.asEnumerable().any(p => p.age > 1 && p.vaccinated === false);\r\n\r\nconsole.log(`There ${ unvaccinated ? "are" : "are not any" } unvaccinated animals over age one.`);\r\n\r\n// This code produces the following output:\r\n//\r\n//  There are unvaccinated animals over age one.',"2.js":'let magnus = { name: "Hedlund, Magnus" }, terry = { name: "Adams, Terry" }, charlotte = { name: "Weiss, Charlotte" };\r\nlet barley = { name: "Barley", owner: terry }, boots = { name: "Boots", owner: terry }, whiskers = { name: "Whiskers", owner: charlotte }, daisy = { name: "Daisy", owner: magnus };\r\nlet people = [ magnus, terry, charlotte ];\r\nlet pets = [ barley, boots, whiskers, daisy ];\r\n\r\nlet query = people.asEnumerable().join(pets,\r\n    (person, pet) => ({ ownerName: person.name, pet: pet.name }),\r\n    person => person,\r\n    pet => pet.owner);\r\n\r\nfor (let obj of query) {\r\n    console.log(`${ obj.ownerName } - ${ obj.pet }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n Hedlund, Magnus - Daisy\r\n Adams, Terry - Barley\r\n Adams, Terry - Boots\r\n Weiss, Charlotte - Whiskers\r\n */'}},80925:e=>{e.exports={title:"Action",contents:[{title:"What's the Action",descriptions:[{content:"Action is a function which is only execute some calculation for the parameters"},{content:"The Action function accept one parameter, or accept another parameter which is the index of the first parameter in the enumerable as the second parameter, then execute some calculation but return nothing"},{}]}]}},26854:e=>{e.exports={title:"Comparer"}},38471:e=>{e.exports={title:"Configuration"}},53226:e=>{e.exports={title:"Get IEnumerable instance",contents:[{title:"Use constructor of Enumerable class",descriptions:[{content:"You can use constructor of Enumerable class for get an IEnumerable object"}]},{title:"Use Enumerable.asEnumerable method"},{title:"Use asEnumerable method",descriptions:[{content:"After require linq-js, asEnumerable method war included by any object, you can use asEnumerable of any object for get an IEnumerable object"}]}]}},32948:e=>{e.exports={title:"Predicate"}},33193:e=>{e.exports={title:"Selector",contents:[{title:"What's the Selector",descriptions:[{content:"The Selector is a function which mapping an input value to an output value."},{content:"The function accept one or more arguments, sometimes, it also accept index of the collection as argument."}]},{title:"Unary Selector"},{title:"Binary Selector"},{title:"Use string/number/symbol value to replace the Selector",descriptions:[{content:"You can use a string or a number or a symbol value to replace an Unary Selector, the examples following will show you how to use string or number value to replace the Selector"}]}]}},63996:e=>{e.exports={title:"Start use"}},31836:e=>{e.exports={title:"Install",contents:[{title:"Add to project"},{title:"Require",details:[{remarks:["description:This module require ES6. I suggest you to use this with ES6. The following examples is already use ES6."]}]}]}},27775:e=>{e.exports={title:"Introduction",contents:["use linq and lambda in javascript for es6","&nbsp;","","Since 2.1.0, I rewrite all to use new features of ES6. The performance be better, memory is used less and using deferred execution.","&nbsp;","My English is poor!"]}},81326:e=>{e.exports={name:"English"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,